// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/navsat.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fnavsat_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fnavsat_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fnavsat_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fnavsat_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fnavsat_2eproto
namespace gz {
namespace msgs {
class NavSat;
class NavSatDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern NavSatDefaultTypeInternal _NavSat_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::NavSat* Arena::CreateMaybeMessage<::gz::msgs::NavSat>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE NavSat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.NavSat) */ {
 public:
  NavSat();
  virtual ~NavSat();

  NavSat(const NavSat& from);

  inline NavSat& operator=(const NavSat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NavSat(NavSat&& from) noexcept
    : NavSat() {
    *this = ::std::move(from);
  }

  inline NavSat& operator=(NavSat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NavSat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavSat* internal_default_instance() {
    return reinterpret_cast<const NavSat*>(
               &_NavSat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NavSat* other);
  friend void swap(NavSat& a, NavSat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NavSat* New() const final {
    return CreateMaybeMessage<NavSat>(NULL);
  }

  NavSat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NavSat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NavSat& from);
  void MergeFrom(const NavSat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavSat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string frame_id = 8;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 8;
  const ::std::string& frame_id() const;
  void set_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_frame_id(::std::string&& value);
  #endif
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  ::std::string* mutable_frame_id();
  ::std::string* release_frame_id();
  void set_allocated_frame_id(::std::string* frame_id);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // double latitude_deg = 2;
  void clear_latitude_deg();
  static const int kLatitudeDegFieldNumber = 2;
  double latitude_deg() const;
  void set_latitude_deg(double value);

  // double longitude_deg = 3;
  void clear_longitude_deg();
  static const int kLongitudeDegFieldNumber = 3;
  double longitude_deg() const;
  void set_longitude_deg(double value);

  // double altitude = 4;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 4;
  double altitude() const;
  void set_altitude(double value);

  // double velocity_east = 5;
  void clear_velocity_east();
  static const int kVelocityEastFieldNumber = 5;
  double velocity_east() const;
  void set_velocity_east(double value);

  // double velocity_north = 6;
  void clear_velocity_north();
  static const int kVelocityNorthFieldNumber = 6;
  double velocity_north() const;
  void set_velocity_north(double value);

  // double velocity_up = 7;
  void clear_velocity_up();
  static const int kVelocityUpFieldNumber = 7;
  double velocity_up() const;
  void set_velocity_up(double value);

  // @@protoc_insertion_point(class_scope:gz.msgs.NavSat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr frame_id_;
  ::gz::msgs::Header* header_;
  double latitude_deg_;
  double longitude_deg_;
  double altitude_;
  double velocity_east_;
  double velocity_north_;
  double velocity_up_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fnavsat_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NavSat

// .gz.msgs.Header header = 1;
inline bool NavSat::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& NavSat::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& NavSat::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.NavSat.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* NavSat::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.NavSat.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* NavSat::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.NavSat.header)
  return header_;
}
inline void NavSat::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.NavSat.header)
}

// double latitude_deg = 2;
inline void NavSat::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double NavSat::latitude_deg() const {
  // @@protoc_insertion_point(field_get:gz.msgs.NavSat.latitude_deg)
  return latitude_deg_;
}
inline void NavSat::set_latitude_deg(double value) {
  
  latitude_deg_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.NavSat.latitude_deg)
}

// double longitude_deg = 3;
inline void NavSat::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double NavSat::longitude_deg() const {
  // @@protoc_insertion_point(field_get:gz.msgs.NavSat.longitude_deg)
  return longitude_deg_;
}
inline void NavSat::set_longitude_deg(double value) {
  
  longitude_deg_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.NavSat.longitude_deg)
}

// double altitude = 4;
inline void NavSat::clear_altitude() {
  altitude_ = 0;
}
inline double NavSat::altitude() const {
  // @@protoc_insertion_point(field_get:gz.msgs.NavSat.altitude)
  return altitude_;
}
inline void NavSat::set_altitude(double value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.NavSat.altitude)
}

// double velocity_east = 5;
inline void NavSat::clear_velocity_east() {
  velocity_east_ = 0;
}
inline double NavSat::velocity_east() const {
  // @@protoc_insertion_point(field_get:gz.msgs.NavSat.velocity_east)
  return velocity_east_;
}
inline void NavSat::set_velocity_east(double value) {
  
  velocity_east_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.NavSat.velocity_east)
}

// double velocity_north = 6;
inline void NavSat::clear_velocity_north() {
  velocity_north_ = 0;
}
inline double NavSat::velocity_north() const {
  // @@protoc_insertion_point(field_get:gz.msgs.NavSat.velocity_north)
  return velocity_north_;
}
inline void NavSat::set_velocity_north(double value) {
  
  velocity_north_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.NavSat.velocity_north)
}

// double velocity_up = 7;
inline void NavSat::clear_velocity_up() {
  velocity_up_ = 0;
}
inline double NavSat::velocity_up() const {
  // @@protoc_insertion_point(field_get:gz.msgs.NavSat.velocity_up)
  return velocity_up_;
}
inline void NavSat::set_velocity_up(double value) {
  
  velocity_up_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.NavSat.velocity_up)
}

// string frame_id = 8;
inline void NavSat::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NavSat::frame_id() const {
  // @@protoc_insertion_point(field_get:gz.msgs.NavSat.frame_id)
  return frame_id_.GetNoArena();
}
inline void NavSat::set_frame_id(const ::std::string& value) {
  
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.NavSat.frame_id)
}
#if LANG_CXX11
inline void NavSat::set_frame_id(::std::string&& value) {
  
  frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.NavSat.frame_id)
}
#endif
inline void NavSat::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.NavSat.frame_id)
}
inline void NavSat::set_frame_id(const char* value, size_t size) {
  
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.NavSat.frame_id)
}
inline ::std::string* NavSat::mutable_frame_id() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.NavSat.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NavSat::release_frame_id() {
  // @@protoc_insertion_point(field_release:gz.msgs.NavSat.frame_id)
  
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NavSat::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    
  } else {
    
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.NavSat.frame_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fnavsat_2eproto
