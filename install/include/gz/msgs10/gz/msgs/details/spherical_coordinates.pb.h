// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/spherical_coordinates.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fspherical_5fcoordinates_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fspherical_5fcoordinates_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/entity.pb.h"
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fspherical_5fcoordinates_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fspherical_5fcoordinates_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fspherical_5fcoordinates_2eproto
namespace gz {
namespace msgs {
class SphericalCoordinates;
class SphericalCoordinatesDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern SphericalCoordinatesDefaultTypeInternal _SphericalCoordinates_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::SphericalCoordinates* Arena::CreateMaybeMessage<::gz::msgs::SphericalCoordinates>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

enum SphericalCoordinates_SurfaceModel {
  SphericalCoordinates_SurfaceModel_EARTH_WGS84 = 0,
  SphericalCoordinates_SurfaceModel_MOON_SCS = 1,
  SphericalCoordinates_SurfaceModel_CUSTOM_SURFACE = 2,
  SphericalCoordinates_SurfaceModel_SphericalCoordinates_SurfaceModel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SphericalCoordinates_SurfaceModel_SphericalCoordinates_SurfaceModel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool SphericalCoordinates_SurfaceModel_IsValid(int value);
const SphericalCoordinates_SurfaceModel SphericalCoordinates_SurfaceModel_SurfaceModel_MIN = SphericalCoordinates_SurfaceModel_EARTH_WGS84;
const SphericalCoordinates_SurfaceModel SphericalCoordinates_SurfaceModel_SurfaceModel_MAX = SphericalCoordinates_SurfaceModel_CUSTOM_SURFACE;
const int SphericalCoordinates_SurfaceModel_SurfaceModel_ARRAYSIZE = SphericalCoordinates_SurfaceModel_SurfaceModel_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* SphericalCoordinates_SurfaceModel_descriptor();
inline const ::std::string& SphericalCoordinates_SurfaceModel_Name(SphericalCoordinates_SurfaceModel value) {
  return ::google::protobuf::internal::NameOfEnum(
    SphericalCoordinates_SurfaceModel_descriptor(), value);
}
inline bool SphericalCoordinates_SurfaceModel_Parse(
    const ::std::string& name, SphericalCoordinates_SurfaceModel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SphericalCoordinates_SurfaceModel>(
    SphericalCoordinates_SurfaceModel_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE SphericalCoordinates : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.SphericalCoordinates) */ {
 public:
  SphericalCoordinates();
  virtual ~SphericalCoordinates();

  SphericalCoordinates(const SphericalCoordinates& from);

  inline SphericalCoordinates& operator=(const SphericalCoordinates& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SphericalCoordinates(SphericalCoordinates&& from) noexcept
    : SphericalCoordinates() {
    *this = ::std::move(from);
  }

  inline SphericalCoordinates& operator=(SphericalCoordinates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SphericalCoordinates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SphericalCoordinates* internal_default_instance() {
    return reinterpret_cast<const SphericalCoordinates*>(
               &_SphericalCoordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SphericalCoordinates* other);
  friend void swap(SphericalCoordinates& a, SphericalCoordinates& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SphericalCoordinates* New() const final {
    return CreateMaybeMessage<SphericalCoordinates>(NULL);
  }

  SphericalCoordinates* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SphericalCoordinates>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SphericalCoordinates& from);
  void MergeFrom(const SphericalCoordinates& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SphericalCoordinates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SphericalCoordinates_SurfaceModel SurfaceModel;
  static const SurfaceModel EARTH_WGS84 =
    SphericalCoordinates_SurfaceModel_EARTH_WGS84;
  static const SurfaceModel MOON_SCS =
    SphericalCoordinates_SurfaceModel_MOON_SCS;
  static const SurfaceModel CUSTOM_SURFACE =
    SphericalCoordinates_SurfaceModel_CUSTOM_SURFACE;
  static inline bool SurfaceModel_IsValid(int value) {
    return SphericalCoordinates_SurfaceModel_IsValid(value);
  }
  static const SurfaceModel SurfaceModel_MIN =
    SphericalCoordinates_SurfaceModel_SurfaceModel_MIN;
  static const SurfaceModel SurfaceModel_MAX =
    SphericalCoordinates_SurfaceModel_SurfaceModel_MAX;
  static const int SurfaceModel_ARRAYSIZE =
    SphericalCoordinates_SurfaceModel_SurfaceModel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SurfaceModel_descriptor() {
    return SphericalCoordinates_SurfaceModel_descriptor();
  }
  static inline const ::std::string& SurfaceModel_Name(SurfaceModel value) {
    return SphericalCoordinates_SurfaceModel_Name(value);
  }
  static inline bool SurfaceModel_Parse(const ::std::string& name,
      SurfaceModel* value) {
    return SphericalCoordinates_SurfaceModel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Entity entity = 7;
  bool has_entity() const;
  void clear_entity();
  static const int kEntityFieldNumber = 7;
  private:
  const ::gz::msgs::Entity& _internal_entity() const;
  public:
  const ::gz::msgs::Entity& entity() const;
  ::gz::msgs::Entity* release_entity();
  ::gz::msgs::Entity* mutable_entity();
  void set_allocated_entity(::gz::msgs::Entity* entity);

  // double latitude_deg = 3;
  void clear_latitude_deg();
  static const int kLatitudeDegFieldNumber = 3;
  double latitude_deg() const;
  void set_latitude_deg(double value);

  // double longitude_deg = 4;
  void clear_longitude_deg();
  static const int kLongitudeDegFieldNumber = 4;
  double longitude_deg() const;
  void set_longitude_deg(double value);

  // double elevation = 5;
  void clear_elevation();
  static const int kElevationFieldNumber = 5;
  double elevation() const;
  void set_elevation(double value);

  // double heading_deg = 6;
  void clear_heading_deg();
  static const int kHeadingDegFieldNumber = 6;
  double heading_deg() const;
  void set_heading_deg(double value);

  // double surface_axis_equatorial = 8;
  void clear_surface_axis_equatorial();
  static const int kSurfaceAxisEquatorialFieldNumber = 8;
  double surface_axis_equatorial() const;
  void set_surface_axis_equatorial(double value);

  // double surface_axis_polar = 9;
  void clear_surface_axis_polar();
  static const int kSurfaceAxisPolarFieldNumber = 9;
  double surface_axis_polar() const;
  void set_surface_axis_polar(double value);

  // .gz.msgs.SphericalCoordinates.SurfaceModel surface_model = 2;
  void clear_surface_model();
  static const int kSurfaceModelFieldNumber = 2;
  ::gz::msgs::SphericalCoordinates_SurfaceModel surface_model() const;
  void set_surface_model(::gz::msgs::SphericalCoordinates_SurfaceModel value);

  // @@protoc_insertion_point(class_scope:gz.msgs.SphericalCoordinates)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Entity* entity_;
  double latitude_deg_;
  double longitude_deg_;
  double elevation_;
  double heading_deg_;
  double surface_axis_equatorial_;
  double surface_axis_polar_;
  int surface_model_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fspherical_5fcoordinates_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SphericalCoordinates

// .gz.msgs.Header header = 1;
inline bool SphericalCoordinates::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& SphericalCoordinates::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& SphericalCoordinates::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.SphericalCoordinates.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* SphericalCoordinates::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.SphericalCoordinates.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* SphericalCoordinates::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.SphericalCoordinates.header)
  return header_;
}
inline void SphericalCoordinates::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.SphericalCoordinates.header)
}

// .gz.msgs.SphericalCoordinates.SurfaceModel surface_model = 2;
inline void SphericalCoordinates::clear_surface_model() {
  surface_model_ = 0;
}
inline ::gz::msgs::SphericalCoordinates_SurfaceModel SphericalCoordinates::surface_model() const {
  // @@protoc_insertion_point(field_get:gz.msgs.SphericalCoordinates.surface_model)
  return static_cast< ::gz::msgs::SphericalCoordinates_SurfaceModel >(surface_model_);
}
inline void SphericalCoordinates::set_surface_model(::gz::msgs::SphericalCoordinates_SurfaceModel value) {
  
  surface_model_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.SphericalCoordinates.surface_model)
}

// double latitude_deg = 3;
inline void SphericalCoordinates::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double SphericalCoordinates::latitude_deg() const {
  // @@protoc_insertion_point(field_get:gz.msgs.SphericalCoordinates.latitude_deg)
  return latitude_deg_;
}
inline void SphericalCoordinates::set_latitude_deg(double value) {
  
  latitude_deg_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.SphericalCoordinates.latitude_deg)
}

// double longitude_deg = 4;
inline void SphericalCoordinates::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double SphericalCoordinates::longitude_deg() const {
  // @@protoc_insertion_point(field_get:gz.msgs.SphericalCoordinates.longitude_deg)
  return longitude_deg_;
}
inline void SphericalCoordinates::set_longitude_deg(double value) {
  
  longitude_deg_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.SphericalCoordinates.longitude_deg)
}

// double elevation = 5;
inline void SphericalCoordinates::clear_elevation() {
  elevation_ = 0;
}
inline double SphericalCoordinates::elevation() const {
  // @@protoc_insertion_point(field_get:gz.msgs.SphericalCoordinates.elevation)
  return elevation_;
}
inline void SphericalCoordinates::set_elevation(double value) {
  
  elevation_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.SphericalCoordinates.elevation)
}

// double heading_deg = 6;
inline void SphericalCoordinates::clear_heading_deg() {
  heading_deg_ = 0;
}
inline double SphericalCoordinates::heading_deg() const {
  // @@protoc_insertion_point(field_get:gz.msgs.SphericalCoordinates.heading_deg)
  return heading_deg_;
}
inline void SphericalCoordinates::set_heading_deg(double value) {
  
  heading_deg_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.SphericalCoordinates.heading_deg)
}

// .gz.msgs.Entity entity = 7;
inline bool SphericalCoordinates::has_entity() const {
  return this != internal_default_instance() && entity_ != NULL;
}
inline const ::gz::msgs::Entity& SphericalCoordinates::_internal_entity() const {
  return *entity_;
}
inline const ::gz::msgs::Entity& SphericalCoordinates::entity() const {
  const ::gz::msgs::Entity* p = entity_;
  // @@protoc_insertion_point(field_get:gz.msgs.SphericalCoordinates.entity)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Entity*>(
      &::gz::msgs::_Entity_default_instance_);
}
inline ::gz::msgs::Entity* SphericalCoordinates::release_entity() {
  // @@protoc_insertion_point(field_release:gz.msgs.SphericalCoordinates.entity)
  
  ::gz::msgs::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline ::gz::msgs::Entity* SphericalCoordinates::mutable_entity() {
  
  if (entity_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Entity>(GetArenaNoVirtual());
    entity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.SphericalCoordinates.entity)
  return entity_;
}
inline void SphericalCoordinates::set_allocated_entity(::gz::msgs::Entity* entity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(entity_);
  }
  if (entity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      entity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entity, submessage_arena);
    }
    
  } else {
    
  }
  entity_ = entity;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.SphericalCoordinates.entity)
}

// double surface_axis_equatorial = 8;
inline void SphericalCoordinates::clear_surface_axis_equatorial() {
  surface_axis_equatorial_ = 0;
}
inline double SphericalCoordinates::surface_axis_equatorial() const {
  // @@protoc_insertion_point(field_get:gz.msgs.SphericalCoordinates.surface_axis_equatorial)
  return surface_axis_equatorial_;
}
inline void SphericalCoordinates::set_surface_axis_equatorial(double value) {
  
  surface_axis_equatorial_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.SphericalCoordinates.surface_axis_equatorial)
}

// double surface_axis_polar = 9;
inline void SphericalCoordinates::clear_surface_axis_polar() {
  surface_axis_polar_ = 0;
}
inline double SphericalCoordinates::surface_axis_polar() const {
  // @@protoc_insertion_point(field_get:gz.msgs.SphericalCoordinates.surface_axis_polar)
  return surface_axis_polar_;
}
inline void SphericalCoordinates::set_surface_axis_polar(double value) {
  
  surface_axis_polar_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.SphericalCoordinates.surface_axis_polar)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::msgs::SphericalCoordinates_SurfaceModel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::SphericalCoordinates_SurfaceModel>() {
  return ::gz::msgs::SphericalCoordinates_SurfaceModel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fspherical_5fcoordinates_2eproto
