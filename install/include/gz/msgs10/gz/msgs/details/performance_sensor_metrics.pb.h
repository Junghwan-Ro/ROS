// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/performance_sensor_metrics.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fperformance_5fsensor_5fmetrics_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fperformance_5fsensor_5fmetrics_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/double.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fperformance_5fsensor_5fmetrics_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fperformance_5fsensor_5fmetrics_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fperformance_5fsensor_5fmetrics_2eproto
namespace gz {
namespace msgs {
class PerformanceSensorMetrics;
class PerformanceSensorMetricsDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern PerformanceSensorMetricsDefaultTypeInternal _PerformanceSensorMetrics_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::PerformanceSensorMetrics* Arena::CreateMaybeMessage<::gz::msgs::PerformanceSensorMetrics>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE PerformanceSensorMetrics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.PerformanceSensorMetrics) */ {
 public:
  PerformanceSensorMetrics();
  virtual ~PerformanceSensorMetrics();

  PerformanceSensorMetrics(const PerformanceSensorMetrics& from);

  inline PerformanceSensorMetrics& operator=(const PerformanceSensorMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PerformanceSensorMetrics(PerformanceSensorMetrics&& from) noexcept
    : PerformanceSensorMetrics() {
    *this = ::std::move(from);
  }

  inline PerformanceSensorMetrics& operator=(PerformanceSensorMetrics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PerformanceSensorMetrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerformanceSensorMetrics* internal_default_instance() {
    return reinterpret_cast<const PerformanceSensorMetrics*>(
               &_PerformanceSensorMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PerformanceSensorMetrics* other);
  friend void swap(PerformanceSensorMetrics& a, PerformanceSensorMetrics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PerformanceSensorMetrics* New() const final {
    return CreateMaybeMessage<PerformanceSensorMetrics>(NULL);
  }

  PerformanceSensorMetrics* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PerformanceSensorMetrics>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PerformanceSensorMetrics& from);
  void MergeFrom(const PerformanceSensorMetrics& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerformanceSensorMetrics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .gz.msgs.Double fps_optional = 5;
  bool has_fps_optional() const;
  void clear_fps_optional();
  static const int kFpsOptionalFieldNumber = 5;
  private:
  const ::gz::msgs::Double& _internal_fps_optional() const;
  public:
  const ::gz::msgs::Double& fps_optional() const;
  ::gz::msgs::Double* release_fps_optional();
  ::gz::msgs::Double* mutable_fps_optional();
  void set_allocated_fps_optional(::gz::msgs::Double* fps_optional);

  // double real_update_rate = 2;
  void clear_real_update_rate();
  static const int kRealUpdateRateFieldNumber = 2;
  double real_update_rate() const;
  void set_real_update_rate(double value);

  // double sim_update_rate = 3;
  void clear_sim_update_rate();
  static const int kSimUpdateRateFieldNumber = 3;
  double sim_update_rate() const;
  void set_sim_update_rate(double value);

  // double nominal_update_rate = 4;
  void clear_nominal_update_rate();
  static const int kNominalUpdateRateFieldNumber = 4;
  double nominal_update_rate() const;
  void set_nominal_update_rate(double value);

  // @@protoc_insertion_point(class_scope:gz.msgs.PerformanceSensorMetrics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::gz::msgs::Double* fps_optional_;
  double real_update_rate_;
  double sim_update_rate_;
  double nominal_update_rate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fperformance_5fsensor_5fmetrics_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerformanceSensorMetrics

// string name = 1;
inline void PerformanceSensorMetrics::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PerformanceSensorMetrics::name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.PerformanceSensorMetrics.name)
  return name_.GetNoArena();
}
inline void PerformanceSensorMetrics::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.PerformanceSensorMetrics.name)
}
#if LANG_CXX11
inline void PerformanceSensorMetrics::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.PerformanceSensorMetrics.name)
}
#endif
inline void PerformanceSensorMetrics::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.PerformanceSensorMetrics.name)
}
inline void PerformanceSensorMetrics::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.PerformanceSensorMetrics.name)
}
inline ::std::string* PerformanceSensorMetrics::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.PerformanceSensorMetrics.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PerformanceSensorMetrics::release_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.PerformanceSensorMetrics.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PerformanceSensorMetrics::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.PerformanceSensorMetrics.name)
}

// double real_update_rate = 2;
inline void PerformanceSensorMetrics::clear_real_update_rate() {
  real_update_rate_ = 0;
}
inline double PerformanceSensorMetrics::real_update_rate() const {
  // @@protoc_insertion_point(field_get:gz.msgs.PerformanceSensorMetrics.real_update_rate)
  return real_update_rate_;
}
inline void PerformanceSensorMetrics::set_real_update_rate(double value) {
  
  real_update_rate_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.PerformanceSensorMetrics.real_update_rate)
}

// double sim_update_rate = 3;
inline void PerformanceSensorMetrics::clear_sim_update_rate() {
  sim_update_rate_ = 0;
}
inline double PerformanceSensorMetrics::sim_update_rate() const {
  // @@protoc_insertion_point(field_get:gz.msgs.PerformanceSensorMetrics.sim_update_rate)
  return sim_update_rate_;
}
inline void PerformanceSensorMetrics::set_sim_update_rate(double value) {
  
  sim_update_rate_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.PerformanceSensorMetrics.sim_update_rate)
}

// double nominal_update_rate = 4;
inline void PerformanceSensorMetrics::clear_nominal_update_rate() {
  nominal_update_rate_ = 0;
}
inline double PerformanceSensorMetrics::nominal_update_rate() const {
  // @@protoc_insertion_point(field_get:gz.msgs.PerformanceSensorMetrics.nominal_update_rate)
  return nominal_update_rate_;
}
inline void PerformanceSensorMetrics::set_nominal_update_rate(double value) {
  
  nominal_update_rate_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.PerformanceSensorMetrics.nominal_update_rate)
}

// .gz.msgs.Double fps_optional = 5;
inline bool PerformanceSensorMetrics::has_fps_optional() const {
  return this != internal_default_instance() && fps_optional_ != NULL;
}
inline const ::gz::msgs::Double& PerformanceSensorMetrics::_internal_fps_optional() const {
  return *fps_optional_;
}
inline const ::gz::msgs::Double& PerformanceSensorMetrics::fps_optional() const {
  const ::gz::msgs::Double* p = fps_optional_;
  // @@protoc_insertion_point(field_get:gz.msgs.PerformanceSensorMetrics.fps_optional)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Double*>(
      &::gz::msgs::_Double_default_instance_);
}
inline ::gz::msgs::Double* PerformanceSensorMetrics::release_fps_optional() {
  // @@protoc_insertion_point(field_release:gz.msgs.PerformanceSensorMetrics.fps_optional)
  
  ::gz::msgs::Double* temp = fps_optional_;
  fps_optional_ = NULL;
  return temp;
}
inline ::gz::msgs::Double* PerformanceSensorMetrics::mutable_fps_optional() {
  
  if (fps_optional_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Double>(GetArenaNoVirtual());
    fps_optional_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.PerformanceSensorMetrics.fps_optional)
  return fps_optional_;
}
inline void PerformanceSensorMetrics::set_allocated_fps_optional(::gz::msgs::Double* fps_optional) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(fps_optional_);
  }
  if (fps_optional) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fps_optional = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fps_optional, submessage_arena);
    }
    
  } else {
    
  }
  fps_optional_ = fps_optional;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.PerformanceSensorMetrics.fps_optional)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fperformance_5fsensor_5fmetrics_2eproto
