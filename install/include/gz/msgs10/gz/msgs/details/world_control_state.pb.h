// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/world_control_state.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fworld_5fcontrol_5fstate_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fworld_5fcontrol_5fstate_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/header.pb.h"
#include "gz/msgs/serialized.pb.h"
#include "gz/msgs/world_control.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fworld_5fcontrol_5fstate_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fworld_5fcontrol_5fstate_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fworld_5fcontrol_5fstate_2eproto
namespace gz {
namespace msgs {
class WorldControlState;
class WorldControlStateDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern WorldControlStateDefaultTypeInternal _WorldControlState_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::WorldControlState* Arena::CreateMaybeMessage<::gz::msgs::WorldControlState>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE WorldControlState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.WorldControlState) */ {
 public:
  WorldControlState();
  virtual ~WorldControlState();

  WorldControlState(const WorldControlState& from);

  inline WorldControlState& operator=(const WorldControlState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorldControlState(WorldControlState&& from) noexcept
    : WorldControlState() {
    *this = ::std::move(from);
  }

  inline WorldControlState& operator=(WorldControlState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldControlState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldControlState* internal_default_instance() {
    return reinterpret_cast<const WorldControlState*>(
               &_WorldControlState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(WorldControlState* other);
  friend void swap(WorldControlState& a, WorldControlState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorldControlState* New() const final {
    return CreateMaybeMessage<WorldControlState>(NULL);
  }

  WorldControlState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorldControlState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorldControlState& from);
  void MergeFrom(const WorldControlState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldControlState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.WorldControl world_control = 2;
  bool has_world_control() const;
  void clear_world_control();
  static const int kWorldControlFieldNumber = 2;
  private:
  const ::gz::msgs::WorldControl& _internal_world_control() const;
  public:
  const ::gz::msgs::WorldControl& world_control() const;
  ::gz::msgs::WorldControl* release_world_control();
  ::gz::msgs::WorldControl* mutable_world_control();
  void set_allocated_world_control(::gz::msgs::WorldControl* world_control);

  // .gz.msgs.SerializedState state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  private:
  const ::gz::msgs::SerializedState& _internal_state() const;
  public:
  const ::gz::msgs::SerializedState& state() const;
  ::gz::msgs::SerializedState* release_state();
  ::gz::msgs::SerializedState* mutable_state();
  void set_allocated_state(::gz::msgs::SerializedState* state);

  // @@protoc_insertion_point(class_scope:gz.msgs.WorldControlState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::WorldControl* world_control_;
  ::gz::msgs::SerializedState* state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fworld_5fcontrol_5fstate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorldControlState

// .gz.msgs.Header header = 1;
inline bool WorldControlState::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& WorldControlState::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& WorldControlState::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.WorldControlState.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* WorldControlState::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.WorldControlState.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* WorldControlState::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.WorldControlState.header)
  return header_;
}
inline void WorldControlState::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.WorldControlState.header)
}

// .gz.msgs.WorldControl world_control = 2;
inline bool WorldControlState::has_world_control() const {
  return this != internal_default_instance() && world_control_ != NULL;
}
inline const ::gz::msgs::WorldControl& WorldControlState::_internal_world_control() const {
  return *world_control_;
}
inline const ::gz::msgs::WorldControl& WorldControlState::world_control() const {
  const ::gz::msgs::WorldControl* p = world_control_;
  // @@protoc_insertion_point(field_get:gz.msgs.WorldControlState.world_control)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::WorldControl*>(
      &::gz::msgs::_WorldControl_default_instance_);
}
inline ::gz::msgs::WorldControl* WorldControlState::release_world_control() {
  // @@protoc_insertion_point(field_release:gz.msgs.WorldControlState.world_control)
  
  ::gz::msgs::WorldControl* temp = world_control_;
  world_control_ = NULL;
  return temp;
}
inline ::gz::msgs::WorldControl* WorldControlState::mutable_world_control() {
  
  if (world_control_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::WorldControl>(GetArenaNoVirtual());
    world_control_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.WorldControlState.world_control)
  return world_control_;
}
inline void WorldControlState::set_allocated_world_control(::gz::msgs::WorldControl* world_control) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(world_control_);
  }
  if (world_control) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      world_control = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, world_control, submessage_arena);
    }
    
  } else {
    
  }
  world_control_ = world_control;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.WorldControlState.world_control)
}

// .gz.msgs.SerializedState state = 3;
inline bool WorldControlState::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline const ::gz::msgs::SerializedState& WorldControlState::_internal_state() const {
  return *state_;
}
inline const ::gz::msgs::SerializedState& WorldControlState::state() const {
  const ::gz::msgs::SerializedState* p = state_;
  // @@protoc_insertion_point(field_get:gz.msgs.WorldControlState.state)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::SerializedState*>(
      &::gz::msgs::_SerializedState_default_instance_);
}
inline ::gz::msgs::SerializedState* WorldControlState::release_state() {
  // @@protoc_insertion_point(field_release:gz.msgs.WorldControlState.state)
  
  ::gz::msgs::SerializedState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::gz::msgs::SerializedState* WorldControlState::mutable_state() {
  
  if (state_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::SerializedState>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.WorldControlState.state)
  return state_;
}
inline void WorldControlState::set_allocated_state(::gz::msgs::SerializedState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(state_);
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.WorldControlState.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fworld_5fcontrol_5fstate_2eproto
