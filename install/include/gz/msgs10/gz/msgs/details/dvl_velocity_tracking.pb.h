// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/dvl_velocity_tracking.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fdvl_5fvelocity_5ftracking_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fdvl_5fvelocity_5ftracking_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/header.pb.h"
#include "gz/msgs/dvl_beam_state.pb.h"
#include "gz/msgs/dvl_tracking_target.pb.h"
#include "gz/msgs/dvl_kinematic_estimate.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fdvl_5fvelocity_5ftracking_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fdvl_5fvelocity_5ftracking_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fdvl_5fvelocity_5ftracking_2eproto
namespace gz {
namespace msgs {
class DVLVelocityTracking;
class DVLVelocityTrackingDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern DVLVelocityTrackingDefaultTypeInternal _DVLVelocityTracking_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::DVLVelocityTracking* Arena::CreateMaybeMessage<::gz::msgs::DVLVelocityTracking>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

enum DVLVelocityTracking_DVLType {
  DVLVelocityTracking_DVLType_DVL_TYPE_UNSPECIFIED = 0,
  DVLVelocityTracking_DVLType_DVL_TYPE_PISTON = 1,
  DVLVelocityTracking_DVLType_DVL_TYPE_PHASED_ARRAY = 2,
  DVLVelocityTracking_DVLType_DVLVelocityTracking_DVLType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DVLVelocityTracking_DVLType_DVLVelocityTracking_DVLType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool DVLVelocityTracking_DVLType_IsValid(int value);
const DVLVelocityTracking_DVLType DVLVelocityTracking_DVLType_DVLType_MIN = DVLVelocityTracking_DVLType_DVL_TYPE_UNSPECIFIED;
const DVLVelocityTracking_DVLType DVLVelocityTracking_DVLType_DVLType_MAX = DVLVelocityTracking_DVLType_DVL_TYPE_PHASED_ARRAY;
const int DVLVelocityTracking_DVLType_DVLType_ARRAYSIZE = DVLVelocityTracking_DVLType_DVLType_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* DVLVelocityTracking_DVLType_descriptor();
inline const ::std::string& DVLVelocityTracking_DVLType_Name(DVLVelocityTracking_DVLType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DVLVelocityTracking_DVLType_descriptor(), value);
}
inline bool DVLVelocityTracking_DVLType_Parse(
    const ::std::string& name, DVLVelocityTracking_DVLType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DVLVelocityTracking_DVLType>(
    DVLVelocityTracking_DVLType_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE DVLVelocityTracking : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.DVLVelocityTracking) */ {
 public:
  DVLVelocityTracking();
  virtual ~DVLVelocityTracking();

  DVLVelocityTracking(const DVLVelocityTracking& from);

  inline DVLVelocityTracking& operator=(const DVLVelocityTracking& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DVLVelocityTracking(DVLVelocityTracking&& from) noexcept
    : DVLVelocityTracking() {
    *this = ::std::move(from);
  }

  inline DVLVelocityTracking& operator=(DVLVelocityTracking&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DVLVelocityTracking& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DVLVelocityTracking* internal_default_instance() {
    return reinterpret_cast<const DVLVelocityTracking*>(
               &_DVLVelocityTracking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DVLVelocityTracking* other);
  friend void swap(DVLVelocityTracking& a, DVLVelocityTracking& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DVLVelocityTracking* New() const final {
    return CreateMaybeMessage<DVLVelocityTracking>(NULL);
  }

  DVLVelocityTracking* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DVLVelocityTracking>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DVLVelocityTracking& from);
  void MergeFrom(const DVLVelocityTracking& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DVLVelocityTracking* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DVLVelocityTracking_DVLType DVLType;
  static const DVLType DVL_TYPE_UNSPECIFIED =
    DVLVelocityTracking_DVLType_DVL_TYPE_UNSPECIFIED;
  static const DVLType DVL_TYPE_PISTON =
    DVLVelocityTracking_DVLType_DVL_TYPE_PISTON;
  static const DVLType DVL_TYPE_PHASED_ARRAY =
    DVLVelocityTracking_DVLType_DVL_TYPE_PHASED_ARRAY;
  static inline bool DVLType_IsValid(int value) {
    return DVLVelocityTracking_DVLType_IsValid(value);
  }
  static const DVLType DVLType_MIN =
    DVLVelocityTracking_DVLType_DVLType_MIN;
  static const DVLType DVLType_MAX =
    DVLVelocityTracking_DVLType_DVLType_MAX;
  static const int DVLType_ARRAYSIZE =
    DVLVelocityTracking_DVLType_DVLType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DVLType_descriptor() {
    return DVLVelocityTracking_DVLType_descriptor();
  }
  static inline const ::std::string& DVLType_Name(DVLType value) {
    return DVLVelocityTracking_DVLType_Name(value);
  }
  static inline bool DVLType_Parse(const ::std::string& name,
      DVLType* value) {
    return DVLVelocityTracking_DVLType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .gz.msgs.DVLBeamState beams = 5;
  int beams_size() const;
  void clear_beams();
  static const int kBeamsFieldNumber = 5;
  ::gz::msgs::DVLBeamState* mutable_beams(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::DVLBeamState >*
      mutable_beams();
  const ::gz::msgs::DVLBeamState& beams(int index) const;
  ::gz::msgs::DVLBeamState* add_beams();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::DVLBeamState >&
      beams() const;

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.DVLTrackingTarget target = 3;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 3;
  private:
  const ::gz::msgs::DVLTrackingTarget& _internal_target() const;
  public:
  const ::gz::msgs::DVLTrackingTarget& target() const;
  ::gz::msgs::DVLTrackingTarget* release_target();
  ::gz::msgs::DVLTrackingTarget* mutable_target();
  void set_allocated_target(::gz::msgs::DVLTrackingTarget* target);

  // .gz.msgs.DVLKinematicEstimate velocity = 4;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 4;
  private:
  const ::gz::msgs::DVLKinematicEstimate& _internal_velocity() const;
  public:
  const ::gz::msgs::DVLKinematicEstimate& velocity() const;
  ::gz::msgs::DVLKinematicEstimate* release_velocity();
  ::gz::msgs::DVLKinematicEstimate* mutable_velocity();
  void set_allocated_velocity(::gz::msgs::DVLKinematicEstimate* velocity);

  // .gz.msgs.DVLVelocityTracking.DVLType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::gz::msgs::DVLVelocityTracking_DVLType type() const;
  void set_type(::gz::msgs::DVLVelocityTracking_DVLType value);

  // int32 status = 6;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gz.msgs.DVLVelocityTracking)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::DVLBeamState > beams_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::DVLTrackingTarget* target_;
  ::gz::msgs::DVLKinematicEstimate* velocity_;
  int type_;
  ::google::protobuf::int32 status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fdvl_5fvelocity_5ftracking_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DVLVelocityTracking

// .gz.msgs.Header header = 1;
inline bool DVLVelocityTracking::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& DVLVelocityTracking::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& DVLVelocityTracking::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.DVLVelocityTracking.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* DVLVelocityTracking::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.DVLVelocityTracking.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* DVLVelocityTracking::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.DVLVelocityTracking.header)
  return header_;
}
inline void DVLVelocityTracking::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.DVLVelocityTracking.header)
}

// .gz.msgs.DVLVelocityTracking.DVLType type = 2;
inline void DVLVelocityTracking::clear_type() {
  type_ = 0;
}
inline ::gz::msgs::DVLVelocityTracking_DVLType DVLVelocityTracking::type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.DVLVelocityTracking.type)
  return static_cast< ::gz::msgs::DVLVelocityTracking_DVLType >(type_);
}
inline void DVLVelocityTracking::set_type(::gz::msgs::DVLVelocityTracking_DVLType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.DVLVelocityTracking.type)
}

// .gz.msgs.DVLTrackingTarget target = 3;
inline bool DVLVelocityTracking::has_target() const {
  return this != internal_default_instance() && target_ != NULL;
}
inline const ::gz::msgs::DVLTrackingTarget& DVLVelocityTracking::_internal_target() const {
  return *target_;
}
inline const ::gz::msgs::DVLTrackingTarget& DVLVelocityTracking::target() const {
  const ::gz::msgs::DVLTrackingTarget* p = target_;
  // @@protoc_insertion_point(field_get:gz.msgs.DVLVelocityTracking.target)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::DVLTrackingTarget*>(
      &::gz::msgs::_DVLTrackingTarget_default_instance_);
}
inline ::gz::msgs::DVLTrackingTarget* DVLVelocityTracking::release_target() {
  // @@protoc_insertion_point(field_release:gz.msgs.DVLVelocityTracking.target)
  
  ::gz::msgs::DVLTrackingTarget* temp = target_;
  target_ = NULL;
  return temp;
}
inline ::gz::msgs::DVLTrackingTarget* DVLVelocityTracking::mutable_target() {
  
  if (target_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::DVLTrackingTarget>(GetArenaNoVirtual());
    target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.DVLVelocityTracking.target)
  return target_;
}
inline void DVLVelocityTracking::set_allocated_target(::gz::msgs::DVLTrackingTarget* target) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(target_);
  }
  if (target) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.DVLVelocityTracking.target)
}

// .gz.msgs.DVLKinematicEstimate velocity = 4;
inline bool DVLVelocityTracking::has_velocity() const {
  return this != internal_default_instance() && velocity_ != NULL;
}
inline const ::gz::msgs::DVLKinematicEstimate& DVLVelocityTracking::_internal_velocity() const {
  return *velocity_;
}
inline const ::gz::msgs::DVLKinematicEstimate& DVLVelocityTracking::velocity() const {
  const ::gz::msgs::DVLKinematicEstimate* p = velocity_;
  // @@protoc_insertion_point(field_get:gz.msgs.DVLVelocityTracking.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::DVLKinematicEstimate*>(
      &::gz::msgs::_DVLKinematicEstimate_default_instance_);
}
inline ::gz::msgs::DVLKinematicEstimate* DVLVelocityTracking::release_velocity() {
  // @@protoc_insertion_point(field_release:gz.msgs.DVLVelocityTracking.velocity)
  
  ::gz::msgs::DVLKinematicEstimate* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline ::gz::msgs::DVLKinematicEstimate* DVLVelocityTracking::mutable_velocity() {
  
  if (velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::DVLKinematicEstimate>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.DVLVelocityTracking.velocity)
  return velocity_;
}
inline void DVLVelocityTracking::set_allocated_velocity(::gz::msgs::DVLKinematicEstimate* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.DVLVelocityTracking.velocity)
}

// repeated .gz.msgs.DVLBeamState beams = 5;
inline int DVLVelocityTracking::beams_size() const {
  return beams_.size();
}
inline ::gz::msgs::DVLBeamState* DVLVelocityTracking::mutable_beams(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.DVLVelocityTracking.beams)
  return beams_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::DVLBeamState >*
DVLVelocityTracking::mutable_beams() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.DVLVelocityTracking.beams)
  return &beams_;
}
inline const ::gz::msgs::DVLBeamState& DVLVelocityTracking::beams(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.DVLVelocityTracking.beams)
  return beams_.Get(index);
}
inline ::gz::msgs::DVLBeamState* DVLVelocityTracking::add_beams() {
  // @@protoc_insertion_point(field_add:gz.msgs.DVLVelocityTracking.beams)
  return beams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::DVLBeamState >&
DVLVelocityTracking::beams() const {
  // @@protoc_insertion_point(field_list:gz.msgs.DVLVelocityTracking.beams)
  return beams_;
}

// int32 status = 6;
inline void DVLVelocityTracking::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 DVLVelocityTracking::status() const {
  // @@protoc_insertion_point(field_get:gz.msgs.DVLVelocityTracking.status)
  return status_;
}
inline void DVLVelocityTracking::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.DVLVelocityTracking.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::msgs::DVLVelocityTracking_DVLType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::DVLVelocityTracking_DVLType>() {
  return ::gz::msgs::DVLVelocityTracking_DVLType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fdvl_5fvelocity_5ftracking_2eproto
