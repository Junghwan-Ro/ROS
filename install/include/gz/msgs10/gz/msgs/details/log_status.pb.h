// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/log_status.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2flog_5fstatus_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2flog_5fstatus_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/time.pb.h"
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2flog_5fstatus_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2flog_5fstatus_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2flog_5fstatus_2eproto
namespace gz {
namespace msgs {
class LogStatus;
class LogStatusDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern LogStatusDefaultTypeInternal _LogStatus_default_instance_;
class LogStatus_LogFile;
class LogStatus_LogFileDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern LogStatus_LogFileDefaultTypeInternal _LogStatus_LogFile_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::LogStatus* Arena::CreateMaybeMessage<::gz::msgs::LogStatus>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::LogStatus_LogFile* Arena::CreateMaybeMessage<::gz::msgs::LogStatus_LogFile>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

enum LogStatus_LogFile_Units {
  LogStatus_LogFile_Units_BYTES = 0,
  LogStatus_LogFile_Units_K_BYTES = 1,
  LogStatus_LogFile_Units_M_BYTES = 2,
  LogStatus_LogFile_Units_G_BYTES = 3,
  LogStatus_LogFile_Units_LogStatus_LogFile_Units_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LogStatus_LogFile_Units_LogStatus_LogFile_Units_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool LogStatus_LogFile_Units_IsValid(int value);
const LogStatus_LogFile_Units LogStatus_LogFile_Units_Units_MIN = LogStatus_LogFile_Units_BYTES;
const LogStatus_LogFile_Units LogStatus_LogFile_Units_Units_MAX = LogStatus_LogFile_Units_G_BYTES;
const int LogStatus_LogFile_Units_Units_ARRAYSIZE = LogStatus_LogFile_Units_Units_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* LogStatus_LogFile_Units_descriptor();
inline const ::std::string& LogStatus_LogFile_Units_Name(LogStatus_LogFile_Units value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogStatus_LogFile_Units_descriptor(), value);
}
inline bool LogStatus_LogFile_Units_Parse(
    const ::std::string& name, LogStatus_LogFile_Units* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogStatus_LogFile_Units>(
    LogStatus_LogFile_Units_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE LogStatus_LogFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.LogStatus.LogFile) */ {
 public:
  LogStatus_LogFile();
  virtual ~LogStatus_LogFile();

  LogStatus_LogFile(const LogStatus_LogFile& from);

  inline LogStatus_LogFile& operator=(const LogStatus_LogFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogStatus_LogFile(LogStatus_LogFile&& from) noexcept
    : LogStatus_LogFile() {
    *this = ::std::move(from);
  }

  inline LogStatus_LogFile& operator=(LogStatus_LogFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogStatus_LogFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogStatus_LogFile* internal_default_instance() {
    return reinterpret_cast<const LogStatus_LogFile*>(
               &_LogStatus_LogFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LogStatus_LogFile* other);
  friend void swap(LogStatus_LogFile& a, LogStatus_LogFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogStatus_LogFile* New() const final {
    return CreateMaybeMessage<LogStatus_LogFile>(NULL);
  }

  LogStatus_LogFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogStatus_LogFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogStatus_LogFile& from);
  void MergeFrom(const LogStatus_LogFile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogStatus_LogFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LogStatus_LogFile_Units Units;
  static const Units BYTES =
    LogStatus_LogFile_Units_BYTES;
  static const Units K_BYTES =
    LogStatus_LogFile_Units_K_BYTES;
  static const Units M_BYTES =
    LogStatus_LogFile_Units_M_BYTES;
  static const Units G_BYTES =
    LogStatus_LogFile_Units_G_BYTES;
  static inline bool Units_IsValid(int value) {
    return LogStatus_LogFile_Units_IsValid(value);
  }
  static const Units Units_MIN =
    LogStatus_LogFile_Units_Units_MIN;
  static const Units Units_MAX =
    LogStatus_LogFile_Units_Units_MAX;
  static const int Units_ARRAYSIZE =
    LogStatus_LogFile_Units_Units_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Units_descriptor() {
    return LogStatus_LogFile_Units_descriptor();
  }
  static inline const ::std::string& Units_Name(Units value) {
    return LogStatus_LogFile_Units_Name(value);
  }
  static inline bool Units_Parse(const ::std::string& name,
      Units* value) {
    return LogStatus_LogFile_Units_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string uri = 1;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // string base_path = 2;
  void clear_base_path();
  static const int kBasePathFieldNumber = 2;
  const ::std::string& base_path() const;
  void set_base_path(const ::std::string& value);
  #if LANG_CXX11
  void set_base_path(::std::string&& value);
  #endif
  void set_base_path(const char* value);
  void set_base_path(const char* value, size_t size);
  ::std::string* mutable_base_path();
  ::std::string* release_base_path();
  void set_allocated_base_path(::std::string* base_path);

  // string full_path = 3;
  void clear_full_path();
  static const int kFullPathFieldNumber = 3;
  const ::std::string& full_path() const;
  void set_full_path(const ::std::string& value);
  #if LANG_CXX11
  void set_full_path(::std::string&& value);
  #endif
  void set_full_path(const char* value);
  void set_full_path(const char* value, size_t size);
  ::std::string* mutable_full_path();
  ::std::string* release_full_path();
  void set_allocated_full_path(::std::string* full_path);

  // float size = 4;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  float size() const;
  void set_size(float value);

  // .gz.msgs.LogStatus.LogFile.Units size_units = 5;
  void clear_size_units();
  static const int kSizeUnitsFieldNumber = 5;
  ::gz::msgs::LogStatus_LogFile_Units size_units() const;
  void set_size_units(::gz::msgs::LogStatus_LogFile_Units value);

  // bool record_resources = 6;
  void clear_record_resources();
  static const int kRecordResourcesFieldNumber = 6;
  bool record_resources() const;
  void set_record_resources(bool value);

  // @@protoc_insertion_point(class_scope:gz.msgs.LogStatus.LogFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr base_path_;
  ::google::protobuf::internal::ArenaStringPtr full_path_;
  float size_;
  int size_units_;
  bool record_resources_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2flog_5fstatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE LogStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.LogStatus) */ {
 public:
  LogStatus();
  virtual ~LogStatus();

  LogStatus(const LogStatus& from);

  inline LogStatus& operator=(const LogStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogStatus(LogStatus&& from) noexcept
    : LogStatus() {
    *this = ::std::move(from);
  }

  inline LogStatus& operator=(LogStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogStatus* internal_default_instance() {
    return reinterpret_cast<const LogStatus*>(
               &_LogStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LogStatus* other);
  friend void swap(LogStatus& a, LogStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogStatus* New() const final {
    return CreateMaybeMessage<LogStatus>(NULL);
  }

  LogStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogStatus& from);
  void MergeFrom(const LogStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LogStatus_LogFile LogFile;

  // accessors -------------------------------------------------------

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Time sim_time = 2;
  bool has_sim_time() const;
  void clear_sim_time();
  static const int kSimTimeFieldNumber = 2;
  private:
  const ::gz::msgs::Time& _internal_sim_time() const;
  public:
  const ::gz::msgs::Time& sim_time() const;
  ::gz::msgs::Time* release_sim_time();
  ::gz::msgs::Time* mutable_sim_time();
  void set_allocated_sim_time(::gz::msgs::Time* sim_time);

  // .gz.msgs.LogStatus.LogFile log_file = 3;
  bool has_log_file() const;
  void clear_log_file();
  static const int kLogFileFieldNumber = 3;
  private:
  const ::gz::msgs::LogStatus_LogFile& _internal_log_file() const;
  public:
  const ::gz::msgs::LogStatus_LogFile& log_file() const;
  ::gz::msgs::LogStatus_LogFile* release_log_file();
  ::gz::msgs::LogStatus_LogFile* mutable_log_file();
  void set_allocated_log_file(::gz::msgs::LogStatus_LogFile* log_file);

  // @@protoc_insertion_point(class_scope:gz.msgs.LogStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Time* sim_time_;
  ::gz::msgs::LogStatus_LogFile* log_file_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2flog_5fstatus_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogStatus_LogFile

// string uri = 1;
inline void LogStatus_LogFile::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogStatus_LogFile::uri() const {
  // @@protoc_insertion_point(field_get:gz.msgs.LogStatus.LogFile.uri)
  return uri_.GetNoArena();
}
inline void LogStatus_LogFile::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.LogStatus.LogFile.uri)
}
#if LANG_CXX11
inline void LogStatus_LogFile::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.LogStatus.LogFile.uri)
}
#endif
inline void LogStatus_LogFile::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.LogStatus.LogFile.uri)
}
inline void LogStatus_LogFile::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.LogStatus.LogFile.uri)
}
inline ::std::string* LogStatus_LogFile::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.LogStatus.LogFile.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogStatus_LogFile::release_uri() {
  // @@protoc_insertion_point(field_release:gz.msgs.LogStatus.LogFile.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogStatus_LogFile::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.LogStatus.LogFile.uri)
}

// string base_path = 2;
inline void LogStatus_LogFile::clear_base_path() {
  base_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogStatus_LogFile::base_path() const {
  // @@protoc_insertion_point(field_get:gz.msgs.LogStatus.LogFile.base_path)
  return base_path_.GetNoArena();
}
inline void LogStatus_LogFile::set_base_path(const ::std::string& value) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.LogStatus.LogFile.base_path)
}
#if LANG_CXX11
inline void LogStatus_LogFile::set_base_path(::std::string&& value) {
  
  base_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.LogStatus.LogFile.base_path)
}
#endif
inline void LogStatus_LogFile::set_base_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.LogStatus.LogFile.base_path)
}
inline void LogStatus_LogFile::set_base_path(const char* value, size_t size) {
  
  base_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.LogStatus.LogFile.base_path)
}
inline ::std::string* LogStatus_LogFile::mutable_base_path() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.LogStatus.LogFile.base_path)
  return base_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogStatus_LogFile::release_base_path() {
  // @@protoc_insertion_point(field_release:gz.msgs.LogStatus.LogFile.base_path)
  
  return base_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogStatus_LogFile::set_allocated_base_path(::std::string* base_path) {
  if (base_path != NULL) {
    
  } else {
    
  }
  base_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_path);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.LogStatus.LogFile.base_path)
}

// string full_path = 3;
inline void LogStatus_LogFile::clear_full_path() {
  full_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogStatus_LogFile::full_path() const {
  // @@protoc_insertion_point(field_get:gz.msgs.LogStatus.LogFile.full_path)
  return full_path_.GetNoArena();
}
inline void LogStatus_LogFile::set_full_path(const ::std::string& value) {
  
  full_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.LogStatus.LogFile.full_path)
}
#if LANG_CXX11
inline void LogStatus_LogFile::set_full_path(::std::string&& value) {
  
  full_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.LogStatus.LogFile.full_path)
}
#endif
inline void LogStatus_LogFile::set_full_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  full_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.LogStatus.LogFile.full_path)
}
inline void LogStatus_LogFile::set_full_path(const char* value, size_t size) {
  
  full_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.LogStatus.LogFile.full_path)
}
inline ::std::string* LogStatus_LogFile::mutable_full_path() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.LogStatus.LogFile.full_path)
  return full_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogStatus_LogFile::release_full_path() {
  // @@protoc_insertion_point(field_release:gz.msgs.LogStatus.LogFile.full_path)
  
  return full_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogStatus_LogFile::set_allocated_full_path(::std::string* full_path) {
  if (full_path != NULL) {
    
  } else {
    
  }
  full_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_path);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.LogStatus.LogFile.full_path)
}

// float size = 4;
inline void LogStatus_LogFile::clear_size() {
  size_ = 0;
}
inline float LogStatus_LogFile::size() const {
  // @@protoc_insertion_point(field_get:gz.msgs.LogStatus.LogFile.size)
  return size_;
}
inline void LogStatus_LogFile::set_size(float value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.LogStatus.LogFile.size)
}

// .gz.msgs.LogStatus.LogFile.Units size_units = 5;
inline void LogStatus_LogFile::clear_size_units() {
  size_units_ = 0;
}
inline ::gz::msgs::LogStatus_LogFile_Units LogStatus_LogFile::size_units() const {
  // @@protoc_insertion_point(field_get:gz.msgs.LogStatus.LogFile.size_units)
  return static_cast< ::gz::msgs::LogStatus_LogFile_Units >(size_units_);
}
inline void LogStatus_LogFile::set_size_units(::gz::msgs::LogStatus_LogFile_Units value) {
  
  size_units_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.LogStatus.LogFile.size_units)
}

// bool record_resources = 6;
inline void LogStatus_LogFile::clear_record_resources() {
  record_resources_ = false;
}
inline bool LogStatus_LogFile::record_resources() const {
  // @@protoc_insertion_point(field_get:gz.msgs.LogStatus.LogFile.record_resources)
  return record_resources_;
}
inline void LogStatus_LogFile::set_record_resources(bool value) {
  
  record_resources_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.LogStatus.LogFile.record_resources)
}

// -------------------------------------------------------------------

// LogStatus

// .gz.msgs.Header header = 1;
inline bool LogStatus::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& LogStatus::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& LogStatus::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.LogStatus.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* LogStatus::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.LogStatus.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* LogStatus::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.LogStatus.header)
  return header_;
}
inline void LogStatus::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.LogStatus.header)
}

// .gz.msgs.Time sim_time = 2;
inline bool LogStatus::has_sim_time() const {
  return this != internal_default_instance() && sim_time_ != NULL;
}
inline const ::gz::msgs::Time& LogStatus::_internal_sim_time() const {
  return *sim_time_;
}
inline const ::gz::msgs::Time& LogStatus::sim_time() const {
  const ::gz::msgs::Time* p = sim_time_;
  // @@protoc_insertion_point(field_get:gz.msgs.LogStatus.sim_time)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Time*>(
      &::gz::msgs::_Time_default_instance_);
}
inline ::gz::msgs::Time* LogStatus::release_sim_time() {
  // @@protoc_insertion_point(field_release:gz.msgs.LogStatus.sim_time)
  
  ::gz::msgs::Time* temp = sim_time_;
  sim_time_ = NULL;
  return temp;
}
inline ::gz::msgs::Time* LogStatus::mutable_sim_time() {
  
  if (sim_time_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Time>(GetArenaNoVirtual());
    sim_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.LogStatus.sim_time)
  return sim_time_;
}
inline void LogStatus::set_allocated_sim_time(::gz::msgs::Time* sim_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sim_time_);
  }
  if (sim_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sim_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sim_time, submessage_arena);
    }
    
  } else {
    
  }
  sim_time_ = sim_time;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.LogStatus.sim_time)
}

// .gz.msgs.LogStatus.LogFile log_file = 3;
inline bool LogStatus::has_log_file() const {
  return this != internal_default_instance() && log_file_ != NULL;
}
inline void LogStatus::clear_log_file() {
  if (GetArenaNoVirtual() == NULL && log_file_ != NULL) {
    delete log_file_;
  }
  log_file_ = NULL;
}
inline const ::gz::msgs::LogStatus_LogFile& LogStatus::_internal_log_file() const {
  return *log_file_;
}
inline const ::gz::msgs::LogStatus_LogFile& LogStatus::log_file() const {
  const ::gz::msgs::LogStatus_LogFile* p = log_file_;
  // @@protoc_insertion_point(field_get:gz.msgs.LogStatus.log_file)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::LogStatus_LogFile*>(
      &::gz::msgs::_LogStatus_LogFile_default_instance_);
}
inline ::gz::msgs::LogStatus_LogFile* LogStatus::release_log_file() {
  // @@protoc_insertion_point(field_release:gz.msgs.LogStatus.log_file)
  
  ::gz::msgs::LogStatus_LogFile* temp = log_file_;
  log_file_ = NULL;
  return temp;
}
inline ::gz::msgs::LogStatus_LogFile* LogStatus::mutable_log_file() {
  
  if (log_file_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::LogStatus_LogFile>(GetArenaNoVirtual());
    log_file_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.LogStatus.log_file)
  return log_file_;
}
inline void LogStatus::set_allocated_log_file(::gz::msgs::LogStatus_LogFile* log_file) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete log_file_;
  }
  if (log_file) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      log_file = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log_file, submessage_arena);
    }
    
  } else {
    
  }
  log_file_ = log_file;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.LogStatus.log_file)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::msgs::LogStatus_LogFile_Units> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::LogStatus_LogFile_Units>() {
  return ::gz::msgs::LogStatus_LogFile_Units_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2flog_5fstatus_2eproto
