// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/camerasensor.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fcamerasensor_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fcamerasensor_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/distortion.pb.h"
#include "gz/msgs/double.pb.h"
#include "gz/msgs/header.pb.h"
#include "gz/msgs/image.pb.h"
#include "gz/msgs/lens.pb.h"
#include "gz/msgs/sensor_noise.pb.h"
#include "gz/msgs/vector2d.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fcamerasensor_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fcamerasensor_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fcamerasensor_2eproto
namespace gz {
namespace msgs {
class CameraSensor;
class CameraSensorDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern CameraSensorDefaultTypeInternal _CameraSensor_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::CameraSensor* Arena::CreateMaybeMessage<::gz::msgs::CameraSensor>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

enum CameraSensor_BoundingBoxType {
  CameraSensor_BoundingBoxType_NO_BOUNDING_BOX = 0,
  CameraSensor_BoundingBoxType_FULL_BOX_2D = 1,
  CameraSensor_BoundingBoxType_VISIBLE_BOX_2D = 2,
  CameraSensor_BoundingBoxType_BOX_3D = 3,
  CameraSensor_BoundingBoxType_CameraSensor_BoundingBoxType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CameraSensor_BoundingBoxType_CameraSensor_BoundingBoxType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool CameraSensor_BoundingBoxType_IsValid(int value);
const CameraSensor_BoundingBoxType CameraSensor_BoundingBoxType_BoundingBoxType_MIN = CameraSensor_BoundingBoxType_NO_BOUNDING_BOX;
const CameraSensor_BoundingBoxType CameraSensor_BoundingBoxType_BoundingBoxType_MAX = CameraSensor_BoundingBoxType_BOX_3D;
const int CameraSensor_BoundingBoxType_BoundingBoxType_ARRAYSIZE = CameraSensor_BoundingBoxType_BoundingBoxType_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* CameraSensor_BoundingBoxType_descriptor();
inline const ::std::string& CameraSensor_BoundingBoxType_Name(CameraSensor_BoundingBoxType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraSensor_BoundingBoxType_descriptor(), value);
}
inline bool CameraSensor_BoundingBoxType_Parse(
    const ::std::string& name, CameraSensor_BoundingBoxType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraSensor_BoundingBoxType>(
    CameraSensor_BoundingBoxType_descriptor(), name, value);
}
enum CameraSensor_SegmentationType {
  CameraSensor_SegmentationType_NO_SEGMENTATION = 0,
  CameraSensor_SegmentationType_SEMANTIC = 1,
  CameraSensor_SegmentationType_PANOPTIC = 2,
  CameraSensor_SegmentationType_CameraSensor_SegmentationType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CameraSensor_SegmentationType_CameraSensor_SegmentationType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool CameraSensor_SegmentationType_IsValid(int value);
const CameraSensor_SegmentationType CameraSensor_SegmentationType_SegmentationType_MIN = CameraSensor_SegmentationType_NO_SEGMENTATION;
const CameraSensor_SegmentationType CameraSensor_SegmentationType_SegmentationType_MAX = CameraSensor_SegmentationType_PANOPTIC;
const int CameraSensor_SegmentationType_SegmentationType_ARRAYSIZE = CameraSensor_SegmentationType_SegmentationType_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* CameraSensor_SegmentationType_descriptor();
inline const ::std::string& CameraSensor_SegmentationType_Name(CameraSensor_SegmentationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraSensor_SegmentationType_descriptor(), value);
}
inline bool CameraSensor_SegmentationType_Parse(
    const ::std::string& name, CameraSensor_SegmentationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraSensor_SegmentationType>(
    CameraSensor_SegmentationType_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE CameraSensor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.CameraSensor) */ {
 public:
  CameraSensor();
  virtual ~CameraSensor();

  CameraSensor(const CameraSensor& from);

  inline CameraSensor& operator=(const CameraSensor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraSensor(CameraSensor&& from) noexcept
    : CameraSensor() {
    *this = ::std::move(from);
  }

  inline CameraSensor& operator=(CameraSensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraSensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraSensor* internal_default_instance() {
    return reinterpret_cast<const CameraSensor*>(
               &_CameraSensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CameraSensor* other);
  friend void swap(CameraSensor& a, CameraSensor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraSensor* New() const final {
    return CreateMaybeMessage<CameraSensor>(NULL);
  }

  CameraSensor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraSensor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraSensor& from);
  void MergeFrom(const CameraSensor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraSensor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CameraSensor_BoundingBoxType BoundingBoxType;
  static const BoundingBoxType NO_BOUNDING_BOX =
    CameraSensor_BoundingBoxType_NO_BOUNDING_BOX;
  static const BoundingBoxType FULL_BOX_2D =
    CameraSensor_BoundingBoxType_FULL_BOX_2D;
  static const BoundingBoxType VISIBLE_BOX_2D =
    CameraSensor_BoundingBoxType_VISIBLE_BOX_2D;
  static const BoundingBoxType BOX_3D =
    CameraSensor_BoundingBoxType_BOX_3D;
  static inline bool BoundingBoxType_IsValid(int value) {
    return CameraSensor_BoundingBoxType_IsValid(value);
  }
  static const BoundingBoxType BoundingBoxType_MIN =
    CameraSensor_BoundingBoxType_BoundingBoxType_MIN;
  static const BoundingBoxType BoundingBoxType_MAX =
    CameraSensor_BoundingBoxType_BoundingBoxType_MAX;
  static const int BoundingBoxType_ARRAYSIZE =
    CameraSensor_BoundingBoxType_BoundingBoxType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BoundingBoxType_descriptor() {
    return CameraSensor_BoundingBoxType_descriptor();
  }
  static inline const ::std::string& BoundingBoxType_Name(BoundingBoxType value) {
    return CameraSensor_BoundingBoxType_Name(value);
  }
  static inline bool BoundingBoxType_Parse(const ::std::string& name,
      BoundingBoxType* value) {
    return CameraSensor_BoundingBoxType_Parse(name, value);
  }

  typedef CameraSensor_SegmentationType SegmentationType;
  static const SegmentationType NO_SEGMENTATION =
    CameraSensor_SegmentationType_NO_SEGMENTATION;
  static const SegmentationType SEMANTIC =
    CameraSensor_SegmentationType_SEMANTIC;
  static const SegmentationType PANOPTIC =
    CameraSensor_SegmentationType_PANOPTIC;
  static inline bool SegmentationType_IsValid(int value) {
    return CameraSensor_SegmentationType_IsValid(value);
  }
  static const SegmentationType SegmentationType_MIN =
    CameraSensor_SegmentationType_SegmentationType_MIN;
  static const SegmentationType SegmentationType_MAX =
    CameraSensor_SegmentationType_SegmentationType_MAX;
  static const int SegmentationType_ARRAYSIZE =
    CameraSensor_SegmentationType_SegmentationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SegmentationType_descriptor() {
    return CameraSensor_SegmentationType_descriptor();
  }
  static inline const ::std::string& SegmentationType_Name(SegmentationType value) {
    return CameraSensor_SegmentationType_Name(value);
  }
  static inline bool SegmentationType_Parse(const ::std::string& name,
      SegmentationType* value) {
    return CameraSensor_SegmentationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string image_format = 4;
  void clear_image_format();
  static const int kImageFormatFieldNumber = 4;
  const ::std::string& image_format() const;
  void set_image_format(const ::std::string& value);
  #if LANG_CXX11
  void set_image_format(::std::string&& value);
  #endif
  void set_image_format(const char* value);
  void set_image_format(const char* value, size_t size);
  ::std::string* mutable_image_format();
  ::std::string* release_image_format();
  void set_allocated_image_format(::std::string* image_format);

  // string save_path = 8;
  void clear_save_path();
  static const int kSavePathFieldNumber = 8;
  const ::std::string& save_path() const;
  void set_save_path(const ::std::string& value);
  #if LANG_CXX11
  void set_save_path(::std::string&& value);
  #endif
  void set_save_path(const char* value);
  void set_save_path(const char* value, size_t size);
  ::std::string* mutable_save_path();
  ::std::string* release_save_path();
  void set_allocated_save_path(::std::string* save_path);

  // string triggered_topic = 17;
  void clear_triggered_topic();
  static const int kTriggeredTopicFieldNumber = 17;
  const ::std::string& triggered_topic() const;
  void set_triggered_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_triggered_topic(::std::string&& value);
  #endif
  void set_triggered_topic(const char* value);
  void set_triggered_topic(const char* value, size_t size);
  ::std::string* mutable_triggered_topic();
  ::std::string* release_triggered_topic();
  void set_allocated_triggered_topic(::std::string* triggered_topic);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Vector2d image_size = 3;
  bool has_image_size() const;
  void clear_image_size();
  static const int kImageSizeFieldNumber = 3;
  private:
  const ::gz::msgs::Vector2d& _internal_image_size() const;
  public:
  const ::gz::msgs::Vector2d& image_size() const;
  ::gz::msgs::Vector2d* release_image_size();
  ::gz::msgs::Vector2d* mutable_image_size();
  void set_allocated_image_size(::gz::msgs::Vector2d* image_size);

  // .gz.msgs.Distortion distortion = 9;
  bool has_distortion() const;
  void clear_distortion();
  static const int kDistortionFieldNumber = 9;
  private:
  const ::gz::msgs::Distortion& _internal_distortion() const;
  public:
  const ::gz::msgs::Distortion& distortion() const;
  ::gz::msgs::Distortion* release_distortion();
  ::gz::msgs::Distortion* mutable_distortion();
  void set_allocated_distortion(::gz::msgs::Distortion* distortion);

  // .gz.msgs.SensorNoise image_noise = 10;
  bool has_image_noise() const;
  void clear_image_noise();
  static const int kImageNoiseFieldNumber = 10;
  private:
  const ::gz::msgs::SensorNoise& _internal_image_noise() const;
  public:
  const ::gz::msgs::SensorNoise& image_noise() const;
  ::gz::msgs::SensorNoise* release_image_noise();
  ::gz::msgs::SensorNoise* mutable_image_noise();
  void set_allocated_image_noise(::gz::msgs::SensorNoise* image_noise);

  // .gz.msgs.Double depth_near_clip = 11;
  bool has_depth_near_clip() const;
  void clear_depth_near_clip();
  static const int kDepthNearClipFieldNumber = 11;
  private:
  const ::gz::msgs::Double& _internal_depth_near_clip() const;
  public:
  const ::gz::msgs::Double& depth_near_clip() const;
  ::gz::msgs::Double* release_depth_near_clip();
  ::gz::msgs::Double* mutable_depth_near_clip();
  void set_allocated_depth_near_clip(::gz::msgs::Double* depth_near_clip);

  // .gz.msgs.Double depth_far_clip = 12;
  bool has_depth_far_clip() const;
  void clear_depth_far_clip();
  static const int kDepthFarClipFieldNumber = 12;
  private:
  const ::gz::msgs::Double& _internal_depth_far_clip() const;
  public:
  const ::gz::msgs::Double& depth_far_clip() const;
  ::gz::msgs::Double* release_depth_far_clip();
  ::gz::msgs::Double* mutable_depth_far_clip();
  void set_allocated_depth_far_clip(::gz::msgs::Double* depth_far_clip);

  // .gz.msgs.Lens lens = 15;
  bool has_lens() const;
  void clear_lens();
  static const int kLensFieldNumber = 15;
  private:
  const ::gz::msgs::Lens& _internal_lens() const;
  public:
  const ::gz::msgs::Lens& lens() const;
  ::gz::msgs::Lens* release_lens();
  ::gz::msgs::Lens* mutable_lens();
  void set_allocated_lens(::gz::msgs::Lens* lens);

  // double horizontal_fov = 2;
  void clear_horizontal_fov();
  static const int kHorizontalFovFieldNumber = 2;
  double horizontal_fov() const;
  void set_horizontal_fov(double value);

  // double near_clip = 5;
  void clear_near_clip();
  static const int kNearClipFieldNumber = 5;
  double near_clip() const;
  void set_near_clip(double value);

  // double far_clip = 6;
  void clear_far_clip();
  static const int kFarClipFieldNumber = 6;
  double far_clip() const;
  void set_far_clip(double value);

  // .gz.msgs.CameraSensor.BoundingBoxType bounding_box_type = 13;
  void clear_bounding_box_type();
  static const int kBoundingBoxTypeFieldNumber = 13;
  ::gz::msgs::CameraSensor_BoundingBoxType bounding_box_type() const;
  void set_bounding_box_type(::gz::msgs::CameraSensor_BoundingBoxType value);

  // .gz.msgs.CameraSensor.SegmentationType segmentation_type = 14;
  void clear_segmentation_type();
  static const int kSegmentationTypeFieldNumber = 14;
  ::gz::msgs::CameraSensor_SegmentationType segmentation_type() const;
  void set_segmentation_type(::gz::msgs::CameraSensor_SegmentationType value);

  // bool save_enabled = 7;
  void clear_save_enabled();
  static const int kSaveEnabledFieldNumber = 7;
  bool save_enabled() const;
  void set_save_enabled(bool value);

  // bool triggered = 16;
  void clear_triggered();
  static const int kTriggeredFieldNumber = 16;
  bool triggered() const;
  void set_triggered(bool value);

  // bool is_depth_camera = 20;
  void clear_is_depth_camera();
  static const int kIsDepthCameraFieldNumber = 20;
  bool is_depth_camera() const;
  void set_is_depth_camera(bool value);

  // int32 anti_aliasing = 18;
  void clear_anti_aliasing();
  static const int kAntiAliasingFieldNumber = 18;
  ::google::protobuf::int32 anti_aliasing() const;
  void set_anti_aliasing(::google::protobuf::int32 value);

  // uint32 visibility_mask = 19;
  void clear_visibility_mask();
  static const int kVisibilityMaskFieldNumber = 19;
  ::google::protobuf::uint32 visibility_mask() const;
  void set_visibility_mask(::google::protobuf::uint32 value);

  // .gz.msgs.PixelFormatType pixel_format = 21;
  void clear_pixel_format();
  static const int kPixelFormatFieldNumber = 21;
  ::gz::msgs::PixelFormatType pixel_format() const;
  void set_pixel_format(::gz::msgs::PixelFormatType value);

  // @@protoc_insertion_point(class_scope:gz.msgs.CameraSensor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr image_format_;
  ::google::protobuf::internal::ArenaStringPtr save_path_;
  ::google::protobuf::internal::ArenaStringPtr triggered_topic_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Vector2d* image_size_;
  ::gz::msgs::Distortion* distortion_;
  ::gz::msgs::SensorNoise* image_noise_;
  ::gz::msgs::Double* depth_near_clip_;
  ::gz::msgs::Double* depth_far_clip_;
  ::gz::msgs::Lens* lens_;
  double horizontal_fov_;
  double near_clip_;
  double far_clip_;
  int bounding_box_type_;
  int segmentation_type_;
  bool save_enabled_;
  bool triggered_;
  bool is_depth_camera_;
  ::google::protobuf::int32 anti_aliasing_;
  ::google::protobuf::uint32 visibility_mask_;
  int pixel_format_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fcamerasensor_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraSensor

// .gz.msgs.Header header = 1;
inline bool CameraSensor::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& CameraSensor::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& CameraSensor::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* CameraSensor::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.CameraSensor.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* CameraSensor::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.CameraSensor.header)
  return header_;
}
inline void CameraSensor::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.CameraSensor.header)
}

// double horizontal_fov = 2;
inline void CameraSensor::clear_horizontal_fov() {
  horizontal_fov_ = 0;
}
inline double CameraSensor::horizontal_fov() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.horizontal_fov)
  return horizontal_fov_;
}
inline void CameraSensor::set_horizontal_fov(double value) {
  
  horizontal_fov_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraSensor.horizontal_fov)
}

// .gz.msgs.Vector2d image_size = 3;
inline bool CameraSensor::has_image_size() const {
  return this != internal_default_instance() && image_size_ != NULL;
}
inline const ::gz::msgs::Vector2d& CameraSensor::_internal_image_size() const {
  return *image_size_;
}
inline const ::gz::msgs::Vector2d& CameraSensor::image_size() const {
  const ::gz::msgs::Vector2d* p = image_size_;
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.image_size)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Vector2d*>(
      &::gz::msgs::_Vector2d_default_instance_);
}
inline ::gz::msgs::Vector2d* CameraSensor::release_image_size() {
  // @@protoc_insertion_point(field_release:gz.msgs.CameraSensor.image_size)
  
  ::gz::msgs::Vector2d* temp = image_size_;
  image_size_ = NULL;
  return temp;
}
inline ::gz::msgs::Vector2d* CameraSensor::mutable_image_size() {
  
  if (image_size_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Vector2d>(GetArenaNoVirtual());
    image_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.CameraSensor.image_size)
  return image_size_;
}
inline void CameraSensor::set_allocated_image_size(::gz::msgs::Vector2d* image_size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(image_size_);
  }
  if (image_size) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      image_size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image_size, submessage_arena);
    }
    
  } else {
    
  }
  image_size_ = image_size;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.CameraSensor.image_size)
}

// string image_format = 4;
inline void CameraSensor::clear_image_format() {
  image_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CameraSensor::image_format() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.image_format)
  return image_format_.GetNoArena();
}
inline void CameraSensor::set_image_format(const ::std::string& value) {
  
  image_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.CameraSensor.image_format)
}
#if LANG_CXX11
inline void CameraSensor::set_image_format(::std::string&& value) {
  
  image_format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.CameraSensor.image_format)
}
#endif
inline void CameraSensor::set_image_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.CameraSensor.image_format)
}
inline void CameraSensor::set_image_format(const char* value, size_t size) {
  
  image_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.CameraSensor.image_format)
}
inline ::std::string* CameraSensor::mutable_image_format() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.CameraSensor.image_format)
  return image_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraSensor::release_image_format() {
  // @@protoc_insertion_point(field_release:gz.msgs.CameraSensor.image_format)
  
  return image_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraSensor::set_allocated_image_format(::std::string* image_format) {
  if (image_format != NULL) {
    
  } else {
    
  }
  image_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_format);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.CameraSensor.image_format)
}

// double near_clip = 5;
inline void CameraSensor::clear_near_clip() {
  near_clip_ = 0;
}
inline double CameraSensor::near_clip() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.near_clip)
  return near_clip_;
}
inline void CameraSensor::set_near_clip(double value) {
  
  near_clip_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraSensor.near_clip)
}

// double far_clip = 6;
inline void CameraSensor::clear_far_clip() {
  far_clip_ = 0;
}
inline double CameraSensor::far_clip() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.far_clip)
  return far_clip_;
}
inline void CameraSensor::set_far_clip(double value) {
  
  far_clip_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraSensor.far_clip)
}

// bool save_enabled = 7;
inline void CameraSensor::clear_save_enabled() {
  save_enabled_ = false;
}
inline bool CameraSensor::save_enabled() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.save_enabled)
  return save_enabled_;
}
inline void CameraSensor::set_save_enabled(bool value) {
  
  save_enabled_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraSensor.save_enabled)
}

// string save_path = 8;
inline void CameraSensor::clear_save_path() {
  save_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CameraSensor::save_path() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.save_path)
  return save_path_.GetNoArena();
}
inline void CameraSensor::set_save_path(const ::std::string& value) {
  
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.CameraSensor.save_path)
}
#if LANG_CXX11
inline void CameraSensor::set_save_path(::std::string&& value) {
  
  save_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.CameraSensor.save_path)
}
#endif
inline void CameraSensor::set_save_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.CameraSensor.save_path)
}
inline void CameraSensor::set_save_path(const char* value, size_t size) {
  
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.CameraSensor.save_path)
}
inline ::std::string* CameraSensor::mutable_save_path() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.CameraSensor.save_path)
  return save_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraSensor::release_save_path() {
  // @@protoc_insertion_point(field_release:gz.msgs.CameraSensor.save_path)
  
  return save_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraSensor::set_allocated_save_path(::std::string* save_path) {
  if (save_path != NULL) {
    
  } else {
    
  }
  save_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_path);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.CameraSensor.save_path)
}

// .gz.msgs.Distortion distortion = 9;
inline bool CameraSensor::has_distortion() const {
  return this != internal_default_instance() && distortion_ != NULL;
}
inline const ::gz::msgs::Distortion& CameraSensor::_internal_distortion() const {
  return *distortion_;
}
inline const ::gz::msgs::Distortion& CameraSensor::distortion() const {
  const ::gz::msgs::Distortion* p = distortion_;
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.distortion)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Distortion*>(
      &::gz::msgs::_Distortion_default_instance_);
}
inline ::gz::msgs::Distortion* CameraSensor::release_distortion() {
  // @@protoc_insertion_point(field_release:gz.msgs.CameraSensor.distortion)
  
  ::gz::msgs::Distortion* temp = distortion_;
  distortion_ = NULL;
  return temp;
}
inline ::gz::msgs::Distortion* CameraSensor::mutable_distortion() {
  
  if (distortion_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Distortion>(GetArenaNoVirtual());
    distortion_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.CameraSensor.distortion)
  return distortion_;
}
inline void CameraSensor::set_allocated_distortion(::gz::msgs::Distortion* distortion) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(distortion_);
  }
  if (distortion) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      distortion = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, distortion, submessage_arena);
    }
    
  } else {
    
  }
  distortion_ = distortion;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.CameraSensor.distortion)
}

// .gz.msgs.SensorNoise image_noise = 10;
inline bool CameraSensor::has_image_noise() const {
  return this != internal_default_instance() && image_noise_ != NULL;
}
inline const ::gz::msgs::SensorNoise& CameraSensor::_internal_image_noise() const {
  return *image_noise_;
}
inline const ::gz::msgs::SensorNoise& CameraSensor::image_noise() const {
  const ::gz::msgs::SensorNoise* p = image_noise_;
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.image_noise)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::SensorNoise*>(
      &::gz::msgs::_SensorNoise_default_instance_);
}
inline ::gz::msgs::SensorNoise* CameraSensor::release_image_noise() {
  // @@protoc_insertion_point(field_release:gz.msgs.CameraSensor.image_noise)
  
  ::gz::msgs::SensorNoise* temp = image_noise_;
  image_noise_ = NULL;
  return temp;
}
inline ::gz::msgs::SensorNoise* CameraSensor::mutable_image_noise() {
  
  if (image_noise_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::SensorNoise>(GetArenaNoVirtual());
    image_noise_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.CameraSensor.image_noise)
  return image_noise_;
}
inline void CameraSensor::set_allocated_image_noise(::gz::msgs::SensorNoise* image_noise) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(image_noise_);
  }
  if (image_noise) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      image_noise = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image_noise, submessage_arena);
    }
    
  } else {
    
  }
  image_noise_ = image_noise;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.CameraSensor.image_noise)
}

// .gz.msgs.Double depth_near_clip = 11;
inline bool CameraSensor::has_depth_near_clip() const {
  return this != internal_default_instance() && depth_near_clip_ != NULL;
}
inline const ::gz::msgs::Double& CameraSensor::_internal_depth_near_clip() const {
  return *depth_near_clip_;
}
inline const ::gz::msgs::Double& CameraSensor::depth_near_clip() const {
  const ::gz::msgs::Double* p = depth_near_clip_;
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.depth_near_clip)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Double*>(
      &::gz::msgs::_Double_default_instance_);
}
inline ::gz::msgs::Double* CameraSensor::release_depth_near_clip() {
  // @@protoc_insertion_point(field_release:gz.msgs.CameraSensor.depth_near_clip)
  
  ::gz::msgs::Double* temp = depth_near_clip_;
  depth_near_clip_ = NULL;
  return temp;
}
inline ::gz::msgs::Double* CameraSensor::mutable_depth_near_clip() {
  
  if (depth_near_clip_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Double>(GetArenaNoVirtual());
    depth_near_clip_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.CameraSensor.depth_near_clip)
  return depth_near_clip_;
}
inline void CameraSensor::set_allocated_depth_near_clip(::gz::msgs::Double* depth_near_clip) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(depth_near_clip_);
  }
  if (depth_near_clip) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      depth_near_clip = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, depth_near_clip, submessage_arena);
    }
    
  } else {
    
  }
  depth_near_clip_ = depth_near_clip;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.CameraSensor.depth_near_clip)
}

// .gz.msgs.Double depth_far_clip = 12;
inline bool CameraSensor::has_depth_far_clip() const {
  return this != internal_default_instance() && depth_far_clip_ != NULL;
}
inline const ::gz::msgs::Double& CameraSensor::_internal_depth_far_clip() const {
  return *depth_far_clip_;
}
inline const ::gz::msgs::Double& CameraSensor::depth_far_clip() const {
  const ::gz::msgs::Double* p = depth_far_clip_;
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.depth_far_clip)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Double*>(
      &::gz::msgs::_Double_default_instance_);
}
inline ::gz::msgs::Double* CameraSensor::release_depth_far_clip() {
  // @@protoc_insertion_point(field_release:gz.msgs.CameraSensor.depth_far_clip)
  
  ::gz::msgs::Double* temp = depth_far_clip_;
  depth_far_clip_ = NULL;
  return temp;
}
inline ::gz::msgs::Double* CameraSensor::mutable_depth_far_clip() {
  
  if (depth_far_clip_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Double>(GetArenaNoVirtual());
    depth_far_clip_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.CameraSensor.depth_far_clip)
  return depth_far_clip_;
}
inline void CameraSensor::set_allocated_depth_far_clip(::gz::msgs::Double* depth_far_clip) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(depth_far_clip_);
  }
  if (depth_far_clip) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      depth_far_clip = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, depth_far_clip, submessage_arena);
    }
    
  } else {
    
  }
  depth_far_clip_ = depth_far_clip;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.CameraSensor.depth_far_clip)
}

// .gz.msgs.CameraSensor.BoundingBoxType bounding_box_type = 13;
inline void CameraSensor::clear_bounding_box_type() {
  bounding_box_type_ = 0;
}
inline ::gz::msgs::CameraSensor_BoundingBoxType CameraSensor::bounding_box_type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.bounding_box_type)
  return static_cast< ::gz::msgs::CameraSensor_BoundingBoxType >(bounding_box_type_);
}
inline void CameraSensor::set_bounding_box_type(::gz::msgs::CameraSensor_BoundingBoxType value) {
  
  bounding_box_type_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraSensor.bounding_box_type)
}

// .gz.msgs.CameraSensor.SegmentationType segmentation_type = 14;
inline void CameraSensor::clear_segmentation_type() {
  segmentation_type_ = 0;
}
inline ::gz::msgs::CameraSensor_SegmentationType CameraSensor::segmentation_type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.segmentation_type)
  return static_cast< ::gz::msgs::CameraSensor_SegmentationType >(segmentation_type_);
}
inline void CameraSensor::set_segmentation_type(::gz::msgs::CameraSensor_SegmentationType value) {
  
  segmentation_type_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraSensor.segmentation_type)
}

// .gz.msgs.Lens lens = 15;
inline bool CameraSensor::has_lens() const {
  return this != internal_default_instance() && lens_ != NULL;
}
inline const ::gz::msgs::Lens& CameraSensor::_internal_lens() const {
  return *lens_;
}
inline const ::gz::msgs::Lens& CameraSensor::lens() const {
  const ::gz::msgs::Lens* p = lens_;
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.lens)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Lens*>(
      &::gz::msgs::_Lens_default_instance_);
}
inline ::gz::msgs::Lens* CameraSensor::release_lens() {
  // @@protoc_insertion_point(field_release:gz.msgs.CameraSensor.lens)
  
  ::gz::msgs::Lens* temp = lens_;
  lens_ = NULL;
  return temp;
}
inline ::gz::msgs::Lens* CameraSensor::mutable_lens() {
  
  if (lens_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Lens>(GetArenaNoVirtual());
    lens_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.CameraSensor.lens)
  return lens_;
}
inline void CameraSensor::set_allocated_lens(::gz::msgs::Lens* lens) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lens_);
  }
  if (lens) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lens = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lens, submessage_arena);
    }
    
  } else {
    
  }
  lens_ = lens;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.CameraSensor.lens)
}

// bool triggered = 16;
inline void CameraSensor::clear_triggered() {
  triggered_ = false;
}
inline bool CameraSensor::triggered() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.triggered)
  return triggered_;
}
inline void CameraSensor::set_triggered(bool value) {
  
  triggered_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraSensor.triggered)
}

// string triggered_topic = 17;
inline void CameraSensor::clear_triggered_topic() {
  triggered_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CameraSensor::triggered_topic() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.triggered_topic)
  return triggered_topic_.GetNoArena();
}
inline void CameraSensor::set_triggered_topic(const ::std::string& value) {
  
  triggered_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.CameraSensor.triggered_topic)
}
#if LANG_CXX11
inline void CameraSensor::set_triggered_topic(::std::string&& value) {
  
  triggered_topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.CameraSensor.triggered_topic)
}
#endif
inline void CameraSensor::set_triggered_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  triggered_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.CameraSensor.triggered_topic)
}
inline void CameraSensor::set_triggered_topic(const char* value, size_t size) {
  
  triggered_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.CameraSensor.triggered_topic)
}
inline ::std::string* CameraSensor::mutable_triggered_topic() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.CameraSensor.triggered_topic)
  return triggered_topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraSensor::release_triggered_topic() {
  // @@protoc_insertion_point(field_release:gz.msgs.CameraSensor.triggered_topic)
  
  return triggered_topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraSensor::set_allocated_triggered_topic(::std::string* triggered_topic) {
  if (triggered_topic != NULL) {
    
  } else {
    
  }
  triggered_topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), triggered_topic);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.CameraSensor.triggered_topic)
}

// int32 anti_aliasing = 18;
inline void CameraSensor::clear_anti_aliasing() {
  anti_aliasing_ = 0;
}
inline ::google::protobuf::int32 CameraSensor::anti_aliasing() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.anti_aliasing)
  return anti_aliasing_;
}
inline void CameraSensor::set_anti_aliasing(::google::protobuf::int32 value) {
  
  anti_aliasing_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraSensor.anti_aliasing)
}

// uint32 visibility_mask = 19;
inline void CameraSensor::clear_visibility_mask() {
  visibility_mask_ = 0u;
}
inline ::google::protobuf::uint32 CameraSensor::visibility_mask() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.visibility_mask)
  return visibility_mask_;
}
inline void CameraSensor::set_visibility_mask(::google::protobuf::uint32 value) {
  
  visibility_mask_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraSensor.visibility_mask)
}

// bool is_depth_camera = 20;
inline void CameraSensor::clear_is_depth_camera() {
  is_depth_camera_ = false;
}
inline bool CameraSensor::is_depth_camera() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.is_depth_camera)
  return is_depth_camera_;
}
inline void CameraSensor::set_is_depth_camera(bool value) {
  
  is_depth_camera_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraSensor.is_depth_camera)
}

// .gz.msgs.PixelFormatType pixel_format = 21;
inline void CameraSensor::clear_pixel_format() {
  pixel_format_ = 0;
}
inline ::gz::msgs::PixelFormatType CameraSensor::pixel_format() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraSensor.pixel_format)
  return static_cast< ::gz::msgs::PixelFormatType >(pixel_format_);
}
inline void CameraSensor::set_pixel_format(::gz::msgs::PixelFormatType value) {
  
  pixel_format_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraSensor.pixel_format)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::msgs::CameraSensor_BoundingBoxType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::CameraSensor_BoundingBoxType>() {
  return ::gz::msgs::CameraSensor_BoundingBoxType_descriptor();
}
template <> struct is_proto_enum< ::gz::msgs::CameraSensor_SegmentationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::CameraSensor_SegmentationType>() {
  return ::gz::msgs::CameraSensor_SegmentationType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fcamerasensor_2eproto
