// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/joint_wrench.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fjoint_5fwrench_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fjoint_5fwrench_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/wrench.pb.h"
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fjoint_5fwrench_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fjoint_5fwrench_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fjoint_5fwrench_2eproto
namespace gz {
namespace msgs {
class JointWrench;
class JointWrenchDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern JointWrenchDefaultTypeInternal _JointWrench_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::JointWrench* Arena::CreateMaybeMessage<::gz::msgs::JointWrench>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE JointWrench : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.JointWrench) */ {
 public:
  JointWrench();
  virtual ~JointWrench();

  JointWrench(const JointWrench& from);

  inline JointWrench& operator=(const JointWrench& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JointWrench(JointWrench&& from) noexcept
    : JointWrench() {
    *this = ::std::move(from);
  }

  inline JointWrench& operator=(JointWrench&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JointWrench& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointWrench* internal_default_instance() {
    return reinterpret_cast<const JointWrench*>(
               &_JointWrench_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(JointWrench* other);
  friend void swap(JointWrench& a, JointWrench& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JointWrench* New() const final {
    return CreateMaybeMessage<JointWrench>(NULL);
  }

  JointWrench* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JointWrench>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JointWrench& from);
  void MergeFrom(const JointWrench& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointWrench* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string body_1_name = 2;
  void clear_body_1_name();
  static const int kBody1NameFieldNumber = 2;
  const ::std::string& body_1_name() const;
  void set_body_1_name(const ::std::string& value);
  #if LANG_CXX11
  void set_body_1_name(::std::string&& value);
  #endif
  void set_body_1_name(const char* value);
  void set_body_1_name(const char* value, size_t size);
  ::std::string* mutable_body_1_name();
  ::std::string* release_body_1_name();
  void set_allocated_body_1_name(::std::string* body_1_name);

  // string body_2_name = 4;
  void clear_body_2_name();
  static const int kBody2NameFieldNumber = 4;
  const ::std::string& body_2_name() const;
  void set_body_2_name(const ::std::string& value);
  #if LANG_CXX11
  void set_body_2_name(::std::string&& value);
  #endif
  void set_body_2_name(const char* value);
  void set_body_2_name(const char* value, size_t size);
  ::std::string* mutable_body_2_name();
  ::std::string* release_body_2_name();
  void set_allocated_body_2_name(::std::string* body_2_name);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Wrench body_1_wrench = 6;
  bool has_body_1_wrench() const;
  void clear_body_1_wrench();
  static const int kBody1WrenchFieldNumber = 6;
  private:
  const ::gz::msgs::Wrench& _internal_body_1_wrench() const;
  public:
  const ::gz::msgs::Wrench& body_1_wrench() const;
  ::gz::msgs::Wrench* release_body_1_wrench();
  ::gz::msgs::Wrench* mutable_body_1_wrench();
  void set_allocated_body_1_wrench(::gz::msgs::Wrench* body_1_wrench);

  // .gz.msgs.Wrench body_2_wrench = 7;
  bool has_body_2_wrench() const;
  void clear_body_2_wrench();
  static const int kBody2WrenchFieldNumber = 7;
  private:
  const ::gz::msgs::Wrench& _internal_body_2_wrench() const;
  public:
  const ::gz::msgs::Wrench& body_2_wrench() const;
  ::gz::msgs::Wrench* release_body_2_wrench();
  ::gz::msgs::Wrench* mutable_body_2_wrench();
  void set_allocated_body_2_wrench(::gz::msgs::Wrench* body_2_wrench);

  // uint32 body_1_id = 3;
  void clear_body_1_id();
  static const int kBody1IdFieldNumber = 3;
  ::google::protobuf::uint32 body_1_id() const;
  void set_body_1_id(::google::protobuf::uint32 value);

  // uint32 body_2_id = 5;
  void clear_body_2_id();
  static const int kBody2IdFieldNumber = 5;
  ::google::protobuf::uint32 body_2_id() const;
  void set_body_2_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gz.msgs.JointWrench)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr body_1_name_;
  ::google::protobuf::internal::ArenaStringPtr body_2_name_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Wrench* body_1_wrench_;
  ::gz::msgs::Wrench* body_2_wrench_;
  ::google::protobuf::uint32 body_1_id_;
  ::google::protobuf::uint32 body_2_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fjoint_5fwrench_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JointWrench

// .gz.msgs.Header header = 1;
inline bool JointWrench::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& JointWrench::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& JointWrench::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.JointWrench.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* JointWrench::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.JointWrench.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* JointWrench::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.JointWrench.header)
  return header_;
}
inline void JointWrench::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.JointWrench.header)
}

// string body_1_name = 2;
inline void JointWrench::clear_body_1_name() {
  body_1_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JointWrench::body_1_name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.JointWrench.body_1_name)
  return body_1_name_.GetNoArena();
}
inline void JointWrench::set_body_1_name(const ::std::string& value) {
  
  body_1_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.JointWrench.body_1_name)
}
#if LANG_CXX11
inline void JointWrench::set_body_1_name(::std::string&& value) {
  
  body_1_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.JointWrench.body_1_name)
}
#endif
inline void JointWrench::set_body_1_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_1_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.JointWrench.body_1_name)
}
inline void JointWrench::set_body_1_name(const char* value, size_t size) {
  
  body_1_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.JointWrench.body_1_name)
}
inline ::std::string* JointWrench::mutable_body_1_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.JointWrench.body_1_name)
  return body_1_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JointWrench::release_body_1_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.JointWrench.body_1_name)
  
  return body_1_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JointWrench::set_allocated_body_1_name(::std::string* body_1_name) {
  if (body_1_name != NULL) {
    
  } else {
    
  }
  body_1_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body_1_name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.JointWrench.body_1_name)
}

// uint32 body_1_id = 3;
inline void JointWrench::clear_body_1_id() {
  body_1_id_ = 0u;
}
inline ::google::protobuf::uint32 JointWrench::body_1_id() const {
  // @@protoc_insertion_point(field_get:gz.msgs.JointWrench.body_1_id)
  return body_1_id_;
}
inline void JointWrench::set_body_1_id(::google::protobuf::uint32 value) {
  
  body_1_id_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.JointWrench.body_1_id)
}

// string body_2_name = 4;
inline void JointWrench::clear_body_2_name() {
  body_2_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JointWrench::body_2_name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.JointWrench.body_2_name)
  return body_2_name_.GetNoArena();
}
inline void JointWrench::set_body_2_name(const ::std::string& value) {
  
  body_2_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.JointWrench.body_2_name)
}
#if LANG_CXX11
inline void JointWrench::set_body_2_name(::std::string&& value) {
  
  body_2_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.JointWrench.body_2_name)
}
#endif
inline void JointWrench::set_body_2_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_2_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.JointWrench.body_2_name)
}
inline void JointWrench::set_body_2_name(const char* value, size_t size) {
  
  body_2_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.JointWrench.body_2_name)
}
inline ::std::string* JointWrench::mutable_body_2_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.JointWrench.body_2_name)
  return body_2_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JointWrench::release_body_2_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.JointWrench.body_2_name)
  
  return body_2_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JointWrench::set_allocated_body_2_name(::std::string* body_2_name) {
  if (body_2_name != NULL) {
    
  } else {
    
  }
  body_2_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body_2_name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.JointWrench.body_2_name)
}

// uint32 body_2_id = 5;
inline void JointWrench::clear_body_2_id() {
  body_2_id_ = 0u;
}
inline ::google::protobuf::uint32 JointWrench::body_2_id() const {
  // @@protoc_insertion_point(field_get:gz.msgs.JointWrench.body_2_id)
  return body_2_id_;
}
inline void JointWrench::set_body_2_id(::google::protobuf::uint32 value) {
  
  body_2_id_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.JointWrench.body_2_id)
}

// .gz.msgs.Wrench body_1_wrench = 6;
inline bool JointWrench::has_body_1_wrench() const {
  return this != internal_default_instance() && body_1_wrench_ != NULL;
}
inline const ::gz::msgs::Wrench& JointWrench::_internal_body_1_wrench() const {
  return *body_1_wrench_;
}
inline const ::gz::msgs::Wrench& JointWrench::body_1_wrench() const {
  const ::gz::msgs::Wrench* p = body_1_wrench_;
  // @@protoc_insertion_point(field_get:gz.msgs.JointWrench.body_1_wrench)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Wrench*>(
      &::gz::msgs::_Wrench_default_instance_);
}
inline ::gz::msgs::Wrench* JointWrench::release_body_1_wrench() {
  // @@protoc_insertion_point(field_release:gz.msgs.JointWrench.body_1_wrench)
  
  ::gz::msgs::Wrench* temp = body_1_wrench_;
  body_1_wrench_ = NULL;
  return temp;
}
inline ::gz::msgs::Wrench* JointWrench::mutable_body_1_wrench() {
  
  if (body_1_wrench_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Wrench>(GetArenaNoVirtual());
    body_1_wrench_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.JointWrench.body_1_wrench)
  return body_1_wrench_;
}
inline void JointWrench::set_allocated_body_1_wrench(::gz::msgs::Wrench* body_1_wrench) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(body_1_wrench_);
  }
  if (body_1_wrench) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body_1_wrench = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body_1_wrench, submessage_arena);
    }
    
  } else {
    
  }
  body_1_wrench_ = body_1_wrench;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.JointWrench.body_1_wrench)
}

// .gz.msgs.Wrench body_2_wrench = 7;
inline bool JointWrench::has_body_2_wrench() const {
  return this != internal_default_instance() && body_2_wrench_ != NULL;
}
inline const ::gz::msgs::Wrench& JointWrench::_internal_body_2_wrench() const {
  return *body_2_wrench_;
}
inline const ::gz::msgs::Wrench& JointWrench::body_2_wrench() const {
  const ::gz::msgs::Wrench* p = body_2_wrench_;
  // @@protoc_insertion_point(field_get:gz.msgs.JointWrench.body_2_wrench)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Wrench*>(
      &::gz::msgs::_Wrench_default_instance_);
}
inline ::gz::msgs::Wrench* JointWrench::release_body_2_wrench() {
  // @@protoc_insertion_point(field_release:gz.msgs.JointWrench.body_2_wrench)
  
  ::gz::msgs::Wrench* temp = body_2_wrench_;
  body_2_wrench_ = NULL;
  return temp;
}
inline ::gz::msgs::Wrench* JointWrench::mutable_body_2_wrench() {
  
  if (body_2_wrench_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Wrench>(GetArenaNoVirtual());
    body_2_wrench_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.JointWrench.body_2_wrench)
  return body_2_wrench_;
}
inline void JointWrench::set_allocated_body_2_wrench(::gz::msgs::Wrench* body_2_wrench) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(body_2_wrench_);
  }
  if (body_2_wrench) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body_2_wrench = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body_2_wrench, submessage_arena);
    }
    
  } else {
    
  }
  body_2_wrench_ = body_2_wrench;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.JointWrench.body_2_wrench)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fjoint_5fwrench_2eproto
