// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/sensor_noise.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fsensor_5fnoise_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fsensor_5fnoise_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fsensor_5fnoise_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fsensor_5fnoise_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fsensor_5fnoise_2eproto
namespace gz {
namespace msgs {
class SensorNoise;
class SensorNoiseDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern SensorNoiseDefaultTypeInternal _SensorNoise_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::SensorNoise* Arena::CreateMaybeMessage<::gz::msgs::SensorNoise>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

enum SensorNoise_Type {
  SensorNoise_Type_NONE = 0,
  SensorNoise_Type_GAUSSIAN = 2,
  SensorNoise_Type_GAUSSIAN_QUANTIZED = 3,
  SensorNoise_Type_SensorNoise_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SensorNoise_Type_SensorNoise_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool SensorNoise_Type_IsValid(int value);
const SensorNoise_Type SensorNoise_Type_Type_MIN = SensorNoise_Type_NONE;
const SensorNoise_Type SensorNoise_Type_Type_MAX = SensorNoise_Type_GAUSSIAN_QUANTIZED;
const int SensorNoise_Type_Type_ARRAYSIZE = SensorNoise_Type_Type_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* SensorNoise_Type_descriptor();
inline const ::std::string& SensorNoise_Type_Name(SensorNoise_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    SensorNoise_Type_descriptor(), value);
}
inline bool SensorNoise_Type_Parse(
    const ::std::string& name, SensorNoise_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SensorNoise_Type>(
    SensorNoise_Type_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE SensorNoise : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.SensorNoise) */ {
 public:
  SensorNoise();
  virtual ~SensorNoise();

  SensorNoise(const SensorNoise& from);

  inline SensorNoise& operator=(const SensorNoise& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorNoise(SensorNoise&& from) noexcept
    : SensorNoise() {
    *this = ::std::move(from);
  }

  inline SensorNoise& operator=(SensorNoise&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorNoise& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorNoise* internal_default_instance() {
    return reinterpret_cast<const SensorNoise*>(
               &_SensorNoise_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SensorNoise* other);
  friend void swap(SensorNoise& a, SensorNoise& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorNoise* New() const final {
    return CreateMaybeMessage<SensorNoise>(NULL);
  }

  SensorNoise* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorNoise>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorNoise& from);
  void MergeFrom(const SensorNoise& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorNoise* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SensorNoise_Type Type;
  static const Type NONE =
    SensorNoise_Type_NONE;
  static const Type GAUSSIAN =
    SensorNoise_Type_GAUSSIAN;
  static const Type GAUSSIAN_QUANTIZED =
    SensorNoise_Type_GAUSSIAN_QUANTIZED;
  static inline bool Type_IsValid(int value) {
    return SensorNoise_Type_IsValid(value);
  }
  static const Type Type_MIN =
    SensorNoise_Type_Type_MIN;
  static const Type Type_MAX =
    SensorNoise_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    SensorNoise_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return SensorNoise_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return SensorNoise_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return SensorNoise_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // double mean = 3;
  void clear_mean();
  static const int kMeanFieldNumber = 3;
  double mean() const;
  void set_mean(double value);

  // double stddev = 4;
  void clear_stddev();
  static const int kStddevFieldNumber = 4;
  double stddev() const;
  void set_stddev(double value);

  // double bias_mean = 5;
  void clear_bias_mean();
  static const int kBiasMeanFieldNumber = 5;
  double bias_mean() const;
  void set_bias_mean(double value);

  // double bias_stddev = 6;
  void clear_bias_stddev();
  static const int kBiasStddevFieldNumber = 6;
  double bias_stddev() const;
  void set_bias_stddev(double value);

  // double precision = 7;
  void clear_precision();
  static const int kPrecisionFieldNumber = 7;
  double precision() const;
  void set_precision(double value);

  // double dynamic_bias_stddev = 8;
  void clear_dynamic_bias_stddev();
  static const int kDynamicBiasStddevFieldNumber = 8;
  double dynamic_bias_stddev() const;
  void set_dynamic_bias_stddev(double value);

  // double dynamic_bias_correlation_time = 9;
  void clear_dynamic_bias_correlation_time();
  static const int kDynamicBiasCorrelationTimeFieldNumber = 9;
  double dynamic_bias_correlation_time() const;
  void set_dynamic_bias_correlation_time(double value);

  // .gz.msgs.SensorNoise.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::gz::msgs::SensorNoise_Type type() const;
  void set_type(::gz::msgs::SensorNoise_Type value);

  // @@protoc_insertion_point(class_scope:gz.msgs.SensorNoise)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gz::msgs::Header* header_;
  double mean_;
  double stddev_;
  double bias_mean_;
  double bias_stddev_;
  double precision_;
  double dynamic_bias_stddev_;
  double dynamic_bias_correlation_time_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fsensor_5fnoise_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SensorNoise

// .gz.msgs.Header header = 1;
inline bool SensorNoise::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& SensorNoise::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& SensorNoise::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.SensorNoise.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* SensorNoise::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.SensorNoise.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* SensorNoise::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.SensorNoise.header)
  return header_;
}
inline void SensorNoise::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.SensorNoise.header)
}

// .gz.msgs.SensorNoise.Type type = 2;
inline void SensorNoise::clear_type() {
  type_ = 0;
}
inline ::gz::msgs::SensorNoise_Type SensorNoise::type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.SensorNoise.type)
  return static_cast< ::gz::msgs::SensorNoise_Type >(type_);
}
inline void SensorNoise::set_type(::gz::msgs::SensorNoise_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.SensorNoise.type)
}

// double mean = 3;
inline void SensorNoise::clear_mean() {
  mean_ = 0;
}
inline double SensorNoise::mean() const {
  // @@protoc_insertion_point(field_get:gz.msgs.SensorNoise.mean)
  return mean_;
}
inline void SensorNoise::set_mean(double value) {
  
  mean_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.SensorNoise.mean)
}

// double stddev = 4;
inline void SensorNoise::clear_stddev() {
  stddev_ = 0;
}
inline double SensorNoise::stddev() const {
  // @@protoc_insertion_point(field_get:gz.msgs.SensorNoise.stddev)
  return stddev_;
}
inline void SensorNoise::set_stddev(double value) {
  
  stddev_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.SensorNoise.stddev)
}

// double bias_mean = 5;
inline void SensorNoise::clear_bias_mean() {
  bias_mean_ = 0;
}
inline double SensorNoise::bias_mean() const {
  // @@protoc_insertion_point(field_get:gz.msgs.SensorNoise.bias_mean)
  return bias_mean_;
}
inline void SensorNoise::set_bias_mean(double value) {
  
  bias_mean_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.SensorNoise.bias_mean)
}

// double bias_stddev = 6;
inline void SensorNoise::clear_bias_stddev() {
  bias_stddev_ = 0;
}
inline double SensorNoise::bias_stddev() const {
  // @@protoc_insertion_point(field_get:gz.msgs.SensorNoise.bias_stddev)
  return bias_stddev_;
}
inline void SensorNoise::set_bias_stddev(double value) {
  
  bias_stddev_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.SensorNoise.bias_stddev)
}

// double precision = 7;
inline void SensorNoise::clear_precision() {
  precision_ = 0;
}
inline double SensorNoise::precision() const {
  // @@protoc_insertion_point(field_get:gz.msgs.SensorNoise.precision)
  return precision_;
}
inline void SensorNoise::set_precision(double value) {
  
  precision_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.SensorNoise.precision)
}

// double dynamic_bias_stddev = 8;
inline void SensorNoise::clear_dynamic_bias_stddev() {
  dynamic_bias_stddev_ = 0;
}
inline double SensorNoise::dynamic_bias_stddev() const {
  // @@protoc_insertion_point(field_get:gz.msgs.SensorNoise.dynamic_bias_stddev)
  return dynamic_bias_stddev_;
}
inline void SensorNoise::set_dynamic_bias_stddev(double value) {
  
  dynamic_bias_stddev_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.SensorNoise.dynamic_bias_stddev)
}

// double dynamic_bias_correlation_time = 9;
inline void SensorNoise::clear_dynamic_bias_correlation_time() {
  dynamic_bias_correlation_time_ = 0;
}
inline double SensorNoise::dynamic_bias_correlation_time() const {
  // @@protoc_insertion_point(field_get:gz.msgs.SensorNoise.dynamic_bias_correlation_time)
  return dynamic_bias_correlation_time_;
}
inline void SensorNoise::set_dynamic_bias_correlation_time(double value) {
  
  dynamic_bias_correlation_time_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.SensorNoise.dynamic_bias_correlation_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::msgs::SensorNoise_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::SensorNoise_Type>() {
  return ::gz::msgs::SensorNoise_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fsensor_5fnoise_2eproto
