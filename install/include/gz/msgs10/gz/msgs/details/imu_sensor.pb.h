// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/imu_sensor.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fimu_5fsensor_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fimu_5fsensor_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/sensor_noise.pb.h"
#include "gz/msgs/header.pb.h"
#include "gz/msgs/vector3d.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto
namespace gz {
namespace msgs {
class IMUSensor;
class IMUSensorDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern IMUSensorDefaultTypeInternal _IMUSensor_default_instance_;
class IMUSensor_AngularVelocity;
class IMUSensor_AngularVelocityDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern IMUSensor_AngularVelocityDefaultTypeInternal _IMUSensor_AngularVelocity_default_instance_;
class IMUSensor_LinearAcceleration;
class IMUSensor_LinearAccelerationDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern IMUSensor_LinearAccelerationDefaultTypeInternal _IMUSensor_LinearAcceleration_default_instance_;
class IMUSensor_OrientationReferenceFrame;
class IMUSensor_OrientationReferenceFrameDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern IMUSensor_OrientationReferenceFrameDefaultTypeInternal _IMUSensor_OrientationReferenceFrame_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::IMUSensor* Arena::CreateMaybeMessage<::gz::msgs::IMUSensor>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::IMUSensor_AngularVelocity* Arena::CreateMaybeMessage<::gz::msgs::IMUSensor_AngularVelocity>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::IMUSensor_LinearAcceleration* Arena::CreateMaybeMessage<::gz::msgs::IMUSensor_LinearAcceleration>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::IMUSensor_OrientationReferenceFrame* Arena::CreateMaybeMessage<::gz::msgs::IMUSensor_OrientationReferenceFrame>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE IMUSensor_AngularVelocity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.IMUSensor.AngularVelocity) */ {
 public:
  IMUSensor_AngularVelocity();
  virtual ~IMUSensor_AngularVelocity();

  IMUSensor_AngularVelocity(const IMUSensor_AngularVelocity& from);

  inline IMUSensor_AngularVelocity& operator=(const IMUSensor_AngularVelocity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMUSensor_AngularVelocity(IMUSensor_AngularVelocity&& from) noexcept
    : IMUSensor_AngularVelocity() {
    *this = ::std::move(from);
  }

  inline IMUSensor_AngularVelocity& operator=(IMUSensor_AngularVelocity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMUSensor_AngularVelocity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUSensor_AngularVelocity* internal_default_instance() {
    return reinterpret_cast<const IMUSensor_AngularVelocity*>(
               &_IMUSensor_AngularVelocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(IMUSensor_AngularVelocity* other);
  friend void swap(IMUSensor_AngularVelocity& a, IMUSensor_AngularVelocity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMUSensor_AngularVelocity* New() const final {
    return CreateMaybeMessage<IMUSensor_AngularVelocity>(NULL);
  }

  IMUSensor_AngularVelocity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMUSensor_AngularVelocity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IMUSensor_AngularVelocity& from);
  void MergeFrom(const IMUSensor_AngularVelocity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUSensor_AngularVelocity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gz.msgs.SensorNoise x_noise = 1;
  bool has_x_noise() const;
  void clear_x_noise();
  static const int kXNoiseFieldNumber = 1;
  private:
  const ::gz::msgs::SensorNoise& _internal_x_noise() const;
  public:
  const ::gz::msgs::SensorNoise& x_noise() const;
  ::gz::msgs::SensorNoise* release_x_noise();
  ::gz::msgs::SensorNoise* mutable_x_noise();
  void set_allocated_x_noise(::gz::msgs::SensorNoise* x_noise);

  // .gz.msgs.SensorNoise y_noise = 2;
  bool has_y_noise() const;
  void clear_y_noise();
  static const int kYNoiseFieldNumber = 2;
  private:
  const ::gz::msgs::SensorNoise& _internal_y_noise() const;
  public:
  const ::gz::msgs::SensorNoise& y_noise() const;
  ::gz::msgs::SensorNoise* release_y_noise();
  ::gz::msgs::SensorNoise* mutable_y_noise();
  void set_allocated_y_noise(::gz::msgs::SensorNoise* y_noise);

  // .gz.msgs.SensorNoise z_noise = 3;
  bool has_z_noise() const;
  void clear_z_noise();
  static const int kZNoiseFieldNumber = 3;
  private:
  const ::gz::msgs::SensorNoise& _internal_z_noise() const;
  public:
  const ::gz::msgs::SensorNoise& z_noise() const;
  ::gz::msgs::SensorNoise* release_z_noise();
  ::gz::msgs::SensorNoise* mutable_z_noise();
  void set_allocated_z_noise(::gz::msgs::SensorNoise* z_noise);

  // @@protoc_insertion_point(class_scope:gz.msgs.IMUSensor.AngularVelocity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gz::msgs::SensorNoise* x_noise_;
  ::gz::msgs::SensorNoise* y_noise_;
  ::gz::msgs::SensorNoise* z_noise_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE IMUSensor_LinearAcceleration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.IMUSensor.LinearAcceleration) */ {
 public:
  IMUSensor_LinearAcceleration();
  virtual ~IMUSensor_LinearAcceleration();

  IMUSensor_LinearAcceleration(const IMUSensor_LinearAcceleration& from);

  inline IMUSensor_LinearAcceleration& operator=(const IMUSensor_LinearAcceleration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMUSensor_LinearAcceleration(IMUSensor_LinearAcceleration&& from) noexcept
    : IMUSensor_LinearAcceleration() {
    *this = ::std::move(from);
  }

  inline IMUSensor_LinearAcceleration& operator=(IMUSensor_LinearAcceleration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMUSensor_LinearAcceleration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUSensor_LinearAcceleration* internal_default_instance() {
    return reinterpret_cast<const IMUSensor_LinearAcceleration*>(
               &_IMUSensor_LinearAcceleration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(IMUSensor_LinearAcceleration* other);
  friend void swap(IMUSensor_LinearAcceleration& a, IMUSensor_LinearAcceleration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMUSensor_LinearAcceleration* New() const final {
    return CreateMaybeMessage<IMUSensor_LinearAcceleration>(NULL);
  }

  IMUSensor_LinearAcceleration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMUSensor_LinearAcceleration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IMUSensor_LinearAcceleration& from);
  void MergeFrom(const IMUSensor_LinearAcceleration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUSensor_LinearAcceleration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gz.msgs.SensorNoise x_noise = 1;
  bool has_x_noise() const;
  void clear_x_noise();
  static const int kXNoiseFieldNumber = 1;
  private:
  const ::gz::msgs::SensorNoise& _internal_x_noise() const;
  public:
  const ::gz::msgs::SensorNoise& x_noise() const;
  ::gz::msgs::SensorNoise* release_x_noise();
  ::gz::msgs::SensorNoise* mutable_x_noise();
  void set_allocated_x_noise(::gz::msgs::SensorNoise* x_noise);

  // .gz.msgs.SensorNoise y_noise = 2;
  bool has_y_noise() const;
  void clear_y_noise();
  static const int kYNoiseFieldNumber = 2;
  private:
  const ::gz::msgs::SensorNoise& _internal_y_noise() const;
  public:
  const ::gz::msgs::SensorNoise& y_noise() const;
  ::gz::msgs::SensorNoise* release_y_noise();
  ::gz::msgs::SensorNoise* mutable_y_noise();
  void set_allocated_y_noise(::gz::msgs::SensorNoise* y_noise);

  // .gz.msgs.SensorNoise z_noise = 3;
  bool has_z_noise() const;
  void clear_z_noise();
  static const int kZNoiseFieldNumber = 3;
  private:
  const ::gz::msgs::SensorNoise& _internal_z_noise() const;
  public:
  const ::gz::msgs::SensorNoise& z_noise() const;
  ::gz::msgs::SensorNoise* release_z_noise();
  ::gz::msgs::SensorNoise* mutable_z_noise();
  void set_allocated_z_noise(::gz::msgs::SensorNoise* z_noise);

  // @@protoc_insertion_point(class_scope:gz.msgs.IMUSensor.LinearAcceleration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gz::msgs::SensorNoise* x_noise_;
  ::gz::msgs::SensorNoise* y_noise_;
  ::gz::msgs::SensorNoise* z_noise_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE IMUSensor_OrientationReferenceFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.IMUSensor.OrientationReferenceFrame) */ {
 public:
  IMUSensor_OrientationReferenceFrame();
  virtual ~IMUSensor_OrientationReferenceFrame();

  IMUSensor_OrientationReferenceFrame(const IMUSensor_OrientationReferenceFrame& from);

  inline IMUSensor_OrientationReferenceFrame& operator=(const IMUSensor_OrientationReferenceFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMUSensor_OrientationReferenceFrame(IMUSensor_OrientationReferenceFrame&& from) noexcept
    : IMUSensor_OrientationReferenceFrame() {
    *this = ::std::move(from);
  }

  inline IMUSensor_OrientationReferenceFrame& operator=(IMUSensor_OrientationReferenceFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMUSensor_OrientationReferenceFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUSensor_OrientationReferenceFrame* internal_default_instance() {
    return reinterpret_cast<const IMUSensor_OrientationReferenceFrame*>(
               &_IMUSensor_OrientationReferenceFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(IMUSensor_OrientationReferenceFrame* other);
  friend void swap(IMUSensor_OrientationReferenceFrame& a, IMUSensor_OrientationReferenceFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMUSensor_OrientationReferenceFrame* New() const final {
    return CreateMaybeMessage<IMUSensor_OrientationReferenceFrame>(NULL);
  }

  IMUSensor_OrientationReferenceFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMUSensor_OrientationReferenceFrame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IMUSensor_OrientationReferenceFrame& from);
  void MergeFrom(const IMUSensor_OrientationReferenceFrame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUSensor_OrientationReferenceFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string localization = 1;
  void clear_localization();
  static const int kLocalizationFieldNumber = 1;
  const ::std::string& localization() const;
  void set_localization(const ::std::string& value);
  #if LANG_CXX11
  void set_localization(::std::string&& value);
  #endif
  void set_localization(const char* value);
  void set_localization(const char* value, size_t size);
  ::std::string* mutable_localization();
  ::std::string* release_localization();
  void set_allocated_localization(::std::string* localization);

  // string custom_rpy_parent_frame = 3;
  void clear_custom_rpy_parent_frame();
  static const int kCustomRpyParentFrameFieldNumber = 3;
  const ::std::string& custom_rpy_parent_frame() const;
  void set_custom_rpy_parent_frame(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_rpy_parent_frame(::std::string&& value);
  #endif
  void set_custom_rpy_parent_frame(const char* value);
  void set_custom_rpy_parent_frame(const char* value, size_t size);
  ::std::string* mutable_custom_rpy_parent_frame();
  ::std::string* release_custom_rpy_parent_frame();
  void set_allocated_custom_rpy_parent_frame(::std::string* custom_rpy_parent_frame);

  // string gravity_dir_x_parent_frame = 5;
  void clear_gravity_dir_x_parent_frame();
  static const int kGravityDirXParentFrameFieldNumber = 5;
  const ::std::string& gravity_dir_x_parent_frame() const;
  void set_gravity_dir_x_parent_frame(const ::std::string& value);
  #if LANG_CXX11
  void set_gravity_dir_x_parent_frame(::std::string&& value);
  #endif
  void set_gravity_dir_x_parent_frame(const char* value);
  void set_gravity_dir_x_parent_frame(const char* value, size_t size);
  ::std::string* mutable_gravity_dir_x_parent_frame();
  ::std::string* release_gravity_dir_x_parent_frame();
  void set_allocated_gravity_dir_x_parent_frame(::std::string* gravity_dir_x_parent_frame);

  // .gz.msgs.Vector3d custom_rpy = 2;
  bool has_custom_rpy() const;
  void clear_custom_rpy();
  static const int kCustomRpyFieldNumber = 2;
  private:
  const ::gz::msgs::Vector3d& _internal_custom_rpy() const;
  public:
  const ::gz::msgs::Vector3d& custom_rpy() const;
  ::gz::msgs::Vector3d* release_custom_rpy();
  ::gz::msgs::Vector3d* mutable_custom_rpy();
  void set_allocated_custom_rpy(::gz::msgs::Vector3d* custom_rpy);

  // .gz.msgs.Vector3d gravity_dir_x = 4;
  bool has_gravity_dir_x() const;
  void clear_gravity_dir_x();
  static const int kGravityDirXFieldNumber = 4;
  private:
  const ::gz::msgs::Vector3d& _internal_gravity_dir_x() const;
  public:
  const ::gz::msgs::Vector3d& gravity_dir_x() const;
  ::gz::msgs::Vector3d* release_gravity_dir_x();
  ::gz::msgs::Vector3d* mutable_gravity_dir_x();
  void set_allocated_gravity_dir_x(::gz::msgs::Vector3d* gravity_dir_x);

  // @@protoc_insertion_point(class_scope:gz.msgs.IMUSensor.OrientationReferenceFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr localization_;
  ::google::protobuf::internal::ArenaStringPtr custom_rpy_parent_frame_;
  ::google::protobuf::internal::ArenaStringPtr gravity_dir_x_parent_frame_;
  ::gz::msgs::Vector3d* custom_rpy_;
  ::gz::msgs::Vector3d* gravity_dir_x_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE IMUSensor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.IMUSensor) */ {
 public:
  IMUSensor();
  virtual ~IMUSensor();

  IMUSensor(const IMUSensor& from);

  inline IMUSensor& operator=(const IMUSensor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMUSensor(IMUSensor&& from) noexcept
    : IMUSensor() {
    *this = ::std::move(from);
  }

  inline IMUSensor& operator=(IMUSensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMUSensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUSensor* internal_default_instance() {
    return reinterpret_cast<const IMUSensor*>(
               &_IMUSensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(IMUSensor* other);
  friend void swap(IMUSensor& a, IMUSensor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMUSensor* New() const final {
    return CreateMaybeMessage<IMUSensor>(NULL);
  }

  IMUSensor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMUSensor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IMUSensor& from);
  void MergeFrom(const IMUSensor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUSensor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef IMUSensor_AngularVelocity AngularVelocity;
  typedef IMUSensor_LinearAcceleration LinearAcceleration;
  typedef IMUSensor_OrientationReferenceFrame OrientationReferenceFrame;

  // accessors -------------------------------------------------------

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.IMUSensor.AngularVelocity angular_velocity = 2;
  bool has_angular_velocity() const;
  void clear_angular_velocity();
  static const int kAngularVelocityFieldNumber = 2;
  private:
  const ::gz::msgs::IMUSensor_AngularVelocity& _internal_angular_velocity() const;
  public:
  const ::gz::msgs::IMUSensor_AngularVelocity& angular_velocity() const;
  ::gz::msgs::IMUSensor_AngularVelocity* release_angular_velocity();
  ::gz::msgs::IMUSensor_AngularVelocity* mutable_angular_velocity();
  void set_allocated_angular_velocity(::gz::msgs::IMUSensor_AngularVelocity* angular_velocity);

  // .gz.msgs.IMUSensor.LinearAcceleration linear_acceleration = 3;
  bool has_linear_acceleration() const;
  void clear_linear_acceleration();
  static const int kLinearAccelerationFieldNumber = 3;
  private:
  const ::gz::msgs::IMUSensor_LinearAcceleration& _internal_linear_acceleration() const;
  public:
  const ::gz::msgs::IMUSensor_LinearAcceleration& linear_acceleration() const;
  ::gz::msgs::IMUSensor_LinearAcceleration* release_linear_acceleration();
  ::gz::msgs::IMUSensor_LinearAcceleration* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::gz::msgs::IMUSensor_LinearAcceleration* linear_acceleration);

  // .gz.msgs.IMUSensor.OrientationReferenceFrame orientation_ref_frame = 4;
  bool has_orientation_ref_frame() const;
  void clear_orientation_ref_frame();
  static const int kOrientationRefFrameFieldNumber = 4;
  private:
  const ::gz::msgs::IMUSensor_OrientationReferenceFrame& _internal_orientation_ref_frame() const;
  public:
  const ::gz::msgs::IMUSensor_OrientationReferenceFrame& orientation_ref_frame() const;
  ::gz::msgs::IMUSensor_OrientationReferenceFrame* release_orientation_ref_frame();
  ::gz::msgs::IMUSensor_OrientationReferenceFrame* mutable_orientation_ref_frame();
  void set_allocated_orientation_ref_frame(::gz::msgs::IMUSensor_OrientationReferenceFrame* orientation_ref_frame);

  // @@protoc_insertion_point(class_scope:gz.msgs.IMUSensor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::IMUSensor_AngularVelocity* angular_velocity_;
  ::gz::msgs::IMUSensor_LinearAcceleration* linear_acceleration_;
  ::gz::msgs::IMUSensor_OrientationReferenceFrame* orientation_ref_frame_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMUSensor_AngularVelocity

// .gz.msgs.SensorNoise x_noise = 1;
inline bool IMUSensor_AngularVelocity::has_x_noise() const {
  return this != internal_default_instance() && x_noise_ != NULL;
}
inline const ::gz::msgs::SensorNoise& IMUSensor_AngularVelocity::_internal_x_noise() const {
  return *x_noise_;
}
inline const ::gz::msgs::SensorNoise& IMUSensor_AngularVelocity::x_noise() const {
  const ::gz::msgs::SensorNoise* p = x_noise_;
  // @@protoc_insertion_point(field_get:gz.msgs.IMUSensor.AngularVelocity.x_noise)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::SensorNoise*>(
      &::gz::msgs::_SensorNoise_default_instance_);
}
inline ::gz::msgs::SensorNoise* IMUSensor_AngularVelocity::release_x_noise() {
  // @@protoc_insertion_point(field_release:gz.msgs.IMUSensor.AngularVelocity.x_noise)
  
  ::gz::msgs::SensorNoise* temp = x_noise_;
  x_noise_ = NULL;
  return temp;
}
inline ::gz::msgs::SensorNoise* IMUSensor_AngularVelocity::mutable_x_noise() {
  
  if (x_noise_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::SensorNoise>(GetArenaNoVirtual());
    x_noise_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.IMUSensor.AngularVelocity.x_noise)
  return x_noise_;
}
inline void IMUSensor_AngularVelocity::set_allocated_x_noise(::gz::msgs::SensorNoise* x_noise) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(x_noise_);
  }
  if (x_noise) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      x_noise = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, x_noise, submessage_arena);
    }
    
  } else {
    
  }
  x_noise_ = x_noise;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.IMUSensor.AngularVelocity.x_noise)
}

// .gz.msgs.SensorNoise y_noise = 2;
inline bool IMUSensor_AngularVelocity::has_y_noise() const {
  return this != internal_default_instance() && y_noise_ != NULL;
}
inline const ::gz::msgs::SensorNoise& IMUSensor_AngularVelocity::_internal_y_noise() const {
  return *y_noise_;
}
inline const ::gz::msgs::SensorNoise& IMUSensor_AngularVelocity::y_noise() const {
  const ::gz::msgs::SensorNoise* p = y_noise_;
  // @@protoc_insertion_point(field_get:gz.msgs.IMUSensor.AngularVelocity.y_noise)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::SensorNoise*>(
      &::gz::msgs::_SensorNoise_default_instance_);
}
inline ::gz::msgs::SensorNoise* IMUSensor_AngularVelocity::release_y_noise() {
  // @@protoc_insertion_point(field_release:gz.msgs.IMUSensor.AngularVelocity.y_noise)
  
  ::gz::msgs::SensorNoise* temp = y_noise_;
  y_noise_ = NULL;
  return temp;
}
inline ::gz::msgs::SensorNoise* IMUSensor_AngularVelocity::mutable_y_noise() {
  
  if (y_noise_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::SensorNoise>(GetArenaNoVirtual());
    y_noise_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.IMUSensor.AngularVelocity.y_noise)
  return y_noise_;
}
inline void IMUSensor_AngularVelocity::set_allocated_y_noise(::gz::msgs::SensorNoise* y_noise) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(y_noise_);
  }
  if (y_noise) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      y_noise = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, y_noise, submessage_arena);
    }
    
  } else {
    
  }
  y_noise_ = y_noise;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.IMUSensor.AngularVelocity.y_noise)
}

// .gz.msgs.SensorNoise z_noise = 3;
inline bool IMUSensor_AngularVelocity::has_z_noise() const {
  return this != internal_default_instance() && z_noise_ != NULL;
}
inline const ::gz::msgs::SensorNoise& IMUSensor_AngularVelocity::_internal_z_noise() const {
  return *z_noise_;
}
inline const ::gz::msgs::SensorNoise& IMUSensor_AngularVelocity::z_noise() const {
  const ::gz::msgs::SensorNoise* p = z_noise_;
  // @@protoc_insertion_point(field_get:gz.msgs.IMUSensor.AngularVelocity.z_noise)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::SensorNoise*>(
      &::gz::msgs::_SensorNoise_default_instance_);
}
inline ::gz::msgs::SensorNoise* IMUSensor_AngularVelocity::release_z_noise() {
  // @@protoc_insertion_point(field_release:gz.msgs.IMUSensor.AngularVelocity.z_noise)
  
  ::gz::msgs::SensorNoise* temp = z_noise_;
  z_noise_ = NULL;
  return temp;
}
inline ::gz::msgs::SensorNoise* IMUSensor_AngularVelocity::mutable_z_noise() {
  
  if (z_noise_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::SensorNoise>(GetArenaNoVirtual());
    z_noise_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.IMUSensor.AngularVelocity.z_noise)
  return z_noise_;
}
inline void IMUSensor_AngularVelocity::set_allocated_z_noise(::gz::msgs::SensorNoise* z_noise) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(z_noise_);
  }
  if (z_noise) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      z_noise = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, z_noise, submessage_arena);
    }
    
  } else {
    
  }
  z_noise_ = z_noise;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.IMUSensor.AngularVelocity.z_noise)
}

// -------------------------------------------------------------------

// IMUSensor_LinearAcceleration

// .gz.msgs.SensorNoise x_noise = 1;
inline bool IMUSensor_LinearAcceleration::has_x_noise() const {
  return this != internal_default_instance() && x_noise_ != NULL;
}
inline const ::gz::msgs::SensorNoise& IMUSensor_LinearAcceleration::_internal_x_noise() const {
  return *x_noise_;
}
inline const ::gz::msgs::SensorNoise& IMUSensor_LinearAcceleration::x_noise() const {
  const ::gz::msgs::SensorNoise* p = x_noise_;
  // @@protoc_insertion_point(field_get:gz.msgs.IMUSensor.LinearAcceleration.x_noise)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::SensorNoise*>(
      &::gz::msgs::_SensorNoise_default_instance_);
}
inline ::gz::msgs::SensorNoise* IMUSensor_LinearAcceleration::release_x_noise() {
  // @@protoc_insertion_point(field_release:gz.msgs.IMUSensor.LinearAcceleration.x_noise)
  
  ::gz::msgs::SensorNoise* temp = x_noise_;
  x_noise_ = NULL;
  return temp;
}
inline ::gz::msgs::SensorNoise* IMUSensor_LinearAcceleration::mutable_x_noise() {
  
  if (x_noise_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::SensorNoise>(GetArenaNoVirtual());
    x_noise_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.IMUSensor.LinearAcceleration.x_noise)
  return x_noise_;
}
inline void IMUSensor_LinearAcceleration::set_allocated_x_noise(::gz::msgs::SensorNoise* x_noise) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(x_noise_);
  }
  if (x_noise) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      x_noise = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, x_noise, submessage_arena);
    }
    
  } else {
    
  }
  x_noise_ = x_noise;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.IMUSensor.LinearAcceleration.x_noise)
}

// .gz.msgs.SensorNoise y_noise = 2;
inline bool IMUSensor_LinearAcceleration::has_y_noise() const {
  return this != internal_default_instance() && y_noise_ != NULL;
}
inline const ::gz::msgs::SensorNoise& IMUSensor_LinearAcceleration::_internal_y_noise() const {
  return *y_noise_;
}
inline const ::gz::msgs::SensorNoise& IMUSensor_LinearAcceleration::y_noise() const {
  const ::gz::msgs::SensorNoise* p = y_noise_;
  // @@protoc_insertion_point(field_get:gz.msgs.IMUSensor.LinearAcceleration.y_noise)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::SensorNoise*>(
      &::gz::msgs::_SensorNoise_default_instance_);
}
inline ::gz::msgs::SensorNoise* IMUSensor_LinearAcceleration::release_y_noise() {
  // @@protoc_insertion_point(field_release:gz.msgs.IMUSensor.LinearAcceleration.y_noise)
  
  ::gz::msgs::SensorNoise* temp = y_noise_;
  y_noise_ = NULL;
  return temp;
}
inline ::gz::msgs::SensorNoise* IMUSensor_LinearAcceleration::mutable_y_noise() {
  
  if (y_noise_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::SensorNoise>(GetArenaNoVirtual());
    y_noise_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.IMUSensor.LinearAcceleration.y_noise)
  return y_noise_;
}
inline void IMUSensor_LinearAcceleration::set_allocated_y_noise(::gz::msgs::SensorNoise* y_noise) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(y_noise_);
  }
  if (y_noise) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      y_noise = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, y_noise, submessage_arena);
    }
    
  } else {
    
  }
  y_noise_ = y_noise;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.IMUSensor.LinearAcceleration.y_noise)
}

// .gz.msgs.SensorNoise z_noise = 3;
inline bool IMUSensor_LinearAcceleration::has_z_noise() const {
  return this != internal_default_instance() && z_noise_ != NULL;
}
inline const ::gz::msgs::SensorNoise& IMUSensor_LinearAcceleration::_internal_z_noise() const {
  return *z_noise_;
}
inline const ::gz::msgs::SensorNoise& IMUSensor_LinearAcceleration::z_noise() const {
  const ::gz::msgs::SensorNoise* p = z_noise_;
  // @@protoc_insertion_point(field_get:gz.msgs.IMUSensor.LinearAcceleration.z_noise)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::SensorNoise*>(
      &::gz::msgs::_SensorNoise_default_instance_);
}
inline ::gz::msgs::SensorNoise* IMUSensor_LinearAcceleration::release_z_noise() {
  // @@protoc_insertion_point(field_release:gz.msgs.IMUSensor.LinearAcceleration.z_noise)
  
  ::gz::msgs::SensorNoise* temp = z_noise_;
  z_noise_ = NULL;
  return temp;
}
inline ::gz::msgs::SensorNoise* IMUSensor_LinearAcceleration::mutable_z_noise() {
  
  if (z_noise_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::SensorNoise>(GetArenaNoVirtual());
    z_noise_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.IMUSensor.LinearAcceleration.z_noise)
  return z_noise_;
}
inline void IMUSensor_LinearAcceleration::set_allocated_z_noise(::gz::msgs::SensorNoise* z_noise) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(z_noise_);
  }
  if (z_noise) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      z_noise = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, z_noise, submessage_arena);
    }
    
  } else {
    
  }
  z_noise_ = z_noise;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.IMUSensor.LinearAcceleration.z_noise)
}

// -------------------------------------------------------------------

// IMUSensor_OrientationReferenceFrame

// string localization = 1;
inline void IMUSensor_OrientationReferenceFrame::clear_localization() {
  localization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMUSensor_OrientationReferenceFrame::localization() const {
  // @@protoc_insertion_point(field_get:gz.msgs.IMUSensor.OrientationReferenceFrame.localization)
  return localization_.GetNoArena();
}
inline void IMUSensor_OrientationReferenceFrame::set_localization(const ::std::string& value) {
  
  localization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.IMUSensor.OrientationReferenceFrame.localization)
}
#if LANG_CXX11
inline void IMUSensor_OrientationReferenceFrame::set_localization(::std::string&& value) {
  
  localization_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.IMUSensor.OrientationReferenceFrame.localization)
}
#endif
inline void IMUSensor_OrientationReferenceFrame::set_localization(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  localization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.IMUSensor.OrientationReferenceFrame.localization)
}
inline void IMUSensor_OrientationReferenceFrame::set_localization(const char* value, size_t size) {
  
  localization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.IMUSensor.OrientationReferenceFrame.localization)
}
inline ::std::string* IMUSensor_OrientationReferenceFrame::mutable_localization() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.IMUSensor.OrientationReferenceFrame.localization)
  return localization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMUSensor_OrientationReferenceFrame::release_localization() {
  // @@protoc_insertion_point(field_release:gz.msgs.IMUSensor.OrientationReferenceFrame.localization)
  
  return localization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMUSensor_OrientationReferenceFrame::set_allocated_localization(::std::string* localization) {
  if (localization != NULL) {
    
  } else {
    
  }
  localization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), localization);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.IMUSensor.OrientationReferenceFrame.localization)
}

// .gz.msgs.Vector3d custom_rpy = 2;
inline bool IMUSensor_OrientationReferenceFrame::has_custom_rpy() const {
  return this != internal_default_instance() && custom_rpy_ != NULL;
}
inline const ::gz::msgs::Vector3d& IMUSensor_OrientationReferenceFrame::_internal_custom_rpy() const {
  return *custom_rpy_;
}
inline const ::gz::msgs::Vector3d& IMUSensor_OrientationReferenceFrame::custom_rpy() const {
  const ::gz::msgs::Vector3d* p = custom_rpy_;
  // @@protoc_insertion_point(field_get:gz.msgs.IMUSensor.OrientationReferenceFrame.custom_rpy)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Vector3d*>(
      &::gz::msgs::_Vector3d_default_instance_);
}
inline ::gz::msgs::Vector3d* IMUSensor_OrientationReferenceFrame::release_custom_rpy() {
  // @@protoc_insertion_point(field_release:gz.msgs.IMUSensor.OrientationReferenceFrame.custom_rpy)
  
  ::gz::msgs::Vector3d* temp = custom_rpy_;
  custom_rpy_ = NULL;
  return temp;
}
inline ::gz::msgs::Vector3d* IMUSensor_OrientationReferenceFrame::mutable_custom_rpy() {
  
  if (custom_rpy_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Vector3d>(GetArenaNoVirtual());
    custom_rpy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.IMUSensor.OrientationReferenceFrame.custom_rpy)
  return custom_rpy_;
}
inline void IMUSensor_OrientationReferenceFrame::set_allocated_custom_rpy(::gz::msgs::Vector3d* custom_rpy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(custom_rpy_);
  }
  if (custom_rpy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      custom_rpy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom_rpy, submessage_arena);
    }
    
  } else {
    
  }
  custom_rpy_ = custom_rpy;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.IMUSensor.OrientationReferenceFrame.custom_rpy)
}

// string custom_rpy_parent_frame = 3;
inline void IMUSensor_OrientationReferenceFrame::clear_custom_rpy_parent_frame() {
  custom_rpy_parent_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMUSensor_OrientationReferenceFrame::custom_rpy_parent_frame() const {
  // @@protoc_insertion_point(field_get:gz.msgs.IMUSensor.OrientationReferenceFrame.custom_rpy_parent_frame)
  return custom_rpy_parent_frame_.GetNoArena();
}
inline void IMUSensor_OrientationReferenceFrame::set_custom_rpy_parent_frame(const ::std::string& value) {
  
  custom_rpy_parent_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.IMUSensor.OrientationReferenceFrame.custom_rpy_parent_frame)
}
#if LANG_CXX11
inline void IMUSensor_OrientationReferenceFrame::set_custom_rpy_parent_frame(::std::string&& value) {
  
  custom_rpy_parent_frame_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.IMUSensor.OrientationReferenceFrame.custom_rpy_parent_frame)
}
#endif
inline void IMUSensor_OrientationReferenceFrame::set_custom_rpy_parent_frame(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  custom_rpy_parent_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.IMUSensor.OrientationReferenceFrame.custom_rpy_parent_frame)
}
inline void IMUSensor_OrientationReferenceFrame::set_custom_rpy_parent_frame(const char* value, size_t size) {
  
  custom_rpy_parent_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.IMUSensor.OrientationReferenceFrame.custom_rpy_parent_frame)
}
inline ::std::string* IMUSensor_OrientationReferenceFrame::mutable_custom_rpy_parent_frame() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.IMUSensor.OrientationReferenceFrame.custom_rpy_parent_frame)
  return custom_rpy_parent_frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMUSensor_OrientationReferenceFrame::release_custom_rpy_parent_frame() {
  // @@protoc_insertion_point(field_release:gz.msgs.IMUSensor.OrientationReferenceFrame.custom_rpy_parent_frame)
  
  return custom_rpy_parent_frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMUSensor_OrientationReferenceFrame::set_allocated_custom_rpy_parent_frame(::std::string* custom_rpy_parent_frame) {
  if (custom_rpy_parent_frame != NULL) {
    
  } else {
    
  }
  custom_rpy_parent_frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_rpy_parent_frame);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.IMUSensor.OrientationReferenceFrame.custom_rpy_parent_frame)
}

// .gz.msgs.Vector3d gravity_dir_x = 4;
inline bool IMUSensor_OrientationReferenceFrame::has_gravity_dir_x() const {
  return this != internal_default_instance() && gravity_dir_x_ != NULL;
}
inline const ::gz::msgs::Vector3d& IMUSensor_OrientationReferenceFrame::_internal_gravity_dir_x() const {
  return *gravity_dir_x_;
}
inline const ::gz::msgs::Vector3d& IMUSensor_OrientationReferenceFrame::gravity_dir_x() const {
  const ::gz::msgs::Vector3d* p = gravity_dir_x_;
  // @@protoc_insertion_point(field_get:gz.msgs.IMUSensor.OrientationReferenceFrame.gravity_dir_x)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Vector3d*>(
      &::gz::msgs::_Vector3d_default_instance_);
}
inline ::gz::msgs::Vector3d* IMUSensor_OrientationReferenceFrame::release_gravity_dir_x() {
  // @@protoc_insertion_point(field_release:gz.msgs.IMUSensor.OrientationReferenceFrame.gravity_dir_x)
  
  ::gz::msgs::Vector3d* temp = gravity_dir_x_;
  gravity_dir_x_ = NULL;
  return temp;
}
inline ::gz::msgs::Vector3d* IMUSensor_OrientationReferenceFrame::mutable_gravity_dir_x() {
  
  if (gravity_dir_x_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Vector3d>(GetArenaNoVirtual());
    gravity_dir_x_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.IMUSensor.OrientationReferenceFrame.gravity_dir_x)
  return gravity_dir_x_;
}
inline void IMUSensor_OrientationReferenceFrame::set_allocated_gravity_dir_x(::gz::msgs::Vector3d* gravity_dir_x) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(gravity_dir_x_);
  }
  if (gravity_dir_x) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gravity_dir_x = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gravity_dir_x, submessage_arena);
    }
    
  } else {
    
  }
  gravity_dir_x_ = gravity_dir_x;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.IMUSensor.OrientationReferenceFrame.gravity_dir_x)
}

// string gravity_dir_x_parent_frame = 5;
inline void IMUSensor_OrientationReferenceFrame::clear_gravity_dir_x_parent_frame() {
  gravity_dir_x_parent_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMUSensor_OrientationReferenceFrame::gravity_dir_x_parent_frame() const {
  // @@protoc_insertion_point(field_get:gz.msgs.IMUSensor.OrientationReferenceFrame.gravity_dir_x_parent_frame)
  return gravity_dir_x_parent_frame_.GetNoArena();
}
inline void IMUSensor_OrientationReferenceFrame::set_gravity_dir_x_parent_frame(const ::std::string& value) {
  
  gravity_dir_x_parent_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.IMUSensor.OrientationReferenceFrame.gravity_dir_x_parent_frame)
}
#if LANG_CXX11
inline void IMUSensor_OrientationReferenceFrame::set_gravity_dir_x_parent_frame(::std::string&& value) {
  
  gravity_dir_x_parent_frame_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.IMUSensor.OrientationReferenceFrame.gravity_dir_x_parent_frame)
}
#endif
inline void IMUSensor_OrientationReferenceFrame::set_gravity_dir_x_parent_frame(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gravity_dir_x_parent_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.IMUSensor.OrientationReferenceFrame.gravity_dir_x_parent_frame)
}
inline void IMUSensor_OrientationReferenceFrame::set_gravity_dir_x_parent_frame(const char* value, size_t size) {
  
  gravity_dir_x_parent_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.IMUSensor.OrientationReferenceFrame.gravity_dir_x_parent_frame)
}
inline ::std::string* IMUSensor_OrientationReferenceFrame::mutable_gravity_dir_x_parent_frame() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.IMUSensor.OrientationReferenceFrame.gravity_dir_x_parent_frame)
  return gravity_dir_x_parent_frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMUSensor_OrientationReferenceFrame::release_gravity_dir_x_parent_frame() {
  // @@protoc_insertion_point(field_release:gz.msgs.IMUSensor.OrientationReferenceFrame.gravity_dir_x_parent_frame)
  
  return gravity_dir_x_parent_frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMUSensor_OrientationReferenceFrame::set_allocated_gravity_dir_x_parent_frame(::std::string* gravity_dir_x_parent_frame) {
  if (gravity_dir_x_parent_frame != NULL) {
    
  } else {
    
  }
  gravity_dir_x_parent_frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gravity_dir_x_parent_frame);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.IMUSensor.OrientationReferenceFrame.gravity_dir_x_parent_frame)
}

// -------------------------------------------------------------------

// IMUSensor

// .gz.msgs.Header header = 1;
inline bool IMUSensor::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& IMUSensor::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& IMUSensor::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.IMUSensor.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* IMUSensor::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.IMUSensor.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* IMUSensor::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.IMUSensor.header)
  return header_;
}
inline void IMUSensor::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.IMUSensor.header)
}

// .gz.msgs.IMUSensor.AngularVelocity angular_velocity = 2;
inline bool IMUSensor::has_angular_velocity() const {
  return this != internal_default_instance() && angular_velocity_ != NULL;
}
inline void IMUSensor::clear_angular_velocity() {
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) {
    delete angular_velocity_;
  }
  angular_velocity_ = NULL;
}
inline const ::gz::msgs::IMUSensor_AngularVelocity& IMUSensor::_internal_angular_velocity() const {
  return *angular_velocity_;
}
inline const ::gz::msgs::IMUSensor_AngularVelocity& IMUSensor::angular_velocity() const {
  const ::gz::msgs::IMUSensor_AngularVelocity* p = angular_velocity_;
  // @@protoc_insertion_point(field_get:gz.msgs.IMUSensor.angular_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::IMUSensor_AngularVelocity*>(
      &::gz::msgs::_IMUSensor_AngularVelocity_default_instance_);
}
inline ::gz::msgs::IMUSensor_AngularVelocity* IMUSensor::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:gz.msgs.IMUSensor.angular_velocity)
  
  ::gz::msgs::IMUSensor_AngularVelocity* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
inline ::gz::msgs::IMUSensor_AngularVelocity* IMUSensor::mutable_angular_velocity() {
  
  if (angular_velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::IMUSensor_AngularVelocity>(GetArenaNoVirtual());
    angular_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.IMUSensor.angular_velocity)
  return angular_velocity_;
}
inline void IMUSensor::set_allocated_angular_velocity(::gz::msgs::IMUSensor_AngularVelocity* angular_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete angular_velocity_;
  }
  if (angular_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      angular_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.IMUSensor.angular_velocity)
}

// .gz.msgs.IMUSensor.LinearAcceleration linear_acceleration = 3;
inline bool IMUSensor::has_linear_acceleration() const {
  return this != internal_default_instance() && linear_acceleration_ != NULL;
}
inline void IMUSensor::clear_linear_acceleration() {
  if (GetArenaNoVirtual() == NULL && linear_acceleration_ != NULL) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = NULL;
}
inline const ::gz::msgs::IMUSensor_LinearAcceleration& IMUSensor::_internal_linear_acceleration() const {
  return *linear_acceleration_;
}
inline const ::gz::msgs::IMUSensor_LinearAcceleration& IMUSensor::linear_acceleration() const {
  const ::gz::msgs::IMUSensor_LinearAcceleration* p = linear_acceleration_;
  // @@protoc_insertion_point(field_get:gz.msgs.IMUSensor.linear_acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::IMUSensor_LinearAcceleration*>(
      &::gz::msgs::_IMUSensor_LinearAcceleration_default_instance_);
}
inline ::gz::msgs::IMUSensor_LinearAcceleration* IMUSensor::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:gz.msgs.IMUSensor.linear_acceleration)
  
  ::gz::msgs::IMUSensor_LinearAcceleration* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
inline ::gz::msgs::IMUSensor_LinearAcceleration* IMUSensor::mutable_linear_acceleration() {
  
  if (linear_acceleration_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::IMUSensor_LinearAcceleration>(GetArenaNoVirtual());
    linear_acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.IMUSensor.linear_acceleration)
  return linear_acceleration_;
}
inline void IMUSensor::set_allocated_linear_acceleration(::gz::msgs::IMUSensor_LinearAcceleration* linear_acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete linear_acceleration_;
  }
  if (linear_acceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear_acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  linear_acceleration_ = linear_acceleration;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.IMUSensor.linear_acceleration)
}

// .gz.msgs.IMUSensor.OrientationReferenceFrame orientation_ref_frame = 4;
inline bool IMUSensor::has_orientation_ref_frame() const {
  return this != internal_default_instance() && orientation_ref_frame_ != NULL;
}
inline void IMUSensor::clear_orientation_ref_frame() {
  if (GetArenaNoVirtual() == NULL && orientation_ref_frame_ != NULL) {
    delete orientation_ref_frame_;
  }
  orientation_ref_frame_ = NULL;
}
inline const ::gz::msgs::IMUSensor_OrientationReferenceFrame& IMUSensor::_internal_orientation_ref_frame() const {
  return *orientation_ref_frame_;
}
inline const ::gz::msgs::IMUSensor_OrientationReferenceFrame& IMUSensor::orientation_ref_frame() const {
  const ::gz::msgs::IMUSensor_OrientationReferenceFrame* p = orientation_ref_frame_;
  // @@protoc_insertion_point(field_get:gz.msgs.IMUSensor.orientation_ref_frame)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::IMUSensor_OrientationReferenceFrame*>(
      &::gz::msgs::_IMUSensor_OrientationReferenceFrame_default_instance_);
}
inline ::gz::msgs::IMUSensor_OrientationReferenceFrame* IMUSensor::release_orientation_ref_frame() {
  // @@protoc_insertion_point(field_release:gz.msgs.IMUSensor.orientation_ref_frame)
  
  ::gz::msgs::IMUSensor_OrientationReferenceFrame* temp = orientation_ref_frame_;
  orientation_ref_frame_ = NULL;
  return temp;
}
inline ::gz::msgs::IMUSensor_OrientationReferenceFrame* IMUSensor::mutable_orientation_ref_frame() {
  
  if (orientation_ref_frame_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::IMUSensor_OrientationReferenceFrame>(GetArenaNoVirtual());
    orientation_ref_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.IMUSensor.orientation_ref_frame)
  return orientation_ref_frame_;
}
inline void IMUSensor::set_allocated_orientation_ref_frame(::gz::msgs::IMUSensor_OrientationReferenceFrame* orientation_ref_frame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete orientation_ref_frame_;
  }
  if (orientation_ref_frame) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      orientation_ref_frame = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation_ref_frame, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ref_frame_ = orientation_ref_frame;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.IMUSensor.orientation_ref_frame)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fimu_5fsensor_2eproto
