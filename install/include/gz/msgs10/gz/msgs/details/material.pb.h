// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/material.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fmaterial_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fmaterial_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/color.pb.h"
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fmaterial_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fmaterial_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fmaterial_2eproto
namespace gz {
namespace msgs {
class Material;
class MaterialDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern MaterialDefaultTypeInternal _Material_default_instance_;
class Material_PBR;
class Material_PBRDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern Material_PBRDefaultTypeInternal _Material_PBR_default_instance_;
class Material_Script;
class Material_ScriptDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern Material_ScriptDefaultTypeInternal _Material_Script_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Material* Arena::CreateMaybeMessage<::gz::msgs::Material>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Material_PBR* Arena::CreateMaybeMessage<::gz::msgs::Material_PBR>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Material_Script* Arena::CreateMaybeMessage<::gz::msgs::Material_Script>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

enum Material_PBR_WorkflowType {
  Material_PBR_WorkflowType_NONE = 0,
  Material_PBR_WorkflowType_METAL = 1,
  Material_PBR_WorkflowType_SPECULAR = 2,
  Material_PBR_WorkflowType_Material_PBR_WorkflowType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Material_PBR_WorkflowType_Material_PBR_WorkflowType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool Material_PBR_WorkflowType_IsValid(int value);
const Material_PBR_WorkflowType Material_PBR_WorkflowType_WorkflowType_MIN = Material_PBR_WorkflowType_NONE;
const Material_PBR_WorkflowType Material_PBR_WorkflowType_WorkflowType_MAX = Material_PBR_WorkflowType_SPECULAR;
const int Material_PBR_WorkflowType_WorkflowType_ARRAYSIZE = Material_PBR_WorkflowType_WorkflowType_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* Material_PBR_WorkflowType_descriptor();
inline const ::std::string& Material_PBR_WorkflowType_Name(Material_PBR_WorkflowType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Material_PBR_WorkflowType_descriptor(), value);
}
inline bool Material_PBR_WorkflowType_Parse(
    const ::std::string& name, Material_PBR_WorkflowType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Material_PBR_WorkflowType>(
    Material_PBR_WorkflowType_descriptor(), name, value);
}
enum Material_ShaderType {
  Material_ShaderType_VERTEX = 0,
  Material_ShaderType_PIXEL = 1,
  Material_ShaderType_NORMAL_MAP_OBJECT_SPACE = 2,
  Material_ShaderType_NORMAL_MAP_TANGENT_SPACE = 3,
  Material_ShaderType_Material_ShaderType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Material_ShaderType_Material_ShaderType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool Material_ShaderType_IsValid(int value);
const Material_ShaderType Material_ShaderType_ShaderType_MIN = Material_ShaderType_VERTEX;
const Material_ShaderType Material_ShaderType_ShaderType_MAX = Material_ShaderType_NORMAL_MAP_TANGENT_SPACE;
const int Material_ShaderType_ShaderType_ARRAYSIZE = Material_ShaderType_ShaderType_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* Material_ShaderType_descriptor();
inline const ::std::string& Material_ShaderType_Name(Material_ShaderType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Material_ShaderType_descriptor(), value);
}
inline bool Material_ShaderType_Parse(
    const ::std::string& name, Material_ShaderType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Material_ShaderType>(
    Material_ShaderType_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE Material_Script : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Material.Script) */ {
 public:
  Material_Script();
  virtual ~Material_Script();

  Material_Script(const Material_Script& from);

  inline Material_Script& operator=(const Material_Script& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Material_Script(Material_Script&& from) noexcept
    : Material_Script() {
    *this = ::std::move(from);
  }

  inline Material_Script& operator=(Material_Script&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Material_Script& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Material_Script* internal_default_instance() {
    return reinterpret_cast<const Material_Script*>(
               &_Material_Script_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Material_Script* other);
  friend void swap(Material_Script& a, Material_Script& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Material_Script* New() const final {
    return CreateMaybeMessage<Material_Script>(NULL);
  }

  Material_Script* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Material_Script>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Material_Script& from);
  void MergeFrom(const Material_Script& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Material_Script* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string uri = 1;
  int uri_size() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri(int index) const;
  ::std::string* mutable_uri(int index);
  void set_uri(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_uri(int index, ::std::string&& value);
  #endif
  void set_uri(int index, const char* value);
  void set_uri(int index, const char* value, size_t size);
  ::std::string* add_uri();
  void add_uri(const ::std::string& value);
  #if LANG_CXX11
  void add_uri(::std::string&& value);
  #endif
  void add_uri(const char* value);
  void add_uri(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& uri() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_uri();

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:gz.msgs.Material.Script)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> uri_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fmaterial_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE Material_PBR : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Material.PBR) */ {
 public:
  Material_PBR();
  virtual ~Material_PBR();

  Material_PBR(const Material_PBR& from);

  inline Material_PBR& operator=(const Material_PBR& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Material_PBR(Material_PBR&& from) noexcept
    : Material_PBR() {
    *this = ::std::move(from);
  }

  inline Material_PBR& operator=(Material_PBR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Material_PBR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Material_PBR* internal_default_instance() {
    return reinterpret_cast<const Material_PBR*>(
               &_Material_PBR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Material_PBR* other);
  friend void swap(Material_PBR& a, Material_PBR& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Material_PBR* New() const final {
    return CreateMaybeMessage<Material_PBR>(NULL);
  }

  Material_PBR* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Material_PBR>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Material_PBR& from);
  void MergeFrom(const Material_PBR& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Material_PBR* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Material_PBR_WorkflowType WorkflowType;
  static const WorkflowType NONE =
    Material_PBR_WorkflowType_NONE;
  static const WorkflowType METAL =
    Material_PBR_WorkflowType_METAL;
  static const WorkflowType SPECULAR =
    Material_PBR_WorkflowType_SPECULAR;
  static inline bool WorkflowType_IsValid(int value) {
    return Material_PBR_WorkflowType_IsValid(value);
  }
  static const WorkflowType WorkflowType_MIN =
    Material_PBR_WorkflowType_WorkflowType_MIN;
  static const WorkflowType WorkflowType_MAX =
    Material_PBR_WorkflowType_WorkflowType_MAX;
  static const int WorkflowType_ARRAYSIZE =
    Material_PBR_WorkflowType_WorkflowType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WorkflowType_descriptor() {
    return Material_PBR_WorkflowType_descriptor();
  }
  static inline const ::std::string& WorkflowType_Name(WorkflowType value) {
    return Material_PBR_WorkflowType_Name(value);
  }
  static inline bool WorkflowType_Parse(const ::std::string& name,
      WorkflowType* value) {
    return Material_PBR_WorkflowType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string albedo_map = 2;
  void clear_albedo_map();
  static const int kAlbedoMapFieldNumber = 2;
  const ::std::string& albedo_map() const;
  void set_albedo_map(const ::std::string& value);
  #if LANG_CXX11
  void set_albedo_map(::std::string&& value);
  #endif
  void set_albedo_map(const char* value);
  void set_albedo_map(const char* value, size_t size);
  ::std::string* mutable_albedo_map();
  ::std::string* release_albedo_map();
  void set_allocated_albedo_map(::std::string* albedo_map);

  // string normal_map = 3;
  void clear_normal_map();
  static const int kNormalMapFieldNumber = 3;
  const ::std::string& normal_map() const;
  void set_normal_map(const ::std::string& value);
  #if LANG_CXX11
  void set_normal_map(::std::string&& value);
  #endif
  void set_normal_map(const char* value);
  void set_normal_map(const char* value, size_t size);
  ::std::string* mutable_normal_map();
  ::std::string* release_normal_map();
  void set_allocated_normal_map(::std::string* normal_map);

  // string metalness_map = 5;
  void clear_metalness_map();
  static const int kMetalnessMapFieldNumber = 5;
  const ::std::string& metalness_map() const;
  void set_metalness_map(const ::std::string& value);
  #if LANG_CXX11
  void set_metalness_map(::std::string&& value);
  #endif
  void set_metalness_map(const char* value);
  void set_metalness_map(const char* value, size_t size);
  ::std::string* mutable_metalness_map();
  ::std::string* release_metalness_map();
  void set_allocated_metalness_map(::std::string* metalness_map);

  // string roughness_map = 7;
  void clear_roughness_map();
  static const int kRoughnessMapFieldNumber = 7;
  const ::std::string& roughness_map() const;
  void set_roughness_map(const ::std::string& value);
  #if LANG_CXX11
  void set_roughness_map(::std::string&& value);
  #endif
  void set_roughness_map(const char* value);
  void set_roughness_map(const char* value, size_t size);
  ::std::string* mutable_roughness_map();
  ::std::string* release_roughness_map();
  void set_allocated_roughness_map(::std::string* roughness_map);

  // string glossiness_map = 9;
  void clear_glossiness_map();
  static const int kGlossinessMapFieldNumber = 9;
  const ::std::string& glossiness_map() const;
  void set_glossiness_map(const ::std::string& value);
  #if LANG_CXX11
  void set_glossiness_map(::std::string&& value);
  #endif
  void set_glossiness_map(const char* value);
  void set_glossiness_map(const char* value, size_t size);
  ::std::string* mutable_glossiness_map();
  ::std::string* release_glossiness_map();
  void set_allocated_glossiness_map(::std::string* glossiness_map);

  // string specular_map = 10;
  void clear_specular_map();
  static const int kSpecularMapFieldNumber = 10;
  const ::std::string& specular_map() const;
  void set_specular_map(const ::std::string& value);
  #if LANG_CXX11
  void set_specular_map(::std::string&& value);
  #endif
  void set_specular_map(const char* value);
  void set_specular_map(const char* value, size_t size);
  ::std::string* mutable_specular_map();
  ::std::string* release_specular_map();
  void set_allocated_specular_map(::std::string* specular_map);

  // string environment_map = 11;
  void clear_environment_map();
  static const int kEnvironmentMapFieldNumber = 11;
  const ::std::string& environment_map() const;
  void set_environment_map(const ::std::string& value);
  #if LANG_CXX11
  void set_environment_map(::std::string&& value);
  #endif
  void set_environment_map(const char* value);
  void set_environment_map(const char* value, size_t size);
  ::std::string* mutable_environment_map();
  ::std::string* release_environment_map();
  void set_allocated_environment_map(::std::string* environment_map);

  // string ambient_occlusion_map = 12;
  void clear_ambient_occlusion_map();
  static const int kAmbientOcclusionMapFieldNumber = 12;
  const ::std::string& ambient_occlusion_map() const;
  void set_ambient_occlusion_map(const ::std::string& value);
  #if LANG_CXX11
  void set_ambient_occlusion_map(::std::string&& value);
  #endif
  void set_ambient_occlusion_map(const char* value);
  void set_ambient_occlusion_map(const char* value, size_t size);
  ::std::string* mutable_ambient_occlusion_map();
  ::std::string* release_ambient_occlusion_map();
  void set_allocated_ambient_occlusion_map(::std::string* ambient_occlusion_map);

  // string emissive_map = 13;
  void clear_emissive_map();
  static const int kEmissiveMapFieldNumber = 13;
  const ::std::string& emissive_map() const;
  void set_emissive_map(const ::std::string& value);
  #if LANG_CXX11
  void set_emissive_map(::std::string&& value);
  #endif
  void set_emissive_map(const char* value);
  void set_emissive_map(const char* value, size_t size);
  ::std::string* mutable_emissive_map();
  ::std::string* release_emissive_map();
  void set_allocated_emissive_map(::std::string* emissive_map);

  // string light_map = 14;
  void clear_light_map();
  static const int kLightMapFieldNumber = 14;
  const ::std::string& light_map() const;
  void set_light_map(const ::std::string& value);
  #if LANG_CXX11
  void set_light_map(::std::string&& value);
  #endif
  void set_light_map(const char* value);
  void set_light_map(const char* value, size_t size);
  ::std::string* mutable_light_map();
  ::std::string* release_light_map();
  void set_allocated_light_map(::std::string* light_map);

  // double metalness = 4;
  void clear_metalness();
  static const int kMetalnessFieldNumber = 4;
  double metalness() const;
  void set_metalness(double value);

  // double roughness = 6;
  void clear_roughness();
  static const int kRoughnessFieldNumber = 6;
  double roughness() const;
  void set_roughness(double value);

  // double glossiness = 8;
  void clear_glossiness();
  static const int kGlossinessFieldNumber = 8;
  double glossiness() const;
  void set_glossiness(double value);

  // .gz.msgs.Material.PBR.WorkflowType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gz::msgs::Material_PBR_WorkflowType type() const;
  void set_type(::gz::msgs::Material_PBR_WorkflowType value);

  // uint32 light_map_texcoord_set = 15;
  void clear_light_map_texcoord_set();
  static const int kLightMapTexcoordSetFieldNumber = 15;
  ::google::protobuf::uint32 light_map_texcoord_set() const;
  void set_light_map_texcoord_set(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Material.PBR)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr albedo_map_;
  ::google::protobuf::internal::ArenaStringPtr normal_map_;
  ::google::protobuf::internal::ArenaStringPtr metalness_map_;
  ::google::protobuf::internal::ArenaStringPtr roughness_map_;
  ::google::protobuf::internal::ArenaStringPtr glossiness_map_;
  ::google::protobuf::internal::ArenaStringPtr specular_map_;
  ::google::protobuf::internal::ArenaStringPtr environment_map_;
  ::google::protobuf::internal::ArenaStringPtr ambient_occlusion_map_;
  ::google::protobuf::internal::ArenaStringPtr emissive_map_;
  ::google::protobuf::internal::ArenaStringPtr light_map_;
  double metalness_;
  double roughness_;
  double glossiness_;
  int type_;
  ::google::protobuf::uint32 light_map_texcoord_set_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fmaterial_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE Material : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Material) */ {
 public:
  Material();
  virtual ~Material();

  Material(const Material& from);

  inline Material& operator=(const Material& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Material(Material&& from) noexcept
    : Material() {
    *this = ::std::move(from);
  }

  inline Material& operator=(Material&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Material& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Material* internal_default_instance() {
    return reinterpret_cast<const Material*>(
               &_Material_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Material* other);
  friend void swap(Material& a, Material& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Material* New() const final {
    return CreateMaybeMessage<Material>(NULL);
  }

  Material* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Material>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Material& from);
  void MergeFrom(const Material& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Material* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Material_Script Script;
  typedef Material_PBR PBR;

  typedef Material_ShaderType ShaderType;
  static const ShaderType VERTEX =
    Material_ShaderType_VERTEX;
  static const ShaderType PIXEL =
    Material_ShaderType_PIXEL;
  static const ShaderType NORMAL_MAP_OBJECT_SPACE =
    Material_ShaderType_NORMAL_MAP_OBJECT_SPACE;
  static const ShaderType NORMAL_MAP_TANGENT_SPACE =
    Material_ShaderType_NORMAL_MAP_TANGENT_SPACE;
  static inline bool ShaderType_IsValid(int value) {
    return Material_ShaderType_IsValid(value);
  }
  static const ShaderType ShaderType_MIN =
    Material_ShaderType_ShaderType_MIN;
  static const ShaderType ShaderType_MAX =
    Material_ShaderType_ShaderType_MAX;
  static const int ShaderType_ARRAYSIZE =
    Material_ShaderType_ShaderType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ShaderType_descriptor() {
    return Material_ShaderType_descriptor();
  }
  static inline const ::std::string& ShaderType_Name(ShaderType value) {
    return Material_ShaderType_Name(value);
  }
  static inline bool ShaderType_Parse(const ::std::string& name,
      ShaderType* value) {
    return Material_ShaderType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string normal_map = 4;
  void clear_normal_map();
  static const int kNormalMapFieldNumber = 4;
  const ::std::string& normal_map() const;
  void set_normal_map(const ::std::string& value);
  #if LANG_CXX11
  void set_normal_map(::std::string&& value);
  #endif
  void set_normal_map(const char* value);
  void set_normal_map(const char* value, size_t size);
  ::std::string* mutable_normal_map();
  ::std::string* release_normal_map();
  void set_allocated_normal_map(::std::string* normal_map);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Material.Script script = 2;
  bool has_script() const;
  void clear_script();
  static const int kScriptFieldNumber = 2;
  private:
  const ::gz::msgs::Material_Script& _internal_script() const;
  public:
  const ::gz::msgs::Material_Script& script() const;
  ::gz::msgs::Material_Script* release_script();
  ::gz::msgs::Material_Script* mutable_script();
  void set_allocated_script(::gz::msgs::Material_Script* script);

  // .gz.msgs.Color ambient = 5;
  bool has_ambient() const;
  void clear_ambient();
  static const int kAmbientFieldNumber = 5;
  private:
  const ::gz::msgs::Color& _internal_ambient() const;
  public:
  const ::gz::msgs::Color& ambient() const;
  ::gz::msgs::Color* release_ambient();
  ::gz::msgs::Color* mutable_ambient();
  void set_allocated_ambient(::gz::msgs::Color* ambient);

  // .gz.msgs.Color diffuse = 6;
  bool has_diffuse() const;
  void clear_diffuse();
  static const int kDiffuseFieldNumber = 6;
  private:
  const ::gz::msgs::Color& _internal_diffuse() const;
  public:
  const ::gz::msgs::Color& diffuse() const;
  ::gz::msgs::Color* release_diffuse();
  ::gz::msgs::Color* mutable_diffuse();
  void set_allocated_diffuse(::gz::msgs::Color* diffuse);

  // .gz.msgs.Color specular = 7;
  bool has_specular() const;
  void clear_specular();
  static const int kSpecularFieldNumber = 7;
  private:
  const ::gz::msgs::Color& _internal_specular() const;
  public:
  const ::gz::msgs::Color& specular() const;
  ::gz::msgs::Color* release_specular();
  ::gz::msgs::Color* mutable_specular();
  void set_allocated_specular(::gz::msgs::Color* specular);

  // .gz.msgs.Color emissive = 8;
  bool has_emissive() const;
  void clear_emissive();
  static const int kEmissiveFieldNumber = 8;
  private:
  const ::gz::msgs::Color& _internal_emissive() const;
  public:
  const ::gz::msgs::Color& emissive() const;
  ::gz::msgs::Color* release_emissive();
  ::gz::msgs::Color* mutable_emissive();
  void set_allocated_emissive(::gz::msgs::Color* emissive);

  // .gz.msgs.Material.PBR pbr = 10;
  bool has_pbr() const;
  void clear_pbr();
  static const int kPbrFieldNumber = 10;
  private:
  const ::gz::msgs::Material_PBR& _internal_pbr() const;
  public:
  const ::gz::msgs::Material_PBR& pbr() const;
  ::gz::msgs::Material_PBR* release_pbr();
  ::gz::msgs::Material_PBR* mutable_pbr();
  void set_allocated_pbr(::gz::msgs::Material_PBR* pbr);

  // .gz.msgs.Material.ShaderType shader_type = 3;
  void clear_shader_type();
  static const int kShaderTypeFieldNumber = 3;
  ::gz::msgs::Material_ShaderType shader_type() const;
  void set_shader_type(::gz::msgs::Material_ShaderType value);

  // bool lighting = 9;
  void clear_lighting();
  static const int kLightingFieldNumber = 9;
  bool lighting() const;
  void set_lighting(bool value);

  // bool double_sided = 12;
  void clear_double_sided();
  static const int kDoubleSidedFieldNumber = 12;
  bool double_sided() const;
  void set_double_sided(bool value);

  // double render_order = 11;
  void clear_render_order();
  static const int kRenderOrderFieldNumber = 11;
  double render_order() const;
  void set_render_order(double value);

  // double shininess = 13;
  void clear_shininess();
  static const int kShininessFieldNumber = 13;
  double shininess() const;
  void set_shininess(double value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Material)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr normal_map_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Material_Script* script_;
  ::gz::msgs::Color* ambient_;
  ::gz::msgs::Color* diffuse_;
  ::gz::msgs::Color* specular_;
  ::gz::msgs::Color* emissive_;
  ::gz::msgs::Material_PBR* pbr_;
  int shader_type_;
  bool lighting_;
  bool double_sided_;
  double render_order_;
  double shininess_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fmaterial_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Material_Script

// repeated string uri = 1;
inline int Material_Script::uri_size() const {
  return uri_.size();
}
inline void Material_Script::clear_uri() {
  uri_.Clear();
}
inline const ::std::string& Material_Script::uri(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.Script.uri)
  return uri_.Get(index);
}
inline ::std::string* Material_Script::mutable_uri(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.Material.Script.uri)
  return uri_.Mutable(index);
}
inline void Material_Script::set_uri(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gz.msgs.Material.Script.uri)
  uri_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Material_Script::set_uri(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gz.msgs.Material.Script.uri)
  uri_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Material_Script::set_uri(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  uri_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gz.msgs.Material.Script.uri)
}
inline void Material_Script::set_uri(int index, const char* value, size_t size) {
  uri_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Material.Script.uri)
}
inline ::std::string* Material_Script::add_uri() {
  // @@protoc_insertion_point(field_add_mutable:gz.msgs.Material.Script.uri)
  return uri_.Add();
}
inline void Material_Script::add_uri(const ::std::string& value) {
  uri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gz.msgs.Material.Script.uri)
}
#if LANG_CXX11
inline void Material_Script::add_uri(::std::string&& value) {
  uri_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gz.msgs.Material.Script.uri)
}
#endif
inline void Material_Script::add_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  uri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gz.msgs.Material.Script.uri)
}
inline void Material_Script::add_uri(const char* value, size_t size) {
  uri_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gz.msgs.Material.Script.uri)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Material_Script::uri() const {
  // @@protoc_insertion_point(field_list:gz.msgs.Material.Script.uri)
  return uri_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Material_Script::mutable_uri() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.Material.Script.uri)
  return &uri_;
}

// string name = 2;
inline void Material_Script::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Material_Script::name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.Script.name)
  return name_.GetNoArena();
}
inline void Material_Script::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Material.Script.name)
}
#if LANG_CXX11
inline void Material_Script::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Material.Script.name)
}
#endif
inline void Material_Script::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Material.Script.name)
}
inline void Material_Script::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Material.Script.name)
}
inline ::std::string* Material_Script::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Material.Script.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Material_Script::release_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.Material.Script.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Material_Script::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Material.Script.name)
}

// -------------------------------------------------------------------

// Material_PBR

// .gz.msgs.Material.PBR.WorkflowType type = 1;
inline void Material_PBR::clear_type() {
  type_ = 0;
}
inline ::gz::msgs::Material_PBR_WorkflowType Material_PBR::type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.PBR.type)
  return static_cast< ::gz::msgs::Material_PBR_WorkflowType >(type_);
}
inline void Material_PBR::set_type(::gz::msgs::Material_PBR_WorkflowType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Material.PBR.type)
}

// string albedo_map = 2;
inline void Material_PBR::clear_albedo_map() {
  albedo_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Material_PBR::albedo_map() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.PBR.albedo_map)
  return albedo_map_.GetNoArena();
}
inline void Material_PBR::set_albedo_map(const ::std::string& value) {
  
  albedo_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Material.PBR.albedo_map)
}
#if LANG_CXX11
inline void Material_PBR::set_albedo_map(::std::string&& value) {
  
  albedo_map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Material.PBR.albedo_map)
}
#endif
inline void Material_PBR::set_albedo_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  albedo_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Material.PBR.albedo_map)
}
inline void Material_PBR::set_albedo_map(const char* value, size_t size) {
  
  albedo_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Material.PBR.albedo_map)
}
inline ::std::string* Material_PBR::mutable_albedo_map() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Material.PBR.albedo_map)
  return albedo_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Material_PBR::release_albedo_map() {
  // @@protoc_insertion_point(field_release:gz.msgs.Material.PBR.albedo_map)
  
  return albedo_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Material_PBR::set_allocated_albedo_map(::std::string* albedo_map) {
  if (albedo_map != NULL) {
    
  } else {
    
  }
  albedo_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albedo_map);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Material.PBR.albedo_map)
}

// string normal_map = 3;
inline void Material_PBR::clear_normal_map() {
  normal_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Material_PBR::normal_map() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.PBR.normal_map)
  return normal_map_.GetNoArena();
}
inline void Material_PBR::set_normal_map(const ::std::string& value) {
  
  normal_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Material.PBR.normal_map)
}
#if LANG_CXX11
inline void Material_PBR::set_normal_map(::std::string&& value) {
  
  normal_map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Material.PBR.normal_map)
}
#endif
inline void Material_PBR::set_normal_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  normal_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Material.PBR.normal_map)
}
inline void Material_PBR::set_normal_map(const char* value, size_t size) {
  
  normal_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Material.PBR.normal_map)
}
inline ::std::string* Material_PBR::mutable_normal_map() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Material.PBR.normal_map)
  return normal_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Material_PBR::release_normal_map() {
  // @@protoc_insertion_point(field_release:gz.msgs.Material.PBR.normal_map)
  
  return normal_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Material_PBR::set_allocated_normal_map(::std::string* normal_map) {
  if (normal_map != NULL) {
    
  } else {
    
  }
  normal_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normal_map);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Material.PBR.normal_map)
}

// double metalness = 4;
inline void Material_PBR::clear_metalness() {
  metalness_ = 0;
}
inline double Material_PBR::metalness() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.PBR.metalness)
  return metalness_;
}
inline void Material_PBR::set_metalness(double value) {
  
  metalness_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Material.PBR.metalness)
}

// string metalness_map = 5;
inline void Material_PBR::clear_metalness_map() {
  metalness_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Material_PBR::metalness_map() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.PBR.metalness_map)
  return metalness_map_.GetNoArena();
}
inline void Material_PBR::set_metalness_map(const ::std::string& value) {
  
  metalness_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Material.PBR.metalness_map)
}
#if LANG_CXX11
inline void Material_PBR::set_metalness_map(::std::string&& value) {
  
  metalness_map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Material.PBR.metalness_map)
}
#endif
inline void Material_PBR::set_metalness_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  metalness_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Material.PBR.metalness_map)
}
inline void Material_PBR::set_metalness_map(const char* value, size_t size) {
  
  metalness_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Material.PBR.metalness_map)
}
inline ::std::string* Material_PBR::mutable_metalness_map() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Material.PBR.metalness_map)
  return metalness_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Material_PBR::release_metalness_map() {
  // @@protoc_insertion_point(field_release:gz.msgs.Material.PBR.metalness_map)
  
  return metalness_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Material_PBR::set_allocated_metalness_map(::std::string* metalness_map) {
  if (metalness_map != NULL) {
    
  } else {
    
  }
  metalness_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metalness_map);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Material.PBR.metalness_map)
}

// double roughness = 6;
inline void Material_PBR::clear_roughness() {
  roughness_ = 0;
}
inline double Material_PBR::roughness() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.PBR.roughness)
  return roughness_;
}
inline void Material_PBR::set_roughness(double value) {
  
  roughness_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Material.PBR.roughness)
}

// string roughness_map = 7;
inline void Material_PBR::clear_roughness_map() {
  roughness_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Material_PBR::roughness_map() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.PBR.roughness_map)
  return roughness_map_.GetNoArena();
}
inline void Material_PBR::set_roughness_map(const ::std::string& value) {
  
  roughness_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Material.PBR.roughness_map)
}
#if LANG_CXX11
inline void Material_PBR::set_roughness_map(::std::string&& value) {
  
  roughness_map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Material.PBR.roughness_map)
}
#endif
inline void Material_PBR::set_roughness_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  roughness_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Material.PBR.roughness_map)
}
inline void Material_PBR::set_roughness_map(const char* value, size_t size) {
  
  roughness_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Material.PBR.roughness_map)
}
inline ::std::string* Material_PBR::mutable_roughness_map() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Material.PBR.roughness_map)
  return roughness_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Material_PBR::release_roughness_map() {
  // @@protoc_insertion_point(field_release:gz.msgs.Material.PBR.roughness_map)
  
  return roughness_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Material_PBR::set_allocated_roughness_map(::std::string* roughness_map) {
  if (roughness_map != NULL) {
    
  } else {
    
  }
  roughness_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roughness_map);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Material.PBR.roughness_map)
}

// double glossiness = 8;
inline void Material_PBR::clear_glossiness() {
  glossiness_ = 0;
}
inline double Material_PBR::glossiness() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.PBR.glossiness)
  return glossiness_;
}
inline void Material_PBR::set_glossiness(double value) {
  
  glossiness_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Material.PBR.glossiness)
}

// string glossiness_map = 9;
inline void Material_PBR::clear_glossiness_map() {
  glossiness_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Material_PBR::glossiness_map() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.PBR.glossiness_map)
  return glossiness_map_.GetNoArena();
}
inline void Material_PBR::set_glossiness_map(const ::std::string& value) {
  
  glossiness_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Material.PBR.glossiness_map)
}
#if LANG_CXX11
inline void Material_PBR::set_glossiness_map(::std::string&& value) {
  
  glossiness_map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Material.PBR.glossiness_map)
}
#endif
inline void Material_PBR::set_glossiness_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  glossiness_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Material.PBR.glossiness_map)
}
inline void Material_PBR::set_glossiness_map(const char* value, size_t size) {
  
  glossiness_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Material.PBR.glossiness_map)
}
inline ::std::string* Material_PBR::mutable_glossiness_map() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Material.PBR.glossiness_map)
  return glossiness_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Material_PBR::release_glossiness_map() {
  // @@protoc_insertion_point(field_release:gz.msgs.Material.PBR.glossiness_map)
  
  return glossiness_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Material_PBR::set_allocated_glossiness_map(::std::string* glossiness_map) {
  if (glossiness_map != NULL) {
    
  } else {
    
  }
  glossiness_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), glossiness_map);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Material.PBR.glossiness_map)
}

// string specular_map = 10;
inline void Material_PBR::clear_specular_map() {
  specular_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Material_PBR::specular_map() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.PBR.specular_map)
  return specular_map_.GetNoArena();
}
inline void Material_PBR::set_specular_map(const ::std::string& value) {
  
  specular_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Material.PBR.specular_map)
}
#if LANG_CXX11
inline void Material_PBR::set_specular_map(::std::string&& value) {
  
  specular_map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Material.PBR.specular_map)
}
#endif
inline void Material_PBR::set_specular_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  specular_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Material.PBR.specular_map)
}
inline void Material_PBR::set_specular_map(const char* value, size_t size) {
  
  specular_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Material.PBR.specular_map)
}
inline ::std::string* Material_PBR::mutable_specular_map() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Material.PBR.specular_map)
  return specular_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Material_PBR::release_specular_map() {
  // @@protoc_insertion_point(field_release:gz.msgs.Material.PBR.specular_map)
  
  return specular_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Material_PBR::set_allocated_specular_map(::std::string* specular_map) {
  if (specular_map != NULL) {
    
  } else {
    
  }
  specular_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), specular_map);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Material.PBR.specular_map)
}

// string environment_map = 11;
inline void Material_PBR::clear_environment_map() {
  environment_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Material_PBR::environment_map() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.PBR.environment_map)
  return environment_map_.GetNoArena();
}
inline void Material_PBR::set_environment_map(const ::std::string& value) {
  
  environment_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Material.PBR.environment_map)
}
#if LANG_CXX11
inline void Material_PBR::set_environment_map(::std::string&& value) {
  
  environment_map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Material.PBR.environment_map)
}
#endif
inline void Material_PBR::set_environment_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  environment_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Material.PBR.environment_map)
}
inline void Material_PBR::set_environment_map(const char* value, size_t size) {
  
  environment_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Material.PBR.environment_map)
}
inline ::std::string* Material_PBR::mutable_environment_map() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Material.PBR.environment_map)
  return environment_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Material_PBR::release_environment_map() {
  // @@protoc_insertion_point(field_release:gz.msgs.Material.PBR.environment_map)
  
  return environment_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Material_PBR::set_allocated_environment_map(::std::string* environment_map) {
  if (environment_map != NULL) {
    
  } else {
    
  }
  environment_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), environment_map);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Material.PBR.environment_map)
}

// string ambient_occlusion_map = 12;
inline void Material_PBR::clear_ambient_occlusion_map() {
  ambient_occlusion_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Material_PBR::ambient_occlusion_map() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.PBR.ambient_occlusion_map)
  return ambient_occlusion_map_.GetNoArena();
}
inline void Material_PBR::set_ambient_occlusion_map(const ::std::string& value) {
  
  ambient_occlusion_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Material.PBR.ambient_occlusion_map)
}
#if LANG_CXX11
inline void Material_PBR::set_ambient_occlusion_map(::std::string&& value) {
  
  ambient_occlusion_map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Material.PBR.ambient_occlusion_map)
}
#endif
inline void Material_PBR::set_ambient_occlusion_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ambient_occlusion_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Material.PBR.ambient_occlusion_map)
}
inline void Material_PBR::set_ambient_occlusion_map(const char* value, size_t size) {
  
  ambient_occlusion_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Material.PBR.ambient_occlusion_map)
}
inline ::std::string* Material_PBR::mutable_ambient_occlusion_map() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Material.PBR.ambient_occlusion_map)
  return ambient_occlusion_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Material_PBR::release_ambient_occlusion_map() {
  // @@protoc_insertion_point(field_release:gz.msgs.Material.PBR.ambient_occlusion_map)
  
  return ambient_occlusion_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Material_PBR::set_allocated_ambient_occlusion_map(::std::string* ambient_occlusion_map) {
  if (ambient_occlusion_map != NULL) {
    
  } else {
    
  }
  ambient_occlusion_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ambient_occlusion_map);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Material.PBR.ambient_occlusion_map)
}

// string emissive_map = 13;
inline void Material_PBR::clear_emissive_map() {
  emissive_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Material_PBR::emissive_map() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.PBR.emissive_map)
  return emissive_map_.GetNoArena();
}
inline void Material_PBR::set_emissive_map(const ::std::string& value) {
  
  emissive_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Material.PBR.emissive_map)
}
#if LANG_CXX11
inline void Material_PBR::set_emissive_map(::std::string&& value) {
  
  emissive_map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Material.PBR.emissive_map)
}
#endif
inline void Material_PBR::set_emissive_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  emissive_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Material.PBR.emissive_map)
}
inline void Material_PBR::set_emissive_map(const char* value, size_t size) {
  
  emissive_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Material.PBR.emissive_map)
}
inline ::std::string* Material_PBR::mutable_emissive_map() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Material.PBR.emissive_map)
  return emissive_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Material_PBR::release_emissive_map() {
  // @@protoc_insertion_point(field_release:gz.msgs.Material.PBR.emissive_map)
  
  return emissive_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Material_PBR::set_allocated_emissive_map(::std::string* emissive_map) {
  if (emissive_map != NULL) {
    
  } else {
    
  }
  emissive_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), emissive_map);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Material.PBR.emissive_map)
}

// string light_map = 14;
inline void Material_PBR::clear_light_map() {
  light_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Material_PBR::light_map() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.PBR.light_map)
  return light_map_.GetNoArena();
}
inline void Material_PBR::set_light_map(const ::std::string& value) {
  
  light_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Material.PBR.light_map)
}
#if LANG_CXX11
inline void Material_PBR::set_light_map(::std::string&& value) {
  
  light_map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Material.PBR.light_map)
}
#endif
inline void Material_PBR::set_light_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  light_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Material.PBR.light_map)
}
inline void Material_PBR::set_light_map(const char* value, size_t size) {
  
  light_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Material.PBR.light_map)
}
inline ::std::string* Material_PBR::mutable_light_map() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Material.PBR.light_map)
  return light_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Material_PBR::release_light_map() {
  // @@protoc_insertion_point(field_release:gz.msgs.Material.PBR.light_map)
  
  return light_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Material_PBR::set_allocated_light_map(::std::string* light_map) {
  if (light_map != NULL) {
    
  } else {
    
  }
  light_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), light_map);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Material.PBR.light_map)
}

// uint32 light_map_texcoord_set = 15;
inline void Material_PBR::clear_light_map_texcoord_set() {
  light_map_texcoord_set_ = 0u;
}
inline ::google::protobuf::uint32 Material_PBR::light_map_texcoord_set() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.PBR.light_map_texcoord_set)
  return light_map_texcoord_set_;
}
inline void Material_PBR::set_light_map_texcoord_set(::google::protobuf::uint32 value) {
  
  light_map_texcoord_set_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Material.PBR.light_map_texcoord_set)
}

// -------------------------------------------------------------------

// Material

// .gz.msgs.Header header = 1;
inline bool Material::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& Material::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& Material::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.Material.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* Material::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.Material.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* Material::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Material.header)
  return header_;
}
inline void Material::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Material.header)
}

// .gz.msgs.Material.Script script = 2;
inline bool Material::has_script() const {
  return this != internal_default_instance() && script_ != NULL;
}
inline void Material::clear_script() {
  if (GetArenaNoVirtual() == NULL && script_ != NULL) {
    delete script_;
  }
  script_ = NULL;
}
inline const ::gz::msgs::Material_Script& Material::_internal_script() const {
  return *script_;
}
inline const ::gz::msgs::Material_Script& Material::script() const {
  const ::gz::msgs::Material_Script* p = script_;
  // @@protoc_insertion_point(field_get:gz.msgs.Material.script)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Material_Script*>(
      &::gz::msgs::_Material_Script_default_instance_);
}
inline ::gz::msgs::Material_Script* Material::release_script() {
  // @@protoc_insertion_point(field_release:gz.msgs.Material.script)
  
  ::gz::msgs::Material_Script* temp = script_;
  script_ = NULL;
  return temp;
}
inline ::gz::msgs::Material_Script* Material::mutable_script() {
  
  if (script_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Material_Script>(GetArenaNoVirtual());
    script_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Material.script)
  return script_;
}
inline void Material::set_allocated_script(::gz::msgs::Material_Script* script) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete script_;
  }
  if (script) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      script = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, script, submessage_arena);
    }
    
  } else {
    
  }
  script_ = script;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Material.script)
}

// .gz.msgs.Material.ShaderType shader_type = 3;
inline void Material::clear_shader_type() {
  shader_type_ = 0;
}
inline ::gz::msgs::Material_ShaderType Material::shader_type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.shader_type)
  return static_cast< ::gz::msgs::Material_ShaderType >(shader_type_);
}
inline void Material::set_shader_type(::gz::msgs::Material_ShaderType value) {
  
  shader_type_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Material.shader_type)
}

// string normal_map = 4;
inline void Material::clear_normal_map() {
  normal_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Material::normal_map() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.normal_map)
  return normal_map_.GetNoArena();
}
inline void Material::set_normal_map(const ::std::string& value) {
  
  normal_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Material.normal_map)
}
#if LANG_CXX11
inline void Material::set_normal_map(::std::string&& value) {
  
  normal_map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Material.normal_map)
}
#endif
inline void Material::set_normal_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  normal_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Material.normal_map)
}
inline void Material::set_normal_map(const char* value, size_t size) {
  
  normal_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Material.normal_map)
}
inline ::std::string* Material::mutable_normal_map() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Material.normal_map)
  return normal_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Material::release_normal_map() {
  // @@protoc_insertion_point(field_release:gz.msgs.Material.normal_map)
  
  return normal_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Material::set_allocated_normal_map(::std::string* normal_map) {
  if (normal_map != NULL) {
    
  } else {
    
  }
  normal_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normal_map);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Material.normal_map)
}

// .gz.msgs.Color ambient = 5;
inline bool Material::has_ambient() const {
  return this != internal_default_instance() && ambient_ != NULL;
}
inline const ::gz::msgs::Color& Material::_internal_ambient() const {
  return *ambient_;
}
inline const ::gz::msgs::Color& Material::ambient() const {
  const ::gz::msgs::Color* p = ambient_;
  // @@protoc_insertion_point(field_get:gz.msgs.Material.ambient)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Color*>(
      &::gz::msgs::_Color_default_instance_);
}
inline ::gz::msgs::Color* Material::release_ambient() {
  // @@protoc_insertion_point(field_release:gz.msgs.Material.ambient)
  
  ::gz::msgs::Color* temp = ambient_;
  ambient_ = NULL;
  return temp;
}
inline ::gz::msgs::Color* Material::mutable_ambient() {
  
  if (ambient_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Color>(GetArenaNoVirtual());
    ambient_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Material.ambient)
  return ambient_;
}
inline void Material::set_allocated_ambient(::gz::msgs::Color* ambient) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ambient_);
  }
  if (ambient) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ambient = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ambient, submessage_arena);
    }
    
  } else {
    
  }
  ambient_ = ambient;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Material.ambient)
}

// .gz.msgs.Color diffuse = 6;
inline bool Material::has_diffuse() const {
  return this != internal_default_instance() && diffuse_ != NULL;
}
inline const ::gz::msgs::Color& Material::_internal_diffuse() const {
  return *diffuse_;
}
inline const ::gz::msgs::Color& Material::diffuse() const {
  const ::gz::msgs::Color* p = diffuse_;
  // @@protoc_insertion_point(field_get:gz.msgs.Material.diffuse)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Color*>(
      &::gz::msgs::_Color_default_instance_);
}
inline ::gz::msgs::Color* Material::release_diffuse() {
  // @@protoc_insertion_point(field_release:gz.msgs.Material.diffuse)
  
  ::gz::msgs::Color* temp = diffuse_;
  diffuse_ = NULL;
  return temp;
}
inline ::gz::msgs::Color* Material::mutable_diffuse() {
  
  if (diffuse_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Color>(GetArenaNoVirtual());
    diffuse_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Material.diffuse)
  return diffuse_;
}
inline void Material::set_allocated_diffuse(::gz::msgs::Color* diffuse) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(diffuse_);
  }
  if (diffuse) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      diffuse = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, diffuse, submessage_arena);
    }
    
  } else {
    
  }
  diffuse_ = diffuse;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Material.diffuse)
}

// .gz.msgs.Color specular = 7;
inline bool Material::has_specular() const {
  return this != internal_default_instance() && specular_ != NULL;
}
inline const ::gz::msgs::Color& Material::_internal_specular() const {
  return *specular_;
}
inline const ::gz::msgs::Color& Material::specular() const {
  const ::gz::msgs::Color* p = specular_;
  // @@protoc_insertion_point(field_get:gz.msgs.Material.specular)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Color*>(
      &::gz::msgs::_Color_default_instance_);
}
inline ::gz::msgs::Color* Material::release_specular() {
  // @@protoc_insertion_point(field_release:gz.msgs.Material.specular)
  
  ::gz::msgs::Color* temp = specular_;
  specular_ = NULL;
  return temp;
}
inline ::gz::msgs::Color* Material::mutable_specular() {
  
  if (specular_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Color>(GetArenaNoVirtual());
    specular_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Material.specular)
  return specular_;
}
inline void Material::set_allocated_specular(::gz::msgs::Color* specular) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(specular_);
  }
  if (specular) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      specular = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, specular, submessage_arena);
    }
    
  } else {
    
  }
  specular_ = specular;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Material.specular)
}

// .gz.msgs.Color emissive = 8;
inline bool Material::has_emissive() const {
  return this != internal_default_instance() && emissive_ != NULL;
}
inline const ::gz::msgs::Color& Material::_internal_emissive() const {
  return *emissive_;
}
inline const ::gz::msgs::Color& Material::emissive() const {
  const ::gz::msgs::Color* p = emissive_;
  // @@protoc_insertion_point(field_get:gz.msgs.Material.emissive)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Color*>(
      &::gz::msgs::_Color_default_instance_);
}
inline ::gz::msgs::Color* Material::release_emissive() {
  // @@protoc_insertion_point(field_release:gz.msgs.Material.emissive)
  
  ::gz::msgs::Color* temp = emissive_;
  emissive_ = NULL;
  return temp;
}
inline ::gz::msgs::Color* Material::mutable_emissive() {
  
  if (emissive_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Color>(GetArenaNoVirtual());
    emissive_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Material.emissive)
  return emissive_;
}
inline void Material::set_allocated_emissive(::gz::msgs::Color* emissive) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(emissive_);
  }
  if (emissive) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      emissive = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, emissive, submessage_arena);
    }
    
  } else {
    
  }
  emissive_ = emissive;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Material.emissive)
}

// bool lighting = 9;
inline void Material::clear_lighting() {
  lighting_ = false;
}
inline bool Material::lighting() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.lighting)
  return lighting_;
}
inline void Material::set_lighting(bool value) {
  
  lighting_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Material.lighting)
}

// .gz.msgs.Material.PBR pbr = 10;
inline bool Material::has_pbr() const {
  return this != internal_default_instance() && pbr_ != NULL;
}
inline void Material::clear_pbr() {
  if (GetArenaNoVirtual() == NULL && pbr_ != NULL) {
    delete pbr_;
  }
  pbr_ = NULL;
}
inline const ::gz::msgs::Material_PBR& Material::_internal_pbr() const {
  return *pbr_;
}
inline const ::gz::msgs::Material_PBR& Material::pbr() const {
  const ::gz::msgs::Material_PBR* p = pbr_;
  // @@protoc_insertion_point(field_get:gz.msgs.Material.pbr)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Material_PBR*>(
      &::gz::msgs::_Material_PBR_default_instance_);
}
inline ::gz::msgs::Material_PBR* Material::release_pbr() {
  // @@protoc_insertion_point(field_release:gz.msgs.Material.pbr)
  
  ::gz::msgs::Material_PBR* temp = pbr_;
  pbr_ = NULL;
  return temp;
}
inline ::gz::msgs::Material_PBR* Material::mutable_pbr() {
  
  if (pbr_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Material_PBR>(GetArenaNoVirtual());
    pbr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Material.pbr)
  return pbr_;
}
inline void Material::set_allocated_pbr(::gz::msgs::Material_PBR* pbr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pbr_;
  }
  if (pbr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pbr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pbr, submessage_arena);
    }
    
  } else {
    
  }
  pbr_ = pbr;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Material.pbr)
}

// double render_order = 11;
inline void Material::clear_render_order() {
  render_order_ = 0;
}
inline double Material::render_order() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.render_order)
  return render_order_;
}
inline void Material::set_render_order(double value) {
  
  render_order_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Material.render_order)
}

// bool double_sided = 12;
inline void Material::clear_double_sided() {
  double_sided_ = false;
}
inline bool Material::double_sided() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.double_sided)
  return double_sided_;
}
inline void Material::set_double_sided(bool value) {
  
  double_sided_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Material.double_sided)
}

// double shininess = 13;
inline void Material::clear_shininess() {
  shininess_ = 0;
}
inline double Material::shininess() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Material.shininess)
  return shininess_;
}
inline void Material::set_shininess(double value) {
  
  shininess_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Material.shininess)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::msgs::Material_PBR_WorkflowType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::Material_PBR_WorkflowType>() {
  return ::gz::msgs::Material_PBR_WorkflowType_descriptor();
}
template <> struct is_proto_enum< ::gz::msgs::Material_ShaderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::Material_ShaderType>() {
  return ::gz::msgs::Material_ShaderType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fmaterial_2eproto
