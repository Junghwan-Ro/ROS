// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/discovery.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fdiscovery_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fdiscovery_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fdiscovery_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fdiscovery_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fdiscovery_2eproto
namespace gz {
namespace msgs {
class Discovery;
class DiscoveryDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern DiscoveryDefaultTypeInternal _Discovery_default_instance_;
class Discovery_Flags;
class Discovery_FlagsDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern Discovery_FlagsDefaultTypeInternal _Discovery_Flags_default_instance_;
class Discovery_Publisher;
class Discovery_PublisherDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern Discovery_PublisherDefaultTypeInternal _Discovery_Publisher_default_instance_;
class Discovery_Publisher_MessagePublisher;
class Discovery_Publisher_MessagePublisherDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern Discovery_Publisher_MessagePublisherDefaultTypeInternal _Discovery_Publisher_MessagePublisher_default_instance_;
class Discovery_Publisher_ServicePublisher;
class Discovery_Publisher_ServicePublisherDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern Discovery_Publisher_ServicePublisherDefaultTypeInternal _Discovery_Publisher_ServicePublisher_default_instance_;
class Discovery_Subscriber;
class Discovery_SubscriberDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern Discovery_SubscriberDefaultTypeInternal _Discovery_Subscriber_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Discovery* Arena::CreateMaybeMessage<::gz::msgs::Discovery>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Discovery_Flags* Arena::CreateMaybeMessage<::gz::msgs::Discovery_Flags>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Discovery_Publisher* Arena::CreateMaybeMessage<::gz::msgs::Discovery_Publisher>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Discovery_Publisher_MessagePublisher* Arena::CreateMaybeMessage<::gz::msgs::Discovery_Publisher_MessagePublisher>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Discovery_Publisher_ServicePublisher* Arena::CreateMaybeMessage<::gz::msgs::Discovery_Publisher_ServicePublisher>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Discovery_Subscriber* Arena::CreateMaybeMessage<::gz::msgs::Discovery_Subscriber>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

enum Discovery_Publisher_Scope {
  Discovery_Publisher_Scope_PROCESS = 0,
  Discovery_Publisher_Scope_HOST = 1,
  Discovery_Publisher_Scope_ALL = 2,
  Discovery_Publisher_Scope_Discovery_Publisher_Scope_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Discovery_Publisher_Scope_Discovery_Publisher_Scope_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool Discovery_Publisher_Scope_IsValid(int value);
const Discovery_Publisher_Scope Discovery_Publisher_Scope_Scope_MIN = Discovery_Publisher_Scope_PROCESS;
const Discovery_Publisher_Scope Discovery_Publisher_Scope_Scope_MAX = Discovery_Publisher_Scope_ALL;
const int Discovery_Publisher_Scope_Scope_ARRAYSIZE = Discovery_Publisher_Scope_Scope_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* Discovery_Publisher_Scope_descriptor();
inline const ::std::string& Discovery_Publisher_Scope_Name(Discovery_Publisher_Scope value) {
  return ::google::protobuf::internal::NameOfEnum(
    Discovery_Publisher_Scope_descriptor(), value);
}
inline bool Discovery_Publisher_Scope_Parse(
    const ::std::string& name, Discovery_Publisher_Scope* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Discovery_Publisher_Scope>(
    Discovery_Publisher_Scope_descriptor(), name, value);
}
enum Discovery_Type {
  Discovery_Type_UNINITIALIZED = 0,
  Discovery_Type_ADVERTISE = 1,
  Discovery_Type_SUBSCRIBE = 2,
  Discovery_Type_UNADVERTISE = 3,
  Discovery_Type_HEARTBEAT = 4,
  Discovery_Type_BYE = 5,
  Discovery_Type_NEW_CONNECTION = 6,
  Discovery_Type_END_CONNECTION = 7,
  Discovery_Type_SUBSCRIBERS_REQ = 8,
  Discovery_Type_SUBSCRIBERS_REP = 9,
  Discovery_Type_Discovery_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Discovery_Type_Discovery_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool Discovery_Type_IsValid(int value);
const Discovery_Type Discovery_Type_Type_MIN = Discovery_Type_UNINITIALIZED;
const Discovery_Type Discovery_Type_Type_MAX = Discovery_Type_SUBSCRIBERS_REP;
const int Discovery_Type_Type_ARRAYSIZE = Discovery_Type_Type_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* Discovery_Type_descriptor();
inline const ::std::string& Discovery_Type_Name(Discovery_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Discovery_Type_descriptor(), value);
}
inline bool Discovery_Type_Parse(
    const ::std::string& name, Discovery_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Discovery_Type>(
    Discovery_Type_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE Discovery_Flags : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Discovery.Flags) */ {
 public:
  Discovery_Flags();
  virtual ~Discovery_Flags();

  Discovery_Flags(const Discovery_Flags& from);

  inline Discovery_Flags& operator=(const Discovery_Flags& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Discovery_Flags(Discovery_Flags&& from) noexcept
    : Discovery_Flags() {
    *this = ::std::move(from);
  }

  inline Discovery_Flags& operator=(Discovery_Flags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Discovery_Flags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Discovery_Flags* internal_default_instance() {
    return reinterpret_cast<const Discovery_Flags*>(
               &_Discovery_Flags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Discovery_Flags* other);
  friend void swap(Discovery_Flags& a, Discovery_Flags& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Discovery_Flags* New() const final {
    return CreateMaybeMessage<Discovery_Flags>(NULL);
  }

  Discovery_Flags* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Discovery_Flags>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Discovery_Flags& from);
  void MergeFrom(const Discovery_Flags& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Discovery_Flags* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool relay = 1;
  void clear_relay();
  static const int kRelayFieldNumber = 1;
  bool relay() const;
  void set_relay(bool value);

  // bool no_relay = 2;
  void clear_no_relay();
  static const int kNoRelayFieldNumber = 2;
  bool no_relay() const;
  void set_no_relay(bool value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Discovery.Flags)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool relay_;
  bool no_relay_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE Discovery_Subscriber : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Discovery.Subscriber) */ {
 public:
  Discovery_Subscriber();
  virtual ~Discovery_Subscriber();

  Discovery_Subscriber(const Discovery_Subscriber& from);

  inline Discovery_Subscriber& operator=(const Discovery_Subscriber& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Discovery_Subscriber(Discovery_Subscriber&& from) noexcept
    : Discovery_Subscriber() {
    *this = ::std::move(from);
  }

  inline Discovery_Subscriber& operator=(Discovery_Subscriber&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Discovery_Subscriber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Discovery_Subscriber* internal_default_instance() {
    return reinterpret_cast<const Discovery_Subscriber*>(
               &_Discovery_Subscriber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Discovery_Subscriber* other);
  friend void swap(Discovery_Subscriber& a, Discovery_Subscriber& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Discovery_Subscriber* New() const final {
    return CreateMaybeMessage<Discovery_Subscriber>(NULL);
  }

  Discovery_Subscriber* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Discovery_Subscriber>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Discovery_Subscriber& from);
  void MergeFrom(const Discovery_Subscriber& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Discovery_Subscriber* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // @@protoc_insertion_point(class_scope:gz.msgs.Discovery.Subscriber)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE Discovery_Publisher_MessagePublisher : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Discovery.Publisher.MessagePublisher) */ {
 public:
  Discovery_Publisher_MessagePublisher();
  virtual ~Discovery_Publisher_MessagePublisher();

  Discovery_Publisher_MessagePublisher(const Discovery_Publisher_MessagePublisher& from);

  inline Discovery_Publisher_MessagePublisher& operator=(const Discovery_Publisher_MessagePublisher& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Discovery_Publisher_MessagePublisher(Discovery_Publisher_MessagePublisher&& from) noexcept
    : Discovery_Publisher_MessagePublisher() {
    *this = ::std::move(from);
  }

  inline Discovery_Publisher_MessagePublisher& operator=(Discovery_Publisher_MessagePublisher&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Discovery_Publisher_MessagePublisher& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Discovery_Publisher_MessagePublisher* internal_default_instance() {
    return reinterpret_cast<const Discovery_Publisher_MessagePublisher*>(
               &_Discovery_Publisher_MessagePublisher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Discovery_Publisher_MessagePublisher* other);
  friend void swap(Discovery_Publisher_MessagePublisher& a, Discovery_Publisher_MessagePublisher& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Discovery_Publisher_MessagePublisher* New() const final {
    return CreateMaybeMessage<Discovery_Publisher_MessagePublisher>(NULL);
  }

  Discovery_Publisher_MessagePublisher* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Discovery_Publisher_MessagePublisher>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Discovery_Publisher_MessagePublisher& from);
  void MergeFrom(const Discovery_Publisher_MessagePublisher& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Discovery_Publisher_MessagePublisher* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ctrl = 1;
  void clear_ctrl();
  static const int kCtrlFieldNumber = 1;
  const ::std::string& ctrl() const;
  void set_ctrl(const ::std::string& value);
  #if LANG_CXX11
  void set_ctrl(::std::string&& value);
  #endif
  void set_ctrl(const char* value);
  void set_ctrl(const char* value, size_t size);
  ::std::string* mutable_ctrl();
  ::std::string* release_ctrl();
  void set_allocated_ctrl(::std::string* ctrl);

  // string msg_type = 2;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 2;
  const ::std::string& msg_type() const;
  void set_msg_type(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_type(::std::string&& value);
  #endif
  void set_msg_type(const char* value);
  void set_msg_type(const char* value, size_t size);
  ::std::string* mutable_msg_type();
  ::std::string* release_msg_type();
  void set_allocated_msg_type(::std::string* msg_type);

  // uint64 msgs_per_sec = 4;
  void clear_msgs_per_sec();
  static const int kMsgsPerSecFieldNumber = 4;
  ::google::protobuf::uint64 msgs_per_sec() const;
  void set_msgs_per_sec(::google::protobuf::uint64 value);

  // bool throttled = 3;
  void clear_throttled();
  static const int kThrottledFieldNumber = 3;
  bool throttled() const;
  void set_throttled(bool value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Discovery.Publisher.MessagePublisher)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ctrl_;
  ::google::protobuf::internal::ArenaStringPtr msg_type_;
  ::google::protobuf::uint64 msgs_per_sec_;
  bool throttled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE Discovery_Publisher_ServicePublisher : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Discovery.Publisher.ServicePublisher) */ {
 public:
  Discovery_Publisher_ServicePublisher();
  virtual ~Discovery_Publisher_ServicePublisher();

  Discovery_Publisher_ServicePublisher(const Discovery_Publisher_ServicePublisher& from);

  inline Discovery_Publisher_ServicePublisher& operator=(const Discovery_Publisher_ServicePublisher& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Discovery_Publisher_ServicePublisher(Discovery_Publisher_ServicePublisher&& from) noexcept
    : Discovery_Publisher_ServicePublisher() {
    *this = ::std::move(from);
  }

  inline Discovery_Publisher_ServicePublisher& operator=(Discovery_Publisher_ServicePublisher&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Discovery_Publisher_ServicePublisher& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Discovery_Publisher_ServicePublisher* internal_default_instance() {
    return reinterpret_cast<const Discovery_Publisher_ServicePublisher*>(
               &_Discovery_Publisher_ServicePublisher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Discovery_Publisher_ServicePublisher* other);
  friend void swap(Discovery_Publisher_ServicePublisher& a, Discovery_Publisher_ServicePublisher& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Discovery_Publisher_ServicePublisher* New() const final {
    return CreateMaybeMessage<Discovery_Publisher_ServicePublisher>(NULL);
  }

  Discovery_Publisher_ServicePublisher* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Discovery_Publisher_ServicePublisher>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Discovery_Publisher_ServicePublisher& from);
  void MergeFrom(const Discovery_Publisher_ServicePublisher& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Discovery_Publisher_ServicePublisher* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string socket_id = 1;
  void clear_socket_id();
  static const int kSocketIdFieldNumber = 1;
  const ::std::string& socket_id() const;
  void set_socket_id(const ::std::string& value);
  #if LANG_CXX11
  void set_socket_id(::std::string&& value);
  #endif
  void set_socket_id(const char* value);
  void set_socket_id(const char* value, size_t size);
  ::std::string* mutable_socket_id();
  ::std::string* release_socket_id();
  void set_allocated_socket_id(::std::string* socket_id);

  // string request_type = 2;
  void clear_request_type();
  static const int kRequestTypeFieldNumber = 2;
  const ::std::string& request_type() const;
  void set_request_type(const ::std::string& value);
  #if LANG_CXX11
  void set_request_type(::std::string&& value);
  #endif
  void set_request_type(const char* value);
  void set_request_type(const char* value, size_t size);
  ::std::string* mutable_request_type();
  ::std::string* release_request_type();
  void set_allocated_request_type(::std::string* request_type);

  // string response_type = 3;
  void clear_response_type();
  static const int kResponseTypeFieldNumber = 3;
  const ::std::string& response_type() const;
  void set_response_type(const ::std::string& value);
  #if LANG_CXX11
  void set_response_type(::std::string&& value);
  #endif
  void set_response_type(const char* value);
  void set_response_type(const char* value, size_t size);
  ::std::string* mutable_response_type();
  ::std::string* release_response_type();
  void set_allocated_response_type(::std::string* response_type);

  // @@protoc_insertion_point(class_scope:gz.msgs.Discovery.Publisher.ServicePublisher)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr socket_id_;
  ::google::protobuf::internal::ArenaStringPtr request_type_;
  ::google::protobuf::internal::ArenaStringPtr response_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE Discovery_Publisher : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Discovery.Publisher) */ {
 public:
  Discovery_Publisher();
  virtual ~Discovery_Publisher();

  Discovery_Publisher(const Discovery_Publisher& from);

  inline Discovery_Publisher& operator=(const Discovery_Publisher& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Discovery_Publisher(Discovery_Publisher&& from) noexcept
    : Discovery_Publisher() {
    *this = ::std::move(from);
  }

  inline Discovery_Publisher& operator=(Discovery_Publisher&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Discovery_Publisher& default_instance();

  enum PubTypeCase {
    kMsgPub = 6,
    kSrvPub = 7,
    PUB_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Discovery_Publisher* internal_default_instance() {
    return reinterpret_cast<const Discovery_Publisher*>(
               &_Discovery_Publisher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Discovery_Publisher* other);
  friend void swap(Discovery_Publisher& a, Discovery_Publisher& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Discovery_Publisher* New() const final {
    return CreateMaybeMessage<Discovery_Publisher>(NULL);
  }

  Discovery_Publisher* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Discovery_Publisher>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Discovery_Publisher& from);
  void MergeFrom(const Discovery_Publisher& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Discovery_Publisher* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Discovery_Publisher_MessagePublisher MessagePublisher;
  typedef Discovery_Publisher_ServicePublisher ServicePublisher;

  typedef Discovery_Publisher_Scope Scope;
  static const Scope PROCESS =
    Discovery_Publisher_Scope_PROCESS;
  static const Scope HOST =
    Discovery_Publisher_Scope_HOST;
  static const Scope ALL =
    Discovery_Publisher_Scope_ALL;
  static inline bool Scope_IsValid(int value) {
    return Discovery_Publisher_Scope_IsValid(value);
  }
  static const Scope Scope_MIN =
    Discovery_Publisher_Scope_Scope_MIN;
  static const Scope Scope_MAX =
    Discovery_Publisher_Scope_Scope_MAX;
  static const int Scope_ARRAYSIZE =
    Discovery_Publisher_Scope_Scope_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Scope_descriptor() {
    return Discovery_Publisher_Scope_descriptor();
  }
  static inline const ::std::string& Scope_Name(Scope value) {
    return Discovery_Publisher_Scope_Name(value);
  }
  static inline bool Scope_Parse(const ::std::string& name,
      Scope* value) {
    return Discovery_Publisher_Scope_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string process_uuid = 3;
  void clear_process_uuid();
  static const int kProcessUuidFieldNumber = 3;
  const ::std::string& process_uuid() const;
  void set_process_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_process_uuid(::std::string&& value);
  #endif
  void set_process_uuid(const char* value);
  void set_process_uuid(const char* value, size_t size);
  ::std::string* mutable_process_uuid();
  ::std::string* release_process_uuid();
  void set_allocated_process_uuid(::std::string* process_uuid);

  // string node_uuid = 4;
  void clear_node_uuid();
  static const int kNodeUuidFieldNumber = 4;
  const ::std::string& node_uuid() const;
  void set_node_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_node_uuid(::std::string&& value);
  #endif
  void set_node_uuid(const char* value);
  void set_node_uuid(const char* value, size_t size);
  ::std::string* mutable_node_uuid();
  ::std::string* release_node_uuid();
  void set_allocated_node_uuid(::std::string* node_uuid);

  // .gz.msgs.Discovery.Publisher.Scope scope = 5;
  void clear_scope();
  static const int kScopeFieldNumber = 5;
  ::gz::msgs::Discovery_Publisher_Scope scope() const;
  void set_scope(::gz::msgs::Discovery_Publisher_Scope value);

  // .gz.msgs.Discovery.Publisher.MessagePublisher msg_pub = 6;
  bool has_msg_pub() const;
  void clear_msg_pub();
  static const int kMsgPubFieldNumber = 6;
  private:
  const ::gz::msgs::Discovery_Publisher_MessagePublisher& _internal_msg_pub() const;
  public:
  const ::gz::msgs::Discovery_Publisher_MessagePublisher& msg_pub() const;
  ::gz::msgs::Discovery_Publisher_MessagePublisher* release_msg_pub();
  ::gz::msgs::Discovery_Publisher_MessagePublisher* mutable_msg_pub();
  void set_allocated_msg_pub(::gz::msgs::Discovery_Publisher_MessagePublisher* msg_pub);

  // .gz.msgs.Discovery.Publisher.ServicePublisher srv_pub = 7;
  bool has_srv_pub() const;
  void clear_srv_pub();
  static const int kSrvPubFieldNumber = 7;
  private:
  const ::gz::msgs::Discovery_Publisher_ServicePublisher& _internal_srv_pub() const;
  public:
  const ::gz::msgs::Discovery_Publisher_ServicePublisher& srv_pub() const;
  ::gz::msgs::Discovery_Publisher_ServicePublisher* release_srv_pub();
  ::gz::msgs::Discovery_Publisher_ServicePublisher* mutable_srv_pub();
  void set_allocated_srv_pub(::gz::msgs::Discovery_Publisher_ServicePublisher* srv_pub);

  void clear_pub_type();
  PubTypeCase pub_type_case() const;
  // @@protoc_insertion_point(class_scope:gz.msgs.Discovery.Publisher)
 private:
  void set_has_msg_pub();
  void set_has_srv_pub();

  inline bool has_pub_type() const;
  inline void clear_has_pub_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr process_uuid_;
  ::google::protobuf::internal::ArenaStringPtr node_uuid_;
  int scope_;
  union PubTypeUnion {
    PubTypeUnion() {}
    ::gz::msgs::Discovery_Publisher_MessagePublisher* msg_pub_;
    ::gz::msgs::Discovery_Publisher_ServicePublisher* srv_pub_;
  } pub_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE Discovery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Discovery) */ {
 public:
  Discovery();
  virtual ~Discovery();

  Discovery(const Discovery& from);

  inline Discovery& operator=(const Discovery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Discovery(Discovery&& from) noexcept
    : Discovery() {
    *this = ::std::move(from);
  }

  inline Discovery& operator=(Discovery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Discovery& default_instance();

  enum DiscContentsCase {
    kSub = 6,
    kPub = 7,
    DISC_CONTENTS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Discovery* internal_default_instance() {
    return reinterpret_cast<const Discovery*>(
               &_Discovery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Discovery* other);
  friend void swap(Discovery& a, Discovery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Discovery* New() const final {
    return CreateMaybeMessage<Discovery>(NULL);
  }

  Discovery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Discovery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Discovery& from);
  void MergeFrom(const Discovery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Discovery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Discovery_Flags Flags;
  typedef Discovery_Subscriber Subscriber;
  typedef Discovery_Publisher Publisher;

  typedef Discovery_Type Type;
  static const Type UNINITIALIZED =
    Discovery_Type_UNINITIALIZED;
  static const Type ADVERTISE =
    Discovery_Type_ADVERTISE;
  static const Type SUBSCRIBE =
    Discovery_Type_SUBSCRIBE;
  static const Type UNADVERTISE =
    Discovery_Type_UNADVERTISE;
  static const Type HEARTBEAT =
    Discovery_Type_HEARTBEAT;
  static const Type BYE =
    Discovery_Type_BYE;
  static const Type NEW_CONNECTION =
    Discovery_Type_NEW_CONNECTION;
  static const Type END_CONNECTION =
    Discovery_Type_END_CONNECTION;
  static const Type SUBSCRIBERS_REQ =
    Discovery_Type_SUBSCRIBERS_REQ;
  static const Type SUBSCRIBERS_REP =
    Discovery_Type_SUBSCRIBERS_REP;
  static inline bool Type_IsValid(int value) {
    return Discovery_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Discovery_Type_Type_MIN;
  static const Type Type_MAX =
    Discovery_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Discovery_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Discovery_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Discovery_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Discovery_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string process_uuid = 3;
  void clear_process_uuid();
  static const int kProcessUuidFieldNumber = 3;
  const ::std::string& process_uuid() const;
  void set_process_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_process_uuid(::std::string&& value);
  #endif
  void set_process_uuid(const char* value);
  void set_process_uuid(const char* value, size_t size);
  ::std::string* mutable_process_uuid();
  ::std::string* release_process_uuid();
  void set_allocated_process_uuid(::std::string* process_uuid);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Discovery.Flags flags = 5;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 5;
  private:
  const ::gz::msgs::Discovery_Flags& _internal_flags() const;
  public:
  const ::gz::msgs::Discovery_Flags& flags() const;
  ::gz::msgs::Discovery_Flags* release_flags();
  ::gz::msgs::Discovery_Flags* mutable_flags();
  void set_allocated_flags(::gz::msgs::Discovery_Flags* flags);

  // uint32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // .gz.msgs.Discovery.Type type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::gz::msgs::Discovery_Type type() const;
  void set_type(::gz::msgs::Discovery_Type value);

  // .gz.msgs.Discovery.Subscriber sub = 6;
  bool has_sub() const;
  void clear_sub();
  static const int kSubFieldNumber = 6;
  private:
  const ::gz::msgs::Discovery_Subscriber& _internal_sub() const;
  public:
  const ::gz::msgs::Discovery_Subscriber& sub() const;
  ::gz::msgs::Discovery_Subscriber* release_sub();
  ::gz::msgs::Discovery_Subscriber* mutable_sub();
  void set_allocated_sub(::gz::msgs::Discovery_Subscriber* sub);

  // .gz.msgs.Discovery.Publisher pub = 7;
  bool has_pub() const;
  void clear_pub();
  static const int kPubFieldNumber = 7;
  private:
  const ::gz::msgs::Discovery_Publisher& _internal_pub() const;
  public:
  const ::gz::msgs::Discovery_Publisher& pub() const;
  ::gz::msgs::Discovery_Publisher* release_pub();
  ::gz::msgs::Discovery_Publisher* mutable_pub();
  void set_allocated_pub(::gz::msgs::Discovery_Publisher* pub);

  void clear_disc_contents();
  DiscContentsCase disc_contents_case() const;
  // @@protoc_insertion_point(class_scope:gz.msgs.Discovery)
 private:
  void set_has_sub();
  void set_has_pub();

  inline bool has_disc_contents() const;
  inline void clear_has_disc_contents();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr process_uuid_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Discovery_Flags* flags_;
  ::google::protobuf::uint32 version_;
  int type_;
  union DiscContentsUnion {
    DiscContentsUnion() {}
    ::gz::msgs::Discovery_Subscriber* sub_;
    ::gz::msgs::Discovery_Publisher* pub_;
  } disc_contents_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Discovery_Flags

// bool relay = 1;
inline void Discovery_Flags::clear_relay() {
  relay_ = false;
}
inline bool Discovery_Flags::relay() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.Flags.relay)
  return relay_;
}
inline void Discovery_Flags::set_relay(bool value) {
  
  relay_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Discovery.Flags.relay)
}

// bool no_relay = 2;
inline void Discovery_Flags::clear_no_relay() {
  no_relay_ = false;
}
inline bool Discovery_Flags::no_relay() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.Flags.no_relay)
  return no_relay_;
}
inline void Discovery_Flags::set_no_relay(bool value) {
  
  no_relay_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Discovery.Flags.no_relay)
}

// -------------------------------------------------------------------

// Discovery_Subscriber

// string topic = 1;
inline void Discovery_Subscriber::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Discovery_Subscriber::topic() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.Subscriber.topic)
  return topic_.GetNoArena();
}
inline void Discovery_Subscriber::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Discovery.Subscriber.topic)
}
#if LANG_CXX11
inline void Discovery_Subscriber::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Discovery.Subscriber.topic)
}
#endif
inline void Discovery_Subscriber::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Discovery.Subscriber.topic)
}
inline void Discovery_Subscriber::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Discovery.Subscriber.topic)
}
inline ::std::string* Discovery_Subscriber::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Discovery.Subscriber.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Discovery_Subscriber::release_topic() {
  // @@protoc_insertion_point(field_release:gz.msgs.Discovery.Subscriber.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Discovery_Subscriber::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Discovery.Subscriber.topic)
}

// -------------------------------------------------------------------

// Discovery_Publisher_MessagePublisher

// string ctrl = 1;
inline void Discovery_Publisher_MessagePublisher::clear_ctrl() {
  ctrl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Discovery_Publisher_MessagePublisher::ctrl() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.Publisher.MessagePublisher.ctrl)
  return ctrl_.GetNoArena();
}
inline void Discovery_Publisher_MessagePublisher::set_ctrl(const ::std::string& value) {
  
  ctrl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Discovery.Publisher.MessagePublisher.ctrl)
}
#if LANG_CXX11
inline void Discovery_Publisher_MessagePublisher::set_ctrl(::std::string&& value) {
  
  ctrl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Discovery.Publisher.MessagePublisher.ctrl)
}
#endif
inline void Discovery_Publisher_MessagePublisher::set_ctrl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ctrl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Discovery.Publisher.MessagePublisher.ctrl)
}
inline void Discovery_Publisher_MessagePublisher::set_ctrl(const char* value, size_t size) {
  
  ctrl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Discovery.Publisher.MessagePublisher.ctrl)
}
inline ::std::string* Discovery_Publisher_MessagePublisher::mutable_ctrl() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Discovery.Publisher.MessagePublisher.ctrl)
  return ctrl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Discovery_Publisher_MessagePublisher::release_ctrl() {
  // @@protoc_insertion_point(field_release:gz.msgs.Discovery.Publisher.MessagePublisher.ctrl)
  
  return ctrl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Discovery_Publisher_MessagePublisher::set_allocated_ctrl(::std::string* ctrl) {
  if (ctrl != NULL) {
    
  } else {
    
  }
  ctrl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ctrl);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Discovery.Publisher.MessagePublisher.ctrl)
}

// string msg_type = 2;
inline void Discovery_Publisher_MessagePublisher::clear_msg_type() {
  msg_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Discovery_Publisher_MessagePublisher::msg_type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.Publisher.MessagePublisher.msg_type)
  return msg_type_.GetNoArena();
}
inline void Discovery_Publisher_MessagePublisher::set_msg_type(const ::std::string& value) {
  
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Discovery.Publisher.MessagePublisher.msg_type)
}
#if LANG_CXX11
inline void Discovery_Publisher_MessagePublisher::set_msg_type(::std::string&& value) {
  
  msg_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Discovery.Publisher.MessagePublisher.msg_type)
}
#endif
inline void Discovery_Publisher_MessagePublisher::set_msg_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Discovery.Publisher.MessagePublisher.msg_type)
}
inline void Discovery_Publisher_MessagePublisher::set_msg_type(const char* value, size_t size) {
  
  msg_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Discovery.Publisher.MessagePublisher.msg_type)
}
inline ::std::string* Discovery_Publisher_MessagePublisher::mutable_msg_type() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Discovery.Publisher.MessagePublisher.msg_type)
  return msg_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Discovery_Publisher_MessagePublisher::release_msg_type() {
  // @@protoc_insertion_point(field_release:gz.msgs.Discovery.Publisher.MessagePublisher.msg_type)
  
  return msg_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Discovery_Publisher_MessagePublisher::set_allocated_msg_type(::std::string* msg_type) {
  if (msg_type != NULL) {
    
  } else {
    
  }
  msg_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_type);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Discovery.Publisher.MessagePublisher.msg_type)
}

// bool throttled = 3;
inline void Discovery_Publisher_MessagePublisher::clear_throttled() {
  throttled_ = false;
}
inline bool Discovery_Publisher_MessagePublisher::throttled() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.Publisher.MessagePublisher.throttled)
  return throttled_;
}
inline void Discovery_Publisher_MessagePublisher::set_throttled(bool value) {
  
  throttled_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Discovery.Publisher.MessagePublisher.throttled)
}

// uint64 msgs_per_sec = 4;
inline void Discovery_Publisher_MessagePublisher::clear_msgs_per_sec() {
  msgs_per_sec_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Discovery_Publisher_MessagePublisher::msgs_per_sec() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.Publisher.MessagePublisher.msgs_per_sec)
  return msgs_per_sec_;
}
inline void Discovery_Publisher_MessagePublisher::set_msgs_per_sec(::google::protobuf::uint64 value) {
  
  msgs_per_sec_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Discovery.Publisher.MessagePublisher.msgs_per_sec)
}

// -------------------------------------------------------------------

// Discovery_Publisher_ServicePublisher

// string socket_id = 1;
inline void Discovery_Publisher_ServicePublisher::clear_socket_id() {
  socket_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Discovery_Publisher_ServicePublisher::socket_id() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.Publisher.ServicePublisher.socket_id)
  return socket_id_.GetNoArena();
}
inline void Discovery_Publisher_ServicePublisher::set_socket_id(const ::std::string& value) {
  
  socket_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Discovery.Publisher.ServicePublisher.socket_id)
}
#if LANG_CXX11
inline void Discovery_Publisher_ServicePublisher::set_socket_id(::std::string&& value) {
  
  socket_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Discovery.Publisher.ServicePublisher.socket_id)
}
#endif
inline void Discovery_Publisher_ServicePublisher::set_socket_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  socket_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Discovery.Publisher.ServicePublisher.socket_id)
}
inline void Discovery_Publisher_ServicePublisher::set_socket_id(const char* value, size_t size) {
  
  socket_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Discovery.Publisher.ServicePublisher.socket_id)
}
inline ::std::string* Discovery_Publisher_ServicePublisher::mutable_socket_id() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Discovery.Publisher.ServicePublisher.socket_id)
  return socket_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Discovery_Publisher_ServicePublisher::release_socket_id() {
  // @@protoc_insertion_point(field_release:gz.msgs.Discovery.Publisher.ServicePublisher.socket_id)
  
  return socket_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Discovery_Publisher_ServicePublisher::set_allocated_socket_id(::std::string* socket_id) {
  if (socket_id != NULL) {
    
  } else {
    
  }
  socket_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), socket_id);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Discovery.Publisher.ServicePublisher.socket_id)
}

// string request_type = 2;
inline void Discovery_Publisher_ServicePublisher::clear_request_type() {
  request_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Discovery_Publisher_ServicePublisher::request_type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.Publisher.ServicePublisher.request_type)
  return request_type_.GetNoArena();
}
inline void Discovery_Publisher_ServicePublisher::set_request_type(const ::std::string& value) {
  
  request_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Discovery.Publisher.ServicePublisher.request_type)
}
#if LANG_CXX11
inline void Discovery_Publisher_ServicePublisher::set_request_type(::std::string&& value) {
  
  request_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Discovery.Publisher.ServicePublisher.request_type)
}
#endif
inline void Discovery_Publisher_ServicePublisher::set_request_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Discovery.Publisher.ServicePublisher.request_type)
}
inline void Discovery_Publisher_ServicePublisher::set_request_type(const char* value, size_t size) {
  
  request_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Discovery.Publisher.ServicePublisher.request_type)
}
inline ::std::string* Discovery_Publisher_ServicePublisher::mutable_request_type() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Discovery.Publisher.ServicePublisher.request_type)
  return request_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Discovery_Publisher_ServicePublisher::release_request_type() {
  // @@protoc_insertion_point(field_release:gz.msgs.Discovery.Publisher.ServicePublisher.request_type)
  
  return request_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Discovery_Publisher_ServicePublisher::set_allocated_request_type(::std::string* request_type) {
  if (request_type != NULL) {
    
  } else {
    
  }
  request_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_type);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Discovery.Publisher.ServicePublisher.request_type)
}

// string response_type = 3;
inline void Discovery_Publisher_ServicePublisher::clear_response_type() {
  response_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Discovery_Publisher_ServicePublisher::response_type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.Publisher.ServicePublisher.response_type)
  return response_type_.GetNoArena();
}
inline void Discovery_Publisher_ServicePublisher::set_response_type(const ::std::string& value) {
  
  response_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Discovery.Publisher.ServicePublisher.response_type)
}
#if LANG_CXX11
inline void Discovery_Publisher_ServicePublisher::set_response_type(::std::string&& value) {
  
  response_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Discovery.Publisher.ServicePublisher.response_type)
}
#endif
inline void Discovery_Publisher_ServicePublisher::set_response_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Discovery.Publisher.ServicePublisher.response_type)
}
inline void Discovery_Publisher_ServicePublisher::set_response_type(const char* value, size_t size) {
  
  response_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Discovery.Publisher.ServicePublisher.response_type)
}
inline ::std::string* Discovery_Publisher_ServicePublisher::mutable_response_type() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Discovery.Publisher.ServicePublisher.response_type)
  return response_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Discovery_Publisher_ServicePublisher::release_response_type() {
  // @@protoc_insertion_point(field_release:gz.msgs.Discovery.Publisher.ServicePublisher.response_type)
  
  return response_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Discovery_Publisher_ServicePublisher::set_allocated_response_type(::std::string* response_type) {
  if (response_type != NULL) {
    
  } else {
    
  }
  response_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_type);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Discovery.Publisher.ServicePublisher.response_type)
}

// -------------------------------------------------------------------

// Discovery_Publisher

// string topic = 1;
inline void Discovery_Publisher::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Discovery_Publisher::topic() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.Publisher.topic)
  return topic_.GetNoArena();
}
inline void Discovery_Publisher::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Discovery.Publisher.topic)
}
#if LANG_CXX11
inline void Discovery_Publisher::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Discovery.Publisher.topic)
}
#endif
inline void Discovery_Publisher::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Discovery.Publisher.topic)
}
inline void Discovery_Publisher::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Discovery.Publisher.topic)
}
inline ::std::string* Discovery_Publisher::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Discovery.Publisher.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Discovery_Publisher::release_topic() {
  // @@protoc_insertion_point(field_release:gz.msgs.Discovery.Publisher.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Discovery_Publisher::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Discovery.Publisher.topic)
}

// string address = 2;
inline void Discovery_Publisher::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Discovery_Publisher::address() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.Publisher.address)
  return address_.GetNoArena();
}
inline void Discovery_Publisher::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Discovery.Publisher.address)
}
#if LANG_CXX11
inline void Discovery_Publisher::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Discovery.Publisher.address)
}
#endif
inline void Discovery_Publisher::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Discovery.Publisher.address)
}
inline void Discovery_Publisher::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Discovery.Publisher.address)
}
inline ::std::string* Discovery_Publisher::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Discovery.Publisher.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Discovery_Publisher::release_address() {
  // @@protoc_insertion_point(field_release:gz.msgs.Discovery.Publisher.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Discovery_Publisher::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Discovery.Publisher.address)
}

// string process_uuid = 3;
inline void Discovery_Publisher::clear_process_uuid() {
  process_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Discovery_Publisher::process_uuid() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.Publisher.process_uuid)
  return process_uuid_.GetNoArena();
}
inline void Discovery_Publisher::set_process_uuid(const ::std::string& value) {
  
  process_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Discovery.Publisher.process_uuid)
}
#if LANG_CXX11
inline void Discovery_Publisher::set_process_uuid(::std::string&& value) {
  
  process_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Discovery.Publisher.process_uuid)
}
#endif
inline void Discovery_Publisher::set_process_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  process_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Discovery.Publisher.process_uuid)
}
inline void Discovery_Publisher::set_process_uuid(const char* value, size_t size) {
  
  process_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Discovery.Publisher.process_uuid)
}
inline ::std::string* Discovery_Publisher::mutable_process_uuid() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Discovery.Publisher.process_uuid)
  return process_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Discovery_Publisher::release_process_uuid() {
  // @@protoc_insertion_point(field_release:gz.msgs.Discovery.Publisher.process_uuid)
  
  return process_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Discovery_Publisher::set_allocated_process_uuid(::std::string* process_uuid) {
  if (process_uuid != NULL) {
    
  } else {
    
  }
  process_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_uuid);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Discovery.Publisher.process_uuid)
}

// string node_uuid = 4;
inline void Discovery_Publisher::clear_node_uuid() {
  node_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Discovery_Publisher::node_uuid() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.Publisher.node_uuid)
  return node_uuid_.GetNoArena();
}
inline void Discovery_Publisher::set_node_uuid(const ::std::string& value) {
  
  node_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Discovery.Publisher.node_uuid)
}
#if LANG_CXX11
inline void Discovery_Publisher::set_node_uuid(::std::string&& value) {
  
  node_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Discovery.Publisher.node_uuid)
}
#endif
inline void Discovery_Publisher::set_node_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Discovery.Publisher.node_uuid)
}
inline void Discovery_Publisher::set_node_uuid(const char* value, size_t size) {
  
  node_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Discovery.Publisher.node_uuid)
}
inline ::std::string* Discovery_Publisher::mutable_node_uuid() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Discovery.Publisher.node_uuid)
  return node_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Discovery_Publisher::release_node_uuid() {
  // @@protoc_insertion_point(field_release:gz.msgs.Discovery.Publisher.node_uuid)
  
  return node_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Discovery_Publisher::set_allocated_node_uuid(::std::string* node_uuid) {
  if (node_uuid != NULL) {
    
  } else {
    
  }
  node_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_uuid);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Discovery.Publisher.node_uuid)
}

// .gz.msgs.Discovery.Publisher.Scope scope = 5;
inline void Discovery_Publisher::clear_scope() {
  scope_ = 0;
}
inline ::gz::msgs::Discovery_Publisher_Scope Discovery_Publisher::scope() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.Publisher.scope)
  return static_cast< ::gz::msgs::Discovery_Publisher_Scope >(scope_);
}
inline void Discovery_Publisher::set_scope(::gz::msgs::Discovery_Publisher_Scope value) {
  
  scope_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Discovery.Publisher.scope)
}

// .gz.msgs.Discovery.Publisher.MessagePublisher msg_pub = 6;
inline bool Discovery_Publisher::has_msg_pub() const {
  return pub_type_case() == kMsgPub;
}
inline void Discovery_Publisher::set_has_msg_pub() {
  _oneof_case_[0] = kMsgPub;
}
inline void Discovery_Publisher::clear_msg_pub() {
  if (has_msg_pub()) {
    delete pub_type_.msg_pub_;
    clear_has_pub_type();
  }
}
inline const ::gz::msgs::Discovery_Publisher_MessagePublisher& Discovery_Publisher::_internal_msg_pub() const {
  return *pub_type_.msg_pub_;
}
inline ::gz::msgs::Discovery_Publisher_MessagePublisher* Discovery_Publisher::release_msg_pub() {
  // @@protoc_insertion_point(field_release:gz.msgs.Discovery.Publisher.msg_pub)
  if (has_msg_pub()) {
    clear_has_pub_type();
      ::gz::msgs::Discovery_Publisher_MessagePublisher* temp = pub_type_.msg_pub_;
    pub_type_.msg_pub_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gz::msgs::Discovery_Publisher_MessagePublisher& Discovery_Publisher::msg_pub() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.Publisher.msg_pub)
  return has_msg_pub()
      ? *pub_type_.msg_pub_
      : *reinterpret_cast< ::gz::msgs::Discovery_Publisher_MessagePublisher*>(&::gz::msgs::_Discovery_Publisher_MessagePublisher_default_instance_);
}
inline ::gz::msgs::Discovery_Publisher_MessagePublisher* Discovery_Publisher::mutable_msg_pub() {
  if (!has_msg_pub()) {
    clear_pub_type();
    set_has_msg_pub();
    pub_type_.msg_pub_ = CreateMaybeMessage< ::gz::msgs::Discovery_Publisher_MessagePublisher >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Discovery.Publisher.msg_pub)
  return pub_type_.msg_pub_;
}

// .gz.msgs.Discovery.Publisher.ServicePublisher srv_pub = 7;
inline bool Discovery_Publisher::has_srv_pub() const {
  return pub_type_case() == kSrvPub;
}
inline void Discovery_Publisher::set_has_srv_pub() {
  _oneof_case_[0] = kSrvPub;
}
inline void Discovery_Publisher::clear_srv_pub() {
  if (has_srv_pub()) {
    delete pub_type_.srv_pub_;
    clear_has_pub_type();
  }
}
inline const ::gz::msgs::Discovery_Publisher_ServicePublisher& Discovery_Publisher::_internal_srv_pub() const {
  return *pub_type_.srv_pub_;
}
inline ::gz::msgs::Discovery_Publisher_ServicePublisher* Discovery_Publisher::release_srv_pub() {
  // @@protoc_insertion_point(field_release:gz.msgs.Discovery.Publisher.srv_pub)
  if (has_srv_pub()) {
    clear_has_pub_type();
      ::gz::msgs::Discovery_Publisher_ServicePublisher* temp = pub_type_.srv_pub_;
    pub_type_.srv_pub_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gz::msgs::Discovery_Publisher_ServicePublisher& Discovery_Publisher::srv_pub() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.Publisher.srv_pub)
  return has_srv_pub()
      ? *pub_type_.srv_pub_
      : *reinterpret_cast< ::gz::msgs::Discovery_Publisher_ServicePublisher*>(&::gz::msgs::_Discovery_Publisher_ServicePublisher_default_instance_);
}
inline ::gz::msgs::Discovery_Publisher_ServicePublisher* Discovery_Publisher::mutable_srv_pub() {
  if (!has_srv_pub()) {
    clear_pub_type();
    set_has_srv_pub();
    pub_type_.srv_pub_ = CreateMaybeMessage< ::gz::msgs::Discovery_Publisher_ServicePublisher >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Discovery.Publisher.srv_pub)
  return pub_type_.srv_pub_;
}

inline bool Discovery_Publisher::has_pub_type() const {
  return pub_type_case() != PUB_TYPE_NOT_SET;
}
inline void Discovery_Publisher::clear_has_pub_type() {
  _oneof_case_[0] = PUB_TYPE_NOT_SET;
}
inline Discovery_Publisher::PubTypeCase Discovery_Publisher::pub_type_case() const {
  return Discovery_Publisher::PubTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Discovery

// .gz.msgs.Header header = 1;
inline bool Discovery::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& Discovery::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& Discovery::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* Discovery::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.Discovery.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* Discovery::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Discovery.header)
  return header_;
}
inline void Discovery::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Discovery.header)
}

// uint32 version = 2;
inline void Discovery::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 Discovery::version() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.version)
  return version_;
}
inline void Discovery::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Discovery.version)
}

// string process_uuid = 3;
inline void Discovery::clear_process_uuid() {
  process_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Discovery::process_uuid() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.process_uuid)
  return process_uuid_.GetNoArena();
}
inline void Discovery::set_process_uuid(const ::std::string& value) {
  
  process_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Discovery.process_uuid)
}
#if LANG_CXX11
inline void Discovery::set_process_uuid(::std::string&& value) {
  
  process_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Discovery.process_uuid)
}
#endif
inline void Discovery::set_process_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  process_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Discovery.process_uuid)
}
inline void Discovery::set_process_uuid(const char* value, size_t size) {
  
  process_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Discovery.process_uuid)
}
inline ::std::string* Discovery::mutable_process_uuid() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Discovery.process_uuid)
  return process_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Discovery::release_process_uuid() {
  // @@protoc_insertion_point(field_release:gz.msgs.Discovery.process_uuid)
  
  return process_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Discovery::set_allocated_process_uuid(::std::string* process_uuid) {
  if (process_uuid != NULL) {
    
  } else {
    
  }
  process_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_uuid);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Discovery.process_uuid)
}

// .gz.msgs.Discovery.Type type = 4;
inline void Discovery::clear_type() {
  type_ = 0;
}
inline ::gz::msgs::Discovery_Type Discovery::type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.type)
  return static_cast< ::gz::msgs::Discovery_Type >(type_);
}
inline void Discovery::set_type(::gz::msgs::Discovery_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Discovery.type)
}

// .gz.msgs.Discovery.Flags flags = 5;
inline bool Discovery::has_flags() const {
  return this != internal_default_instance() && flags_ != NULL;
}
inline void Discovery::clear_flags() {
  if (GetArenaNoVirtual() == NULL && flags_ != NULL) {
    delete flags_;
  }
  flags_ = NULL;
}
inline const ::gz::msgs::Discovery_Flags& Discovery::_internal_flags() const {
  return *flags_;
}
inline const ::gz::msgs::Discovery_Flags& Discovery::flags() const {
  const ::gz::msgs::Discovery_Flags* p = flags_;
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.flags)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Discovery_Flags*>(
      &::gz::msgs::_Discovery_Flags_default_instance_);
}
inline ::gz::msgs::Discovery_Flags* Discovery::release_flags() {
  // @@protoc_insertion_point(field_release:gz.msgs.Discovery.flags)
  
  ::gz::msgs::Discovery_Flags* temp = flags_;
  flags_ = NULL;
  return temp;
}
inline ::gz::msgs::Discovery_Flags* Discovery::mutable_flags() {
  
  if (flags_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Discovery_Flags>(GetArenaNoVirtual());
    flags_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Discovery.flags)
  return flags_;
}
inline void Discovery::set_allocated_flags(::gz::msgs::Discovery_Flags* flags) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete flags_;
  }
  if (flags) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      flags = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, flags, submessage_arena);
    }
    
  } else {
    
  }
  flags_ = flags;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Discovery.flags)
}

// .gz.msgs.Discovery.Subscriber sub = 6;
inline bool Discovery::has_sub() const {
  return disc_contents_case() == kSub;
}
inline void Discovery::set_has_sub() {
  _oneof_case_[0] = kSub;
}
inline void Discovery::clear_sub() {
  if (has_sub()) {
    delete disc_contents_.sub_;
    clear_has_disc_contents();
  }
}
inline const ::gz::msgs::Discovery_Subscriber& Discovery::_internal_sub() const {
  return *disc_contents_.sub_;
}
inline ::gz::msgs::Discovery_Subscriber* Discovery::release_sub() {
  // @@protoc_insertion_point(field_release:gz.msgs.Discovery.sub)
  if (has_sub()) {
    clear_has_disc_contents();
      ::gz::msgs::Discovery_Subscriber* temp = disc_contents_.sub_;
    disc_contents_.sub_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gz::msgs::Discovery_Subscriber& Discovery::sub() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.sub)
  return has_sub()
      ? *disc_contents_.sub_
      : *reinterpret_cast< ::gz::msgs::Discovery_Subscriber*>(&::gz::msgs::_Discovery_Subscriber_default_instance_);
}
inline ::gz::msgs::Discovery_Subscriber* Discovery::mutable_sub() {
  if (!has_sub()) {
    clear_disc_contents();
    set_has_sub();
    disc_contents_.sub_ = CreateMaybeMessage< ::gz::msgs::Discovery_Subscriber >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Discovery.sub)
  return disc_contents_.sub_;
}

// .gz.msgs.Discovery.Publisher pub = 7;
inline bool Discovery::has_pub() const {
  return disc_contents_case() == kPub;
}
inline void Discovery::set_has_pub() {
  _oneof_case_[0] = kPub;
}
inline void Discovery::clear_pub() {
  if (has_pub()) {
    delete disc_contents_.pub_;
    clear_has_disc_contents();
  }
}
inline const ::gz::msgs::Discovery_Publisher& Discovery::_internal_pub() const {
  return *disc_contents_.pub_;
}
inline ::gz::msgs::Discovery_Publisher* Discovery::release_pub() {
  // @@protoc_insertion_point(field_release:gz.msgs.Discovery.pub)
  if (has_pub()) {
    clear_has_disc_contents();
      ::gz::msgs::Discovery_Publisher* temp = disc_contents_.pub_;
    disc_contents_.pub_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gz::msgs::Discovery_Publisher& Discovery::pub() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Discovery.pub)
  return has_pub()
      ? *disc_contents_.pub_
      : *reinterpret_cast< ::gz::msgs::Discovery_Publisher*>(&::gz::msgs::_Discovery_Publisher_default_instance_);
}
inline ::gz::msgs::Discovery_Publisher* Discovery::mutable_pub() {
  if (!has_pub()) {
    clear_disc_contents();
    set_has_pub();
    disc_contents_.pub_ = CreateMaybeMessage< ::gz::msgs::Discovery_Publisher >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Discovery.pub)
  return disc_contents_.pub_;
}

inline bool Discovery::has_disc_contents() const {
  return disc_contents_case() != DISC_CONTENTS_NOT_SET;
}
inline void Discovery::clear_has_disc_contents() {
  _oneof_case_[0] = DISC_CONTENTS_NOT_SET;
}
inline Discovery::DiscContentsCase Discovery::disc_contents_case() const {
  return Discovery::DiscContentsCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::msgs::Discovery_Publisher_Scope> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::Discovery_Publisher_Scope>() {
  return ::gz::msgs::Discovery_Publisher_Scope_descriptor();
}
template <> struct is_proto_enum< ::gz::msgs::Discovery_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::Discovery_Type>() {
  return ::gz::msgs::Discovery_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fdiscovery_2eproto
