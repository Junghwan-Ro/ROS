// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/friction.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2ffriction_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2ffriction_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/vector3d.pb.h"
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2ffriction_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2ffriction_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2ffriction_2eproto
namespace gz {
namespace msgs {
class Friction;
class FrictionDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern FrictionDefaultTypeInternal _Friction_default_instance_;
class Friction_Torsional;
class Friction_TorsionalDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern Friction_TorsionalDefaultTypeInternal _Friction_Torsional_default_instance_;
class Friction_Torsional_ODE;
class Friction_Torsional_ODEDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern Friction_Torsional_ODEDefaultTypeInternal _Friction_Torsional_ODE_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Friction* Arena::CreateMaybeMessage<::gz::msgs::Friction>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Friction_Torsional* Arena::CreateMaybeMessage<::gz::msgs::Friction_Torsional>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Friction_Torsional_ODE* Arena::CreateMaybeMessage<::gz::msgs::Friction_Torsional_ODE>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE Friction_Torsional_ODE : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Friction.Torsional.ODE) */ {
 public:
  Friction_Torsional_ODE();
  virtual ~Friction_Torsional_ODE();

  Friction_Torsional_ODE(const Friction_Torsional_ODE& from);

  inline Friction_Torsional_ODE& operator=(const Friction_Torsional_ODE& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Friction_Torsional_ODE(Friction_Torsional_ODE&& from) noexcept
    : Friction_Torsional_ODE() {
    *this = ::std::move(from);
  }

  inline Friction_Torsional_ODE& operator=(Friction_Torsional_ODE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Friction_Torsional_ODE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Friction_Torsional_ODE* internal_default_instance() {
    return reinterpret_cast<const Friction_Torsional_ODE*>(
               &_Friction_Torsional_ODE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Friction_Torsional_ODE* other);
  friend void swap(Friction_Torsional_ODE& a, Friction_Torsional_ODE& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Friction_Torsional_ODE* New() const final {
    return CreateMaybeMessage<Friction_Torsional_ODE>(NULL);
  }

  Friction_Torsional_ODE* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Friction_Torsional_ODE>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Friction_Torsional_ODE& from);
  void MergeFrom(const Friction_Torsional_ODE& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Friction_Torsional_ODE* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double slip = 1;
  void clear_slip();
  static const int kSlipFieldNumber = 1;
  double slip() const;
  void set_slip(double value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Friction.Torsional.ODE)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double slip_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2ffriction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE Friction_Torsional : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Friction.Torsional) */ {
 public:
  Friction_Torsional();
  virtual ~Friction_Torsional();

  Friction_Torsional(const Friction_Torsional& from);

  inline Friction_Torsional& operator=(const Friction_Torsional& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Friction_Torsional(Friction_Torsional&& from) noexcept
    : Friction_Torsional() {
    *this = ::std::move(from);
  }

  inline Friction_Torsional& operator=(Friction_Torsional&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Friction_Torsional& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Friction_Torsional* internal_default_instance() {
    return reinterpret_cast<const Friction_Torsional*>(
               &_Friction_Torsional_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Friction_Torsional* other);
  friend void swap(Friction_Torsional& a, Friction_Torsional& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Friction_Torsional* New() const final {
    return CreateMaybeMessage<Friction_Torsional>(NULL);
  }

  Friction_Torsional* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Friction_Torsional>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Friction_Torsional& from);
  void MergeFrom(const Friction_Torsional& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Friction_Torsional* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Friction_Torsional_ODE ODE;

  // accessors -------------------------------------------------------

  // .gz.msgs.Friction.Torsional.ODE ode = 5;
  bool has_ode() const;
  void clear_ode();
  static const int kOdeFieldNumber = 5;
  private:
  const ::gz::msgs::Friction_Torsional_ODE& _internal_ode() const;
  public:
  const ::gz::msgs::Friction_Torsional_ODE& ode() const;
  ::gz::msgs::Friction_Torsional_ODE* release_ode();
  ::gz::msgs::Friction_Torsional_ODE* mutable_ode();
  void set_allocated_ode(::gz::msgs::Friction_Torsional_ODE* ode);

  // double coefficient = 1;
  void clear_coefficient();
  static const int kCoefficientFieldNumber = 1;
  double coefficient() const;
  void set_coefficient(double value);

  // double patch_radius = 3;
  void clear_patch_radius();
  static const int kPatchRadiusFieldNumber = 3;
  double patch_radius() const;
  void set_patch_radius(double value);

  // double surface_radius = 4;
  void clear_surface_radius();
  static const int kSurfaceRadiusFieldNumber = 4;
  double surface_radius() const;
  void set_surface_radius(double value);

  // bool use_patch_radius = 2;
  void clear_use_patch_radius();
  static const int kUsePatchRadiusFieldNumber = 2;
  bool use_patch_radius() const;
  void set_use_patch_radius(bool value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Friction.Torsional)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gz::msgs::Friction_Torsional_ODE* ode_;
  double coefficient_;
  double patch_radius_;
  double surface_radius_;
  bool use_patch_radius_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2ffriction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE Friction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Friction) */ {
 public:
  Friction();
  virtual ~Friction();

  Friction(const Friction& from);

  inline Friction& operator=(const Friction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Friction(Friction&& from) noexcept
    : Friction() {
    *this = ::std::move(from);
  }

  inline Friction& operator=(Friction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Friction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Friction* internal_default_instance() {
    return reinterpret_cast<const Friction*>(
               &_Friction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Friction* other);
  friend void swap(Friction& a, Friction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Friction* New() const final {
    return CreateMaybeMessage<Friction>(NULL);
  }

  Friction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Friction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Friction& from);
  void MergeFrom(const Friction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Friction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Friction_Torsional Torsional;

  // accessors -------------------------------------------------------

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Vector3d fdir1 = 4;
  bool has_fdir1() const;
  void clear_fdir1();
  static const int kFdir1FieldNumber = 4;
  private:
  const ::gz::msgs::Vector3d& _internal_fdir1() const;
  public:
  const ::gz::msgs::Vector3d& fdir1() const;
  ::gz::msgs::Vector3d* release_fdir1();
  ::gz::msgs::Vector3d* mutable_fdir1();
  void set_allocated_fdir1(::gz::msgs::Vector3d* fdir1);

  // .gz.msgs.Friction.Torsional torsional = 7;
  bool has_torsional() const;
  void clear_torsional();
  static const int kTorsionalFieldNumber = 7;
  private:
  const ::gz::msgs::Friction_Torsional& _internal_torsional() const;
  public:
  const ::gz::msgs::Friction_Torsional& torsional() const;
  ::gz::msgs::Friction_Torsional* release_torsional();
  ::gz::msgs::Friction_Torsional* mutable_torsional();
  void set_allocated_torsional(::gz::msgs::Friction_Torsional* torsional);

  // double mu = 2;
  void clear_mu();
  static const int kMuFieldNumber = 2;
  double mu() const;
  void set_mu(double value);

  // double mu2 = 3;
  void clear_mu2();
  static const int kMu2FieldNumber = 3;
  double mu2() const;
  void set_mu2(double value);

  // double slip1 = 5;
  void clear_slip1();
  static const int kSlip1FieldNumber = 5;
  double slip1() const;
  void set_slip1(double value);

  // double slip2 = 6;
  void clear_slip2();
  static const int kSlip2FieldNumber = 6;
  double slip2() const;
  void set_slip2(double value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Friction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Vector3d* fdir1_;
  ::gz::msgs::Friction_Torsional* torsional_;
  double mu_;
  double mu2_;
  double slip1_;
  double slip2_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2ffriction_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Friction_Torsional_ODE

// double slip = 1;
inline void Friction_Torsional_ODE::clear_slip() {
  slip_ = 0;
}
inline double Friction_Torsional_ODE::slip() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Friction.Torsional.ODE.slip)
  return slip_;
}
inline void Friction_Torsional_ODE::set_slip(double value) {
  
  slip_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Friction.Torsional.ODE.slip)
}

// -------------------------------------------------------------------

// Friction_Torsional

// double coefficient = 1;
inline void Friction_Torsional::clear_coefficient() {
  coefficient_ = 0;
}
inline double Friction_Torsional::coefficient() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Friction.Torsional.coefficient)
  return coefficient_;
}
inline void Friction_Torsional::set_coefficient(double value) {
  
  coefficient_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Friction.Torsional.coefficient)
}

// bool use_patch_radius = 2;
inline void Friction_Torsional::clear_use_patch_radius() {
  use_patch_radius_ = false;
}
inline bool Friction_Torsional::use_patch_radius() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Friction.Torsional.use_patch_radius)
  return use_patch_radius_;
}
inline void Friction_Torsional::set_use_patch_radius(bool value) {
  
  use_patch_radius_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Friction.Torsional.use_patch_radius)
}

// double patch_radius = 3;
inline void Friction_Torsional::clear_patch_radius() {
  patch_radius_ = 0;
}
inline double Friction_Torsional::patch_radius() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Friction.Torsional.patch_radius)
  return patch_radius_;
}
inline void Friction_Torsional::set_patch_radius(double value) {
  
  patch_radius_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Friction.Torsional.patch_radius)
}

// double surface_radius = 4;
inline void Friction_Torsional::clear_surface_radius() {
  surface_radius_ = 0;
}
inline double Friction_Torsional::surface_radius() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Friction.Torsional.surface_radius)
  return surface_radius_;
}
inline void Friction_Torsional::set_surface_radius(double value) {
  
  surface_radius_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Friction.Torsional.surface_radius)
}

// .gz.msgs.Friction.Torsional.ODE ode = 5;
inline bool Friction_Torsional::has_ode() const {
  return this != internal_default_instance() && ode_ != NULL;
}
inline void Friction_Torsional::clear_ode() {
  if (GetArenaNoVirtual() == NULL && ode_ != NULL) {
    delete ode_;
  }
  ode_ = NULL;
}
inline const ::gz::msgs::Friction_Torsional_ODE& Friction_Torsional::_internal_ode() const {
  return *ode_;
}
inline const ::gz::msgs::Friction_Torsional_ODE& Friction_Torsional::ode() const {
  const ::gz::msgs::Friction_Torsional_ODE* p = ode_;
  // @@protoc_insertion_point(field_get:gz.msgs.Friction.Torsional.ode)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Friction_Torsional_ODE*>(
      &::gz::msgs::_Friction_Torsional_ODE_default_instance_);
}
inline ::gz::msgs::Friction_Torsional_ODE* Friction_Torsional::release_ode() {
  // @@protoc_insertion_point(field_release:gz.msgs.Friction.Torsional.ode)
  
  ::gz::msgs::Friction_Torsional_ODE* temp = ode_;
  ode_ = NULL;
  return temp;
}
inline ::gz::msgs::Friction_Torsional_ODE* Friction_Torsional::mutable_ode() {
  
  if (ode_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Friction_Torsional_ODE>(GetArenaNoVirtual());
    ode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Friction.Torsional.ode)
  return ode_;
}
inline void Friction_Torsional::set_allocated_ode(::gz::msgs::Friction_Torsional_ODE* ode) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ode_;
  }
  if (ode) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ode = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ode, submessage_arena);
    }
    
  } else {
    
  }
  ode_ = ode;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Friction.Torsional.ode)
}

// -------------------------------------------------------------------

// Friction

// .gz.msgs.Header header = 1;
inline bool Friction::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& Friction::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& Friction::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.Friction.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* Friction::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.Friction.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* Friction::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Friction.header)
  return header_;
}
inline void Friction::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Friction.header)
}

// double mu = 2;
inline void Friction::clear_mu() {
  mu_ = 0;
}
inline double Friction::mu() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Friction.mu)
  return mu_;
}
inline void Friction::set_mu(double value) {
  
  mu_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Friction.mu)
}

// double mu2 = 3;
inline void Friction::clear_mu2() {
  mu2_ = 0;
}
inline double Friction::mu2() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Friction.mu2)
  return mu2_;
}
inline void Friction::set_mu2(double value) {
  
  mu2_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Friction.mu2)
}

// .gz.msgs.Vector3d fdir1 = 4;
inline bool Friction::has_fdir1() const {
  return this != internal_default_instance() && fdir1_ != NULL;
}
inline const ::gz::msgs::Vector3d& Friction::_internal_fdir1() const {
  return *fdir1_;
}
inline const ::gz::msgs::Vector3d& Friction::fdir1() const {
  const ::gz::msgs::Vector3d* p = fdir1_;
  // @@protoc_insertion_point(field_get:gz.msgs.Friction.fdir1)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Vector3d*>(
      &::gz::msgs::_Vector3d_default_instance_);
}
inline ::gz::msgs::Vector3d* Friction::release_fdir1() {
  // @@protoc_insertion_point(field_release:gz.msgs.Friction.fdir1)
  
  ::gz::msgs::Vector3d* temp = fdir1_;
  fdir1_ = NULL;
  return temp;
}
inline ::gz::msgs::Vector3d* Friction::mutable_fdir1() {
  
  if (fdir1_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Vector3d>(GetArenaNoVirtual());
    fdir1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Friction.fdir1)
  return fdir1_;
}
inline void Friction::set_allocated_fdir1(::gz::msgs::Vector3d* fdir1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(fdir1_);
  }
  if (fdir1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fdir1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fdir1, submessage_arena);
    }
    
  } else {
    
  }
  fdir1_ = fdir1;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Friction.fdir1)
}

// double slip1 = 5;
inline void Friction::clear_slip1() {
  slip1_ = 0;
}
inline double Friction::slip1() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Friction.slip1)
  return slip1_;
}
inline void Friction::set_slip1(double value) {
  
  slip1_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Friction.slip1)
}

// double slip2 = 6;
inline void Friction::clear_slip2() {
  slip2_ = 0;
}
inline double Friction::slip2() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Friction.slip2)
  return slip2_;
}
inline void Friction::set_slip2(double value) {
  
  slip2_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Friction.slip2)
}

// .gz.msgs.Friction.Torsional torsional = 7;
inline bool Friction::has_torsional() const {
  return this != internal_default_instance() && torsional_ != NULL;
}
inline void Friction::clear_torsional() {
  if (GetArenaNoVirtual() == NULL && torsional_ != NULL) {
    delete torsional_;
  }
  torsional_ = NULL;
}
inline const ::gz::msgs::Friction_Torsional& Friction::_internal_torsional() const {
  return *torsional_;
}
inline const ::gz::msgs::Friction_Torsional& Friction::torsional() const {
  const ::gz::msgs::Friction_Torsional* p = torsional_;
  // @@protoc_insertion_point(field_get:gz.msgs.Friction.torsional)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Friction_Torsional*>(
      &::gz::msgs::_Friction_Torsional_default_instance_);
}
inline ::gz::msgs::Friction_Torsional* Friction::release_torsional() {
  // @@protoc_insertion_point(field_release:gz.msgs.Friction.torsional)
  
  ::gz::msgs::Friction_Torsional* temp = torsional_;
  torsional_ = NULL;
  return temp;
}
inline ::gz::msgs::Friction_Torsional* Friction::mutable_torsional() {
  
  if (torsional_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Friction_Torsional>(GetArenaNoVirtual());
    torsional_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Friction.torsional)
  return torsional_;
}
inline void Friction::set_allocated_torsional(::gz::msgs::Friction_Torsional* torsional) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete torsional_;
  }
  if (torsional) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      torsional = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, torsional, submessage_arena);
    }
    
  } else {
    
  }
  torsional_ = torsional;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Friction.torsional)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2ffriction_2eproto
