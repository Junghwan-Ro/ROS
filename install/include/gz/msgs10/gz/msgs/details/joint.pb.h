// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/joint.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fjoint_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fjoint_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/header.pb.h"
#include "gz/msgs/axis.pb.h"
#include "gz/msgs/pose.pb.h"
#include "gz/msgs/sensor.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fjoint_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fjoint_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fjoint_2eproto
namespace gz {
namespace msgs {
class Joint;
class JointDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern JointDefaultTypeInternal _Joint_default_instance_;
class Joint_Gearbox;
class Joint_GearboxDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern Joint_GearboxDefaultTypeInternal _Joint_Gearbox_default_instance_;
class Joint_Screw;
class Joint_ScrewDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern Joint_ScrewDefaultTypeInternal _Joint_Screw_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Joint* Arena::CreateMaybeMessage<::gz::msgs::Joint>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Joint_Gearbox* Arena::CreateMaybeMessage<::gz::msgs::Joint_Gearbox>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Joint_Screw* Arena::CreateMaybeMessage<::gz::msgs::Joint_Screw>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

enum Joint_Type {
  Joint_Type_REVOLUTE = 0,
  Joint_Type_REVOLUTE2 = 1,
  Joint_Type_PRISMATIC = 2,
  Joint_Type_UNIVERSAL = 3,
  Joint_Type_BALL = 4,
  Joint_Type_SCREW = 5,
  Joint_Type_GEARBOX = 6,
  Joint_Type_FIXED = 7,
  Joint_Type_CONTINUOUS = 8,
  Joint_Type_Joint_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Joint_Type_Joint_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool Joint_Type_IsValid(int value);
const Joint_Type Joint_Type_Type_MIN = Joint_Type_REVOLUTE;
const Joint_Type Joint_Type_Type_MAX = Joint_Type_CONTINUOUS;
const int Joint_Type_Type_ARRAYSIZE = Joint_Type_Type_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* Joint_Type_descriptor();
inline const ::std::string& Joint_Type_Name(Joint_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Joint_Type_descriptor(), value);
}
inline bool Joint_Type_Parse(
    const ::std::string& name, Joint_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Joint_Type>(
    Joint_Type_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE Joint_Gearbox : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Joint.Gearbox) */ {
 public:
  Joint_Gearbox();
  virtual ~Joint_Gearbox();

  Joint_Gearbox(const Joint_Gearbox& from);

  inline Joint_Gearbox& operator=(const Joint_Gearbox& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Joint_Gearbox(Joint_Gearbox&& from) noexcept
    : Joint_Gearbox() {
    *this = ::std::move(from);
  }

  inline Joint_Gearbox& operator=(Joint_Gearbox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Joint_Gearbox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Joint_Gearbox* internal_default_instance() {
    return reinterpret_cast<const Joint_Gearbox*>(
               &_Joint_Gearbox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Joint_Gearbox* other);
  friend void swap(Joint_Gearbox& a, Joint_Gearbox& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Joint_Gearbox* New() const final {
    return CreateMaybeMessage<Joint_Gearbox>(NULL);
  }

  Joint_Gearbox* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Joint_Gearbox>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Joint_Gearbox& from);
  void MergeFrom(const Joint_Gearbox& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Joint_Gearbox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gearbox_reference_body = 1;
  void clear_gearbox_reference_body();
  static const int kGearboxReferenceBodyFieldNumber = 1;
  const ::std::string& gearbox_reference_body() const;
  void set_gearbox_reference_body(const ::std::string& value);
  #if LANG_CXX11
  void set_gearbox_reference_body(::std::string&& value);
  #endif
  void set_gearbox_reference_body(const char* value);
  void set_gearbox_reference_body(const char* value, size_t size);
  ::std::string* mutable_gearbox_reference_body();
  ::std::string* release_gearbox_reference_body();
  void set_allocated_gearbox_reference_body(::std::string* gearbox_reference_body);

  // double gearbox_ratio = 2;
  void clear_gearbox_ratio();
  static const int kGearboxRatioFieldNumber = 2;
  double gearbox_ratio() const;
  void set_gearbox_ratio(double value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Joint.Gearbox)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gearbox_reference_body_;
  double gearbox_ratio_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fjoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE Joint_Screw : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Joint.Screw) */ {
 public:
  Joint_Screw();
  virtual ~Joint_Screw();

  Joint_Screw(const Joint_Screw& from);

  inline Joint_Screw& operator=(const Joint_Screw& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Joint_Screw(Joint_Screw&& from) noexcept
    : Joint_Screw() {
    *this = ::std::move(from);
  }

  inline Joint_Screw& operator=(Joint_Screw&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Joint_Screw& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Joint_Screw* internal_default_instance() {
    return reinterpret_cast<const Joint_Screw*>(
               &_Joint_Screw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Joint_Screw* other);
  friend void swap(Joint_Screw& a, Joint_Screw& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Joint_Screw* New() const final {
    return CreateMaybeMessage<Joint_Screw>(NULL);
  }

  Joint_Screw* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Joint_Screw>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Joint_Screw& from);
  void MergeFrom(const Joint_Screw& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Joint_Screw* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double thread_pitch = 1;
  void clear_thread_pitch();
  static const int kThreadPitchFieldNumber = 1;
  double thread_pitch() const;
  void set_thread_pitch(double value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Joint.Screw)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double thread_pitch_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fjoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE Joint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Joint) */ {
 public:
  Joint();
  virtual ~Joint();

  Joint(const Joint& from);

  inline Joint& operator=(const Joint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Joint(Joint&& from) noexcept
    : Joint() {
    *this = ::std::move(from);
  }

  inline Joint& operator=(Joint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Joint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Joint* internal_default_instance() {
    return reinterpret_cast<const Joint*>(
               &_Joint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Joint* other);
  friend void swap(Joint& a, Joint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Joint* New() const final {
    return CreateMaybeMessage<Joint>(NULL);
  }

  Joint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Joint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Joint& from);
  void MergeFrom(const Joint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Joint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Joint_Gearbox Gearbox;
  typedef Joint_Screw Screw;

  typedef Joint_Type Type;
  static const Type REVOLUTE =
    Joint_Type_REVOLUTE;
  static const Type REVOLUTE2 =
    Joint_Type_REVOLUTE2;
  static const Type PRISMATIC =
    Joint_Type_PRISMATIC;
  static const Type UNIVERSAL =
    Joint_Type_UNIVERSAL;
  static const Type BALL =
    Joint_Type_BALL;
  static const Type SCREW =
    Joint_Type_SCREW;
  static const Type GEARBOX =
    Joint_Type_GEARBOX;
  static const Type FIXED =
    Joint_Type_FIXED;
  static const Type CONTINUOUS =
    Joint_Type_CONTINUOUS;
  static inline bool Type_IsValid(int value) {
    return Joint_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Joint_Type_Type_MIN;
  static const Type Type_MAX =
    Joint_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Joint_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Joint_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Joint_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Joint_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .gz.msgs.Sensor sensor = 21;
  int sensor_size() const;
  void clear_sensor();
  static const int kSensorFieldNumber = 21;
  ::gz::msgs::Sensor* mutable_sensor(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Sensor >*
      mutable_sensor();
  const ::gz::msgs::Sensor& sensor(int index) const;
  ::gz::msgs::Sensor* add_sensor();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Sensor >&
      sensor() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string parent = 5;
  void clear_parent();
  static const int kParentFieldNumber = 5;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string child = 7;
  void clear_child();
  static const int kChildFieldNumber = 7;
  const ::std::string& child() const;
  void set_child(const ::std::string& value);
  #if LANG_CXX11
  void set_child(::std::string&& value);
  #endif
  void set_child(const char* value);
  void set_child(const char* value, size_t size);
  ::std::string* mutable_child();
  ::std::string* release_child();
  void set_allocated_child(::std::string* child);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Pose pose = 9;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 9;
  private:
  const ::gz::msgs::Pose& _internal_pose() const;
  public:
  const ::gz::msgs::Pose& pose() const;
  ::gz::msgs::Pose* release_pose();
  ::gz::msgs::Pose* mutable_pose();
  void set_allocated_pose(::gz::msgs::Pose* pose);

  // .gz.msgs.Axis axis1 = 10;
  bool has_axis1() const;
  void clear_axis1();
  static const int kAxis1FieldNumber = 10;
  private:
  const ::gz::msgs::Axis& _internal_axis1() const;
  public:
  const ::gz::msgs::Axis& axis1() const;
  ::gz::msgs::Axis* release_axis1();
  ::gz::msgs::Axis* mutable_axis1();
  void set_allocated_axis1(::gz::msgs::Axis* axis1);

  // .gz.msgs.Axis axis2 = 11;
  bool has_axis2() const;
  void clear_axis2();
  static const int kAxis2FieldNumber = 11;
  private:
  const ::gz::msgs::Axis& _internal_axis2() const;
  public:
  const ::gz::msgs::Axis& axis2() const;
  ::gz::msgs::Axis* release_axis2();
  ::gz::msgs::Axis* mutable_axis2();
  void set_allocated_axis2(::gz::msgs::Axis* axis2);

  // .gz.msgs.Joint.Gearbox gearbox = 19;
  bool has_gearbox() const;
  void clear_gearbox();
  static const int kGearboxFieldNumber = 19;
  private:
  const ::gz::msgs::Joint_Gearbox& _internal_gearbox() const;
  public:
  const ::gz::msgs::Joint_Gearbox& gearbox() const;
  ::gz::msgs::Joint_Gearbox* release_gearbox();
  ::gz::msgs::Joint_Gearbox* mutable_gearbox();
  void set_allocated_gearbox(::gz::msgs::Joint_Gearbox* gearbox);

  // .gz.msgs.Joint.Screw screw = 20;
  bool has_screw() const;
  void clear_screw();
  static const int kScrewFieldNumber = 20;
  private:
  const ::gz::msgs::Joint_Screw& _internal_screw() const;
  public:
  const ::gz::msgs::Joint_Screw& screw() const;
  ::gz::msgs::Joint_Screw* release_screw();
  ::gz::msgs::Joint_Screw* mutable_screw();
  void set_allocated_screw(::gz::msgs::Joint_Screw* screw);

  // uint32 id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // .gz.msgs.Joint.Type type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::gz::msgs::Joint_Type type() const;
  void set_type(::gz::msgs::Joint_Type value);

  // uint32 parent_id = 6;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 6;
  ::google::protobuf::uint32 parent_id() const;
  void set_parent_id(::google::protobuf::uint32 value);

  // uint32 child_id = 8;
  void clear_child_id();
  static const int kChildIdFieldNumber = 8;
  ::google::protobuf::uint32 child_id() const;
  void set_child_id(::google::protobuf::uint32 value);

  // double cfm = 12;
  void clear_cfm();
  static const int kCfmFieldNumber = 12;
  double cfm() const;
  void set_cfm(double value);

  // double bounce = 13;
  void clear_bounce();
  static const int kBounceFieldNumber = 13;
  double bounce() const;
  void set_bounce(double value);

  // double fudge_factor = 14;
  void clear_fudge_factor();
  static const int kFudgeFactorFieldNumber = 14;
  double fudge_factor() const;
  void set_fudge_factor(double value);

  // double limit_cfm = 15;
  void clear_limit_cfm();
  static const int kLimitCfmFieldNumber = 15;
  double limit_cfm() const;
  void set_limit_cfm(double value);

  // double limit_erp = 16;
  void clear_limit_erp();
  static const int kLimitErpFieldNumber = 16;
  double limit_erp() const;
  void set_limit_erp(double value);

  // double suspension_cfm = 17;
  void clear_suspension_cfm();
  static const int kSuspensionCfmFieldNumber = 17;
  double suspension_cfm() const;
  void set_suspension_cfm(double value);

  // double suspension_erp = 18;
  void clear_suspension_erp();
  static const int kSuspensionErpFieldNumber = 18;
  double suspension_erp() const;
  void set_suspension_erp(double value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Joint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Sensor > sensor_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr child_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Pose* pose_;
  ::gz::msgs::Axis* axis1_;
  ::gz::msgs::Axis* axis2_;
  ::gz::msgs::Joint_Gearbox* gearbox_;
  ::gz::msgs::Joint_Screw* screw_;
  ::google::protobuf::uint32 id_;
  int type_;
  ::google::protobuf::uint32 parent_id_;
  ::google::protobuf::uint32 child_id_;
  double cfm_;
  double bounce_;
  double fudge_factor_;
  double limit_cfm_;
  double limit_erp_;
  double suspension_cfm_;
  double suspension_erp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fjoint_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Joint_Gearbox

// string gearbox_reference_body = 1;
inline void Joint_Gearbox::clear_gearbox_reference_body() {
  gearbox_reference_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Joint_Gearbox::gearbox_reference_body() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.Gearbox.gearbox_reference_body)
  return gearbox_reference_body_.GetNoArena();
}
inline void Joint_Gearbox::set_gearbox_reference_body(const ::std::string& value) {
  
  gearbox_reference_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Joint.Gearbox.gearbox_reference_body)
}
#if LANG_CXX11
inline void Joint_Gearbox::set_gearbox_reference_body(::std::string&& value) {
  
  gearbox_reference_body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Joint.Gearbox.gearbox_reference_body)
}
#endif
inline void Joint_Gearbox::set_gearbox_reference_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gearbox_reference_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Joint.Gearbox.gearbox_reference_body)
}
inline void Joint_Gearbox::set_gearbox_reference_body(const char* value, size_t size) {
  
  gearbox_reference_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Joint.Gearbox.gearbox_reference_body)
}
inline ::std::string* Joint_Gearbox::mutable_gearbox_reference_body() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Joint.Gearbox.gearbox_reference_body)
  return gearbox_reference_body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Joint_Gearbox::release_gearbox_reference_body() {
  // @@protoc_insertion_point(field_release:gz.msgs.Joint.Gearbox.gearbox_reference_body)
  
  return gearbox_reference_body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Joint_Gearbox::set_allocated_gearbox_reference_body(::std::string* gearbox_reference_body) {
  if (gearbox_reference_body != NULL) {
    
  } else {
    
  }
  gearbox_reference_body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gearbox_reference_body);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Joint.Gearbox.gearbox_reference_body)
}

// double gearbox_ratio = 2;
inline void Joint_Gearbox::clear_gearbox_ratio() {
  gearbox_ratio_ = 0;
}
inline double Joint_Gearbox::gearbox_ratio() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.Gearbox.gearbox_ratio)
  return gearbox_ratio_;
}
inline void Joint_Gearbox::set_gearbox_ratio(double value) {
  
  gearbox_ratio_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Joint.Gearbox.gearbox_ratio)
}

// -------------------------------------------------------------------

// Joint_Screw

// double thread_pitch = 1;
inline void Joint_Screw::clear_thread_pitch() {
  thread_pitch_ = 0;
}
inline double Joint_Screw::thread_pitch() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.Screw.thread_pitch)
  return thread_pitch_;
}
inline void Joint_Screw::set_thread_pitch(double value) {
  
  thread_pitch_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Joint.Screw.thread_pitch)
}

// -------------------------------------------------------------------

// Joint

// .gz.msgs.Header header = 1;
inline bool Joint::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& Joint::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& Joint::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* Joint::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.Joint.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* Joint::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Joint.header)
  return header_;
}
inline void Joint::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Joint.header)
}

// string name = 2;
inline void Joint::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Joint::name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.name)
  return name_.GetNoArena();
}
inline void Joint::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Joint.name)
}
#if LANG_CXX11
inline void Joint::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Joint.name)
}
#endif
inline void Joint::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Joint.name)
}
inline void Joint::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Joint.name)
}
inline ::std::string* Joint::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Joint.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Joint::release_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.Joint.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Joint::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Joint.name)
}

// uint32 id = 3;
inline void Joint::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Joint::id() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.id)
  return id_;
}
inline void Joint::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Joint.id)
}

// .gz.msgs.Joint.Type type = 4;
inline void Joint::clear_type() {
  type_ = 0;
}
inline ::gz::msgs::Joint_Type Joint::type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.type)
  return static_cast< ::gz::msgs::Joint_Type >(type_);
}
inline void Joint::set_type(::gz::msgs::Joint_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Joint.type)
}

// string parent = 5;
inline void Joint::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Joint::parent() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.parent)
  return parent_.GetNoArena();
}
inline void Joint::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Joint.parent)
}
#if LANG_CXX11
inline void Joint::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Joint.parent)
}
#endif
inline void Joint::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Joint.parent)
}
inline void Joint::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Joint.parent)
}
inline ::std::string* Joint::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Joint.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Joint::release_parent() {
  // @@protoc_insertion_point(field_release:gz.msgs.Joint.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Joint::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Joint.parent)
}

// uint32 parent_id = 6;
inline void Joint::clear_parent_id() {
  parent_id_ = 0u;
}
inline ::google::protobuf::uint32 Joint::parent_id() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.parent_id)
  return parent_id_;
}
inline void Joint::set_parent_id(::google::protobuf::uint32 value) {
  
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Joint.parent_id)
}

// string child = 7;
inline void Joint::clear_child() {
  child_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Joint::child() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.child)
  return child_.GetNoArena();
}
inline void Joint::set_child(const ::std::string& value) {
  
  child_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Joint.child)
}
#if LANG_CXX11
inline void Joint::set_child(::std::string&& value) {
  
  child_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Joint.child)
}
#endif
inline void Joint::set_child(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  child_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Joint.child)
}
inline void Joint::set_child(const char* value, size_t size) {
  
  child_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Joint.child)
}
inline ::std::string* Joint::mutable_child() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Joint.child)
  return child_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Joint::release_child() {
  // @@protoc_insertion_point(field_release:gz.msgs.Joint.child)
  
  return child_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Joint::set_allocated_child(::std::string* child) {
  if (child != NULL) {
    
  } else {
    
  }
  child_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), child);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Joint.child)
}

// uint32 child_id = 8;
inline void Joint::clear_child_id() {
  child_id_ = 0u;
}
inline ::google::protobuf::uint32 Joint::child_id() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.child_id)
  return child_id_;
}
inline void Joint::set_child_id(::google::protobuf::uint32 value) {
  
  child_id_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Joint.child_id)
}

// .gz.msgs.Pose pose = 9;
inline bool Joint::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::gz::msgs::Pose& Joint::_internal_pose() const {
  return *pose_;
}
inline const ::gz::msgs::Pose& Joint::pose() const {
  const ::gz::msgs::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Pose*>(
      &::gz::msgs::_Pose_default_instance_);
}
inline ::gz::msgs::Pose* Joint::release_pose() {
  // @@protoc_insertion_point(field_release:gz.msgs.Joint.pose)
  
  ::gz::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::gz::msgs::Pose* Joint::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Joint.pose)
  return pose_;
}
inline void Joint::set_allocated_pose(::gz::msgs::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Joint.pose)
}

// .gz.msgs.Axis axis1 = 10;
inline bool Joint::has_axis1() const {
  return this != internal_default_instance() && axis1_ != NULL;
}
inline const ::gz::msgs::Axis& Joint::_internal_axis1() const {
  return *axis1_;
}
inline const ::gz::msgs::Axis& Joint::axis1() const {
  const ::gz::msgs::Axis* p = axis1_;
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.axis1)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Axis*>(
      &::gz::msgs::_Axis_default_instance_);
}
inline ::gz::msgs::Axis* Joint::release_axis1() {
  // @@protoc_insertion_point(field_release:gz.msgs.Joint.axis1)
  
  ::gz::msgs::Axis* temp = axis1_;
  axis1_ = NULL;
  return temp;
}
inline ::gz::msgs::Axis* Joint::mutable_axis1() {
  
  if (axis1_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Axis>(GetArenaNoVirtual());
    axis1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Joint.axis1)
  return axis1_;
}
inline void Joint::set_allocated_axis1(::gz::msgs::Axis* axis1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(axis1_);
  }
  if (axis1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      axis1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, axis1, submessage_arena);
    }
    
  } else {
    
  }
  axis1_ = axis1;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Joint.axis1)
}

// .gz.msgs.Axis axis2 = 11;
inline bool Joint::has_axis2() const {
  return this != internal_default_instance() && axis2_ != NULL;
}
inline const ::gz::msgs::Axis& Joint::_internal_axis2() const {
  return *axis2_;
}
inline const ::gz::msgs::Axis& Joint::axis2() const {
  const ::gz::msgs::Axis* p = axis2_;
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.axis2)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Axis*>(
      &::gz::msgs::_Axis_default_instance_);
}
inline ::gz::msgs::Axis* Joint::release_axis2() {
  // @@protoc_insertion_point(field_release:gz.msgs.Joint.axis2)
  
  ::gz::msgs::Axis* temp = axis2_;
  axis2_ = NULL;
  return temp;
}
inline ::gz::msgs::Axis* Joint::mutable_axis2() {
  
  if (axis2_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Axis>(GetArenaNoVirtual());
    axis2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Joint.axis2)
  return axis2_;
}
inline void Joint::set_allocated_axis2(::gz::msgs::Axis* axis2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(axis2_);
  }
  if (axis2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      axis2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, axis2, submessage_arena);
    }
    
  } else {
    
  }
  axis2_ = axis2;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Joint.axis2)
}

// double cfm = 12;
inline void Joint::clear_cfm() {
  cfm_ = 0;
}
inline double Joint::cfm() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.cfm)
  return cfm_;
}
inline void Joint::set_cfm(double value) {
  
  cfm_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Joint.cfm)
}

// double bounce = 13;
inline void Joint::clear_bounce() {
  bounce_ = 0;
}
inline double Joint::bounce() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.bounce)
  return bounce_;
}
inline void Joint::set_bounce(double value) {
  
  bounce_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Joint.bounce)
}

// double fudge_factor = 14;
inline void Joint::clear_fudge_factor() {
  fudge_factor_ = 0;
}
inline double Joint::fudge_factor() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.fudge_factor)
  return fudge_factor_;
}
inline void Joint::set_fudge_factor(double value) {
  
  fudge_factor_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Joint.fudge_factor)
}

// double limit_cfm = 15;
inline void Joint::clear_limit_cfm() {
  limit_cfm_ = 0;
}
inline double Joint::limit_cfm() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.limit_cfm)
  return limit_cfm_;
}
inline void Joint::set_limit_cfm(double value) {
  
  limit_cfm_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Joint.limit_cfm)
}

// double limit_erp = 16;
inline void Joint::clear_limit_erp() {
  limit_erp_ = 0;
}
inline double Joint::limit_erp() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.limit_erp)
  return limit_erp_;
}
inline void Joint::set_limit_erp(double value) {
  
  limit_erp_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Joint.limit_erp)
}

// double suspension_cfm = 17;
inline void Joint::clear_suspension_cfm() {
  suspension_cfm_ = 0;
}
inline double Joint::suspension_cfm() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.suspension_cfm)
  return suspension_cfm_;
}
inline void Joint::set_suspension_cfm(double value) {
  
  suspension_cfm_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Joint.suspension_cfm)
}

// double suspension_erp = 18;
inline void Joint::clear_suspension_erp() {
  suspension_erp_ = 0;
}
inline double Joint::suspension_erp() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.suspension_erp)
  return suspension_erp_;
}
inline void Joint::set_suspension_erp(double value) {
  
  suspension_erp_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Joint.suspension_erp)
}

// .gz.msgs.Joint.Gearbox gearbox = 19;
inline bool Joint::has_gearbox() const {
  return this != internal_default_instance() && gearbox_ != NULL;
}
inline void Joint::clear_gearbox() {
  if (GetArenaNoVirtual() == NULL && gearbox_ != NULL) {
    delete gearbox_;
  }
  gearbox_ = NULL;
}
inline const ::gz::msgs::Joint_Gearbox& Joint::_internal_gearbox() const {
  return *gearbox_;
}
inline const ::gz::msgs::Joint_Gearbox& Joint::gearbox() const {
  const ::gz::msgs::Joint_Gearbox* p = gearbox_;
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.gearbox)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Joint_Gearbox*>(
      &::gz::msgs::_Joint_Gearbox_default_instance_);
}
inline ::gz::msgs::Joint_Gearbox* Joint::release_gearbox() {
  // @@protoc_insertion_point(field_release:gz.msgs.Joint.gearbox)
  
  ::gz::msgs::Joint_Gearbox* temp = gearbox_;
  gearbox_ = NULL;
  return temp;
}
inline ::gz::msgs::Joint_Gearbox* Joint::mutable_gearbox() {
  
  if (gearbox_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Joint_Gearbox>(GetArenaNoVirtual());
    gearbox_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Joint.gearbox)
  return gearbox_;
}
inline void Joint::set_allocated_gearbox(::gz::msgs::Joint_Gearbox* gearbox) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gearbox_;
  }
  if (gearbox) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gearbox = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gearbox, submessage_arena);
    }
    
  } else {
    
  }
  gearbox_ = gearbox;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Joint.gearbox)
}

// .gz.msgs.Joint.Screw screw = 20;
inline bool Joint::has_screw() const {
  return this != internal_default_instance() && screw_ != NULL;
}
inline void Joint::clear_screw() {
  if (GetArenaNoVirtual() == NULL && screw_ != NULL) {
    delete screw_;
  }
  screw_ = NULL;
}
inline const ::gz::msgs::Joint_Screw& Joint::_internal_screw() const {
  return *screw_;
}
inline const ::gz::msgs::Joint_Screw& Joint::screw() const {
  const ::gz::msgs::Joint_Screw* p = screw_;
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.screw)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Joint_Screw*>(
      &::gz::msgs::_Joint_Screw_default_instance_);
}
inline ::gz::msgs::Joint_Screw* Joint::release_screw() {
  // @@protoc_insertion_point(field_release:gz.msgs.Joint.screw)
  
  ::gz::msgs::Joint_Screw* temp = screw_;
  screw_ = NULL;
  return temp;
}
inline ::gz::msgs::Joint_Screw* Joint::mutable_screw() {
  
  if (screw_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Joint_Screw>(GetArenaNoVirtual());
    screw_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Joint.screw)
  return screw_;
}
inline void Joint::set_allocated_screw(::gz::msgs::Joint_Screw* screw) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete screw_;
  }
  if (screw) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      screw = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, screw, submessage_arena);
    }
    
  } else {
    
  }
  screw_ = screw;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Joint.screw)
}

// repeated .gz.msgs.Sensor sensor = 21;
inline int Joint::sensor_size() const {
  return sensor_.size();
}
inline ::gz::msgs::Sensor* Joint::mutable_sensor(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.Joint.sensor)
  return sensor_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::Sensor >*
Joint::mutable_sensor() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.Joint.sensor)
  return &sensor_;
}
inline const ::gz::msgs::Sensor& Joint::sensor(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.Joint.sensor)
  return sensor_.Get(index);
}
inline ::gz::msgs::Sensor* Joint::add_sensor() {
  // @@protoc_insertion_point(field_add:gz.msgs.Joint.sensor)
  return sensor_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Sensor >&
Joint::sensor() const {
  // @@protoc_insertion_point(field_list:gz.msgs.Joint.sensor)
  return sensor_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::msgs::Joint_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::Joint_Type>() {
  return ::gz::msgs::Joint_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fjoint_2eproto
