// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/dvl_kinematic_estimate.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/vector3d.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto
namespace gz {
namespace msgs {
class DVLKinematicEstimate;
class DVLKinematicEstimateDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern DVLKinematicEstimateDefaultTypeInternal _DVLKinematicEstimate_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::DVLKinematicEstimate* Arena::CreateMaybeMessage<::gz::msgs::DVLKinematicEstimate>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

enum DVLKinematicEstimate_ReferenceType {
  DVLKinematicEstimate_ReferenceType_DVL_REFERENCE_UNSPECIFIED = 0,
  DVLKinematicEstimate_ReferenceType_DVL_REFERENCE_EARTH = 1,
  DVLKinematicEstimate_ReferenceType_DVL_REFERENCE_SHIP = 2,
  DVLKinematicEstimate_ReferenceType_DVLKinematicEstimate_ReferenceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DVLKinematicEstimate_ReferenceType_DVLKinematicEstimate_ReferenceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool DVLKinematicEstimate_ReferenceType_IsValid(int value);
const DVLKinematicEstimate_ReferenceType DVLKinematicEstimate_ReferenceType_ReferenceType_MIN = DVLKinematicEstimate_ReferenceType_DVL_REFERENCE_UNSPECIFIED;
const DVLKinematicEstimate_ReferenceType DVLKinematicEstimate_ReferenceType_ReferenceType_MAX = DVLKinematicEstimate_ReferenceType_DVL_REFERENCE_SHIP;
const int DVLKinematicEstimate_ReferenceType_ReferenceType_ARRAYSIZE = DVLKinematicEstimate_ReferenceType_ReferenceType_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* DVLKinematicEstimate_ReferenceType_descriptor();
inline const ::std::string& DVLKinematicEstimate_ReferenceType_Name(DVLKinematicEstimate_ReferenceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DVLKinematicEstimate_ReferenceType_descriptor(), value);
}
inline bool DVLKinematicEstimate_ReferenceType_Parse(
    const ::std::string& name, DVLKinematicEstimate_ReferenceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DVLKinematicEstimate_ReferenceType>(
    DVLKinematicEstimate_ReferenceType_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE DVLKinematicEstimate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.DVLKinematicEstimate) */ {
 public:
  DVLKinematicEstimate();
  virtual ~DVLKinematicEstimate();

  DVLKinematicEstimate(const DVLKinematicEstimate& from);

  inline DVLKinematicEstimate& operator=(const DVLKinematicEstimate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DVLKinematicEstimate(DVLKinematicEstimate&& from) noexcept
    : DVLKinematicEstimate() {
    *this = ::std::move(from);
  }

  inline DVLKinematicEstimate& operator=(DVLKinematicEstimate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DVLKinematicEstimate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DVLKinematicEstimate* internal_default_instance() {
    return reinterpret_cast<const DVLKinematicEstimate*>(
               &_DVLKinematicEstimate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DVLKinematicEstimate* other);
  friend void swap(DVLKinematicEstimate& a, DVLKinematicEstimate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DVLKinematicEstimate* New() const final {
    return CreateMaybeMessage<DVLKinematicEstimate>(NULL);
  }

  DVLKinematicEstimate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DVLKinematicEstimate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DVLKinematicEstimate& from);
  void MergeFrom(const DVLKinematicEstimate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DVLKinematicEstimate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DVLKinematicEstimate_ReferenceType ReferenceType;
  static const ReferenceType DVL_REFERENCE_UNSPECIFIED =
    DVLKinematicEstimate_ReferenceType_DVL_REFERENCE_UNSPECIFIED;
  static const ReferenceType DVL_REFERENCE_EARTH =
    DVLKinematicEstimate_ReferenceType_DVL_REFERENCE_EARTH;
  static const ReferenceType DVL_REFERENCE_SHIP =
    DVLKinematicEstimate_ReferenceType_DVL_REFERENCE_SHIP;
  static inline bool ReferenceType_IsValid(int value) {
    return DVLKinematicEstimate_ReferenceType_IsValid(value);
  }
  static const ReferenceType ReferenceType_MIN =
    DVLKinematicEstimate_ReferenceType_ReferenceType_MIN;
  static const ReferenceType ReferenceType_MAX =
    DVLKinematicEstimate_ReferenceType_ReferenceType_MAX;
  static const int ReferenceType_ARRAYSIZE =
    DVLKinematicEstimate_ReferenceType_ReferenceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReferenceType_descriptor() {
    return DVLKinematicEstimate_ReferenceType_descriptor();
  }
  static inline const ::std::string& ReferenceType_Name(ReferenceType value) {
    return DVLKinematicEstimate_ReferenceType_Name(value);
  }
  static inline bool ReferenceType_Parse(const ::std::string& name,
      ReferenceType* value) {
    return DVLKinematicEstimate_ReferenceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated double covariance = 3;
  int covariance_size() const;
  void clear_covariance();
  static const int kCovarianceFieldNumber = 3;
  double covariance(int index) const;
  void set_covariance(int index, double value);
  void add_covariance(double value);
  const ::google::protobuf::RepeatedField< double >&
      covariance() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_covariance();

  // .gz.msgs.Vector3d mean = 2;
  bool has_mean() const;
  void clear_mean();
  static const int kMeanFieldNumber = 2;
  private:
  const ::gz::msgs::Vector3d& _internal_mean() const;
  public:
  const ::gz::msgs::Vector3d& mean() const;
  ::gz::msgs::Vector3d* release_mean();
  ::gz::msgs::Vector3d* mutable_mean();
  void set_allocated_mean(::gz::msgs::Vector3d* mean);

  // .gz.msgs.DVLKinematicEstimate.ReferenceType reference = 1;
  void clear_reference();
  static const int kReferenceFieldNumber = 1;
  ::gz::msgs::DVLKinematicEstimate_ReferenceType reference() const;
  void set_reference(::gz::msgs::DVLKinematicEstimate_ReferenceType value);

  // @@protoc_insertion_point(class_scope:gz.msgs.DVLKinematicEstimate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > covariance_;
  mutable int _covariance_cached_byte_size_;
  ::gz::msgs::Vector3d* mean_;
  int reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DVLKinematicEstimate

// .gz.msgs.DVLKinematicEstimate.ReferenceType reference = 1;
inline void DVLKinematicEstimate::clear_reference() {
  reference_ = 0;
}
inline ::gz::msgs::DVLKinematicEstimate_ReferenceType DVLKinematicEstimate::reference() const {
  // @@protoc_insertion_point(field_get:gz.msgs.DVLKinematicEstimate.reference)
  return static_cast< ::gz::msgs::DVLKinematicEstimate_ReferenceType >(reference_);
}
inline void DVLKinematicEstimate::set_reference(::gz::msgs::DVLKinematicEstimate_ReferenceType value) {
  
  reference_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.DVLKinematicEstimate.reference)
}

// .gz.msgs.Vector3d mean = 2;
inline bool DVLKinematicEstimate::has_mean() const {
  return this != internal_default_instance() && mean_ != NULL;
}
inline const ::gz::msgs::Vector3d& DVLKinematicEstimate::_internal_mean() const {
  return *mean_;
}
inline const ::gz::msgs::Vector3d& DVLKinematicEstimate::mean() const {
  const ::gz::msgs::Vector3d* p = mean_;
  // @@protoc_insertion_point(field_get:gz.msgs.DVLKinematicEstimate.mean)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Vector3d*>(
      &::gz::msgs::_Vector3d_default_instance_);
}
inline ::gz::msgs::Vector3d* DVLKinematicEstimate::release_mean() {
  // @@protoc_insertion_point(field_release:gz.msgs.DVLKinematicEstimate.mean)
  
  ::gz::msgs::Vector3d* temp = mean_;
  mean_ = NULL;
  return temp;
}
inline ::gz::msgs::Vector3d* DVLKinematicEstimate::mutable_mean() {
  
  if (mean_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Vector3d>(GetArenaNoVirtual());
    mean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.DVLKinematicEstimate.mean)
  return mean_;
}
inline void DVLKinematicEstimate::set_allocated_mean(::gz::msgs::Vector3d* mean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mean_);
  }
  if (mean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mean, submessage_arena);
    }
    
  } else {
    
  }
  mean_ = mean;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.DVLKinematicEstimate.mean)
}

// repeated double covariance = 3;
inline int DVLKinematicEstimate::covariance_size() const {
  return covariance_.size();
}
inline void DVLKinematicEstimate::clear_covariance() {
  covariance_.Clear();
}
inline double DVLKinematicEstimate::covariance(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.DVLKinematicEstimate.covariance)
  return covariance_.Get(index);
}
inline void DVLKinematicEstimate::set_covariance(int index, double value) {
  covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:gz.msgs.DVLKinematicEstimate.covariance)
}
inline void DVLKinematicEstimate::add_covariance(double value) {
  covariance_.Add(value);
  // @@protoc_insertion_point(field_add:gz.msgs.DVLKinematicEstimate.covariance)
}
inline const ::google::protobuf::RepeatedField< double >&
DVLKinematicEstimate::covariance() const {
  // @@protoc_insertion_point(field_list:gz.msgs.DVLKinematicEstimate.covariance)
  return covariance_;
}
inline ::google::protobuf::RepeatedField< double >*
DVLKinematicEstimate::mutable_covariance() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.DVLKinematicEstimate.covariance)
  return &covariance_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::msgs::DVLKinematicEstimate_ReferenceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::DVLKinematicEstimate_ReferenceType>() {
  return ::gz::msgs::DVLKinematicEstimate_ReferenceType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto
