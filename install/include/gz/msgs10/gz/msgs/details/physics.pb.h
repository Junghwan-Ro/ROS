// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/physics.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fphysics_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fphysics_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/vector3d.pb.h"
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fphysics_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fphysics_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fphysics_2eproto
namespace gz {
namespace msgs {
class Physics;
class PhysicsDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern PhysicsDefaultTypeInternal _Physics_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Physics* Arena::CreateMaybeMessage<::gz::msgs::Physics>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

enum Physics_Type {
  Physics_Type_ODE = 0,
  Physics_Type_BULLET = 1,
  Physics_Type_SIMBODY = 2,
  Physics_Type_DART = 3,
  Physics_Type_Physics_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Physics_Type_Physics_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool Physics_Type_IsValid(int value);
const Physics_Type Physics_Type_Type_MIN = Physics_Type_ODE;
const Physics_Type Physics_Type_Type_MAX = Physics_Type_DART;
const int Physics_Type_Type_ARRAYSIZE = Physics_Type_Type_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* Physics_Type_descriptor();
inline const ::std::string& Physics_Type_Name(Physics_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Physics_Type_descriptor(), value);
}
inline bool Physics_Type_Parse(
    const ::std::string& name, Physics_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Physics_Type>(
    Physics_Type_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE Physics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Physics) */ {
 public:
  Physics();
  virtual ~Physics();

  Physics(const Physics& from);

  inline Physics& operator=(const Physics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Physics(Physics&& from) noexcept
    : Physics() {
    *this = ::std::move(from);
  }

  inline Physics& operator=(Physics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Physics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Physics* internal_default_instance() {
    return reinterpret_cast<const Physics*>(
               &_Physics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Physics* other);
  friend void swap(Physics& a, Physics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Physics* New() const final {
    return CreateMaybeMessage<Physics>(NULL);
  }

  Physics* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Physics>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Physics& from);
  void MergeFrom(const Physics& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Physics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Physics_Type Type;
  static const Type ODE =
    Physics_Type_ODE;
  static const Type BULLET =
    Physics_Type_BULLET;
  static const Type SIMBODY =
    Physics_Type_SIMBODY;
  static const Type DART =
    Physics_Type_DART;
  static inline bool Type_IsValid(int value) {
    return Physics_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Physics_Type_Type_MIN;
  static const Type Type_MAX =
    Physics_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Physics_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Physics_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Physics_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Physics_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string solver_type = 3;
  void clear_solver_type();
  static const int kSolverTypeFieldNumber = 3;
  const ::std::string& solver_type() const;
  void set_solver_type(const ::std::string& value);
  #if LANG_CXX11
  void set_solver_type(::std::string&& value);
  #endif
  void set_solver_type(const char* value);
  void set_solver_type(const char* value, size_t size);
  ::std::string* mutable_solver_type();
  ::std::string* release_solver_type();
  void set_allocated_solver_type(::std::string* solver_type);

  // string profile_name = 17;
  void clear_profile_name();
  static const int kProfileNameFieldNumber = 17;
  const ::std::string& profile_name() const;
  void set_profile_name(const ::std::string& value);
  #if LANG_CXX11
  void set_profile_name(::std::string&& value);
  #endif
  void set_profile_name(const char* value);
  void set_profile_name(const char* value, size_t size);
  ::std::string* mutable_profile_name();
  ::std::string* release_profile_name();
  void set_allocated_profile_name(::std::string* profile_name);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Vector3d gravity = 12;
  bool has_gravity() const;
  void clear_gravity();
  static const int kGravityFieldNumber = 12;
  private:
  const ::gz::msgs::Vector3d& _internal_gravity() const;
  public:
  const ::gz::msgs::Vector3d& gravity() const;
  ::gz::msgs::Vector3d* release_gravity();
  ::gz::msgs::Vector3d* mutable_gravity();
  void set_allocated_gravity(::gz::msgs::Vector3d* gravity);

  // .gz.msgs.Vector3d magnetic_field = 18;
  bool has_magnetic_field() const;
  void clear_magnetic_field();
  static const int kMagneticFieldFieldNumber = 18;
  private:
  const ::gz::msgs::Vector3d& _internal_magnetic_field() const;
  public:
  const ::gz::msgs::Vector3d& magnetic_field() const;
  ::gz::msgs::Vector3d* release_magnetic_field();
  ::gz::msgs::Vector3d* mutable_magnetic_field();
  void set_allocated_magnetic_field(::gz::msgs::Vector3d* magnetic_field);

  // .gz.msgs.Physics.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::gz::msgs::Physics_Type type() const;
  void set_type(::gz::msgs::Physics_Type value);

  // int32 precon_iters = 5;
  void clear_precon_iters();
  static const int kPreconItersFieldNumber = 5;
  ::google::protobuf::int32 precon_iters() const;
  void set_precon_iters(::google::protobuf::int32 value);

  // double min_step_size = 4;
  void clear_min_step_size();
  static const int kMinStepSizeFieldNumber = 4;
  double min_step_size() const;
  void set_min_step_size(double value);

  // double sor = 7;
  void clear_sor();
  static const int kSorFieldNumber = 7;
  double sor() const;
  void set_sor(double value);

  // double cfm = 8;
  void clear_cfm();
  static const int kCfmFieldNumber = 8;
  double cfm() const;
  void set_cfm(double value);

  // double erp = 9;
  void clear_erp();
  static const int kErpFieldNumber = 9;
  double erp() const;
  void set_erp(double value);

  // int32 iters = 6;
  void clear_iters();
  static const int kItersFieldNumber = 6;
  ::google::protobuf::int32 iters() const;
  void set_iters(::google::protobuf::int32 value);

  // bool enable_physics = 13;
  void clear_enable_physics();
  static const int kEnablePhysicsFieldNumber = 13;
  bool enable_physics() const;
  void set_enable_physics(bool value);

  // double contact_max_correcting_vel = 10;
  void clear_contact_max_correcting_vel();
  static const int kContactMaxCorrectingVelFieldNumber = 10;
  double contact_max_correcting_vel() const;
  void set_contact_max_correcting_vel(double value);

  // double contact_surface_layer = 11;
  void clear_contact_surface_layer();
  static const int kContactSurfaceLayerFieldNumber = 11;
  double contact_surface_layer() const;
  void set_contact_surface_layer(double value);

  // double real_time_factor = 14;
  void clear_real_time_factor();
  static const int kRealTimeFactorFieldNumber = 14;
  double real_time_factor() const;
  void set_real_time_factor(double value);

  // double real_time_update_rate = 15;
  void clear_real_time_update_rate();
  static const int kRealTimeUpdateRateFieldNumber = 15;
  double real_time_update_rate() const;
  void set_real_time_update_rate(double value);

  // double max_step_size = 16;
  void clear_max_step_size();
  static const int kMaxStepSizeFieldNumber = 16;
  double max_step_size() const;
  void set_max_step_size(double value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Physics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr solver_type_;
  ::google::protobuf::internal::ArenaStringPtr profile_name_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Vector3d* gravity_;
  ::gz::msgs::Vector3d* magnetic_field_;
  int type_;
  ::google::protobuf::int32 precon_iters_;
  double min_step_size_;
  double sor_;
  double cfm_;
  double erp_;
  ::google::protobuf::int32 iters_;
  bool enable_physics_;
  double contact_max_correcting_vel_;
  double contact_surface_layer_;
  double real_time_factor_;
  double real_time_update_rate_;
  double max_step_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fphysics_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Physics

// .gz.msgs.Header header = 1;
inline bool Physics::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& Physics::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& Physics::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.Physics.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* Physics::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.Physics.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* Physics::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Physics.header)
  return header_;
}
inline void Physics::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Physics.header)
}

// .gz.msgs.Physics.Type type = 2;
inline void Physics::clear_type() {
  type_ = 0;
}
inline ::gz::msgs::Physics_Type Physics::type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Physics.type)
  return static_cast< ::gz::msgs::Physics_Type >(type_);
}
inline void Physics::set_type(::gz::msgs::Physics_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Physics.type)
}

// string solver_type = 3;
inline void Physics::clear_solver_type() {
  solver_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Physics::solver_type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Physics.solver_type)
  return solver_type_.GetNoArena();
}
inline void Physics::set_solver_type(const ::std::string& value) {
  
  solver_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Physics.solver_type)
}
#if LANG_CXX11
inline void Physics::set_solver_type(::std::string&& value) {
  
  solver_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Physics.solver_type)
}
#endif
inline void Physics::set_solver_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  solver_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Physics.solver_type)
}
inline void Physics::set_solver_type(const char* value, size_t size) {
  
  solver_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Physics.solver_type)
}
inline ::std::string* Physics::mutable_solver_type() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Physics.solver_type)
  return solver_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Physics::release_solver_type() {
  // @@protoc_insertion_point(field_release:gz.msgs.Physics.solver_type)
  
  return solver_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Physics::set_allocated_solver_type(::std::string* solver_type) {
  if (solver_type != NULL) {
    
  } else {
    
  }
  solver_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), solver_type);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Physics.solver_type)
}

// double min_step_size = 4;
inline void Physics::clear_min_step_size() {
  min_step_size_ = 0;
}
inline double Physics::min_step_size() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Physics.min_step_size)
  return min_step_size_;
}
inline void Physics::set_min_step_size(double value) {
  
  min_step_size_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Physics.min_step_size)
}

// int32 precon_iters = 5;
inline void Physics::clear_precon_iters() {
  precon_iters_ = 0;
}
inline ::google::protobuf::int32 Physics::precon_iters() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Physics.precon_iters)
  return precon_iters_;
}
inline void Physics::set_precon_iters(::google::protobuf::int32 value) {
  
  precon_iters_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Physics.precon_iters)
}

// int32 iters = 6;
inline void Physics::clear_iters() {
  iters_ = 0;
}
inline ::google::protobuf::int32 Physics::iters() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Physics.iters)
  return iters_;
}
inline void Physics::set_iters(::google::protobuf::int32 value) {
  
  iters_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Physics.iters)
}

// double sor = 7;
inline void Physics::clear_sor() {
  sor_ = 0;
}
inline double Physics::sor() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Physics.sor)
  return sor_;
}
inline void Physics::set_sor(double value) {
  
  sor_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Physics.sor)
}

// double cfm = 8;
inline void Physics::clear_cfm() {
  cfm_ = 0;
}
inline double Physics::cfm() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Physics.cfm)
  return cfm_;
}
inline void Physics::set_cfm(double value) {
  
  cfm_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Physics.cfm)
}

// double erp = 9;
inline void Physics::clear_erp() {
  erp_ = 0;
}
inline double Physics::erp() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Physics.erp)
  return erp_;
}
inline void Physics::set_erp(double value) {
  
  erp_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Physics.erp)
}

// double contact_max_correcting_vel = 10;
inline void Physics::clear_contact_max_correcting_vel() {
  contact_max_correcting_vel_ = 0;
}
inline double Physics::contact_max_correcting_vel() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Physics.contact_max_correcting_vel)
  return contact_max_correcting_vel_;
}
inline void Physics::set_contact_max_correcting_vel(double value) {
  
  contact_max_correcting_vel_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Physics.contact_max_correcting_vel)
}

// double contact_surface_layer = 11;
inline void Physics::clear_contact_surface_layer() {
  contact_surface_layer_ = 0;
}
inline double Physics::contact_surface_layer() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Physics.contact_surface_layer)
  return contact_surface_layer_;
}
inline void Physics::set_contact_surface_layer(double value) {
  
  contact_surface_layer_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Physics.contact_surface_layer)
}

// .gz.msgs.Vector3d gravity = 12;
inline bool Physics::has_gravity() const {
  return this != internal_default_instance() && gravity_ != NULL;
}
inline const ::gz::msgs::Vector3d& Physics::_internal_gravity() const {
  return *gravity_;
}
inline const ::gz::msgs::Vector3d& Physics::gravity() const {
  const ::gz::msgs::Vector3d* p = gravity_;
  // @@protoc_insertion_point(field_get:gz.msgs.Physics.gravity)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Vector3d*>(
      &::gz::msgs::_Vector3d_default_instance_);
}
inline ::gz::msgs::Vector3d* Physics::release_gravity() {
  // @@protoc_insertion_point(field_release:gz.msgs.Physics.gravity)
  
  ::gz::msgs::Vector3d* temp = gravity_;
  gravity_ = NULL;
  return temp;
}
inline ::gz::msgs::Vector3d* Physics::mutable_gravity() {
  
  if (gravity_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Vector3d>(GetArenaNoVirtual());
    gravity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Physics.gravity)
  return gravity_;
}
inline void Physics::set_allocated_gravity(::gz::msgs::Vector3d* gravity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(gravity_);
  }
  if (gravity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gravity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gravity, submessage_arena);
    }
    
  } else {
    
  }
  gravity_ = gravity;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Physics.gravity)
}

// bool enable_physics = 13;
inline void Physics::clear_enable_physics() {
  enable_physics_ = false;
}
inline bool Physics::enable_physics() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Physics.enable_physics)
  return enable_physics_;
}
inline void Physics::set_enable_physics(bool value) {
  
  enable_physics_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Physics.enable_physics)
}

// double real_time_factor = 14;
inline void Physics::clear_real_time_factor() {
  real_time_factor_ = 0;
}
inline double Physics::real_time_factor() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Physics.real_time_factor)
  return real_time_factor_;
}
inline void Physics::set_real_time_factor(double value) {
  
  real_time_factor_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Physics.real_time_factor)
}

// double real_time_update_rate = 15;
inline void Physics::clear_real_time_update_rate() {
  real_time_update_rate_ = 0;
}
inline double Physics::real_time_update_rate() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Physics.real_time_update_rate)
  return real_time_update_rate_;
}
inline void Physics::set_real_time_update_rate(double value) {
  
  real_time_update_rate_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Physics.real_time_update_rate)
}

// double max_step_size = 16;
inline void Physics::clear_max_step_size() {
  max_step_size_ = 0;
}
inline double Physics::max_step_size() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Physics.max_step_size)
  return max_step_size_;
}
inline void Physics::set_max_step_size(double value) {
  
  max_step_size_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Physics.max_step_size)
}

// string profile_name = 17;
inline void Physics::clear_profile_name() {
  profile_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Physics::profile_name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Physics.profile_name)
  return profile_name_.GetNoArena();
}
inline void Physics::set_profile_name(const ::std::string& value) {
  
  profile_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Physics.profile_name)
}
#if LANG_CXX11
inline void Physics::set_profile_name(::std::string&& value) {
  
  profile_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Physics.profile_name)
}
#endif
inline void Physics::set_profile_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  profile_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Physics.profile_name)
}
inline void Physics::set_profile_name(const char* value, size_t size) {
  
  profile_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Physics.profile_name)
}
inline ::std::string* Physics::mutable_profile_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Physics.profile_name)
  return profile_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Physics::release_profile_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.Physics.profile_name)
  
  return profile_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Physics::set_allocated_profile_name(::std::string* profile_name) {
  if (profile_name != NULL) {
    
  } else {
    
  }
  profile_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), profile_name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Physics.profile_name)
}

// .gz.msgs.Vector3d magnetic_field = 18;
inline bool Physics::has_magnetic_field() const {
  return this != internal_default_instance() && magnetic_field_ != NULL;
}
inline const ::gz::msgs::Vector3d& Physics::_internal_magnetic_field() const {
  return *magnetic_field_;
}
inline const ::gz::msgs::Vector3d& Physics::magnetic_field() const {
  const ::gz::msgs::Vector3d* p = magnetic_field_;
  // @@protoc_insertion_point(field_get:gz.msgs.Physics.magnetic_field)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Vector3d*>(
      &::gz::msgs::_Vector3d_default_instance_);
}
inline ::gz::msgs::Vector3d* Physics::release_magnetic_field() {
  // @@protoc_insertion_point(field_release:gz.msgs.Physics.magnetic_field)
  
  ::gz::msgs::Vector3d* temp = magnetic_field_;
  magnetic_field_ = NULL;
  return temp;
}
inline ::gz::msgs::Vector3d* Physics::mutable_magnetic_field() {
  
  if (magnetic_field_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Vector3d>(GetArenaNoVirtual());
    magnetic_field_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Physics.magnetic_field)
  return magnetic_field_;
}
inline void Physics::set_allocated_magnetic_field(::gz::msgs::Vector3d* magnetic_field) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(magnetic_field_);
  }
  if (magnetic_field) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      magnetic_field = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, magnetic_field, submessage_arena);
    }
    
  } else {
    
  }
  magnetic_field_ = magnetic_field;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Physics.magnetic_field)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::msgs::Physics_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::Physics_Type>() {
  return ::gz::msgs::Physics_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fphysics_2eproto
