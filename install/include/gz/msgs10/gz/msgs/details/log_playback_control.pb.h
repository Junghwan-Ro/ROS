// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/log_playback_control.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2flog_5fplayback_5fcontrol_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2flog_5fplayback_5fcontrol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/time.pb.h"
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2flog_5fplayback_5fcontrol_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2flog_5fplayback_5fcontrol_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2flog_5fplayback_5fcontrol_2eproto
namespace gz {
namespace msgs {
class LogPlaybackControl;
class LogPlaybackControlDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern LogPlaybackControlDefaultTypeInternal _LogPlaybackControl_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::LogPlaybackControl* Arena::CreateMaybeMessage<::gz::msgs::LogPlaybackControl>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE LogPlaybackControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.LogPlaybackControl) */ {
 public:
  LogPlaybackControl();
  virtual ~LogPlaybackControl();

  LogPlaybackControl(const LogPlaybackControl& from);

  inline LogPlaybackControl& operator=(const LogPlaybackControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogPlaybackControl(LogPlaybackControl&& from) noexcept
    : LogPlaybackControl() {
    *this = ::std::move(from);
  }

  inline LogPlaybackControl& operator=(LogPlaybackControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogPlaybackControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogPlaybackControl* internal_default_instance() {
    return reinterpret_cast<const LogPlaybackControl*>(
               &_LogPlaybackControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LogPlaybackControl* other);
  friend void swap(LogPlaybackControl& a, LogPlaybackControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogPlaybackControl* New() const final {
    return CreateMaybeMessage<LogPlaybackControl>(NULL);
  }

  LogPlaybackControl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogPlaybackControl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogPlaybackControl& from);
  void MergeFrom(const LogPlaybackControl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogPlaybackControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Time seek = 6;
  bool has_seek() const;
  void clear_seek();
  static const int kSeekFieldNumber = 6;
  private:
  const ::gz::msgs::Time& _internal_seek() const;
  public:
  const ::gz::msgs::Time& seek() const;
  ::gz::msgs::Time* release_seek();
  ::gz::msgs::Time* mutable_seek();
  void set_allocated_seek(::gz::msgs::Time* seek);

  // sint32 multi_step = 3;
  void clear_multi_step();
  static const int kMultiStepFieldNumber = 3;
  ::google::protobuf::int32 multi_step() const;
  void set_multi_step(::google::protobuf::int32 value);

  // bool pause = 2;
  void clear_pause();
  static const int kPauseFieldNumber = 2;
  bool pause() const;
  void set_pause(bool value);

  // bool rewind = 4;
  void clear_rewind();
  static const int kRewindFieldNumber = 4;
  bool rewind() const;
  void set_rewind(bool value);

  // bool forward = 5;
  void clear_forward();
  static const int kForwardFieldNumber = 5;
  bool forward() const;
  void set_forward(bool value);

  // @@protoc_insertion_point(class_scope:gz.msgs.LogPlaybackControl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Time* seek_;
  ::google::protobuf::int32 multi_step_;
  bool pause_;
  bool rewind_;
  bool forward_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2flog_5fplayback_5fcontrol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogPlaybackControl

// .gz.msgs.Header header = 1;
inline bool LogPlaybackControl::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& LogPlaybackControl::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& LogPlaybackControl::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.LogPlaybackControl.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* LogPlaybackControl::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.LogPlaybackControl.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* LogPlaybackControl::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.LogPlaybackControl.header)
  return header_;
}
inline void LogPlaybackControl::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.LogPlaybackControl.header)
}

// bool pause = 2;
inline void LogPlaybackControl::clear_pause() {
  pause_ = false;
}
inline bool LogPlaybackControl::pause() const {
  // @@protoc_insertion_point(field_get:gz.msgs.LogPlaybackControl.pause)
  return pause_;
}
inline void LogPlaybackControl::set_pause(bool value) {
  
  pause_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.LogPlaybackControl.pause)
}

// sint32 multi_step = 3;
inline void LogPlaybackControl::clear_multi_step() {
  multi_step_ = 0;
}
inline ::google::protobuf::int32 LogPlaybackControl::multi_step() const {
  // @@protoc_insertion_point(field_get:gz.msgs.LogPlaybackControl.multi_step)
  return multi_step_;
}
inline void LogPlaybackControl::set_multi_step(::google::protobuf::int32 value) {
  
  multi_step_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.LogPlaybackControl.multi_step)
}

// bool rewind = 4;
inline void LogPlaybackControl::clear_rewind() {
  rewind_ = false;
}
inline bool LogPlaybackControl::rewind() const {
  // @@protoc_insertion_point(field_get:gz.msgs.LogPlaybackControl.rewind)
  return rewind_;
}
inline void LogPlaybackControl::set_rewind(bool value) {
  
  rewind_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.LogPlaybackControl.rewind)
}

// bool forward = 5;
inline void LogPlaybackControl::clear_forward() {
  forward_ = false;
}
inline bool LogPlaybackControl::forward() const {
  // @@protoc_insertion_point(field_get:gz.msgs.LogPlaybackControl.forward)
  return forward_;
}
inline void LogPlaybackControl::set_forward(bool value) {
  
  forward_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.LogPlaybackControl.forward)
}

// .gz.msgs.Time seek = 6;
inline bool LogPlaybackControl::has_seek() const {
  return this != internal_default_instance() && seek_ != NULL;
}
inline const ::gz::msgs::Time& LogPlaybackControl::_internal_seek() const {
  return *seek_;
}
inline const ::gz::msgs::Time& LogPlaybackControl::seek() const {
  const ::gz::msgs::Time* p = seek_;
  // @@protoc_insertion_point(field_get:gz.msgs.LogPlaybackControl.seek)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Time*>(
      &::gz::msgs::_Time_default_instance_);
}
inline ::gz::msgs::Time* LogPlaybackControl::release_seek() {
  // @@protoc_insertion_point(field_release:gz.msgs.LogPlaybackControl.seek)
  
  ::gz::msgs::Time* temp = seek_;
  seek_ = NULL;
  return temp;
}
inline ::gz::msgs::Time* LogPlaybackControl::mutable_seek() {
  
  if (seek_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Time>(GetArenaNoVirtual());
    seek_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.LogPlaybackControl.seek)
  return seek_;
}
inline void LogPlaybackControl::set_allocated_seek(::gz::msgs::Time* seek) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(seek_);
  }
  if (seek) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      seek = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, seek, submessage_arena);
    }
    
  } else {
    
  }
  seek_ = seek;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.LogPlaybackControl.seek)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2flog_5fplayback_5fcontrol_2eproto
