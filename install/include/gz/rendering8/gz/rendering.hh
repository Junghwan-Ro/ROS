/*
 * Copyright (C) 2017 Open Source Robotics Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
*/

//                ****** Do not modify this file. ******
// This file is automatically generated by CMake. Changes should instead be
// made to cmake/gz_auto_headers.hh.in in gz-cmake

#include <gz/rendering/config.hh>
#include <gz/rendering/base/BaseArrowVisual.hh>
#include <gz/rendering/base/BaseAxisVisual.hh>
#include <gz/rendering/base/BaseBoundingBoxCamera.hh>
#include <gz/rendering/base/BaseCOMVisual.hh>
#include <gz/rendering/base/BaseCamera.hh>
#include <gz/rendering/base/BaseCapsule.hh>
#include <gz/rendering/base/BaseDepthCamera.hh>
#include <gz/rendering/base/BaseDistortionPass.hh>
#include <gz/rendering/base/BaseGaussianNoisePass.hh>
#include <gz/rendering/base/BaseGeometry.hh>
#include <gz/rendering/base/BaseGizmoVisual.hh>
#include <gz/rendering/base/BaseGlobalIlluminationVct.hh>
#include <gz/rendering/base/BaseGpuRays.hh>
#include <gz/rendering/base/BaseGrid.hh>
#include <gz/rendering/base/BaseHeightmap.hh>
#include <gz/rendering/base/BaseInertiaVisual.hh>
#include <gz/rendering/base/BaseJointVisual.hh>
#include <gz/rendering/base/BaseLensFlarePass.hh>
#include <gz/rendering/base/BaseLidarVisual.hh>
#include <gz/rendering/base/BaseLight.hh>
#include <gz/rendering/base/BaseLightVisual.hh>
#include <gz/rendering/base/BaseMarker.hh>
#include <gz/rendering/base/BaseMaterial.hh>
#include <gz/rendering/base/BaseMesh.hh>
#include <gz/rendering/base/BaseNativeWindow.hh>
#include <gz/rendering/base/BaseNode.hh>
#include <gz/rendering/base/BaseObject.hh>
#include <gz/rendering/base/BaseParticleEmitter.hh>
#include <gz/rendering/base/BaseRayQuery.hh>
#include <gz/rendering/base/BaseRenderEngine.hh>
#include <gz/rendering/base/BaseRenderPass.hh>
#include <gz/rendering/base/BaseRenderTarget.hh>
#include <gz/rendering/base/BaseRenderTypes.hh>
#include <gz/rendering/base/BaseScene.hh>
#include <gz/rendering/base/BaseSegmentationCamera.hh>
#include <gz/rendering/base/BaseSensor.hh>
#include <gz/rendering/base/BaseStorage.hh>
#include <gz/rendering/base/BaseText.hh>
#include <gz/rendering/base/BaseThermalCamera.hh>
#include <gz/rendering/base/BaseVisual.hh>
#include <gz/rendering/base/BaseWideAngleCamera.hh>
#include <gz/rendering/base/BaseWireBox.hh>
#include <gz/rendering/ArrowVisual.hh>
#include <gz/rendering/AxisVisual.hh>
#include <gz/rendering/BoundingBox.hh>
#include <gz/rendering/BoundingBoxCamera.hh>
#include <gz/rendering/COMVisual.hh>
#include <gz/rendering/Camera.hh>
#include <gz/rendering/CameraLens.hh>
#include <gz/rendering/Capsule.hh>
#include <gz/rendering/CompositeVisual.hh>
#include <gz/rendering/DepthCamera.hh>
#include <gz/rendering/DistortionPass.hh>
#include <gz/rendering/GaussianNoisePass.hh>
#include <gz/rendering/Geometry.hh>
#include <gz/rendering/GizmoVisual.hh>
#include <gz/rendering/GlobalIlluminationBase.hh>
#include <gz/rendering/GlobalIlluminationCiVct.hh>
#include <gz/rendering/GlobalIlluminationVct.hh>
#include <gz/rendering/GpuRays.hh>
#include <gz/rendering/GraphicsAPI.hh>
#include <gz/rendering/Grid.hh>
#include <gz/rendering/Heightmap.hh>
#include <gz/rendering/HeightmapDescriptor.hh>
#include <gz/rendering/Image.hh>
#include <gz/rendering/InertiaVisual.hh>
#include <gz/rendering/JointVisual.hh>
#include <gz/rendering/LensFlarePass.hh>
#include <gz/rendering/LidarVisual.hh>
#include <gz/rendering/Light.hh>
#include <gz/rendering/LightVisual.hh>
#include <gz/rendering/Marker.hh>
#include <gz/rendering/Material.hh>
#include <gz/rendering/Mesh.hh>
#include <gz/rendering/MeshDescriptor.hh>
#include <gz/rendering/MoveToHelper.hh>
#include <gz/rendering/NativeWindow.hh>
#include <gz/rendering/Node.hh>
#include <gz/rendering/Object.hh>
#include <gz/rendering/OrbitViewController.hh>
#include <gz/rendering/OrthoViewController.hh>
#include <gz/rendering/ParticleEmitter.hh>
#include <gz/rendering/PixelFormat.hh>
#include <gz/rendering/RayQuery.hh>
#include <gz/rendering/RenderEngine.hh>
#include <gz/rendering/RenderEngineManager.hh>
#include <gz/rendering/RenderEnginePlugin.hh>
#include <gz/rendering/RenderEngineVulkanExternalDeviceStructs.hh>
#include <gz/rendering/RenderPass.hh>
#include <gz/rendering/RenderPassSystem.hh>
#include <gz/rendering/RenderTarget.hh>
#include <gz/rendering/RenderTypes.hh>
#include <gz/rendering/RenderingIface.hh>
#include <gz/rendering/Scene.hh>
#include <gz/rendering/SegmentationCamera.hh>
#include <gz/rendering/Sensor.hh>
#include <gz/rendering/ShaderParam.hh>
#include <gz/rendering/ShaderParams.hh>
#include <gz/rendering/ShaderType.hh>
#include <gz/rendering/Storage.hh>
#include <gz/rendering/Text.hh>
#include <gz/rendering/ThermalCamera.hh>
#include <gz/rendering/TransformController.hh>
#include <gz/rendering/TransformType.hh>
#include <gz/rendering/Utils.hh>
#include <gz/rendering/ViewController.hh>
#include <gz/rendering/Visual.hh>
#include <gz/rendering/WideAngleCamera.hh>
#include <gz/rendering/WireBox.hh>

