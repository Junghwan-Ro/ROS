// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peer_info.proto

#ifndef PROTOBUF_INCLUDED_peer_5finfo_2eproto
#define PROTOBUF_INCLUDED_peer_5finfo_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_peer_5finfo_2eproto 

namespace protobuf_peer_5finfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_peer_5finfo_2eproto
namespace gz {
namespace sim {
namespace private_msgs {
class PeerAnnounce;
class PeerAnnounceDefaultTypeInternal;
extern PeerAnnounceDefaultTypeInternal _PeerAnnounce_default_instance_;
class PeerInfo;
class PeerInfoDefaultTypeInternal;
extern PeerInfoDefaultTypeInternal _PeerInfo_default_instance_;
}  // namespace private_msgs
}  // namespace sim
}  // namespace gz
namespace google {
namespace protobuf {
template<> ::gz::sim::private_msgs::PeerAnnounce* Arena::CreateMaybeMessage<::gz::sim::private_msgs::PeerAnnounce>(Arena*);
template<> ::gz::sim::private_msgs::PeerInfo* Arena::CreateMaybeMessage<::gz::sim::private_msgs::PeerInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace sim {
namespace private_msgs {

enum PeerInfo_PeerRole {
  PeerInfo_PeerRole_NONE = 0,
  PeerInfo_PeerRole_READ_ONLY = 1,
  PeerInfo_PeerRole_SIMULATION_PRIMARY = 2,
  PeerInfo_PeerRole_SIMULATION_SECONDARY = 3,
  PeerInfo_PeerRole_PeerInfo_PeerRole_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PeerInfo_PeerRole_PeerInfo_PeerRole_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PeerInfo_PeerRole_IsValid(int value);
const PeerInfo_PeerRole PeerInfo_PeerRole_PeerRole_MIN = PeerInfo_PeerRole_NONE;
const PeerInfo_PeerRole PeerInfo_PeerRole_PeerRole_MAX = PeerInfo_PeerRole_SIMULATION_SECONDARY;
const int PeerInfo_PeerRole_PeerRole_ARRAYSIZE = PeerInfo_PeerRole_PeerRole_MAX + 1;

const ::google::protobuf::EnumDescriptor* PeerInfo_PeerRole_descriptor();
inline const ::std::string& PeerInfo_PeerRole_Name(PeerInfo_PeerRole value) {
  return ::google::protobuf::internal::NameOfEnum(
    PeerInfo_PeerRole_descriptor(), value);
}
inline bool PeerInfo_PeerRole_Parse(
    const ::std::string& name, PeerInfo_PeerRole* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PeerInfo_PeerRole>(
    PeerInfo_PeerRole_descriptor(), name, value);
}
enum PeerAnnounce_PeerState {
  PeerAnnounce_PeerState_CONNECTING = 0,
  PeerAnnounce_PeerState_DISCONNECTING = 1,
  PeerAnnounce_PeerState_PeerAnnounce_PeerState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PeerAnnounce_PeerState_PeerAnnounce_PeerState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PeerAnnounce_PeerState_IsValid(int value);
const PeerAnnounce_PeerState PeerAnnounce_PeerState_PeerState_MIN = PeerAnnounce_PeerState_CONNECTING;
const PeerAnnounce_PeerState PeerAnnounce_PeerState_PeerState_MAX = PeerAnnounce_PeerState_DISCONNECTING;
const int PeerAnnounce_PeerState_PeerState_ARRAYSIZE = PeerAnnounce_PeerState_PeerState_MAX + 1;

const ::google::protobuf::EnumDescriptor* PeerAnnounce_PeerState_descriptor();
inline const ::std::string& PeerAnnounce_PeerState_Name(PeerAnnounce_PeerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    PeerAnnounce_PeerState_descriptor(), value);
}
inline bool PeerAnnounce_PeerState_Parse(
    const ::std::string& name, PeerAnnounce_PeerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PeerAnnounce_PeerState>(
    PeerAnnounce_PeerState_descriptor(), name, value);
}
// ===================================================================

class PeerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.sim.private_msgs.PeerInfo) */ {
 public:
  PeerInfo();
  virtual ~PeerInfo();

  PeerInfo(const PeerInfo& from);

  inline PeerInfo& operator=(const PeerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerInfo(PeerInfo&& from) noexcept
    : PeerInfo() {
    *this = ::std::move(from);
  }

  inline PeerInfo& operator=(PeerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerInfo* internal_default_instance() {
    return reinterpret_cast<const PeerInfo*>(
               &_PeerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PeerInfo* other);
  friend void swap(PeerInfo& a, PeerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerInfo* New() const final {
    return CreateMaybeMessage<PeerInfo>(NULL);
  }

  PeerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerInfo& from);
  void MergeFrom(const PeerInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PeerInfo_PeerRole PeerRole;
  static const PeerRole NONE =
    PeerInfo_PeerRole_NONE;
  static const PeerRole READ_ONLY =
    PeerInfo_PeerRole_READ_ONLY;
  static const PeerRole SIMULATION_PRIMARY =
    PeerInfo_PeerRole_SIMULATION_PRIMARY;
  static const PeerRole SIMULATION_SECONDARY =
    PeerInfo_PeerRole_SIMULATION_SECONDARY;
  static inline bool PeerRole_IsValid(int value) {
    return PeerInfo_PeerRole_IsValid(value);
  }
  static const PeerRole PeerRole_MIN =
    PeerInfo_PeerRole_PeerRole_MIN;
  static const PeerRole PeerRole_MAX =
    PeerInfo_PeerRole_PeerRole_MAX;
  static const int PeerRole_ARRAYSIZE =
    PeerInfo_PeerRole_PeerRole_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PeerRole_descriptor() {
    return PeerInfo_PeerRole_descriptor();
  }
  static inline const ::std::string& PeerRole_Name(PeerRole value) {
    return PeerInfo_PeerRole_Name(value);
  }
  static inline bool PeerRole_Parse(const ::std::string& name,
      PeerRole* value) {
    return PeerInfo_PeerRole_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string hostname = 3;
  void clear_hostname();
  static const int kHostnameFieldNumber = 3;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  #if LANG_CXX11
  void set_hostname(::std::string&& value);
  #endif
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.sim.private_msgs.PeerInfo.PeerRole role = 4;
  void clear_role();
  static const int kRoleFieldNumber = 4;
  ::gz::sim::private_msgs::PeerInfo_PeerRole role() const;
  void set_role(::gz::sim::private_msgs::PeerInfo_PeerRole value);

  // @@protoc_insertion_point(class_scope:gz.sim.private_msgs.PeerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::gz::msgs::Header* header_;
  int role_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_peer_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PeerAnnounce : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.sim.private_msgs.PeerAnnounce) */ {
 public:
  PeerAnnounce();
  virtual ~PeerAnnounce();

  PeerAnnounce(const PeerAnnounce& from);

  inline PeerAnnounce& operator=(const PeerAnnounce& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerAnnounce(PeerAnnounce&& from) noexcept
    : PeerAnnounce() {
    *this = ::std::move(from);
  }

  inline PeerAnnounce& operator=(PeerAnnounce&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerAnnounce& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerAnnounce* internal_default_instance() {
    return reinterpret_cast<const PeerAnnounce*>(
               &_PeerAnnounce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PeerAnnounce* other);
  friend void swap(PeerAnnounce& a, PeerAnnounce& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerAnnounce* New() const final {
    return CreateMaybeMessage<PeerAnnounce>(NULL);
  }

  PeerAnnounce* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerAnnounce>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerAnnounce& from);
  void MergeFrom(const PeerAnnounce& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerAnnounce* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PeerAnnounce_PeerState PeerState;
  static const PeerState CONNECTING =
    PeerAnnounce_PeerState_CONNECTING;
  static const PeerState DISCONNECTING =
    PeerAnnounce_PeerState_DISCONNECTING;
  static inline bool PeerState_IsValid(int value) {
    return PeerAnnounce_PeerState_IsValid(value);
  }
  static const PeerState PeerState_MIN =
    PeerAnnounce_PeerState_PeerState_MIN;
  static const PeerState PeerState_MAX =
    PeerAnnounce_PeerState_PeerState_MAX;
  static const int PeerState_ARRAYSIZE =
    PeerAnnounce_PeerState_PeerState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PeerState_descriptor() {
    return PeerAnnounce_PeerState_descriptor();
  }
  static inline const ::std::string& PeerState_Name(PeerState value) {
    return PeerAnnounce_PeerState_Name(value);
  }
  static inline bool PeerState_Parse(const ::std::string& name,
      PeerState* value) {
    return PeerAnnounce_PeerState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .gz.sim.private_msgs.PeerInfo info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  private:
  const ::gz::sim::private_msgs::PeerInfo& _internal_info() const;
  public:
  const ::gz::sim::private_msgs::PeerInfo& info() const;
  ::gz::sim::private_msgs::PeerInfo* release_info();
  ::gz::sim::private_msgs::PeerInfo* mutable_info();
  void set_allocated_info(::gz::sim::private_msgs::PeerInfo* info);

  // .gz.sim.private_msgs.PeerAnnounce.PeerState state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::gz::sim::private_msgs::PeerAnnounce_PeerState state() const;
  void set_state(::gz::sim::private_msgs::PeerAnnounce_PeerState value);

  // @@protoc_insertion_point(class_scope:gz.sim.private_msgs.PeerAnnounce)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gz::sim::private_msgs::PeerInfo* info_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_peer_5finfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PeerInfo

// .gz.msgs.Header header = 1;
inline bool PeerInfo::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& PeerInfo::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& PeerInfo::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.sim.private_msgs.PeerInfo.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* PeerInfo::release_header() {
  // @@protoc_insertion_point(field_release:gz.sim.private_msgs.PeerInfo.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* PeerInfo::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.sim.private_msgs.PeerInfo.header)
  return header_;
}
inline void PeerInfo::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.sim.private_msgs.PeerInfo.header)
}

// string id = 2;
inline void PeerInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerInfo::id() const {
  // @@protoc_insertion_point(field_get:gz.sim.private_msgs.PeerInfo.id)
  return id_.GetNoArena();
}
inline void PeerInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.sim.private_msgs.PeerInfo.id)
}
#if LANG_CXX11
inline void PeerInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.sim.private_msgs.PeerInfo.id)
}
#endif
inline void PeerInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.sim.private_msgs.PeerInfo.id)
}
inline void PeerInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.sim.private_msgs.PeerInfo.id)
}
inline ::std::string* PeerInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:gz.sim.private_msgs.PeerInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerInfo::release_id() {
  // @@protoc_insertion_point(field_release:gz.sim.private_msgs.PeerInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:gz.sim.private_msgs.PeerInfo.id)
}

// string hostname = 3;
inline void PeerInfo::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerInfo::hostname() const {
  // @@protoc_insertion_point(field_get:gz.sim.private_msgs.PeerInfo.hostname)
  return hostname_.GetNoArena();
}
inline void PeerInfo::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.sim.private_msgs.PeerInfo.hostname)
}
#if LANG_CXX11
inline void PeerInfo::set_hostname(::std::string&& value) {
  
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.sim.private_msgs.PeerInfo.hostname)
}
#endif
inline void PeerInfo::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.sim.private_msgs.PeerInfo.hostname)
}
inline void PeerInfo::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.sim.private_msgs.PeerInfo.hostname)
}
inline ::std::string* PeerInfo::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:gz.sim.private_msgs.PeerInfo.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerInfo::release_hostname() {
  // @@protoc_insertion_point(field_release:gz.sim.private_msgs.PeerInfo.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerInfo::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:gz.sim.private_msgs.PeerInfo.hostname)
}

// .gz.sim.private_msgs.PeerInfo.PeerRole role = 4;
inline void PeerInfo::clear_role() {
  role_ = 0;
}
inline ::gz::sim::private_msgs::PeerInfo_PeerRole PeerInfo::role() const {
  // @@protoc_insertion_point(field_get:gz.sim.private_msgs.PeerInfo.role)
  return static_cast< ::gz::sim::private_msgs::PeerInfo_PeerRole >(role_);
}
inline void PeerInfo::set_role(::gz::sim::private_msgs::PeerInfo_PeerRole value) {
  
  role_ = value;
  // @@protoc_insertion_point(field_set:gz.sim.private_msgs.PeerInfo.role)
}

// -------------------------------------------------------------------

// PeerAnnounce

// .gz.sim.private_msgs.PeerInfo info = 1;
inline bool PeerAnnounce::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void PeerAnnounce::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}
inline const ::gz::sim::private_msgs::PeerInfo& PeerAnnounce::_internal_info() const {
  return *info_;
}
inline const ::gz::sim::private_msgs::PeerInfo& PeerAnnounce::info() const {
  const ::gz::sim::private_msgs::PeerInfo* p = info_;
  // @@protoc_insertion_point(field_get:gz.sim.private_msgs.PeerAnnounce.info)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::sim::private_msgs::PeerInfo*>(
      &::gz::sim::private_msgs::_PeerInfo_default_instance_);
}
inline ::gz::sim::private_msgs::PeerInfo* PeerAnnounce::release_info() {
  // @@protoc_insertion_point(field_release:gz.sim.private_msgs.PeerAnnounce.info)
  
  ::gz::sim::private_msgs::PeerInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::gz::sim::private_msgs::PeerInfo* PeerAnnounce::mutable_info() {
  
  if (info_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::sim::private_msgs::PeerInfo>(GetArenaNoVirtual());
    info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.sim.private_msgs.PeerAnnounce.info)
  return info_;
}
inline void PeerAnnounce::set_allocated_info(::gz::sim::private_msgs::PeerInfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete info_;
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:gz.sim.private_msgs.PeerAnnounce.info)
}

// .gz.sim.private_msgs.PeerAnnounce.PeerState state = 2;
inline void PeerAnnounce::clear_state() {
  state_ = 0;
}
inline ::gz::sim::private_msgs::PeerAnnounce_PeerState PeerAnnounce::state() const {
  // @@protoc_insertion_point(field_get:gz.sim.private_msgs.PeerAnnounce.state)
  return static_cast< ::gz::sim::private_msgs::PeerAnnounce_PeerState >(state_);
}
inline void PeerAnnounce::set_state(::gz::sim::private_msgs::PeerAnnounce_PeerState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:gz.sim.private_msgs.PeerAnnounce.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace private_msgs
}  // namespace sim
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::sim::private_msgs::PeerInfo_PeerRole> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::sim::private_msgs::PeerInfo_PeerRole>() {
  return ::gz::sim::private_msgs::PeerInfo_PeerRole_descriptor();
}
template <> struct is_proto_enum< ::gz::sim::private_msgs::PeerAnnounce_PeerState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::sim::private_msgs::PeerAnnounce_PeerState>() {
  return ::gz::sim::private_msgs::PeerAnnounce_PeerState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_peer_5finfo_2eproto
