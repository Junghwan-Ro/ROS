// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peer_info.proto

#include "peer_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace protobuf_peer_5finfo_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_peer_5finfo_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PeerInfo;
}  // namespace protobuf_peer_5finfo_2eproto
namespace gz {
namespace sim {
namespace private_msgs {
class PeerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerInfo>
      _instance;
} _PeerInfo_default_instance_;
class PeerAnnounceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerAnnounce>
      _instance;
} _PeerAnnounce_default_instance_;
}  // namespace private_msgs
}  // namespace sim
}  // namespace gz
namespace protobuf_peer_5finfo_2eproto {
static void InitDefaultsPeerInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::sim::private_msgs::_PeerInfo_default_instance_;
    new (ptr) ::gz::sim::private_msgs::PeerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::sim::private_msgs::PeerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PeerInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPeerInfo}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,}};

static void InitDefaultsPeerAnnounce() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::sim::private_msgs::_PeerAnnounce_default_instance_;
    new (ptr) ::gz::sim::private_msgs::PeerAnnounce();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::sim::private_msgs::PeerAnnounce::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PeerAnnounce =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPeerAnnounce}, {
      &protobuf_peer_5finfo_2eproto::scc_info_PeerInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PeerInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerAnnounce.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::sim::private_msgs::PeerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::sim::private_msgs::PeerInfo, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::sim::private_msgs::PeerInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::sim::private_msgs::PeerInfo, hostname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::sim::private_msgs::PeerInfo, role_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::sim::private_msgs::PeerAnnounce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::sim::private_msgs::PeerAnnounce, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::sim::private_msgs::PeerAnnounce, state_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::sim::private_msgs::PeerInfo)},
  { 9, -1, sizeof(::gz::sim::private_msgs::PeerAnnounce)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::sim::private_msgs::_PeerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::sim::private_msgs::_PeerAnnounce_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "peer_info.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017peer_info.proto\022\023gz.sim.private_msgs\032\024"
      "gz/msgs/header.proto\"\326\001\n\010PeerInfo\022\037\n\006hea"
      "der\030\001 \001(\0132\017.gz.msgs.Header\022\n\n\002id\030\002 \001(\t\022\020"
      "\n\010hostname\030\003 \001(\t\0224\n\004role\030\004 \001(\0162&.gz.sim."
      "private_msgs.PeerInfo.PeerRole\"U\n\010PeerRo"
      "le\022\010\n\004NONE\020\000\022\r\n\tREAD_ONLY\020\001\022\026\n\022SIMULATIO"
      "N_PRIMARY\020\002\022\030\n\024SIMULATION_SECONDARY\020\003\"\247\001"
      "\n\014PeerAnnounce\022+\n\004info\030\001 \001(\0132\035.gz.sim.pr"
      "ivate_msgs.PeerInfo\022:\n\005state\030\002 \001(\0162+.gz."
      "sim.private_msgs.PeerAnnounce.PeerState\""
      ".\n\tPeerState\022\016\n\nCONNECTING\020\000\022\021\n\rDISCONNE"
      "CTING\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 455);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "peer_info.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_peer_5finfo_2eproto
namespace gz {
namespace sim {
namespace private_msgs {
const ::google::protobuf::EnumDescriptor* PeerInfo_PeerRole_descriptor() {
  protobuf_peer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_5finfo_2eproto::file_level_enum_descriptors[0];
}
bool PeerInfo_PeerRole_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PeerInfo_PeerRole PeerInfo::NONE;
const PeerInfo_PeerRole PeerInfo::READ_ONLY;
const PeerInfo_PeerRole PeerInfo::SIMULATION_PRIMARY;
const PeerInfo_PeerRole PeerInfo::SIMULATION_SECONDARY;
const PeerInfo_PeerRole PeerInfo::PeerRole_MIN;
const PeerInfo_PeerRole PeerInfo::PeerRole_MAX;
const int PeerInfo::PeerRole_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PeerAnnounce_PeerState_descriptor() {
  protobuf_peer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_5finfo_2eproto::file_level_enum_descriptors[1];
}
bool PeerAnnounce_PeerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PeerAnnounce_PeerState PeerAnnounce::CONNECTING;
const PeerAnnounce_PeerState PeerAnnounce::DISCONNECTING;
const PeerAnnounce_PeerState PeerAnnounce::PeerState_MIN;
const PeerAnnounce_PeerState PeerAnnounce::PeerState_MAX;
const int PeerAnnounce::PeerState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void PeerInfo::InitAsDefaultInstance() {
  ::gz::sim::private_msgs::_PeerInfo_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
}
void PeerInfo::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerInfo::kHeaderFieldNumber;
const int PeerInfo::kIdFieldNumber;
const int PeerInfo::kHostnameFieldNumber;
const int PeerInfo::kRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerInfo::PeerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_peer_5finfo_2eproto::scc_info_PeerInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.sim.private_msgs.PeerInfo)
}
PeerInfo::PeerInfo(const PeerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hostname().size() > 0) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  role_ = from.role_;
  // @@protoc_insertion_point(copy_constructor:gz.sim.private_msgs.PeerInfo)
}

void PeerInfo::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_) -
      reinterpret_cast<char*>(&header_)) + sizeof(role_));
}

PeerInfo::~PeerInfo() {
  // @@protoc_insertion_point(destructor:gz.sim.private_msgs.PeerInfo)
  SharedDtor();
}

void PeerInfo::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void PeerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PeerInfo::descriptor() {
  ::protobuf_peer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerInfo& PeerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_peer_5finfo_2eproto::scc_info_PeerInfo.base);
  return *internal_default_instance();
}


void PeerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.sim.private_msgs.PeerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  role_ = 0;
  _internal_metadata_.Clear();
}

bool PeerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.sim.private_msgs.PeerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.sim.private_msgs.PeerInfo.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hostname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), static_cast<int>(this->hostname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.sim.private_msgs.PeerInfo.hostname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.sim.private_msgs.PeerInfo.PeerRole role = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_role(static_cast< ::gz::sim::private_msgs::PeerInfo_PeerRole >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.sim.private_msgs.PeerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.sim.private_msgs.PeerInfo)
  return false;
#undef DO_
}

void PeerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.sim.private_msgs.PeerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.sim.private_msgs.PeerInfo.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // string hostname = 3;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.sim.private_msgs.PeerInfo.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hostname(), output);
  }

  // .gz.sim.private_msgs.PeerInfo.PeerRole role = 4;
  if (this->role() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->role(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.sim.private_msgs.PeerInfo)
}

::google::protobuf::uint8* PeerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.sim.private_msgs.PeerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.sim.private_msgs.PeerInfo.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // string hostname = 3;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.sim.private_msgs.PeerInfo.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hostname(), target);
  }

  // .gz.sim.private_msgs.PeerInfo.PeerRole role = 4;
  if (this->role() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->role(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.sim.private_msgs.PeerInfo)
  return target;
}

size_t PeerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.sim.private_msgs.PeerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string hostname = 3;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.sim.private_msgs.PeerInfo.PeerRole role = 4;
  if (this->role() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.sim.private_msgs.PeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.sim.private_msgs.PeerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.sim.private_msgs.PeerInfo)
    MergeFrom(*source);
  }
}

void PeerInfo::MergeFrom(const PeerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.sim.private_msgs.PeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.role() != 0) {
    set_role(from.role());
  }
}

void PeerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.sim.private_msgs.PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerInfo::CopyFrom(const PeerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.sim.private_msgs.PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerInfo::IsInitialized() const {
  return true;
}

void PeerInfo::Swap(PeerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerInfo::InternalSwap(PeerInfo* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hostname_.Swap(&other->hostname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(role_, other->role_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PeerInfo::GetMetadata() const {
  protobuf_peer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PeerAnnounce::InitAsDefaultInstance() {
  ::gz::sim::private_msgs::_PeerAnnounce_default_instance_._instance.get_mutable()->info_ = const_cast< ::gz::sim::private_msgs::PeerInfo*>(
      ::gz::sim::private_msgs::PeerInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerAnnounce::kInfoFieldNumber;
const int PeerAnnounce::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerAnnounce::PeerAnnounce()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_peer_5finfo_2eproto::scc_info_PeerAnnounce.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.sim.private_msgs.PeerAnnounce)
}
PeerAnnounce::PeerAnnounce(const PeerAnnounce& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::gz::sim::private_msgs::PeerInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:gz.sim.private_msgs.PeerAnnounce)
}

void PeerAnnounce::SharedCtor() {
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&info_)) + sizeof(state_));
}

PeerAnnounce::~PeerAnnounce() {
  // @@protoc_insertion_point(destructor:gz.sim.private_msgs.PeerAnnounce)
  SharedDtor();
}

void PeerAnnounce::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void PeerAnnounce::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PeerAnnounce::descriptor() {
  ::protobuf_peer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerAnnounce& PeerAnnounce::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_peer_5finfo_2eproto::scc_info_PeerAnnounce.base);
  return *internal_default_instance();
}


void PeerAnnounce::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.sim.private_msgs.PeerAnnounce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  state_ = 0;
  _internal_metadata_.Clear();
}

bool PeerAnnounce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.sim.private_msgs.PeerAnnounce)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.sim.private_msgs.PeerInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.sim.private_msgs.PeerAnnounce.PeerState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::gz::sim::private_msgs::PeerAnnounce_PeerState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.sim.private_msgs.PeerAnnounce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.sim.private_msgs.PeerAnnounce)
  return false;
#undef DO_
}

void PeerAnnounce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.sim.private_msgs.PeerAnnounce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.sim.private_msgs.PeerInfo info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_info(), output);
  }

  // .gz.sim.private_msgs.PeerAnnounce.PeerState state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.sim.private_msgs.PeerAnnounce)
}

::google::protobuf::uint8* PeerAnnounce::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.sim.private_msgs.PeerAnnounce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.sim.private_msgs.PeerInfo info = 1;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_info(), deterministic, target);
  }

  // .gz.sim.private_msgs.PeerAnnounce.PeerState state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.sim.private_msgs.PeerAnnounce)
  return target;
}

size_t PeerAnnounce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.sim.private_msgs.PeerAnnounce)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gz.sim.private_msgs.PeerInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // .gz.sim.private_msgs.PeerAnnounce.PeerState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerAnnounce::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.sim.private_msgs.PeerAnnounce)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerAnnounce* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerAnnounce>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.sim.private_msgs.PeerAnnounce)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.sim.private_msgs.PeerAnnounce)
    MergeFrom(*source);
  }
}

void PeerAnnounce::MergeFrom(const PeerAnnounce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.sim.private_msgs.PeerAnnounce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::gz::sim::private_msgs::PeerInfo::MergeFrom(from.info());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void PeerAnnounce::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.sim.private_msgs.PeerAnnounce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerAnnounce::CopyFrom(const PeerAnnounce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.sim.private_msgs.PeerAnnounce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerAnnounce::IsInitialized() const {
  return true;
}

void PeerAnnounce::Swap(PeerAnnounce* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerAnnounce::InternalSwap(PeerAnnounce* other) {
  using std::swap;
  swap(info_, other->info_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PeerAnnounce::GetMetadata() const {
  protobuf_peer_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace private_msgs
}  // namespace sim
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::sim::private_msgs::PeerInfo* Arena::CreateMaybeMessage< ::gz::sim::private_msgs::PeerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::gz::sim::private_msgs::PeerInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::sim::private_msgs::PeerAnnounce* Arena::CreateMaybeMessage< ::gz::sim::private_msgs::PeerAnnounce >(Arena* arena) {
  return Arena::CreateInternal< ::gz::sim::private_msgs::PeerAnnounce >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
