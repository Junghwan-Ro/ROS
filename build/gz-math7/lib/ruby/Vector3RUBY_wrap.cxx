/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define HAVE_ISFINITE 1



#ifndef SWIGRUBY
#define SWIGRUBY
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif
#ifndef RTYPEDDATA_P
# define RTYPEDDATA_P(x) (TYPE(x) != T_DATA)
#endif



/*
 * The following macros are used for providing the correct type of a
 * function pointer to the Ruby C API.
 * Starting with Ruby 2.7 (corresponding to RB_METHOD_DEFINITION_DECL being
 * defined) these macros act transparently due to Ruby's moving away from
 * ANYARGS and instead employing strict function signatures.
 *
 * Note: In case of C (not C++) the macros are transparent even before
 * Ruby 2.7 due to the fact that the Ruby C API used function declarators
 * with empty parentheses, which allows for an unspecified number of
 * arguments.
 *
 * PROTECTFUNC(f) is used for the function pointer argument of the Ruby
 * C API function rb_protect().
 *
 * VALUEFUNC(f) is used for the function pointer argument(s) of Ruby C API
 * functions like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is used to typecast a C function that implements either
 * the "mark" or "free" stuff for a Ruby Data object, so that it can be
 * passed as an argument to Ruby C API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 *
 * SWIG_RUBY_VOID_ANYARGS_FUNC(f) is used for the function pointer
 * argument(s) of Ruby C API functions like rb_define_virtual_variable().
 *
 * SWIG_RUBY_INT_ANYARGS_FUNC(f) is used for the function pointer
 * argument(s) of Ruby C API functions like st_foreach().
 */
#if defined(__cplusplus) && !defined(RB_METHOD_DEFINITION_DECL)
#  define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#  define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#  define VOIDFUNC(f) ((RUBY_DATA_FUNC) f)
#  define SWIG_RUBY_VOID_ANYARGS_FUNC(f) ((void (*)(ANYARGS))(f))
#  define SWIG_RUBY_INT_ANYARGS_FUNC(f) ((int (*)(ANYARGS))(f))
#else
#  define PROTECTFUNC(f) (f)
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#  define SWIG_RUBY_VOID_ANYARGS_FUNC(f) (f)
#  define SWIG_RUBY_INT_ANYARGS_FUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#if !defined(ST_DATA_T_DEFINED)
/* Needs to be explicitly included for Ruby 1.8 and earlier */
#include <st.h>
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif

/* Global hash table to store Trackings from C/C++
   structs to Ruby Objects.
*/
static st_table* swig_ruby_trackings = NULL;

static VALUE swig_ruby_trackings_count(ID id, VALUE *var) {
  return SWIG2NUM(swig_ruby_trackings->num_entries);
}


/* Setup a hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a hash table to store Trackings from C++
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  VALUE trackings_value = Qnil;
  /* change the variable name so that we can mix modules
     compiled with older SWIG's - this used to be called "@__trackings__" */
  ID trackings_id = rb_intern( "@__safetrackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  trackings_value = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* The trick here is that we have to store the hash table
  pointer in a Ruby variable. We do not want Ruby's GC to
  treat this pointer as a Ruby object, so we convert it to
  a Ruby numeric value. */
  if (trackings_value == Qnil) {
    /* No, it hasn't.  Create one ourselves */
    swig_ruby_trackings = st_init_numtable();
    rb_ivar_set( _mSWIG, trackings_id, SWIG2NUM(swig_ruby_trackings) );
  } else {
    swig_ruby_trackings = (st_table*)NUM2SWIG(trackings_value);
  }

  rb_define_virtual_variable("SWIG_TRACKINGS_COUNT",
                             VALUEFUNC(swig_ruby_trackings_count),
                             SWIG_RUBY_VOID_ANYARGS_FUNC((rb_gvar_setter_t*)NULL));
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* Store the mapping to the global hash table. */
  st_insert(swig_ruby_trackings, (st_data_t)ptr, object);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Now lookup the value stored in the global hash table */
  VALUE value;

  if (st_lookup(swig_ruby_trackings, (st_data_t)ptr, &value)) {
    return value;
  } else {
    return Qnil;
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Delete the object from the hash table */
  st_delete(swig_ruby_trackings, (st_data_t *)&ptr, NULL);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object. */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    // object might have the T_ZOMBIE type, but that's just
    // because the GC has flagged it as such for a deferred
    // destruction. Until then, it's still a T_DATA object.
    DATA_PTR(object) = 0;
  }
}

/* This is a helper method that iterates over all the trackings
   passing the C++ object pointer and its related Ruby object
   to the passed callback function. */

/* Proxy method to abstract the internal trackings datatype */
static int swig_ruby_internal_iterate_callback(st_data_t ptr, st_data_t obj, st_data_t meth) {
  ((void (*) (void *, VALUE))meth)((void *)ptr, (VALUE)obj);
  return ST_CONTINUE;
}

SWIGRUNTIME void SWIG_RubyIterateTrackings( void(*meth)(void* ptr, VALUE obj) ) {
  st_foreach(swig_ruby_trackings,
             SWIG_RUBY_INT_ANYARGS_FUNC(swig_ruby_internal_iterate_callback),
             (st_data_t)meth);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    swig_ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;

  if (!ptr)
    return Qnil;

  assert(type);
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);

      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        const char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));

  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef struct {
  void (*datafree)(void *);
  int own;
} swig_ruby_owntype;

SWIGRUNTIME swig_ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, swig_ruby_owntype own) {
  swig_ruby_owntype oldown = {0, 0};
  if (TYPE(obj) == T_DATA && !RTYPEDDATA_P(obj)) {
    oldown.datafree = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own.datafree;
  }
  return oldown;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, swig_ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA || (TYPE(obj) == T_DATA && RTYPEDDATA_P(obj))) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) {
    own->datafree = RDATA(obj)->dfree;
    own->own = 0;
  }
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      if (ptr) {
        if (tc->type == ty) {
          *ptr = vptr;
        } else {
          int newmemory = 0;
          *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
          if (newmemory == SWIG_CAST_NEW_MEMORY) {
            assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
            if (own)
              own->own = own->own | SWIG_CAST_NEW_MEMORY;
          }
        }
      }
    }
  } else {
    if (ptr)
      *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void *SWIGUNUSEDPARM(clientdata))
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_char swig_types[0]
#define SWIGTYPE_p_gz__math__Vector3T_double_t swig_types[1]
#define SWIGTYPE_p_gz__math__Vector3T_float_t swig_types[2]
#define SWIGTYPE_p_gz__math__Vector3T_int_t swig_types[3]
static swig_type_info *swig_types[5];
static swig_module_info swig_module = {swig_types, 4, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_vector3
#define SWIG_name    "Vector3"

static VALUE mVector3;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x040001 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <gz/math/Vector3.hh>

SWIGINTERN gz::math::Vector3< int > gz_math_Vector3_Sl_int_Sg__Zero(){
          return gz::math::Vector3<int>::Zero;
        }
SWIGINTERN gz::math::Vector3< int > gz_math_Vector3_Sl_int_Sg__One(){
          return gz::math::Vector3<int>::One;
        }
SWIGINTERN gz::math::Vector3< int > gz_math_Vector3_Sl_int_Sg__UnitX(){
          return gz::math::Vector3<int>::UnitX;
        }
SWIGINTERN gz::math::Vector3< int > gz_math_Vector3_Sl_int_Sg__UnitY(){
          return gz::math::Vector3<int>::UnitY;
        }
SWIGINTERN gz::math::Vector3< int > gz_math_Vector3_Sl_int_Sg__UnitZ(){
          return gz::math::Vector3<int>::UnitZ;
        }
SWIGINTERN gz::math::Vector3< int > gz_math_Vector3_Sl_int_Sg__NaN(){
          return gz::math::Vector3<int>::NaN;
        }

#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN VALUE
SWIG_ruby_failed(VALUE SWIGUNUSEDPARM(arg1), VALUE SWIGUNUSEDPARM(arg2))
{
  return Qnil;
} 


/*@SWIG:/usr/share/swig4.0/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE arg)
{
  VALUE *args = (VALUE *)arg;
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(VALUEFUNC(SWIG_AUX_NUM2LONG), (VALUE)a, VALUEFUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}

SWIGINTERN gz::math::Vector3< double > gz_math_Vector3_Sl_double_Sg__Zero(){
          return gz::math::Vector3<double>::Zero;
        }
SWIGINTERN gz::math::Vector3< double > gz_math_Vector3_Sl_double_Sg__One(){
          return gz::math::Vector3<double>::One;
        }
SWIGINTERN gz::math::Vector3< double > gz_math_Vector3_Sl_double_Sg__UnitX(){
          return gz::math::Vector3<double>::UnitX;
        }
SWIGINTERN gz::math::Vector3< double > gz_math_Vector3_Sl_double_Sg__UnitY(){
          return gz::math::Vector3<double>::UnitY;
        }
SWIGINTERN gz::math::Vector3< double > gz_math_Vector3_Sl_double_Sg__UnitZ(){
          return gz::math::Vector3<double>::UnitZ;
        }
SWIGINTERN gz::math::Vector3< double > gz_math_Vector3_Sl_double_Sg__NaN(){
          return gz::math::Vector3<double>::NaN;
        }

/*@SWIG:/usr/share/swig4.0/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE arg)
{
  VALUE *args = (VALUE *)arg;
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = NUM2DBL(obj); (void)type;
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(VALUEFUNC(SWIG_AUX_NUM2DBL), (VALUE)a, VALUEFUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


  #define SWIG_From_double   rb_float_new 

SWIGINTERN gz::math::Vector3< float > gz_math_Vector3_Sl_float_Sg__Zero(){
          return gz::math::Vector3<float>::Zero;
        }
SWIGINTERN gz::math::Vector3< float > gz_math_Vector3_Sl_float_Sg__One(){
          return gz::math::Vector3<float>::One;
        }
SWIGINTERN gz::math::Vector3< float > gz_math_Vector3_Sl_float_Sg__UnitX(){
          return gz::math::Vector3<float>::UnitX;
        }
SWIGINTERN gz::math::Vector3< float > gz_math_Vector3_Sl_float_Sg__UnitY(){
          return gz::math::Vector3<float>::UnitY;
        }
SWIGINTERN gz::math::Vector3< float > gz_math_Vector3_Sl_float_Sg__UnitZ(){
          return gz::math::Vector3<float>::UnitZ;
        }
SWIGINTERN gz::math::Vector3< float > gz_math_Vector3_Sl_float_Sg__NaN(){
          return gz::math::Vector3<float>::NaN;
        }

#include <float.h>


#include <math.h>


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#  define SWIG_isfinite(X) (__builtin_isfinite(X))
# elif defined(__clang__) && defined(__has_builtin)
#  if __has_builtin(__builtin_isfinite)
#   define SWIG_isfinite(X) (__builtin_isfinite(X))
#  endif
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (VALUE obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}

static swig_class SwigClassVector3i;

SWIGINTERN VALUE
_wrap_Vector3i_Zero(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = gz_math_Vector3_Sl_int_Sg__Zero();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_One(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = gz_math_Vector3_Sl_int_Sg__One();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_UnitX(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = gz_math_Vector3_Sl_int_Sg__UnitX();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_UnitY(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = gz_math_Vector3_Sl_int_Sg__UnitY();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_UnitZ(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = gz_math_Vector3_Sl_int_Sg__UnitZ();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_NaN(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = gz_math_Vector3_Sl_int_Sg__NaN();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vector3i__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (gz::math::Vector3< int > *)new gz::math::Vector3< int >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vector3i__SWIG_1(int argc, VALUE *argv, VALUE self) {
  int *arg1 = 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp1 ;
  int val1 ;
  int ecode1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  gz::math::Vector3< int > *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","Vector3<(int)>", 1, argv[0] ));
  } 
  temp1 = static_cast< int >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Vector3<(int)>", 2, argv[1] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","Vector3<(int)>", 3, argv[2] ));
  } 
  temp3 = static_cast< int >(val3);
  arg3 = &temp3;
  result = (gz::math::Vector3< int > *)new gz::math::Vector3< int >((int const &)*arg1,(int const &)*arg2,(int const &)*arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Vector3i_allocate(VALUE self)
#else
_wrap_Vector3i_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_gz__math__Vector3T_int_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Vector3i__SWIG_2(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  gz::math::Vector3< int > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_gz__math__Vector3T_int_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const &","Vector3<(int)>", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< int > const &","Vector3<(int)>", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  result = (gz::math::Vector3< int > *)new gz::math::Vector3< int >((gz::math::Vector3< int > const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Vector3i(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Vector3i__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vector3i__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Vector3i__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3i.new", 
    "    Vector3i.new()\n"
    "    Vector3i.new(int const &_x, int const &_y, int const &_z)\n"
    "    Vector3i.new(gz::math::Vector3< int > const &_v)\n");
  
  return Qnil;
}


SWIGINTERN void
free_gz_math_Vector3_Sl_int_Sg_(void *self) {
    gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Vector3i_Sum(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","Sum", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  result = (int)((gz::math::Vector3< int > const *)arg1)->Sum();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Distance__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  gz::math::Vector3< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","Distance", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const &","Distance", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< int > const &","Distance", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< int > * >(argp2);
  result = (int)((gz::math::Vector3< int > const *)arg1)->Distance((gz::math::Vector3< int > const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Distance__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","Distance", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Distance", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","Distance", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","Distance", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  result = (int)((gz::math::Vector3< int > const *)arg1)->Distance(arg2,arg3,arg4);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3i_Distance(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3i_Distance__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Vector3i_Distance__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "Vector3i.Distance", 
    "    int Vector3i.Distance(gz::math::Vector3< int > const &_pt)\n"
    "    int Vector3i.Distance(int _x, int _y, int _z)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Length(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","Length", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  result = (int)((gz::math::Vector3< int > const *)arg1)->Length();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_SquaredLength(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","SquaredLength", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  result = (int)((gz::math::Vector3< int > const *)arg1)->SquaredLength();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Normalize(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > *","Normalize", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  result = (arg1)->Normalize();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Normalized(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","Normalized", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  result = ((gz::math::Vector3< int > const *)arg1)->Normalized();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Round__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > *","Round", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  result = (arg1)->Round();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Rounded(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","Rounded", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  result = ((gz::math::Vector3< int > const *)arg1)->Rounded();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Set__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "int","Set", 4, argv[2] ));
  } 
  arg4 = static_cast< int >(val4);
  (arg1)->Set(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Set__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->Set(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Set__SWIG_2(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->Set(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Set__SWIG_3(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  (arg1)->Set();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3i_Set(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3i_Set__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3i_Set__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vector3i_Set__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Vector3i_Set__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "Vector3i.Set", 
    "    void Vector3i.Set(int _x, int _y, int _z)\n"
    "    void Vector3i.Set(int _x, int _y)\n"
    "    void Vector3i.Set(int _x)\n"
    "    void Vector3i.Set()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Cross(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  gz::math::Vector3< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","Cross", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const &","Cross", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< int > const &","Cross", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< int > * >(argp2);
  result = ((gz::math::Vector3< int > const *)arg1)->Cross((gz::math::Vector3< int > const &)*arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Dot(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  gz::math::Vector3< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","Dot", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const &","Dot", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< int > const &","Dot", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< int > * >(argp2);
  result = (int)((gz::math::Vector3< int > const *)arg1)->Dot((gz::math::Vector3< int > const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_AbsDot(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  gz::math::Vector3< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","AbsDot", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const &","AbsDot", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< int > const &","AbsDot", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< int > * >(argp2);
  result = (int)((gz::math::Vector3< int > const *)arg1)->AbsDot((gz::math::Vector3< int > const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Abs(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","Abs", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  result = ((gz::math::Vector3< int > const *)arg1)->Abs();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Perpendicular(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","Perpendicular", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  result = ((gz::math::Vector3< int > const *)arg1)->Perpendicular();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Normal(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = 0 ;
  gz::math::Vector3< int > *arg2 = 0 ;
  gz::math::Vector3< int > *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_gz__math__Vector3T_int_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const &","gz::math::Vector3<(int)>::Normal", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< int > const &","gz::math::Vector3<(int)>::Normal", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_gz__math__Vector3T_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const &","gz::math::Vector3<(int)>::Normal", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< int > const &","gz::math::Vector3<(int)>::Normal", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< int > * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_gz__math__Vector3T_int_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const &","gz::math::Vector3<(int)>::Normal", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< int > const &","gz::math::Vector3<(int)>::Normal", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< gz::math::Vector3< int > * >(argp3);
  result = gz::math::Vector3< int >::SWIGTEMPLATEDISAMBIGUATOR Normal((gz::math::Vector3< int > const &)*arg1,(gz::math::Vector3< int > const &)*arg2,(gz::math::Vector3< int > const &)*arg3);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_DistToLine(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  gz::math::Vector3< int > *arg2 = 0 ;
  gz::math::Vector3< int > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > *","DistToLine", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const &","DistToLine", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< int > const &","DistToLine", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< int > * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_gz__math__Vector3T_int_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const &","DistToLine", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< int > const &","DistToLine", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< gz::math::Vector3< int > * >(argp3);
  result = (int)(arg1)->DistToLine((gz::math::Vector3< int > const &)*arg2,(gz::math::Vector3< int > const &)*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Max__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  gz::math::Vector3< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > *","Max", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const &","Max", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< int > const &","Max", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< int > * >(argp2);
  (arg1)->Max((gz::math::Vector3< int > const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Min__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  gz::math::Vector3< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > *","Min", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const &","Min", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< int > const &","Min", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< int > * >(argp2);
  (arg1)->Min((gz::math::Vector3< int > const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Max__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","Max", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  result = (int)((gz::math::Vector3< int > const *)arg1)->Max();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3i_Max(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3i_Max__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3i_Max__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3i.Max", 
    "    void Vector3i.Max(gz::math::Vector3< int > const &_v)\n"
    "    int Vector3i.Max()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Min__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","Min", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  result = (int)((gz::math::Vector3< int > const *)arg1)->Min();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3i_Min(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3i_Min__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3i_Min__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3i.Min", 
    "    void Vector3i.Min(gz::math::Vector3< int > const &_v)\n"
    "    int Vector3i.Min()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_MinAbs(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","MinAbs", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  result = (int)((gz::math::Vector3< int > const *)arg1)->MinAbs();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_MaxAbs(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","MaxAbs", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  result = (int)((gz::math::Vector3< int > const *)arg1)->MaxAbs();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Vector3::Vector3i.+

  call-seq:
    +(_v) -> Vector3i
    +(_s) -> Vector3i

Add operator.
*/
SWIGINTERN VALUE
_wrap_Vector3i___add____SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  gz::math::Vector3< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< int > const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< int > * >(argp2);
  result = ((gz::math::Vector3< int > const *)arg1)->operator +((gz::math::Vector3< int > const &)*arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i___add____SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = ((gz::math::Vector3< int > const *)arg1)->operator +(arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3i___add__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3i___add____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3i___add____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3i.__add__", 
    "    gz::math::Vector3< int > Vector3i.__add__(gz::math::Vector3< int > const &_v)\n"
    "    gz::math::Vector3< int > Vector3i.__add__(int const _s)\n");
  
  return Qnil;
}


/*
  Document-method: Vector3::Vector3i.-@

  call-seq:
    -@ -> Vector3i

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Vector3i___neg__(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  result = ((gz::math::Vector3< int > const *)arg1)->operator -();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Vector3::Vector3i.-

  call-seq:
    -(_pt) -> Vector3i
    -(_s) -> Vector3i

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Vector3i___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  gz::math::Vector3< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< int > const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< int > * >(argp2);
  result = ((gz::math::Vector3< int > const *)arg1)->operator -((gz::math::Vector3< int > const &)*arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = ((gz::math::Vector3< int > const *)arg1)->operator -(arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3i___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3i___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3i___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3i.__sub__", 
    "    gz::math::Vector3< int > Vector3i.__sub__(gz::math::Vector3< int > const &_pt)\n"
    "    gz::math::Vector3< int > Vector3i.__sub__(int const _s)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i___div____SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  gz::math::Vector3< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const &","operator /", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< int > const &","operator /", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< int > * >(argp2);
  result = ((gz::math::Vector3< int > const *)arg1)->operator /((gz::math::Vector3< int > const &)*arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i___div____SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator /", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = ((gz::math::Vector3< int > const *)arg1)->operator /(arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3i___div__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3i___div____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3i___div____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3i.__div__", 
    "    gz::math::Vector3< int > const Vector3i.__div__(gz::math::Vector3< int > const &_pt)\n"
    "    gz::math::Vector3< int > const Vector3i.__div__(int _v)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  gz::math::Vector3< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< int > const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< int > * >(argp2);
  result = ((gz::math::Vector3< int > const *)arg1)->operator *((gz::math::Vector3< int > const &)*arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  gz::math::Vector3< int > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator *", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = ((gz::math::Vector3< int > const *)arg1)->operator *(arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< int >(static_cast< const gz::math::Vector3< int >& >(result))), SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3i___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3i___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3i___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3i.__mul__", 
    "    gz::math::Vector3< int > Vector3i.__mul__(gz::math::Vector3< int > const &_p)\n"
    "    gz::math::Vector3< int > Vector3i.__mul__(int _s)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Equal__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  gz::math::Vector3< int > *arg2 = 0 ;
  int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","Equal", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const &","Equal", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< int > const &","Equal", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< int > * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","Equal", 3, argv[1] ));
  } 
  temp3 = static_cast< int >(val3);
  arg3 = &temp3;
  result = (bool)((gz::math::Vector3< int > const *)arg1)->Equal((gz::math::Vector3< int > const &)*arg2,(int const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Vector3::Vector3i.==

  call-seq:
    ==(_v) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Vector3i___eq__(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  gz::math::Vector3< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< int > const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< int > * >(argp2);
  result = (bool)((gz::math::Vector3< int > const *)arg1)->operator ==((gz::math::Vector3< int > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_IsFinite(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","IsFinite", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  result = (bool)((gz::math::Vector3< int > const *)arg1)->IsFinite();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Correct(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > *","Correct", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  (arg1)->Correct();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Round__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > *","Round", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Round", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->Round(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3i_Round(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3i_Round__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3i_Round__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3i.Round", 
    "    gz::math::Vector3< int > Vector3i.Round()\n"
    "    void Vector3i.Round(int _precision)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Equal__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  gz::math::Vector3< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","Equal", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const &","Equal", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< int > const &","Equal", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< int > * >(argp2);
  result = (bool)((gz::math::Vector3< int > const *)arg1)->Equal((gz::math::Vector3< int > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3i_Equal(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3i_Equal__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vector3i_Equal__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Vector3i.Equal", 
    "    bool Vector3i.Equal(gz::math::Vector3< int > const &_v, int const &_tol)\n"
    "    bool Vector3i.Equal(gz::math::Vector3< int > const &_v)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_X__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","X", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  result = (int)((gz::math::Vector3< int > const *)arg1)->X();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Y__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","Y", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  result = (int)((gz::math::Vector3< int > const *)arg1)->Y();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Z__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","Z", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  result = (int)((gz::math::Vector3< int > const *)arg1)->Z();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_X__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > *","X", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","X", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  (arg1)->X((int const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3i_X(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3i_X__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3i_X__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3i.X", 
    "    int Vector3i.X()\n"
    "    void Vector3i.X(int const &_v)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Y__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > *","Y", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Y", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  (arg1)->Y((int const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3i_Y(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3i_Y__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3i_Y__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3i.Y", 
    "    int Vector3i.Y()\n"
    "    void Vector3i.Y(int const &_v)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3i_Z__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > *","Z", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Z", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  (arg1)->Z((int const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3i_Z(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3i_Z__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3i_Z__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3i.Z", 
    "    int Vector3i.Z()\n"
    "    void Vector3i.Z(int const &_v)\n");
  
  return Qnil;
}


/*
  Document-method: Vector3::Vector3i.<

  call-seq:
    <(_pt) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_Vector3i___lt__(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< int > *arg1 = (gz::math::Vector3< int > *) 0 ;
  gz::math::Vector3< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< int > const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< int > const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< int > * >(argp2);
  result = (bool)((gz::math::Vector3< int > const *)arg1)->operator <((gz::math::Vector3< int > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassVector3d;

SWIGINTERN VALUE
_wrap_Vector3d_Zero(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = gz_math_Vector3_Sl_double_Sg__Zero();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_One(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = gz_math_Vector3_Sl_double_Sg__One();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_UnitX(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = gz_math_Vector3_Sl_double_Sg__UnitX();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_UnitY(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = gz_math_Vector3_Sl_double_Sg__UnitY();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_UnitZ(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = gz_math_Vector3_Sl_double_Sg__UnitZ();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_NaN(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = gz_math_Vector3_Sl_double_Sg__NaN();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vector3d__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (gz::math::Vector3< double > *)new gz::math::Vector3< double >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vector3d__SWIG_1(int argc, VALUE *argv, VALUE self) {
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  gz::math::Vector3< double > *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","Vector3<(double)>", 1, argv[0] ));
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Vector3<(double)>", 2, argv[1] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Vector3<(double)>", 3, argv[2] ));
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  result = (gz::math::Vector3< double > *)new gz::math::Vector3< double >((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Vector3d_allocate(VALUE self)
#else
_wrap_Vector3d_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_gz__math__Vector3T_double_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Vector3d__SWIG_2(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  gz::math::Vector3< double > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_gz__math__Vector3T_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const &","Vector3<(double)>", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< double > const &","Vector3<(double)>", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  result = (gz::math::Vector3< double > *)new gz::math::Vector3< double >((gz::math::Vector3< double > const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Vector3d(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Vector3d__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vector3d__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Vector3d__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3d.new", 
    "    Vector3d.new()\n"
    "    Vector3d.new(double const &_x, double const &_y, double const &_z)\n"
    "    Vector3d.new(gz::math::Vector3< double > const &_v)\n");
  
  return Qnil;
}


SWIGINTERN void
free_gz_math_Vector3_Sl_double_Sg_(void *self) {
    gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Vector3d_Sum(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","Sum", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  result = (double)((gz::math::Vector3< double > const *)arg1)->Sum();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Distance__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  gz::math::Vector3< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","Distance", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const &","Distance", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< double > const &","Distance", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< double > * >(argp2);
  result = (double)((gz::math::Vector3< double > const *)arg1)->Distance((gz::math::Vector3< double > const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Distance__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","Distance", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Distance", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Distance", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Distance", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  result = (double)((gz::math::Vector3< double > const *)arg1)->Distance(arg2,arg3,arg4);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3d_Distance(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3d_Distance__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Vector3d_Distance__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "Vector3d.Distance", 
    "    double Vector3d.Distance(gz::math::Vector3< double > const &_pt)\n"
    "    double Vector3d.Distance(double _x, double _y, double _z)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Length(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","Length", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  result = (double)((gz::math::Vector3< double > const *)arg1)->Length();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_SquaredLength(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","SquaredLength", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  result = (double)((gz::math::Vector3< double > const *)arg1)->SquaredLength();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Normalize(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > *","Normalize", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  result = (arg1)->Normalize();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Normalized(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","Normalized", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  result = ((gz::math::Vector3< double > const *)arg1)->Normalized();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Round__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > *","Round", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  result = (arg1)->Round();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Rounded(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","Rounded", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  result = ((gz::math::Vector3< double > const *)arg1)->Rounded();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Set__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "double","Set", 4, argv[2] ));
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->Set(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Set__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->Set(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Set__SWIG_2(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->Set(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Set__SWIG_3(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  (arg1)->Set();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3d_Set(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3d_Set__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3d_Set__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vector3d_Set__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Vector3d_Set__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "Vector3d.Set", 
    "    void Vector3d.Set(double _x, double _y, double _z)\n"
    "    void Vector3d.Set(double _x, double _y)\n"
    "    void Vector3d.Set(double _x)\n"
    "    void Vector3d.Set()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Cross(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  gz::math::Vector3< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","Cross", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const &","Cross", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< double > const &","Cross", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< double > * >(argp2);
  result = ((gz::math::Vector3< double > const *)arg1)->Cross((gz::math::Vector3< double > const &)*arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Dot(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  gz::math::Vector3< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","Dot", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const &","Dot", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< double > const &","Dot", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< double > * >(argp2);
  result = (double)((gz::math::Vector3< double > const *)arg1)->Dot((gz::math::Vector3< double > const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_AbsDot(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  gz::math::Vector3< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","AbsDot", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const &","AbsDot", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< double > const &","AbsDot", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< double > * >(argp2);
  result = (double)((gz::math::Vector3< double > const *)arg1)->AbsDot((gz::math::Vector3< double > const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Abs(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","Abs", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  result = ((gz::math::Vector3< double > const *)arg1)->Abs();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Perpendicular(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","Perpendicular", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  result = ((gz::math::Vector3< double > const *)arg1)->Perpendicular();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Normal(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = 0 ;
  gz::math::Vector3< double > *arg2 = 0 ;
  gz::math::Vector3< double > *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_gz__math__Vector3T_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const &","gz::math::Vector3<(double)>::Normal", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< double > const &","gz::math::Vector3<(double)>::Normal", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_gz__math__Vector3T_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const &","gz::math::Vector3<(double)>::Normal", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< double > const &","gz::math::Vector3<(double)>::Normal", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< double > * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_gz__math__Vector3T_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const &","gz::math::Vector3<(double)>::Normal", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< double > const &","gz::math::Vector3<(double)>::Normal", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< gz::math::Vector3< double > * >(argp3);
  result = gz::math::Vector3< double >::SWIGTEMPLATEDISAMBIGUATOR Normal((gz::math::Vector3< double > const &)*arg1,(gz::math::Vector3< double > const &)*arg2,(gz::math::Vector3< double > const &)*arg3);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_DistToLine(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  gz::math::Vector3< double > *arg2 = 0 ;
  gz::math::Vector3< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > *","DistToLine", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const &","DistToLine", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< double > const &","DistToLine", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< double > * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_gz__math__Vector3T_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const &","DistToLine", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< double > const &","DistToLine", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< gz::math::Vector3< double > * >(argp3);
  result = (double)(arg1)->DistToLine((gz::math::Vector3< double > const &)*arg2,(gz::math::Vector3< double > const &)*arg3);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Max__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  gz::math::Vector3< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > *","Max", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const &","Max", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< double > const &","Max", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< double > * >(argp2);
  (arg1)->Max((gz::math::Vector3< double > const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Min__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  gz::math::Vector3< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > *","Min", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const &","Min", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< double > const &","Min", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< double > * >(argp2);
  (arg1)->Min((gz::math::Vector3< double > const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Max__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","Max", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  result = (double)((gz::math::Vector3< double > const *)arg1)->Max();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3d_Max(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3d_Max__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3d_Max__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3d.Max", 
    "    void Vector3d.Max(gz::math::Vector3< double > const &_v)\n"
    "    double Vector3d.Max()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Min__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","Min", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  result = (double)((gz::math::Vector3< double > const *)arg1)->Min();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3d_Min(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3d_Min__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3d_Min__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3d.Min", 
    "    void Vector3d.Min(gz::math::Vector3< double > const &_v)\n"
    "    double Vector3d.Min()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_MinAbs(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","MinAbs", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  result = (double)((gz::math::Vector3< double > const *)arg1)->MinAbs();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_MaxAbs(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","MaxAbs", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  result = (double)((gz::math::Vector3< double > const *)arg1)->MaxAbs();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Vector3::Vector3d.+

  call-seq:
    +(_v) -> Vector3d
    +(_s) -> Vector3d

Add operator.
*/
SWIGINTERN VALUE
_wrap_Vector3d___add____SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  gz::math::Vector3< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< double > const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< double > * >(argp2);
  result = ((gz::math::Vector3< double > const *)arg1)->operator +((gz::math::Vector3< double > const &)*arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d___add____SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = ((gz::math::Vector3< double > const *)arg1)->operator +(arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3d___add__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3d___add____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3d___add____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3d.__add__", 
    "    gz::math::Vector3< double > Vector3d.__add__(gz::math::Vector3< double > const &_v)\n"
    "    gz::math::Vector3< double > Vector3d.__add__(double const _s)\n");
  
  return Qnil;
}


/*
  Document-method: Vector3::Vector3d.-@

  call-seq:
    -@ -> Vector3d

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Vector3d___neg__(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  result = ((gz::math::Vector3< double > const *)arg1)->operator -();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Vector3::Vector3d.-

  call-seq:
    -(_pt) -> Vector3d
    -(_s) -> Vector3d

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Vector3d___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  gz::math::Vector3< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< double > const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< double > * >(argp2);
  result = ((gz::math::Vector3< double > const *)arg1)->operator -((gz::math::Vector3< double > const &)*arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = ((gz::math::Vector3< double > const *)arg1)->operator -(arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3d___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3d___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3d___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3d.__sub__", 
    "    gz::math::Vector3< double > Vector3d.__sub__(gz::math::Vector3< double > const &_pt)\n"
    "    gz::math::Vector3< double > Vector3d.__sub__(double const _s)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d___div____SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  gz::math::Vector3< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const &","operator /", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< double > const &","operator /", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< double > * >(argp2);
  result = ((gz::math::Vector3< double > const *)arg1)->operator /((gz::math::Vector3< double > const &)*arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d___div____SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator /", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = ((gz::math::Vector3< double > const *)arg1)->operator /(arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3d___div__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3d___div____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3d___div____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3d.__div__", 
    "    gz::math::Vector3< double > const Vector3d.__div__(gz::math::Vector3< double > const &_pt)\n"
    "    gz::math::Vector3< double > const Vector3d.__div__(double _v)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  gz::math::Vector3< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< double > const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< double > * >(argp2);
  result = ((gz::math::Vector3< double > const *)arg1)->operator *((gz::math::Vector3< double > const &)*arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  gz::math::Vector3< double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator *", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = ((gz::math::Vector3< double > const *)arg1)->operator *(arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< double >(static_cast< const gz::math::Vector3< double >& >(result))), SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3d___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3d___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3d___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3d.__mul__", 
    "    gz::math::Vector3< double > Vector3d.__mul__(gz::math::Vector3< double > const &_p)\n"
    "    gz::math::Vector3< double > Vector3d.__mul__(double _s)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Equal__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  gz::math::Vector3< double > *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","Equal", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const &","Equal", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< double > const &","Equal", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< double > * >(argp2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Equal", 3, argv[1] ));
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  result = (bool)((gz::math::Vector3< double > const *)arg1)->Equal((gz::math::Vector3< double > const &)*arg2,(double const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Vector3::Vector3d.==

  call-seq:
    ==(_v) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Vector3d___eq__(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  gz::math::Vector3< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< double > const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< double > * >(argp2);
  result = (bool)((gz::math::Vector3< double > const *)arg1)->operator ==((gz::math::Vector3< double > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_IsFinite(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","IsFinite", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  result = (bool)((gz::math::Vector3< double > const *)arg1)->IsFinite();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Correct(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > *","Correct", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  (arg1)->Correct();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Round__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > *","Round", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Round", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->Round(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3d_Round(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3d_Round__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3d_Round__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3d.Round", 
    "    gz::math::Vector3< double > Vector3d.Round()\n"
    "    void Vector3d.Round(int _precision)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Equal__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  gz::math::Vector3< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","Equal", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const &","Equal", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< double > const &","Equal", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< double > * >(argp2);
  result = (bool)((gz::math::Vector3< double > const *)arg1)->Equal((gz::math::Vector3< double > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3d_Equal(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3d_Equal__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vector3d_Equal__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Vector3d.Equal", 
    "    bool Vector3d.Equal(gz::math::Vector3< double > const &_v, double const &_tol)\n"
    "    bool Vector3d.Equal(gz::math::Vector3< double > const &_v)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_X__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","X", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  result = (double)((gz::math::Vector3< double > const *)arg1)->X();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Y__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","Y", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  result = (double)((gz::math::Vector3< double > const *)arg1)->Y();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Z__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","Z", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  result = (double)((gz::math::Vector3< double > const *)arg1)->Z();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_X__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > *","X", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","X", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  (arg1)->X((double const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3d_X(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3d_X__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3d_X__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3d.X", 
    "    double Vector3d.X()\n"
    "    void Vector3d.X(double const &_v)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Y__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > *","Y", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Y", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  (arg1)->Y((double const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3d_Y(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3d_Y__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3d_Y__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3d.Y", 
    "    double Vector3d.Y()\n"
    "    void Vector3d.Y(double const &_v)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3d_Z__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > *","Z", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Z", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  (arg1)->Z((double const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3d_Z(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3d_Z__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3d_Z__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3d.Z", 
    "    double Vector3d.Z()\n"
    "    void Vector3d.Z(double const &_v)\n");
  
  return Qnil;
}


/*
  Document-method: Vector3::Vector3d.<

  call-seq:
    <(_pt) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_Vector3d___lt__(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< double > *arg1 = (gz::math::Vector3< double > *) 0 ;
  gz::math::Vector3< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< double > const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< double > const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< double > * >(argp2);
  result = (bool)((gz::math::Vector3< double > const *)arg1)->operator <((gz::math::Vector3< double > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassVector3f;

SWIGINTERN VALUE
_wrap_Vector3f_Zero(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = gz_math_Vector3_Sl_float_Sg__Zero();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_One(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = gz_math_Vector3_Sl_float_Sg__One();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_UnitX(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = gz_math_Vector3_Sl_float_Sg__UnitX();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_UnitY(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = gz_math_Vector3_Sl_float_Sg__UnitY();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_UnitZ(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = gz_math_Vector3_Sl_float_Sg__UnitZ();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_NaN(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = gz_math_Vector3_Sl_float_Sg__NaN();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vector3f__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (gz::math::Vector3< float > *)new gz::math::Vector3< float >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vector3f__SWIG_1(int argc, VALUE *argv, VALUE self) {
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp1 ;
  float val1 ;
  int ecode1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  gz::math::Vector3< float > *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "float","Vector3<(float)>", 1, argv[0] ));
  } 
  temp1 = static_cast< float >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","Vector3<(float)>", 2, argv[1] ));
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","Vector3<(float)>", 3, argv[2] ));
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  result = (gz::math::Vector3< float > *)new gz::math::Vector3< float >((float const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
_wrap_Vector3f_allocate(VALUE self)
#else
_wrap_Vector3f_allocate(int argc, VALUE *argv, VALUE self)
#endif
{
  VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_gz__math__Vector3T_float_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
  rb_obj_call_init(vresult, argc, argv);
#endif
  return vresult;
}


SWIGINTERN VALUE
_wrap_new_Vector3f__SWIG_2(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  gz::math::Vector3< float > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_gz__math__Vector3T_float_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const &","Vector3<(float)>", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< float > const &","Vector3<(float)>", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  result = (gz::math::Vector3< float > *)new gz::math::Vector3< float >((gz::math::Vector3< float > const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Vector3f(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Vector3f__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vector3f__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Vector3f__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3f.new", 
    "    Vector3f.new()\n"
    "    Vector3f.new(float const &_x, float const &_y, float const &_z)\n"
    "    Vector3f.new(gz::math::Vector3< float > const &_v)\n");
  
  return Qnil;
}


SWIGINTERN void
free_gz_math_Vector3_Sl_float_Sg_(void *self) {
    gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *)self;
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Vector3f_Sum(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","Sum", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  result = (float)((gz::math::Vector3< float > const *)arg1)->Sum();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Distance__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  gz::math::Vector3< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","Distance", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const &","Distance", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< float > const &","Distance", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< float > * >(argp2);
  result = (float)((gz::math::Vector3< float > const *)arg1)->Distance((gz::math::Vector3< float > const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Distance__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","Distance", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","Distance", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","Distance", 3, argv[1] ));
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "float","Distance", 4, argv[2] ));
  } 
  arg4 = static_cast< float >(val4);
  result = (float)((gz::math::Vector3< float > const *)arg1)->Distance(arg2,arg3,arg4);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3f_Distance(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3f_Distance__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Vector3f_Distance__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "Vector3f.Distance", 
    "    float Vector3f.Distance(gz::math::Vector3< float > const &_pt)\n"
    "    float Vector3f.Distance(float _x, float _y, float _z)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Length(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","Length", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  result = (float)((gz::math::Vector3< float > const *)arg1)->Length();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_SquaredLength(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","SquaredLength", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  result = (float)((gz::math::Vector3< float > const *)arg1)->SquaredLength();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Normalize(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > *","Normalize", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  result = (arg1)->Normalize();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Normalized(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","Normalized", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  result = ((gz::math::Vector3< float > const *)arg1)->Normalized();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Round__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > *","Round", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  result = (arg1)->Round();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Rounded(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","Rounded", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  result = ((gz::math::Vector3< float > const *)arg1)->Rounded();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Set__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "float","Set", 4, argv[2] ));
  } 
  arg4 = static_cast< float >(val4);
  (arg1)->Set(arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Set__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< float >(val3);
  (arg1)->Set(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Set__SWIG_2(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  (arg1)->Set(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Set__SWIG_3(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  (arg1)->Set();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3f_Set(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3f_Set__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3f_Set__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vector3f_Set__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Vector3f_Set__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "Vector3f.Set", 
    "    void Vector3f.Set(float _x, float _y, float _z)\n"
    "    void Vector3f.Set(float _x, float _y)\n"
    "    void Vector3f.Set(float _x)\n"
    "    void Vector3f.Set()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Cross(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  gz::math::Vector3< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","Cross", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const &","Cross", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< float > const &","Cross", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< float > * >(argp2);
  result = ((gz::math::Vector3< float > const *)arg1)->Cross((gz::math::Vector3< float > const &)*arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Dot(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  gz::math::Vector3< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","Dot", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const &","Dot", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< float > const &","Dot", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< float > * >(argp2);
  result = (float)((gz::math::Vector3< float > const *)arg1)->Dot((gz::math::Vector3< float > const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_AbsDot(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  gz::math::Vector3< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","AbsDot", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const &","AbsDot", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< float > const &","AbsDot", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< float > * >(argp2);
  result = (float)((gz::math::Vector3< float > const *)arg1)->AbsDot((gz::math::Vector3< float > const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Abs(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","Abs", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  result = ((gz::math::Vector3< float > const *)arg1)->Abs();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Perpendicular(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","Perpendicular", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  result = ((gz::math::Vector3< float > const *)arg1)->Perpendicular();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Normal(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = 0 ;
  gz::math::Vector3< float > *arg2 = 0 ;
  gz::math::Vector3< float > *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_gz__math__Vector3T_float_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const &","gz::math::Vector3<(float)>::Normal", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< float > const &","gz::math::Vector3<(float)>::Normal", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_gz__math__Vector3T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const &","gz::math::Vector3<(float)>::Normal", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< float > const &","gz::math::Vector3<(float)>::Normal", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< float > * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_gz__math__Vector3T_float_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const &","gz::math::Vector3<(float)>::Normal", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< float > const &","gz::math::Vector3<(float)>::Normal", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< gz::math::Vector3< float > * >(argp3);
  result = gz::math::Vector3< float >::SWIGTEMPLATEDISAMBIGUATOR Normal((gz::math::Vector3< float > const &)*arg1,(gz::math::Vector3< float > const &)*arg2,(gz::math::Vector3< float > const &)*arg3);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_DistToLine(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  gz::math::Vector3< float > *arg2 = 0 ;
  gz::math::Vector3< float > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > *","DistToLine", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const &","DistToLine", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< float > const &","DistToLine", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< float > * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_gz__math__Vector3T_float_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const &","DistToLine", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< float > const &","DistToLine", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< gz::math::Vector3< float > * >(argp3);
  result = (float)(arg1)->DistToLine((gz::math::Vector3< float > const &)*arg2,(gz::math::Vector3< float > const &)*arg3);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Max__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  gz::math::Vector3< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > *","Max", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const &","Max", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< float > const &","Max", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< float > * >(argp2);
  (arg1)->Max((gz::math::Vector3< float > const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Min__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  gz::math::Vector3< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > *","Min", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const &","Min", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< float > const &","Min", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< float > * >(argp2);
  (arg1)->Min((gz::math::Vector3< float > const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Max__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","Max", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  result = (float)((gz::math::Vector3< float > const *)arg1)->Max();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3f_Max(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3f_Max__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3f_Max__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3f.Max", 
    "    void Vector3f.Max(gz::math::Vector3< float > const &_v)\n"
    "    float Vector3f.Max()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Min__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","Min", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  result = (float)((gz::math::Vector3< float > const *)arg1)->Min();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3f_Min(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3f_Min__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3f_Min__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3f.Min", 
    "    void Vector3f.Min(gz::math::Vector3< float > const &_v)\n"
    "    float Vector3f.Min()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_MinAbs(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","MinAbs", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  result = (float)((gz::math::Vector3< float > const *)arg1)->MinAbs();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_MaxAbs(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","MaxAbs", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  result = (float)((gz::math::Vector3< float > const *)arg1)->MaxAbs();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Vector3::Vector3f.+

  call-seq:
    +(_v) -> Vector3f
    +(_s) -> Vector3f

Add operator.
*/
SWIGINTERN VALUE
_wrap_Vector3f___add____SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  gz::math::Vector3< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< float > const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< float > * >(argp2);
  result = ((gz::math::Vector3< float > const *)arg1)->operator +((gz::math::Vector3< float > const &)*arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f___add____SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  result = ((gz::math::Vector3< float > const *)arg1)->operator +(arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3f___add__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3f___add____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3f___add____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3f.__add__", 
    "    gz::math::Vector3< float > Vector3f.__add__(gz::math::Vector3< float > const &_v)\n"
    "    gz::math::Vector3< float > Vector3f.__add__(float const _s)\n");
  
  return Qnil;
}


/*
  Document-method: Vector3::Vector3f.-@

  call-seq:
    -@ -> Vector3f

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Vector3f___neg__(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  result = ((gz::math::Vector3< float > const *)arg1)->operator -();
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Vector3::Vector3f.-

  call-seq:
    -(_pt) -> Vector3f
    -(_s) -> Vector3f

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Vector3f___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  gz::math::Vector3< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< float > const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< float > * >(argp2);
  result = ((gz::math::Vector3< float > const *)arg1)->operator -((gz::math::Vector3< float > const &)*arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  result = ((gz::math::Vector3< float > const *)arg1)->operator -(arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3f___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3f___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3f___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3f.__sub__", 
    "    gz::math::Vector3< float > Vector3f.__sub__(gz::math::Vector3< float > const &_pt)\n"
    "    gz::math::Vector3< float > Vector3f.__sub__(float const _s)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f___div____SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  gz::math::Vector3< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const &","operator /", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< float > const &","operator /", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< float > * >(argp2);
  result = ((gz::math::Vector3< float > const *)arg1)->operator /((gz::math::Vector3< float > const &)*arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f___div____SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","operator /", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  result = ((gz::math::Vector3< float > const *)arg1)->operator /(arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3f___div__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3f___div____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3f___div____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3f.__div__", 
    "    gz::math::Vector3< float > const Vector3f.__div__(gz::math::Vector3< float > const &_pt)\n"
    "    gz::math::Vector3< float > const Vector3f.__div__(float _v)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  gz::math::Vector3< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< float > const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< float > * >(argp2);
  result = ((gz::math::Vector3< float > const *)arg1)->operator *((gz::math::Vector3< float > const &)*arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  gz::math::Vector3< float > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","operator *", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  result = ((gz::math::Vector3< float > const *)arg1)->operator *(arg2);
  vresult = SWIG_NewPointerObj((new gz::math::Vector3< float >(static_cast< const gz::math::Vector3< float >& >(result))), SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3f___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3f___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3f___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3f.__mul__", 
    "    gz::math::Vector3< float > Vector3f.__mul__(gz::math::Vector3< float > const &_p)\n"
    "    gz::math::Vector3< float > Vector3f.__mul__(float _s)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Equal__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  gz::math::Vector3< float > *arg2 = 0 ;
  float *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","Equal", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const &","Equal", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< float > const &","Equal", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< float > * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "float","Equal", 3, argv[1] ));
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  result = (bool)((gz::math::Vector3< float > const *)arg1)->Equal((gz::math::Vector3< float > const &)*arg2,(float const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


/*
  Document-method: Vector3::Vector3f.==

  call-seq:
    ==(_v) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Vector3f___eq__(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  gz::math::Vector3< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< float > const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< float > * >(argp2);
  result = (bool)((gz::math::Vector3< float > const *)arg1)->operator ==((gz::math::Vector3< float > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_IsFinite(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","IsFinite", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  result = (bool)((gz::math::Vector3< float > const *)arg1)->IsFinite();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Correct(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > *","Correct", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  (arg1)->Correct();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Round__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > *","Round", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Round", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->Round(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3f_Round(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3f_Round__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3f_Round__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3f.Round", 
    "    gz::math::Vector3< float > Vector3f.Round()\n"
    "    void Vector3f.Round(int _precision)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Equal__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  gz::math::Vector3< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","Equal", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const &","Equal", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< float > const &","Equal", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< float > * >(argp2);
  result = (bool)((gz::math::Vector3< float > const *)arg1)->Equal((gz::math::Vector3< float > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3f_Equal(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3f_Equal__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vector3f_Equal__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Vector3f.Equal", 
    "    bool Vector3f.Equal(gz::math::Vector3< float > const &_v, float const &_tol)\n"
    "    bool Vector3f.Equal(gz::math::Vector3< float > const &_v)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_X__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","X", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  result = (float)((gz::math::Vector3< float > const *)arg1)->X();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Y__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","Y", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  result = (float)((gz::math::Vector3< float > const *)arg1)->Y();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Z__SWIG_0(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","Z", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  result = (float)((gz::math::Vector3< float > const *)arg1)->Z();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_X__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > *","X", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","X", 2, argv[0] ));
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  (arg1)->X((float const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3f_X(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3f_X__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3f_X__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3f.X", 
    "    float Vector3f.X()\n"
    "    void Vector3f.X(float const &_v)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Y__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > *","Y", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","Y", 2, argv[0] ));
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  (arg1)->Y((float const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3f_Y(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3f_Y__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3f_Y__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3f.Y", 
    "    float Vector3f.Y()\n"
    "    void Vector3f.Y(float const &_v)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3f_Z__SWIG_1(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > *","Z", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","Z", 2, argv[0] ));
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  (arg1)->Z((float const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3f_Z(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector3f_Z__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gz__math__Vector3T_float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3f_Z__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3f.Z", 
    "    float Vector3f.Z()\n"
    "    void Vector3f.Z(float const &_v)\n");
  
  return Qnil;
}


/*
  Document-method: Vector3::Vector3f.<

  call-seq:
    <(_pt) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_Vector3f___lt__(int argc, VALUE *argv, VALUE self) {
  gz::math::Vector3< float > *arg1 = (gz::math::Vector3< float > *) 0 ;
  gz::math::Vector3< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_gz__math__Vector3T_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< gz::math::Vector3< float > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_gz__math__Vector3T_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "gz::math::Vector3< float > const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "gz::math::Vector3< float > const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< gz::math::Vector3< float > * >(argp2);
  result = (bool)((gz::math::Vector3< float > const *)arg1)->operator <((gz::math::Vector3< float > const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gz__math__Vector3T_double_t = {"_p_gz__math__Vector3T_double_t", "gz::math::Vector3< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gz__math__Vector3T_float_t = {"_p_gz__math__Vector3T_float_t", "gz::math::Vector3< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gz__math__Vector3T_int_t = {"_p_gz__math__Vector3T_int_t", "gz::math::Vector3< int > *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_char,
  &_swigt__p_gz__math__Vector3T_double_t,
  &_swigt__p_gz__math__Vector3T_float_t,
  &_swigt__p_gz__math__Vector3T_int_t,
};

static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gz__math__Vector3T_double_t[] = {  {&_swigt__p_gz__math__Vector3T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gz__math__Vector3T_float_t[] = {  {&_swigt__p_gz__math__Vector3T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gz__math__Vector3T_int_t[] = {  {&_swigt__p_gz__math__Vector3T_int_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_char,
  _swigc__p_gz__math__Vector3T_double_t,
  _swigc__p_gz__math__Vector3T_float_t,
  _swigc__p_gz__math__Vector3T_int_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_vector3(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mVector3 = rb_define_module("Vector3");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  
  SwigClassVector3i.klass = rb_define_class_under(mVector3, "Vector3i", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_gz__math__Vector3T_int_t, (void *) &SwigClassVector3i);
  rb_define_alloc_func(SwigClassVector3i.klass, _wrap_Vector3i_allocate);
  rb_define_method(SwigClassVector3i.klass, "initialize", VALUEFUNC(_wrap_new_Vector3i), -1);
  rb_define_singleton_method(SwigClassVector3i.klass, "Zero", VALUEFUNC(_wrap_Vector3i_Zero), -1);
  rb_define_singleton_method(SwigClassVector3i.klass, "One", VALUEFUNC(_wrap_Vector3i_One), -1);
  rb_define_singleton_method(SwigClassVector3i.klass, "UnitX", VALUEFUNC(_wrap_Vector3i_UnitX), -1);
  rb_define_singleton_method(SwigClassVector3i.klass, "UnitY", VALUEFUNC(_wrap_Vector3i_UnitY), -1);
  rb_define_singleton_method(SwigClassVector3i.klass, "UnitZ", VALUEFUNC(_wrap_Vector3i_UnitZ), -1);
  rb_define_singleton_method(SwigClassVector3i.klass, "NaN", VALUEFUNC(_wrap_Vector3i_NaN), -1);
  rb_define_method(SwigClassVector3i.klass, "Sum", VALUEFUNC(_wrap_Vector3i_Sum), -1);
  rb_define_method(SwigClassVector3i.klass, "Distance", VALUEFUNC(_wrap_Vector3i_Distance), -1);
  rb_define_method(SwigClassVector3i.klass, "Length", VALUEFUNC(_wrap_Vector3i_Length), -1);
  rb_define_method(SwigClassVector3i.klass, "SquaredLength", VALUEFUNC(_wrap_Vector3i_SquaredLength), -1);
  rb_define_method(SwigClassVector3i.klass, "Normalize", VALUEFUNC(_wrap_Vector3i_Normalize), -1);
  rb_define_method(SwigClassVector3i.klass, "Normalized", VALUEFUNC(_wrap_Vector3i_Normalized), -1);
  rb_define_method(SwigClassVector3i.klass, "Rounded", VALUEFUNC(_wrap_Vector3i_Rounded), -1);
  rb_define_method(SwigClassVector3i.klass, "Set", VALUEFUNC(_wrap_Vector3i_Set), -1);
  rb_define_method(SwigClassVector3i.klass, "Cross", VALUEFUNC(_wrap_Vector3i_Cross), -1);
  rb_define_method(SwigClassVector3i.klass, "Dot", VALUEFUNC(_wrap_Vector3i_Dot), -1);
  rb_define_method(SwigClassVector3i.klass, "AbsDot", VALUEFUNC(_wrap_Vector3i_AbsDot), -1);
  rb_define_method(SwigClassVector3i.klass, "Abs", VALUEFUNC(_wrap_Vector3i_Abs), -1);
  rb_define_method(SwigClassVector3i.klass, "Perpendicular", VALUEFUNC(_wrap_Vector3i_Perpendicular), -1);
  rb_define_singleton_method(SwigClassVector3i.klass, "Normal", VALUEFUNC(_wrap_Vector3i_Normal), -1);
  rb_define_method(SwigClassVector3i.klass, "DistToLine", VALUEFUNC(_wrap_Vector3i_DistToLine), -1);
  rb_define_method(SwigClassVector3i.klass, "Max", VALUEFUNC(_wrap_Vector3i_Max), -1);
  rb_define_method(SwigClassVector3i.klass, "Min", VALUEFUNC(_wrap_Vector3i_Min), -1);
  rb_define_method(SwigClassVector3i.klass, "MinAbs", VALUEFUNC(_wrap_Vector3i_MinAbs), -1);
  rb_define_method(SwigClassVector3i.klass, "MaxAbs", VALUEFUNC(_wrap_Vector3i_MaxAbs), -1);
  rb_define_method(SwigClassVector3i.klass, "+", VALUEFUNC(_wrap_Vector3i___add__), -1);
  rb_define_method(SwigClassVector3i.klass, "-@", VALUEFUNC(_wrap_Vector3i___neg__), -1);
  rb_define_method(SwigClassVector3i.klass, "-", VALUEFUNC(_wrap_Vector3i___sub__), -1);
  rb_define_method(SwigClassVector3i.klass, "/", VALUEFUNC(_wrap_Vector3i___div__), -1);
  rb_define_method(SwigClassVector3i.klass, "*", VALUEFUNC(_wrap_Vector3i___mul__), -1);
  rb_define_method(SwigClassVector3i.klass, "==", VALUEFUNC(_wrap_Vector3i___eq__), -1);
  rb_define_method(SwigClassVector3i.klass, "IsFinite", VALUEFUNC(_wrap_Vector3i_IsFinite), -1);
  rb_define_method(SwigClassVector3i.klass, "Correct", VALUEFUNC(_wrap_Vector3i_Correct), -1);
  rb_define_method(SwigClassVector3i.klass, "Round", VALUEFUNC(_wrap_Vector3i_Round), -1);
  rb_define_method(SwigClassVector3i.klass, "Equal", VALUEFUNC(_wrap_Vector3i_Equal), -1);
  rb_define_method(SwigClassVector3i.klass, "X", VALUEFUNC(_wrap_Vector3i_X), -1);
  rb_define_method(SwigClassVector3i.klass, "Y", VALUEFUNC(_wrap_Vector3i_Y), -1);
  rb_define_method(SwigClassVector3i.klass, "Z", VALUEFUNC(_wrap_Vector3i_Z), -1);
  rb_define_method(SwigClassVector3i.klass, "<", VALUEFUNC(_wrap_Vector3i___lt__), -1);
  SwigClassVector3i.mark = 0;
  SwigClassVector3i.destroy = (void (*)(void *)) free_gz_math_Vector3_Sl_int_Sg_;
  SwigClassVector3i.trackObjects = 0;
  
  SwigClassVector3d.klass = rb_define_class_under(mVector3, "Vector3d", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_gz__math__Vector3T_double_t, (void *) &SwigClassVector3d);
  rb_define_alloc_func(SwigClassVector3d.klass, _wrap_Vector3d_allocate);
  rb_define_method(SwigClassVector3d.klass, "initialize", VALUEFUNC(_wrap_new_Vector3d), -1);
  rb_define_singleton_method(SwigClassVector3d.klass, "Zero", VALUEFUNC(_wrap_Vector3d_Zero), -1);
  rb_define_singleton_method(SwigClassVector3d.klass, "One", VALUEFUNC(_wrap_Vector3d_One), -1);
  rb_define_singleton_method(SwigClassVector3d.klass, "UnitX", VALUEFUNC(_wrap_Vector3d_UnitX), -1);
  rb_define_singleton_method(SwigClassVector3d.klass, "UnitY", VALUEFUNC(_wrap_Vector3d_UnitY), -1);
  rb_define_singleton_method(SwigClassVector3d.klass, "UnitZ", VALUEFUNC(_wrap_Vector3d_UnitZ), -1);
  rb_define_singleton_method(SwigClassVector3d.klass, "NaN", VALUEFUNC(_wrap_Vector3d_NaN), -1);
  rb_define_method(SwigClassVector3d.klass, "Sum", VALUEFUNC(_wrap_Vector3d_Sum), -1);
  rb_define_method(SwigClassVector3d.klass, "Distance", VALUEFUNC(_wrap_Vector3d_Distance), -1);
  rb_define_method(SwigClassVector3d.klass, "Length", VALUEFUNC(_wrap_Vector3d_Length), -1);
  rb_define_method(SwigClassVector3d.klass, "SquaredLength", VALUEFUNC(_wrap_Vector3d_SquaredLength), -1);
  rb_define_method(SwigClassVector3d.klass, "Normalize", VALUEFUNC(_wrap_Vector3d_Normalize), -1);
  rb_define_method(SwigClassVector3d.klass, "Normalized", VALUEFUNC(_wrap_Vector3d_Normalized), -1);
  rb_define_method(SwigClassVector3d.klass, "Rounded", VALUEFUNC(_wrap_Vector3d_Rounded), -1);
  rb_define_method(SwigClassVector3d.klass, "Set", VALUEFUNC(_wrap_Vector3d_Set), -1);
  rb_define_method(SwigClassVector3d.klass, "Cross", VALUEFUNC(_wrap_Vector3d_Cross), -1);
  rb_define_method(SwigClassVector3d.klass, "Dot", VALUEFUNC(_wrap_Vector3d_Dot), -1);
  rb_define_method(SwigClassVector3d.klass, "AbsDot", VALUEFUNC(_wrap_Vector3d_AbsDot), -1);
  rb_define_method(SwigClassVector3d.klass, "Abs", VALUEFUNC(_wrap_Vector3d_Abs), -1);
  rb_define_method(SwigClassVector3d.klass, "Perpendicular", VALUEFUNC(_wrap_Vector3d_Perpendicular), -1);
  rb_define_singleton_method(SwigClassVector3d.klass, "Normal", VALUEFUNC(_wrap_Vector3d_Normal), -1);
  rb_define_method(SwigClassVector3d.klass, "DistToLine", VALUEFUNC(_wrap_Vector3d_DistToLine), -1);
  rb_define_method(SwigClassVector3d.klass, "Max", VALUEFUNC(_wrap_Vector3d_Max), -1);
  rb_define_method(SwigClassVector3d.klass, "Min", VALUEFUNC(_wrap_Vector3d_Min), -1);
  rb_define_method(SwigClassVector3d.klass, "MinAbs", VALUEFUNC(_wrap_Vector3d_MinAbs), -1);
  rb_define_method(SwigClassVector3d.klass, "MaxAbs", VALUEFUNC(_wrap_Vector3d_MaxAbs), -1);
  rb_define_method(SwigClassVector3d.klass, "+", VALUEFUNC(_wrap_Vector3d___add__), -1);
  rb_define_method(SwigClassVector3d.klass, "-@", VALUEFUNC(_wrap_Vector3d___neg__), -1);
  rb_define_method(SwigClassVector3d.klass, "-", VALUEFUNC(_wrap_Vector3d___sub__), -1);
  rb_define_method(SwigClassVector3d.klass, "/", VALUEFUNC(_wrap_Vector3d___div__), -1);
  rb_define_method(SwigClassVector3d.klass, "*", VALUEFUNC(_wrap_Vector3d___mul__), -1);
  rb_define_method(SwigClassVector3d.klass, "==", VALUEFUNC(_wrap_Vector3d___eq__), -1);
  rb_define_method(SwigClassVector3d.klass, "IsFinite", VALUEFUNC(_wrap_Vector3d_IsFinite), -1);
  rb_define_method(SwigClassVector3d.klass, "Correct", VALUEFUNC(_wrap_Vector3d_Correct), -1);
  rb_define_method(SwigClassVector3d.klass, "Round", VALUEFUNC(_wrap_Vector3d_Round), -1);
  rb_define_method(SwigClassVector3d.klass, "Equal", VALUEFUNC(_wrap_Vector3d_Equal), -1);
  rb_define_method(SwigClassVector3d.klass, "X", VALUEFUNC(_wrap_Vector3d_X), -1);
  rb_define_method(SwigClassVector3d.klass, "Y", VALUEFUNC(_wrap_Vector3d_Y), -1);
  rb_define_method(SwigClassVector3d.klass, "Z", VALUEFUNC(_wrap_Vector3d_Z), -1);
  rb_define_method(SwigClassVector3d.klass, "<", VALUEFUNC(_wrap_Vector3d___lt__), -1);
  SwigClassVector3d.mark = 0;
  SwigClassVector3d.destroy = (void (*)(void *)) free_gz_math_Vector3_Sl_double_Sg_;
  SwigClassVector3d.trackObjects = 0;
  
  SwigClassVector3f.klass = rb_define_class_under(mVector3, "Vector3f", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_gz__math__Vector3T_float_t, (void *) &SwigClassVector3f);
  rb_define_alloc_func(SwigClassVector3f.klass, _wrap_Vector3f_allocate);
  rb_define_method(SwigClassVector3f.klass, "initialize", VALUEFUNC(_wrap_new_Vector3f), -1);
  rb_define_singleton_method(SwigClassVector3f.klass, "Zero", VALUEFUNC(_wrap_Vector3f_Zero), -1);
  rb_define_singleton_method(SwigClassVector3f.klass, "One", VALUEFUNC(_wrap_Vector3f_One), -1);
  rb_define_singleton_method(SwigClassVector3f.klass, "UnitX", VALUEFUNC(_wrap_Vector3f_UnitX), -1);
  rb_define_singleton_method(SwigClassVector3f.klass, "UnitY", VALUEFUNC(_wrap_Vector3f_UnitY), -1);
  rb_define_singleton_method(SwigClassVector3f.klass, "UnitZ", VALUEFUNC(_wrap_Vector3f_UnitZ), -1);
  rb_define_singleton_method(SwigClassVector3f.klass, "NaN", VALUEFUNC(_wrap_Vector3f_NaN), -1);
  rb_define_method(SwigClassVector3f.klass, "Sum", VALUEFUNC(_wrap_Vector3f_Sum), -1);
  rb_define_method(SwigClassVector3f.klass, "Distance", VALUEFUNC(_wrap_Vector3f_Distance), -1);
  rb_define_method(SwigClassVector3f.klass, "Length", VALUEFUNC(_wrap_Vector3f_Length), -1);
  rb_define_method(SwigClassVector3f.klass, "SquaredLength", VALUEFUNC(_wrap_Vector3f_SquaredLength), -1);
  rb_define_method(SwigClassVector3f.klass, "Normalize", VALUEFUNC(_wrap_Vector3f_Normalize), -1);
  rb_define_method(SwigClassVector3f.klass, "Normalized", VALUEFUNC(_wrap_Vector3f_Normalized), -1);
  rb_define_method(SwigClassVector3f.klass, "Rounded", VALUEFUNC(_wrap_Vector3f_Rounded), -1);
  rb_define_method(SwigClassVector3f.klass, "Set", VALUEFUNC(_wrap_Vector3f_Set), -1);
  rb_define_method(SwigClassVector3f.klass, "Cross", VALUEFUNC(_wrap_Vector3f_Cross), -1);
  rb_define_method(SwigClassVector3f.klass, "Dot", VALUEFUNC(_wrap_Vector3f_Dot), -1);
  rb_define_method(SwigClassVector3f.klass, "AbsDot", VALUEFUNC(_wrap_Vector3f_AbsDot), -1);
  rb_define_method(SwigClassVector3f.klass, "Abs", VALUEFUNC(_wrap_Vector3f_Abs), -1);
  rb_define_method(SwigClassVector3f.klass, "Perpendicular", VALUEFUNC(_wrap_Vector3f_Perpendicular), -1);
  rb_define_singleton_method(SwigClassVector3f.klass, "Normal", VALUEFUNC(_wrap_Vector3f_Normal), -1);
  rb_define_method(SwigClassVector3f.klass, "DistToLine", VALUEFUNC(_wrap_Vector3f_DistToLine), -1);
  rb_define_method(SwigClassVector3f.klass, "Max", VALUEFUNC(_wrap_Vector3f_Max), -1);
  rb_define_method(SwigClassVector3f.klass, "Min", VALUEFUNC(_wrap_Vector3f_Min), -1);
  rb_define_method(SwigClassVector3f.klass, "MinAbs", VALUEFUNC(_wrap_Vector3f_MinAbs), -1);
  rb_define_method(SwigClassVector3f.klass, "MaxAbs", VALUEFUNC(_wrap_Vector3f_MaxAbs), -1);
  rb_define_method(SwigClassVector3f.klass, "+", VALUEFUNC(_wrap_Vector3f___add__), -1);
  rb_define_method(SwigClassVector3f.klass, "-@", VALUEFUNC(_wrap_Vector3f___neg__), -1);
  rb_define_method(SwigClassVector3f.klass, "-", VALUEFUNC(_wrap_Vector3f___sub__), -1);
  rb_define_method(SwigClassVector3f.klass, "/", VALUEFUNC(_wrap_Vector3f___div__), -1);
  rb_define_method(SwigClassVector3f.klass, "*", VALUEFUNC(_wrap_Vector3f___mul__), -1);
  rb_define_method(SwigClassVector3f.klass, "==", VALUEFUNC(_wrap_Vector3f___eq__), -1);
  rb_define_method(SwigClassVector3f.klass, "IsFinite", VALUEFUNC(_wrap_Vector3f_IsFinite), -1);
  rb_define_method(SwigClassVector3f.klass, "Correct", VALUEFUNC(_wrap_Vector3f_Correct), -1);
  rb_define_method(SwigClassVector3f.klass, "Round", VALUEFUNC(_wrap_Vector3f_Round), -1);
  rb_define_method(SwigClassVector3f.klass, "Equal", VALUEFUNC(_wrap_Vector3f_Equal), -1);
  rb_define_method(SwigClassVector3f.klass, "X", VALUEFUNC(_wrap_Vector3f_X), -1);
  rb_define_method(SwigClassVector3f.klass, "Y", VALUEFUNC(_wrap_Vector3f_Y), -1);
  rb_define_method(SwigClassVector3f.klass, "Z", VALUEFUNC(_wrap_Vector3f_Z), -1);
  rb_define_method(SwigClassVector3f.klass, "<", VALUEFUNC(_wrap_Vector3f___lt__), -1);
  SwigClassVector3f.mark = 0;
  SwigClassVector3f.destroy = (void (*)(void *)) free_gz_math_Vector3_Sl_float_Sg_;
  SwigClassVector3f.trackObjects = 0;
}

