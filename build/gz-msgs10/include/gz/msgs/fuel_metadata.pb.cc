// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/fuel_metadata.proto

#include "gz/msgs/fuel_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.FuelMetadata", FuelMetadata)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FuelMetadata_AnnotationsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FuelMetadata_Categories;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FuelMetadata_Contact;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FuelMetadata_Dependency;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FuelMetadata_Legal;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FuelMetadata_Model;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FuelMetadata_World;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_FuelMetadata_Compatibility;
}  // namespace protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto
namespace protobuf_gz_2fmsgs_2fversion_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fversion_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Version;
}  // namespace protobuf_gz_2fmsgs_2fversion_2eproto
namespace protobuf_gz_2fmsgs_2fversion_5frange_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fversion_5frange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VersionRange;
}  // namespace protobuf_gz_2fmsgs_2fversion_5frange_2eproto
namespace protobuf_gz_2fmsgs_2fversioned_5fname_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fversioned_5fname_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VersionedName;
}  // namespace protobuf_gz_2fmsgs_2fversioned_5fname_2eproto
namespace gz {
namespace msgs {
class FuelMetadata_ContactDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FuelMetadata_Contact>
      _instance;
} _FuelMetadata_Contact_default_instance_;
class FuelMetadata_LegalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FuelMetadata_Legal>
      _instance;
} _FuelMetadata_Legal_default_instance_;
class FuelMetadata_ModelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FuelMetadata_Model>
      _instance;
} _FuelMetadata_Model_default_instance_;
class FuelMetadata_WorldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FuelMetadata_World>
      _instance;
} _FuelMetadata_World_default_instance_;
class FuelMetadata_DependencyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FuelMetadata_Dependency>
      _instance;
} _FuelMetadata_Dependency_default_instance_;
class FuelMetadata_CompatibilityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FuelMetadata_Compatibility>
      _instance;
  const ::gz::msgs::Version* version_;
  const ::gz::msgs::VersionRange* version_range_;
} _FuelMetadata_Compatibility_default_instance_;
class FuelMetadata_CategoriesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FuelMetadata_Categories>
      _instance;
} _FuelMetadata_Categories_default_instance_;
class FuelMetadata_AnnotationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FuelMetadata_AnnotationsEntry_DoNotUse>
      _instance;
} _FuelMetadata_AnnotationsEntry_DoNotUse_default_instance_;
class FuelMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FuelMetadata>
      _instance;
  const ::gz::msgs::FuelMetadata_Model* model_;
  const ::gz::msgs::FuelMetadata_World* world_;
} _FuelMetadata_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto {
static void InitDefaultsFuelMetadata_Contact() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_FuelMetadata_Contact_default_instance_;
    new (ptr) ::gz::msgs::FuelMetadata_Contact();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::FuelMetadata_Contact::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<0> scc_info_FuelMetadata_Contact =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFuelMetadata_Contact}, {}};

static void InitDefaultsFuelMetadata_Legal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_FuelMetadata_Legal_default_instance_;
    new (ptr) ::gz::msgs::FuelMetadata_Legal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::FuelMetadata_Legal::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<0> scc_info_FuelMetadata_Legal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFuelMetadata_Legal}, {}};

static void InitDefaultsFuelMetadata_Model() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_FuelMetadata_Model_default_instance_;
    new (ptr) ::gz::msgs::FuelMetadata_Model();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::FuelMetadata_Model::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<1> scc_info_FuelMetadata_Model =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFuelMetadata_Model}, {
      &protobuf_gz_2fmsgs_2fversioned_5fname_2eproto::scc_info_VersionedName.base,}};

static void InitDefaultsFuelMetadata_World() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_FuelMetadata_World_default_instance_;
    new (ptr) ::gz::msgs::FuelMetadata_World();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::FuelMetadata_World::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<1> scc_info_FuelMetadata_World =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFuelMetadata_World}, {
      &protobuf_gz_2fmsgs_2fversioned_5fname_2eproto::scc_info_VersionedName.base,}};

static void InitDefaultsFuelMetadata_Dependency() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_FuelMetadata_Dependency_default_instance_;
    new (ptr) ::gz::msgs::FuelMetadata_Dependency();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::FuelMetadata_Dependency::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<0> scc_info_FuelMetadata_Dependency =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFuelMetadata_Dependency}, {}};

static void InitDefaultsFuelMetadata_Compatibility() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_FuelMetadata_Compatibility_default_instance_;
    new (ptr) ::gz::msgs::FuelMetadata_Compatibility();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::FuelMetadata_Compatibility::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<2> scc_info_FuelMetadata_Compatibility =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFuelMetadata_Compatibility}, {
      &protobuf_gz_2fmsgs_2fversion_2eproto::scc_info_Version.base,
      &protobuf_gz_2fmsgs_2fversion_5frange_2eproto::scc_info_VersionRange.base,}};

static void InitDefaultsFuelMetadata_Categories() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_FuelMetadata_Categories_default_instance_;
    new (ptr) ::gz::msgs::FuelMetadata_Categories();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::FuelMetadata_Categories::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<0> scc_info_FuelMetadata_Categories =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFuelMetadata_Categories}, {}};

static void InitDefaultsFuelMetadata_AnnotationsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_FuelMetadata_AnnotationsEntry_DoNotUse_default_instance_;
    new (ptr) ::gz::msgs::FuelMetadata_AnnotationsEntry_DoNotUse();
  }
  ::gz::msgs::FuelMetadata_AnnotationsEntry_DoNotUse::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<0> scc_info_FuelMetadata_AnnotationsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFuelMetadata_AnnotationsEntry_DoNotUse}, {}};

static void InitDefaultsFuelMetadata() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_FuelMetadata_default_instance_;
    new (ptr) ::gz::msgs::FuelMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::FuelMetadata::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<8> scc_info_FuelMetadata =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsFuelMetadata}, {
      &protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_Model.base,
      &protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_World.base,
      &protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_Contact.base,
      &protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_Legal.base,
      &protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_AnnotationsEntry_DoNotUse.base,
      &protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_Dependency.base,
      &protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_Compatibility.base,
      &protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_Categories.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_FuelMetadata_Contact.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FuelMetadata_Legal.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FuelMetadata_Model.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FuelMetadata_World.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FuelMetadata_Dependency.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FuelMetadata_Compatibility.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FuelMetadata_Categories.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FuelMetadata_AnnotationsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FuelMetadata.base);
}

::google::protobuf::Metadata file_level_metadata[9];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_Contact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_Contact, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_Contact, email_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_Legal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_Legal, copyright_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_Legal, license_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_Model, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_Model, file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_Model, file_format_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_World, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_World, file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_World, file_format_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_Dependency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_Dependency, uri_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_Compatibility, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_Compatibility, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_Compatibility, name_),
  offsetof(::gz::msgs::FuelMetadata_CompatibilityDefaultTypeInternal, version_),
  offsetof(::gz::msgs::FuelMetadata_CompatibilityDefaultTypeInternal, version_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_Compatibility, version_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_Categories, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_Categories, first_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_Categories, second_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_AnnotationsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_AnnotationsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::gz::msgs::FuelMetadataDefaultTypeInternal, model_),
  offsetof(::gz::msgs::FuelMetadataDefaultTypeInternal, world_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata, authors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata, legal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata, annotations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata, dependencies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata, compatibilities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata, categories_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::FuelMetadata, resource_type_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::FuelMetadata_Contact)},
  { 7, -1, sizeof(::gz::msgs::FuelMetadata_Legal)},
  { 14, -1, sizeof(::gz::msgs::FuelMetadata_Model)},
  { 21, -1, sizeof(::gz::msgs::FuelMetadata_World)},
  { 28, -1, sizeof(::gz::msgs::FuelMetadata_Dependency)},
  { 34, -1, sizeof(::gz::msgs::FuelMetadata_Compatibility)},
  { 43, -1, sizeof(::gz::msgs::FuelMetadata_Categories)},
  { 50, 57, sizeof(::gz::msgs::FuelMetadata_AnnotationsEntry_DoNotUse)},
  { 59, -1, sizeof(::gz::msgs::FuelMetadata)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_FuelMetadata_Contact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_FuelMetadata_Legal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_FuelMetadata_Model_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_FuelMetadata_World_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_FuelMetadata_Dependency_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_FuelMetadata_Compatibility_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_FuelMetadata_Categories_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_FuelMetadata_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_FuelMetadata_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/fuel_metadata.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033gz/msgs/fuel_metadata.proto\022\007gz.msgs\032\025"
      "gz/msgs/version.proto\032\033gz/msgs/version_r"
      "ange.proto\032\034gz/msgs/versioned_name.proto"
      "\"\340\007\n\014FuelMetadata\022,\n\005model\030\001 \001(\0132\033.gz.ms"
      "gs.FuelMetadata.ModelH\000\022,\n\005world\030\002 \001(\0132\033"
      ".gz.msgs.FuelMetadata.WorldH\000\022\014\n\004name\030\003 "
      "\001(\t\022\023\n\013description\030\004 \001(\t\022\017\n\007version\030\005 \001("
      "\005\022.\n\007authors\030\006 \003(\0132\035.gz.msgs.FuelMetadat"
      "a.Contact\022*\n\005legal\030\007 \001(\0132\033.gz.msgs.FuelM"
      "etadata.Legal\022\014\n\004tags\030\010 \003(\t\022;\n\013annotatio"
      "ns\030\t \003(\0132&.gz.msgs.FuelMetadata.Annotati"
      "onsEntry\0226\n\014dependencies\030\n \003(\0132 .gz.msgs"
      ".FuelMetadata.Dependency\022<\n\017compatibilit"
      "ies\030\013 \003(\0132#.gz.msgs.FuelMetadata.Compati"
      "bility\0224\n\ncategories\030\014 \001(\0132 .gz.msgs.Fue"
      "lMetadata.Categories\032&\n\007Contact\022\014\n\004name\030"
      "\001 \001(\t\022\r\n\005email\030\002 \001(\t\032+\n\005Legal\022\021\n\tcopyrig"
      "ht\030\001 \001(\t\022\017\n\007license\030\002 \001(\t\032B\n\005Model\022\014\n\004fi"
      "le\030\001 \001(\t\022+\n\013file_format\030\002 \001(\0132\026.gz.msgs."
      "VersionedName\032B\n\005World\022\014\n\004file\030\001 \001(\t\022+\n\013"
      "file_format\030\002 \001(\0132\026.gz.msgs.VersionedNam"
      "e\032\031\n\nDependency\022\013\n\003uri\030\001 \001(\t\032\202\001\n\rCompati"
      "bility\022\014\n\004name\030\001 \001(\t\022#\n\007version\030\002 \001(\0132\020."
      "gz.msgs.VersionH\000\022.\n\rversion_range\030\003 \001(\013"
      "2\025.gz.msgs.VersionRangeH\000B\016\n\014version_typ"
      "e\032+\n\nCategories\022\r\n\005first\030\001 \001(\t\022\016\n\006second"
      "\030\002 \001(\t\0322\n\020AnnotationsEntry\022\013\n\003key\030\001 \001(\t\022"
      "\r\n\005value\030\002 \001(\t:\0028\001B\017\n\rresource_typeB\033\n\013c"
      "om.gz.msgsB\014FuelMetadatab\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1152);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/fuel_metadata.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fversion_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fversion_5frange_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fversioned_5fname_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto
namespace gz {
namespace msgs {

// ===================================================================

void FuelMetadata_Contact::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FuelMetadata_Contact::kNameFieldNumber;
const int FuelMetadata_Contact::kEmailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FuelMetadata_Contact::FuelMetadata_Contact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_Contact.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.FuelMetadata.Contact)
}
FuelMetadata_Contact::FuelMetadata_Contact(const FuelMetadata_Contact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.email().size() > 0) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.FuelMetadata.Contact)
}

void FuelMetadata_Contact::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FuelMetadata_Contact::~FuelMetadata_Contact() {
  // @@protoc_insertion_point(destructor:gz.msgs.FuelMetadata.Contact)
  SharedDtor();
}

void FuelMetadata_Contact::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FuelMetadata_Contact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FuelMetadata_Contact::descriptor() {
  ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FuelMetadata_Contact& FuelMetadata_Contact::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_Contact.base);
  return *internal_default_instance();
}


void FuelMetadata_Contact::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.FuelMetadata.Contact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FuelMetadata_Contact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.FuelMetadata.Contact)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.FuelMetadata.Contact.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string email = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), static_cast<int>(this->email().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.FuelMetadata.Contact.email"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.FuelMetadata.Contact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.FuelMetadata.Contact)
  return false;
#undef DO_
}

void FuelMetadata_Contact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.FuelMetadata.Contact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.Contact.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.Contact.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->email(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.FuelMetadata.Contact)
}

::google::protobuf::uint8* FuelMetadata_Contact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.FuelMetadata.Contact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.Contact.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.Contact.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->email(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.FuelMetadata.Contact)
  return target;
}

size_t FuelMetadata_Contact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.FuelMetadata.Contact)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string email = 2;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FuelMetadata_Contact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.FuelMetadata.Contact)
  GOOGLE_DCHECK_NE(&from, this);
  const FuelMetadata_Contact* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FuelMetadata_Contact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.FuelMetadata.Contact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.FuelMetadata.Contact)
    MergeFrom(*source);
  }
}

void FuelMetadata_Contact::MergeFrom(const FuelMetadata_Contact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.FuelMetadata.Contact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
}

void FuelMetadata_Contact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.FuelMetadata.Contact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuelMetadata_Contact::CopyFrom(const FuelMetadata_Contact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.FuelMetadata.Contact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuelMetadata_Contact::IsInitialized() const {
  return true;
}

void FuelMetadata_Contact::Swap(FuelMetadata_Contact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FuelMetadata_Contact::InternalSwap(FuelMetadata_Contact* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  email_.Swap(&other->email_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FuelMetadata_Contact::GetMetadata() const {
  protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FuelMetadata_Legal::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FuelMetadata_Legal::kCopyrightFieldNumber;
const int FuelMetadata_Legal::kLicenseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FuelMetadata_Legal::FuelMetadata_Legal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_Legal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.FuelMetadata.Legal)
}
FuelMetadata_Legal::FuelMetadata_Legal(const FuelMetadata_Legal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  copyright_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.copyright().size() > 0) {
    copyright_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.copyright_);
  }
  license_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.license().size() > 0) {
    license_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.license_);
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.FuelMetadata.Legal)
}

void FuelMetadata_Legal::SharedCtor() {
  copyright_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FuelMetadata_Legal::~FuelMetadata_Legal() {
  // @@protoc_insertion_point(destructor:gz.msgs.FuelMetadata.Legal)
  SharedDtor();
}

void FuelMetadata_Legal::SharedDtor() {
  copyright_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FuelMetadata_Legal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FuelMetadata_Legal::descriptor() {
  ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FuelMetadata_Legal& FuelMetadata_Legal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_Legal.base);
  return *internal_default_instance();
}


void FuelMetadata_Legal::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.FuelMetadata.Legal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  copyright_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FuelMetadata_Legal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.FuelMetadata.Legal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string copyright = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_copyright()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->copyright().data(), static_cast<int>(this->copyright().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.FuelMetadata.Legal.copyright"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string license = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_license()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->license().data(), static_cast<int>(this->license().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.FuelMetadata.Legal.license"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.FuelMetadata.Legal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.FuelMetadata.Legal)
  return false;
#undef DO_
}

void FuelMetadata_Legal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.FuelMetadata.Legal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string copyright = 1;
  if (this->copyright().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->copyright().data(), static_cast<int>(this->copyright().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.Legal.copyright");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->copyright(), output);
  }

  // string license = 2;
  if (this->license().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->license().data(), static_cast<int>(this->license().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.Legal.license");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->license(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.FuelMetadata.Legal)
}

::google::protobuf::uint8* FuelMetadata_Legal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.FuelMetadata.Legal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string copyright = 1;
  if (this->copyright().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->copyright().data(), static_cast<int>(this->copyright().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.Legal.copyright");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->copyright(), target);
  }

  // string license = 2;
  if (this->license().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->license().data(), static_cast<int>(this->license().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.Legal.license");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->license(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.FuelMetadata.Legal)
  return target;
}

size_t FuelMetadata_Legal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.FuelMetadata.Legal)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string copyright = 1;
  if (this->copyright().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->copyright());
  }

  // string license = 2;
  if (this->license().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->license());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FuelMetadata_Legal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.FuelMetadata.Legal)
  GOOGLE_DCHECK_NE(&from, this);
  const FuelMetadata_Legal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FuelMetadata_Legal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.FuelMetadata.Legal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.FuelMetadata.Legal)
    MergeFrom(*source);
  }
}

void FuelMetadata_Legal::MergeFrom(const FuelMetadata_Legal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.FuelMetadata.Legal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.copyright().size() > 0) {

    copyright_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.copyright_);
  }
  if (from.license().size() > 0) {

    license_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.license_);
  }
}

void FuelMetadata_Legal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.FuelMetadata.Legal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuelMetadata_Legal::CopyFrom(const FuelMetadata_Legal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.FuelMetadata.Legal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuelMetadata_Legal::IsInitialized() const {
  return true;
}

void FuelMetadata_Legal::Swap(FuelMetadata_Legal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FuelMetadata_Legal::InternalSwap(FuelMetadata_Legal* other) {
  using std::swap;
  copyright_.Swap(&other->copyright_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  license_.Swap(&other->license_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FuelMetadata_Legal::GetMetadata() const {
  protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FuelMetadata_Model::InitAsDefaultInstance() {
  ::gz::msgs::_FuelMetadata_Model_default_instance_._instance.get_mutable()->file_format_ = const_cast< ::gz::msgs::VersionedName*>(
      ::gz::msgs::VersionedName::internal_default_instance());
}
void FuelMetadata_Model::clear_file_format() {
  if (GetArenaNoVirtual() == NULL && file_format_ != NULL) {
    delete file_format_;
  }
  file_format_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FuelMetadata_Model::kFileFieldNumber;
const int FuelMetadata_Model::kFileFormatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FuelMetadata_Model::FuelMetadata_Model()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_Model.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.FuelMetadata.Model)
}
FuelMetadata_Model::FuelMetadata_Model(const FuelMetadata_Model& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file().size() > 0) {
    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.has_file_format()) {
    file_format_ = new ::gz::msgs::VersionedName(*from.file_format_);
  } else {
    file_format_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.FuelMetadata.Model)
}

void FuelMetadata_Model::SharedCtor() {
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_format_ = NULL;
}

FuelMetadata_Model::~FuelMetadata_Model() {
  // @@protoc_insertion_point(destructor:gz.msgs.FuelMetadata.Model)
  SharedDtor();
}

void FuelMetadata_Model::SharedDtor() {
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete file_format_;
}

void FuelMetadata_Model::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FuelMetadata_Model::descriptor() {
  ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FuelMetadata_Model& FuelMetadata_Model::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_Model.base);
  return *internal_default_instance();
}


void FuelMetadata_Model::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.FuelMetadata.Model)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && file_format_ != NULL) {
    delete file_format_;
  }
  file_format_ = NULL;
  _internal_metadata_.Clear();
}

bool FuelMetadata_Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.FuelMetadata.Model)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file().data(), static_cast<int>(this->file().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.FuelMetadata.Model.file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.VersionedName file_format = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.FuelMetadata.Model)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.FuelMetadata.Model)
  return false;
#undef DO_
}

void FuelMetadata_Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.FuelMetadata.Model)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file = 1;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.Model.file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file(), output);
  }

  // .gz.msgs.VersionedName file_format = 2;
  if (this->has_file_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_file_format(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.FuelMetadata.Model)
}

::google::protobuf::uint8* FuelMetadata_Model::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.FuelMetadata.Model)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file = 1;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.Model.file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file(), target);
  }

  // .gz.msgs.VersionedName file_format = 2;
  if (this->has_file_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_file_format(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.FuelMetadata.Model)
  return target;
}

size_t FuelMetadata_Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.FuelMetadata.Model)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string file = 1;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  // .gz.msgs.VersionedName file_format = 2;
  if (this->has_file_format()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *file_format_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FuelMetadata_Model::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.FuelMetadata.Model)
  GOOGLE_DCHECK_NE(&from, this);
  const FuelMetadata_Model* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FuelMetadata_Model>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.FuelMetadata.Model)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.FuelMetadata.Model)
    MergeFrom(*source);
  }
}

void FuelMetadata_Model::MergeFrom(const FuelMetadata_Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.FuelMetadata.Model)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.has_file_format()) {
    mutable_file_format()->::gz::msgs::VersionedName::MergeFrom(from.file_format());
  }
}

void FuelMetadata_Model::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.FuelMetadata.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuelMetadata_Model::CopyFrom(const FuelMetadata_Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.FuelMetadata.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuelMetadata_Model::IsInitialized() const {
  return true;
}

void FuelMetadata_Model::Swap(FuelMetadata_Model* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FuelMetadata_Model::InternalSwap(FuelMetadata_Model* other) {
  using std::swap;
  file_.Swap(&other->file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_format_, other->file_format_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FuelMetadata_Model::GetMetadata() const {
  protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FuelMetadata_World::InitAsDefaultInstance() {
  ::gz::msgs::_FuelMetadata_World_default_instance_._instance.get_mutable()->file_format_ = const_cast< ::gz::msgs::VersionedName*>(
      ::gz::msgs::VersionedName::internal_default_instance());
}
void FuelMetadata_World::clear_file_format() {
  if (GetArenaNoVirtual() == NULL && file_format_ != NULL) {
    delete file_format_;
  }
  file_format_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FuelMetadata_World::kFileFieldNumber;
const int FuelMetadata_World::kFileFormatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FuelMetadata_World::FuelMetadata_World()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_World.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.FuelMetadata.World)
}
FuelMetadata_World::FuelMetadata_World(const FuelMetadata_World& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file().size() > 0) {
    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.has_file_format()) {
    file_format_ = new ::gz::msgs::VersionedName(*from.file_format_);
  } else {
    file_format_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.FuelMetadata.World)
}

void FuelMetadata_World::SharedCtor() {
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_format_ = NULL;
}

FuelMetadata_World::~FuelMetadata_World() {
  // @@protoc_insertion_point(destructor:gz.msgs.FuelMetadata.World)
  SharedDtor();
}

void FuelMetadata_World::SharedDtor() {
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete file_format_;
}

void FuelMetadata_World::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FuelMetadata_World::descriptor() {
  ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FuelMetadata_World& FuelMetadata_World::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_World.base);
  return *internal_default_instance();
}


void FuelMetadata_World::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.FuelMetadata.World)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && file_format_ != NULL) {
    delete file_format_;
  }
  file_format_ = NULL;
  _internal_metadata_.Clear();
}

bool FuelMetadata_World::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.FuelMetadata.World)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file().data(), static_cast<int>(this->file().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.FuelMetadata.World.file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.VersionedName file_format = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.FuelMetadata.World)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.FuelMetadata.World)
  return false;
#undef DO_
}

void FuelMetadata_World::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.FuelMetadata.World)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file = 1;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.World.file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file(), output);
  }

  // .gz.msgs.VersionedName file_format = 2;
  if (this->has_file_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_file_format(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.FuelMetadata.World)
}

::google::protobuf::uint8* FuelMetadata_World::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.FuelMetadata.World)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file = 1;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.World.file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file(), target);
  }

  // .gz.msgs.VersionedName file_format = 2;
  if (this->has_file_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_file_format(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.FuelMetadata.World)
  return target;
}

size_t FuelMetadata_World::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.FuelMetadata.World)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string file = 1;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  // .gz.msgs.VersionedName file_format = 2;
  if (this->has_file_format()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *file_format_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FuelMetadata_World::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.FuelMetadata.World)
  GOOGLE_DCHECK_NE(&from, this);
  const FuelMetadata_World* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FuelMetadata_World>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.FuelMetadata.World)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.FuelMetadata.World)
    MergeFrom(*source);
  }
}

void FuelMetadata_World::MergeFrom(const FuelMetadata_World& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.FuelMetadata.World)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.has_file_format()) {
    mutable_file_format()->::gz::msgs::VersionedName::MergeFrom(from.file_format());
  }
}

void FuelMetadata_World::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.FuelMetadata.World)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuelMetadata_World::CopyFrom(const FuelMetadata_World& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.FuelMetadata.World)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuelMetadata_World::IsInitialized() const {
  return true;
}

void FuelMetadata_World::Swap(FuelMetadata_World* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FuelMetadata_World::InternalSwap(FuelMetadata_World* other) {
  using std::swap;
  file_.Swap(&other->file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_format_, other->file_format_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FuelMetadata_World::GetMetadata() const {
  protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FuelMetadata_Dependency::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FuelMetadata_Dependency::kUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FuelMetadata_Dependency::FuelMetadata_Dependency()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_Dependency.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.FuelMetadata.Dependency)
}
FuelMetadata_Dependency::FuelMetadata_Dependency(const FuelMetadata_Dependency& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uri().size() > 0) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.FuelMetadata.Dependency)
}

void FuelMetadata_Dependency::SharedCtor() {
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FuelMetadata_Dependency::~FuelMetadata_Dependency() {
  // @@protoc_insertion_point(destructor:gz.msgs.FuelMetadata.Dependency)
  SharedDtor();
}

void FuelMetadata_Dependency::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FuelMetadata_Dependency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FuelMetadata_Dependency::descriptor() {
  ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FuelMetadata_Dependency& FuelMetadata_Dependency::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_Dependency.base);
  return *internal_default_instance();
}


void FuelMetadata_Dependency::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.FuelMetadata.Dependency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FuelMetadata_Dependency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.FuelMetadata.Dependency)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.FuelMetadata.Dependency.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.FuelMetadata.Dependency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.FuelMetadata.Dependency)
  return false;
#undef DO_
}

void FuelMetadata_Dependency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.FuelMetadata.Dependency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.Dependency.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.FuelMetadata.Dependency)
}

::google::protobuf::uint8* FuelMetadata_Dependency::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.FuelMetadata.Dependency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.Dependency.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.FuelMetadata.Dependency)
  return target;
}

size_t FuelMetadata_Dependency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.FuelMetadata.Dependency)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string uri = 1;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FuelMetadata_Dependency::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.FuelMetadata.Dependency)
  GOOGLE_DCHECK_NE(&from, this);
  const FuelMetadata_Dependency* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FuelMetadata_Dependency>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.FuelMetadata.Dependency)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.FuelMetadata.Dependency)
    MergeFrom(*source);
  }
}

void FuelMetadata_Dependency::MergeFrom(const FuelMetadata_Dependency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.FuelMetadata.Dependency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {

    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
}

void FuelMetadata_Dependency::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.FuelMetadata.Dependency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuelMetadata_Dependency::CopyFrom(const FuelMetadata_Dependency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.FuelMetadata.Dependency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuelMetadata_Dependency::IsInitialized() const {
  return true;
}

void FuelMetadata_Dependency::Swap(FuelMetadata_Dependency* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FuelMetadata_Dependency::InternalSwap(FuelMetadata_Dependency* other) {
  using std::swap;
  uri_.Swap(&other->uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FuelMetadata_Dependency::GetMetadata() const {
  protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FuelMetadata_Compatibility::InitAsDefaultInstance() {
  ::gz::msgs::_FuelMetadata_Compatibility_default_instance_.version_ = const_cast< ::gz::msgs::Version*>(
      ::gz::msgs::Version::internal_default_instance());
  ::gz::msgs::_FuelMetadata_Compatibility_default_instance_.version_range_ = const_cast< ::gz::msgs::VersionRange*>(
      ::gz::msgs::VersionRange::internal_default_instance());
}
void FuelMetadata_Compatibility::set_allocated_version(::gz::msgs::Version* version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_version_type();
  if (version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    set_has_version();
    version_type_.version_ = version;
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.FuelMetadata.Compatibility.version)
}
void FuelMetadata_Compatibility::clear_version() {
  if (has_version()) {
    delete version_type_.version_;
    clear_has_version_type();
  }
}
void FuelMetadata_Compatibility::set_allocated_version_range(::gz::msgs::VersionRange* version_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_version_type();
  if (version_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      version_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, version_range, submessage_arena);
    }
    set_has_version_range();
    version_type_.version_range_ = version_range;
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.FuelMetadata.Compatibility.version_range)
}
void FuelMetadata_Compatibility::clear_version_range() {
  if (has_version_range()) {
    delete version_type_.version_range_;
    clear_has_version_type();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FuelMetadata_Compatibility::kNameFieldNumber;
const int FuelMetadata_Compatibility::kVersionFieldNumber;
const int FuelMetadata_Compatibility::kVersionRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FuelMetadata_Compatibility::FuelMetadata_Compatibility()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_Compatibility.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.FuelMetadata.Compatibility)
}
FuelMetadata_Compatibility::FuelMetadata_Compatibility(const FuelMetadata_Compatibility& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  clear_has_version_type();
  switch (from.version_type_case()) {
    case kVersion: {
      mutable_version()->::gz::msgs::Version::MergeFrom(from.version());
      break;
    }
    case kVersionRange: {
      mutable_version_range()->::gz::msgs::VersionRange::MergeFrom(from.version_range());
      break;
    }
    case VERSION_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.FuelMetadata.Compatibility)
}

void FuelMetadata_Compatibility::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version_type();
}

FuelMetadata_Compatibility::~FuelMetadata_Compatibility() {
  // @@protoc_insertion_point(destructor:gz.msgs.FuelMetadata.Compatibility)
  SharedDtor();
}

void FuelMetadata_Compatibility::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_version_type()) {
    clear_version_type();
  }
}

void FuelMetadata_Compatibility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FuelMetadata_Compatibility::descriptor() {
  ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FuelMetadata_Compatibility& FuelMetadata_Compatibility::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_Compatibility.base);
  return *internal_default_instance();
}


void FuelMetadata_Compatibility::clear_version_type() {
// @@protoc_insertion_point(one_of_clear_start:gz.msgs.FuelMetadata.Compatibility)
  switch (version_type_case()) {
    case kVersion: {
      delete version_type_.version_;
      break;
    }
    case kVersionRange: {
      delete version_type_.version_range_;
      break;
    }
    case VERSION_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VERSION_TYPE_NOT_SET;
}


void FuelMetadata_Compatibility::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.FuelMetadata.Compatibility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_version_type();
  _internal_metadata_.Clear();
}

bool FuelMetadata_Compatibility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.FuelMetadata.Compatibility)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.FuelMetadata.Compatibility.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Version version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.VersionRange version_range = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_version_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.FuelMetadata.Compatibility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.FuelMetadata.Compatibility)
  return false;
#undef DO_
}

void FuelMetadata_Compatibility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.FuelMetadata.Compatibility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.Compatibility.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .gz.msgs.Version version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_version(), output);
  }

  // .gz.msgs.VersionRange version_range = 3;
  if (has_version_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_version_range(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.FuelMetadata.Compatibility)
}

::google::protobuf::uint8* FuelMetadata_Compatibility::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.FuelMetadata.Compatibility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.Compatibility.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .gz.msgs.Version version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_version(), deterministic, target);
  }

  // .gz.msgs.VersionRange version_range = 3;
  if (has_version_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_version_range(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.FuelMetadata.Compatibility)
  return target;
}

size_t FuelMetadata_Compatibility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.FuelMetadata.Compatibility)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  switch (version_type_case()) {
    // .gz.msgs.Version version = 2;
    case kVersion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *version_type_.version_);
      break;
    }
    // .gz.msgs.VersionRange version_range = 3;
    case kVersionRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *version_type_.version_range_);
      break;
    }
    case VERSION_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FuelMetadata_Compatibility::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.FuelMetadata.Compatibility)
  GOOGLE_DCHECK_NE(&from, this);
  const FuelMetadata_Compatibility* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FuelMetadata_Compatibility>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.FuelMetadata.Compatibility)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.FuelMetadata.Compatibility)
    MergeFrom(*source);
  }
}

void FuelMetadata_Compatibility::MergeFrom(const FuelMetadata_Compatibility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.FuelMetadata.Compatibility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  switch (from.version_type_case()) {
    case kVersion: {
      mutable_version()->::gz::msgs::Version::MergeFrom(from.version());
      break;
    }
    case kVersionRange: {
      mutable_version_range()->::gz::msgs::VersionRange::MergeFrom(from.version_range());
      break;
    }
    case VERSION_TYPE_NOT_SET: {
      break;
    }
  }
}

void FuelMetadata_Compatibility::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.FuelMetadata.Compatibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuelMetadata_Compatibility::CopyFrom(const FuelMetadata_Compatibility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.FuelMetadata.Compatibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuelMetadata_Compatibility::IsInitialized() const {
  return true;
}

void FuelMetadata_Compatibility::Swap(FuelMetadata_Compatibility* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FuelMetadata_Compatibility::InternalSwap(FuelMetadata_Compatibility* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_type_, other->version_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FuelMetadata_Compatibility::GetMetadata() const {
  protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FuelMetadata_Categories::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FuelMetadata_Categories::kFirstFieldNumber;
const int FuelMetadata_Categories::kSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FuelMetadata_Categories::FuelMetadata_Categories()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_Categories.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.FuelMetadata.Categories)
}
FuelMetadata_Categories::FuelMetadata_Categories(const FuelMetadata_Categories& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  first_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.first().size() > 0) {
    first_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_);
  }
  second_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.second().size() > 0) {
    second_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.second_);
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.FuelMetadata.Categories)
}

void FuelMetadata_Categories::SharedCtor() {
  first_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  second_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FuelMetadata_Categories::~FuelMetadata_Categories() {
  // @@protoc_insertion_point(destructor:gz.msgs.FuelMetadata.Categories)
  SharedDtor();
}

void FuelMetadata_Categories::SharedDtor() {
  first_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  second_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FuelMetadata_Categories::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FuelMetadata_Categories::descriptor() {
  ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FuelMetadata_Categories& FuelMetadata_Categories::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata_Categories.base);
  return *internal_default_instance();
}


void FuelMetadata_Categories::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.FuelMetadata.Categories)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  first_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  second_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FuelMetadata_Categories::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.FuelMetadata.Categories)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string first = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->first().data(), static_cast<int>(this->first().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.FuelMetadata.Categories.first"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string second = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_second()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->second().data(), static_cast<int>(this->second().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.FuelMetadata.Categories.second"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.FuelMetadata.Categories)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.FuelMetadata.Categories)
  return false;
#undef DO_
}

void FuelMetadata_Categories::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.FuelMetadata.Categories)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string first = 1;
  if (this->first().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->first().data(), static_cast<int>(this->first().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.Categories.first");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->first(), output);
  }

  // string second = 2;
  if (this->second().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->second().data(), static_cast<int>(this->second().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.Categories.second");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->second(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.FuelMetadata.Categories)
}

::google::protobuf::uint8* FuelMetadata_Categories::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.FuelMetadata.Categories)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string first = 1;
  if (this->first().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->first().data(), static_cast<int>(this->first().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.Categories.first");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->first(), target);
  }

  // string second = 2;
  if (this->second().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->second().data(), static_cast<int>(this->second().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.Categories.second");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->second(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.FuelMetadata.Categories)
  return target;
}

size_t FuelMetadata_Categories::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.FuelMetadata.Categories)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string first = 1;
  if (this->first().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->first());
  }

  // string second = 2;
  if (this->second().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->second());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FuelMetadata_Categories::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.FuelMetadata.Categories)
  GOOGLE_DCHECK_NE(&from, this);
  const FuelMetadata_Categories* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FuelMetadata_Categories>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.FuelMetadata.Categories)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.FuelMetadata.Categories)
    MergeFrom(*source);
  }
}

void FuelMetadata_Categories::MergeFrom(const FuelMetadata_Categories& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.FuelMetadata.Categories)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.first().size() > 0) {

    first_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_);
  }
  if (from.second().size() > 0) {

    second_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.second_);
  }
}

void FuelMetadata_Categories::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.FuelMetadata.Categories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuelMetadata_Categories::CopyFrom(const FuelMetadata_Categories& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.FuelMetadata.Categories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuelMetadata_Categories::IsInitialized() const {
  return true;
}

void FuelMetadata_Categories::Swap(FuelMetadata_Categories* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FuelMetadata_Categories::InternalSwap(FuelMetadata_Categories* other) {
  using std::swap;
  first_.Swap(&other->first_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  second_.Swap(&other->second_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FuelMetadata_Categories::GetMetadata() const {
  protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

FuelMetadata_AnnotationsEntry_DoNotUse::FuelMetadata_AnnotationsEntry_DoNotUse() {}
FuelMetadata_AnnotationsEntry_DoNotUse::FuelMetadata_AnnotationsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void FuelMetadata_AnnotationsEntry_DoNotUse::MergeFrom(const FuelMetadata_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata FuelMetadata_AnnotationsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::file_level_metadata[7];
}
void FuelMetadata_AnnotationsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void FuelMetadata::InitAsDefaultInstance() {
  ::gz::msgs::_FuelMetadata_default_instance_.model_ = const_cast< ::gz::msgs::FuelMetadata_Model*>(
      ::gz::msgs::FuelMetadata_Model::internal_default_instance());
  ::gz::msgs::_FuelMetadata_default_instance_.world_ = const_cast< ::gz::msgs::FuelMetadata_World*>(
      ::gz::msgs::FuelMetadata_World::internal_default_instance());
  ::gz::msgs::_FuelMetadata_default_instance_._instance.get_mutable()->legal_ = const_cast< ::gz::msgs::FuelMetadata_Legal*>(
      ::gz::msgs::FuelMetadata_Legal::internal_default_instance());
  ::gz::msgs::_FuelMetadata_default_instance_._instance.get_mutable()->categories_ = const_cast< ::gz::msgs::FuelMetadata_Categories*>(
      ::gz::msgs::FuelMetadata_Categories::internal_default_instance());
}
void FuelMetadata::set_allocated_model(::gz::msgs::FuelMetadata_Model* model) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_resource_type();
  if (model) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      model = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    set_has_model();
    resource_type_.model_ = model;
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.FuelMetadata.model)
}
void FuelMetadata::set_allocated_world(::gz::msgs::FuelMetadata_World* world) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_resource_type();
  if (world) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      world = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, world, submessage_arena);
    }
    set_has_world();
    resource_type_.world_ = world;
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.FuelMetadata.world)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FuelMetadata::kModelFieldNumber;
const int FuelMetadata::kWorldFieldNumber;
const int FuelMetadata::kNameFieldNumber;
const int FuelMetadata::kDescriptionFieldNumber;
const int FuelMetadata::kVersionFieldNumber;
const int FuelMetadata::kAuthorsFieldNumber;
const int FuelMetadata::kLegalFieldNumber;
const int FuelMetadata::kTagsFieldNumber;
const int FuelMetadata::kAnnotationsFieldNumber;
const int FuelMetadata::kDependenciesFieldNumber;
const int FuelMetadata::kCompatibilitiesFieldNumber;
const int FuelMetadata::kCategoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FuelMetadata::FuelMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.FuelMetadata)
}
FuelMetadata::FuelMetadata(const FuelMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      authors_(from.authors_),
      tags_(from.tags_),
      dependencies_(from.dependencies_),
      compatibilities_(from.compatibilities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  annotations_.MergeFrom(from.annotations_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_legal()) {
    legal_ = new ::gz::msgs::FuelMetadata_Legal(*from.legal_);
  } else {
    legal_ = NULL;
  }
  if (from.has_categories()) {
    categories_ = new ::gz::msgs::FuelMetadata_Categories(*from.categories_);
  } else {
    categories_ = NULL;
  }
  version_ = from.version_;
  clear_has_resource_type();
  switch (from.resource_type_case()) {
    case kModel: {
      mutable_model()->::gz::msgs::FuelMetadata_Model::MergeFrom(from.model());
      break;
    }
    case kWorld: {
      mutable_world()->::gz::msgs::FuelMetadata_World::MergeFrom(from.world());
      break;
    }
    case RESOURCE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.FuelMetadata)
}

void FuelMetadata::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&legal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&legal_)) + sizeof(version_));
  clear_has_resource_type();
}

FuelMetadata::~FuelMetadata() {
  // @@protoc_insertion_point(destructor:gz.msgs.FuelMetadata)
  SharedDtor();
}

void FuelMetadata::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete legal_;
  if (this != internal_default_instance()) delete categories_;
  if (has_resource_type()) {
    clear_resource_type();
  }
}

void FuelMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FuelMetadata::descriptor() {
  ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FuelMetadata& FuelMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::scc_info_FuelMetadata.base);
  return *internal_default_instance();
}


void FuelMetadata::clear_resource_type() {
// @@protoc_insertion_point(one_of_clear_start:gz.msgs.FuelMetadata)
  switch (resource_type_case()) {
    case kModel: {
      delete resource_type_.model_;
      break;
    }
    case kWorld: {
      delete resource_type_.world_;
      break;
    }
    case RESOURCE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESOURCE_TYPE_NOT_SET;
}


void FuelMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.FuelMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  authors_.Clear();
  tags_.Clear();
  annotations_.Clear();
  dependencies_.Clear();
  compatibilities_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && legal_ != NULL) {
    delete legal_;
  }
  legal_ = NULL;
  if (GetArenaNoVirtual() == NULL && categories_ != NULL) {
    delete categories_;
  }
  categories_ = NULL;
  version_ = 0;
  clear_resource_type();
  _internal_metadata_.Clear();
}

bool FuelMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.FuelMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.FuelMetadata.Model model = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.FuelMetadata.World world = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_world()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.FuelMetadata.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.FuelMetadata.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.FuelMetadata.Contact authors = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_authors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.FuelMetadata.Legal legal = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_legal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.FuelMetadata.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> annotations = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          FuelMetadata_AnnotationsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              FuelMetadata_AnnotationsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&annotations_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.FuelMetadata.AnnotationsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.FuelMetadata.AnnotationsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.FuelMetadata.Dependency dependencies = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dependencies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.FuelMetadata.Compatibility compatibilities = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_compatibilities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.FuelMetadata.Categories categories = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_categories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.FuelMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.FuelMetadata)
  return false;
#undef DO_
}

void FuelMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.FuelMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.FuelMetadata.Model model = 1;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_model(), output);
  }

  // .gz.msgs.FuelMetadata.World world = 2;
  if (has_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_world(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // int32 version = 5;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->version(), output);
  }

  // repeated .gz.msgs.FuelMetadata.Contact authors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->authors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->authors(static_cast<int>(i)),
      output);
  }

  // .gz.msgs.FuelMetadata.Legal legal = 7;
  if (this->has_legal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_legal(), output);
  }

  // repeated string tags = 8;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->tags(i), output);
  }

  // map<string, string> annotations = 9;
  if (!this->annotations().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "gz.msgs.FuelMetadata.AnnotationsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "gz.msgs.FuelMetadata.AnnotationsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->annotations().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<FuelMetadata_AnnotationsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(annotations_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<FuelMetadata_AnnotationsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it) {
        entry.reset(annotations_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .gz.msgs.FuelMetadata.Dependency dependencies = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dependencies_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->dependencies(static_cast<int>(i)),
      output);
  }

  // repeated .gz.msgs.FuelMetadata.Compatibility compatibilities = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->compatibilities_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->compatibilities(static_cast<int>(i)),
      output);
  }

  // .gz.msgs.FuelMetadata.Categories categories = 12;
  if (this->has_categories()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_categories(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.FuelMetadata)
}

::google::protobuf::uint8* FuelMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.FuelMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.FuelMetadata.Model model = 1;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_model(), deterministic, target);
  }

  // .gz.msgs.FuelMetadata.World world = 2;
  if (has_world()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_world(), deterministic, target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // int32 version = 5;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->version(), target);
  }

  // repeated .gz.msgs.FuelMetadata.Contact authors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->authors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->authors(static_cast<int>(i)), deterministic, target);
  }

  // .gz.msgs.FuelMetadata.Legal legal = 7;
  if (this->has_legal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_legal(), deterministic, target);
  }

  // repeated string tags = 8;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.FuelMetadata.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->tags(i), target);
  }

  // map<string, string> annotations = 9;
  if (!this->annotations().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "gz.msgs.FuelMetadata.AnnotationsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "gz.msgs.FuelMetadata.AnnotationsEntry.value");
      }
    };

    if (deterministic &&
        this->annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->annotations().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<FuelMetadata_AnnotationsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(annotations_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<FuelMetadata_AnnotationsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it) {
        entry.reset(annotations_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .gz.msgs.FuelMetadata.Dependency dependencies = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dependencies_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->dependencies(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gz.msgs.FuelMetadata.Compatibility compatibilities = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->compatibilities_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->compatibilities(static_cast<int>(i)), deterministic, target);
  }

  // .gz.msgs.FuelMetadata.Categories categories = 12;
  if (this->has_categories()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_categories(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.FuelMetadata)
  return target;
}

size_t FuelMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.FuelMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gz.msgs.FuelMetadata.Contact authors = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->authors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->authors(static_cast<int>(i)));
    }
  }

  // repeated string tags = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // map<string, string> annotations = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->annotations_size());
  {
    ::std::unique_ptr<FuelMetadata_AnnotationsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->annotations().begin();
        it != this->annotations().end(); ++it) {
      entry.reset(annotations_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .gz.msgs.FuelMetadata.Dependency dependencies = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->dependencies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dependencies(static_cast<int>(i)));
    }
  }

  // repeated .gz.msgs.FuelMetadata.Compatibility compatibilities = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->compatibilities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->compatibilities(static_cast<int>(i)));
    }
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .gz.msgs.FuelMetadata.Legal legal = 7;
  if (this->has_legal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *legal_);
  }

  // .gz.msgs.FuelMetadata.Categories categories = 12;
  if (this->has_categories()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *categories_);
  }

  // int32 version = 5;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  switch (resource_type_case()) {
    // .gz.msgs.FuelMetadata.Model model = 1;
    case kModel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resource_type_.model_);
      break;
    }
    // .gz.msgs.FuelMetadata.World world = 2;
    case kWorld: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resource_type_.world_);
      break;
    }
    case RESOURCE_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FuelMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.FuelMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const FuelMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FuelMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.FuelMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.FuelMetadata)
    MergeFrom(*source);
  }
}

void FuelMetadata::MergeFrom(const FuelMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.FuelMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  authors_.MergeFrom(from.authors_);
  tags_.MergeFrom(from.tags_);
  annotations_.MergeFrom(from.annotations_);
  dependencies_.MergeFrom(from.dependencies_);
  compatibilities_.MergeFrom(from.compatibilities_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_legal()) {
    mutable_legal()->::gz::msgs::FuelMetadata_Legal::MergeFrom(from.legal());
  }
  if (from.has_categories()) {
    mutable_categories()->::gz::msgs::FuelMetadata_Categories::MergeFrom(from.categories());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  switch (from.resource_type_case()) {
    case kModel: {
      mutable_model()->::gz::msgs::FuelMetadata_Model::MergeFrom(from.model());
      break;
    }
    case kWorld: {
      mutable_world()->::gz::msgs::FuelMetadata_World::MergeFrom(from.world());
      break;
    }
    case RESOURCE_TYPE_NOT_SET: {
      break;
    }
  }
}

void FuelMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.FuelMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuelMetadata::CopyFrom(const FuelMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.FuelMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuelMetadata::IsInitialized() const {
  return true;
}

void FuelMetadata::Swap(FuelMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FuelMetadata::InternalSwap(FuelMetadata* other) {
  using std::swap;
  CastToBase(&authors_)->InternalSwap(CastToBase(&other->authors_));
  tags_.InternalSwap(CastToBase(&other->tags_));
  annotations_.Swap(&other->annotations_);
  CastToBase(&dependencies_)->InternalSwap(CastToBase(&other->dependencies_));
  CastToBase(&compatibilities_)->InternalSwap(CastToBase(&other->compatibilities_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(legal_, other->legal_);
  swap(categories_, other->categories_);
  swap(version_, other->version_);
  swap(resource_type_, other->resource_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FuelMetadata::GetMetadata() const {
  protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::FuelMetadata_Contact* Arena::CreateMaybeMessage< ::gz::msgs::FuelMetadata_Contact >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::FuelMetadata_Contact >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::FuelMetadata_Legal* Arena::CreateMaybeMessage< ::gz::msgs::FuelMetadata_Legal >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::FuelMetadata_Legal >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::FuelMetadata_Model* Arena::CreateMaybeMessage< ::gz::msgs::FuelMetadata_Model >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::FuelMetadata_Model >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::FuelMetadata_World* Arena::CreateMaybeMessage< ::gz::msgs::FuelMetadata_World >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::FuelMetadata_World >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::FuelMetadata_Dependency* Arena::CreateMaybeMessage< ::gz::msgs::FuelMetadata_Dependency >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::FuelMetadata_Dependency >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::FuelMetadata_Compatibility* Arena::CreateMaybeMessage< ::gz::msgs::FuelMetadata_Compatibility >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::FuelMetadata_Compatibility >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::FuelMetadata_Categories* Arena::CreateMaybeMessage< ::gz::msgs::FuelMetadata_Categories >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::FuelMetadata_Categories >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::FuelMetadata_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::gz::msgs::FuelMetadata_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::FuelMetadata_AnnotationsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::FuelMetadata* Arena::CreateMaybeMessage< ::gz::msgs::FuelMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::FuelMetadata >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
