// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/heightmapgeom.proto

#include "gz/msgs/heightmapgeom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.HeightmapGeom", HeightmapGeom)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace protobuf_gz_2fmsgs_2fheightmapgeom_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheightmapgeom_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HeightmapGeom_Blend;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheightmapgeom_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HeightmapGeom_Texture;
}  // namespace protobuf_gz_2fmsgs_2fheightmapgeom_2eproto
namespace protobuf_gz_2fmsgs_2fimage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fimage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Image;
}  // namespace protobuf_gz_2fmsgs_2fimage_2eproto
namespace protobuf_gz_2fmsgs_2fvector3d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fvector3d_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Vector3d;
}  // namespace protobuf_gz_2fmsgs_2fvector3d_2eproto
namespace gz {
namespace msgs {
class HeightmapGeom_TextureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeightmapGeom_Texture>
      _instance;
} _HeightmapGeom_Texture_default_instance_;
class HeightmapGeom_BlendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeightmapGeom_Blend>
      _instance;
} _HeightmapGeom_Blend_default_instance_;
class HeightmapGeomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeightmapGeom>
      _instance;
} _HeightmapGeom_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fheightmapgeom_2eproto {
static void InitDefaultsHeightmapGeom_Texture() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_HeightmapGeom_Texture_default_instance_;
    new (ptr) ::gz::msgs::HeightmapGeom_Texture();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::HeightmapGeom_Texture::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<0> scc_info_HeightmapGeom_Texture =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeightmapGeom_Texture}, {}};

static void InitDefaultsHeightmapGeom_Blend() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_HeightmapGeom_Blend_default_instance_;
    new (ptr) ::gz::msgs::HeightmapGeom_Blend();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::HeightmapGeom_Blend::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<0> scc_info_HeightmapGeom_Blend =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeightmapGeom_Blend}, {}};

static void InitDefaultsHeightmapGeom() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_HeightmapGeom_default_instance_;
    new (ptr) ::gz::msgs::HeightmapGeom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::HeightmapGeom::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<5> scc_info_HeightmapGeom =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsHeightmapGeom}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2fimage_2eproto::scc_info_Image.base,
      &protobuf_gz_2fmsgs_2fvector3d_2eproto::scc_info_Vector3d.base,
      &protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::scc_info_HeightmapGeom_Texture.base,
      &protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::scc_info_HeightmapGeom_Blend.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_HeightmapGeom_Texture.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeightmapGeom_Blend.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeightmapGeom.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::HeightmapGeom_Texture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::HeightmapGeom_Texture, diffuse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::HeightmapGeom_Texture, normal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::HeightmapGeom_Texture, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::HeightmapGeom_Blend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::HeightmapGeom_Blend, min_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::HeightmapGeom_Blend, fade_dist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::HeightmapGeom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::HeightmapGeom, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::HeightmapGeom, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::HeightmapGeom, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::HeightmapGeom, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::HeightmapGeom, heights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::HeightmapGeom, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::HeightmapGeom, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::HeightmapGeom, texture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::HeightmapGeom, blend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::HeightmapGeom, use_terrain_paging_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::HeightmapGeom, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::HeightmapGeom, sampling_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::HeightmapGeom_Texture)},
  { 8, -1, sizeof(::gz::msgs::HeightmapGeom_Blend)},
  { 15, -1, sizeof(::gz::msgs::HeightmapGeom)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_HeightmapGeom_Texture_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_HeightmapGeom_Blend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_HeightmapGeom_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/heightmapgeom.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033gz/msgs/heightmapgeom.proto\022\007gz.msgs\032\023"
      "gz/msgs/image.proto\032\026gz/msgs/vector3d.pr"
      "oto\032\024gz/msgs/header.proto\"\313\003\n\rHeightmapG"
      "eom\022\037\n\006header\030\001 \001(\0132\017.gz.msgs.Header\022\035\n\005"
      "image\030\002 \001(\0132\016.gz.msgs.Image\022\037\n\004size\030\003 \001("
      "\0132\021.gz.msgs.Vector3d\022!\n\006origin\030\004 \001(\0132\021.g"
      "z.msgs.Vector3d\022\017\n\007heights\030\005 \003(\002\022\r\n\005widt"
      "h\030\006 \001(\005\022\016\n\006height\030\007 \001(\005\022/\n\007texture\030\010 \003(\013"
      "2\036.gz.msgs.HeightmapGeom.Texture\022+\n\005blen"
      "d\030\t \003(\0132\034.gz.msgs.HeightmapGeom.Blend\022\032\n"
      "\022use_terrain_paging\030\n \001(\010\022\020\n\010filename\030\013 "
      "\001(\t\022\020\n\010sampling\030\014 \001(\r\0328\n\007Texture\022\017\n\007diff"
      "use\030\001 \001(\t\022\016\n\006normal\030\002 \001(\t\022\014\n\004size\030\003 \001(\001\032"
      ".\n\005Blend\022\022\n\nmin_height\030\001 \001(\001\022\021\n\tfade_dis"
      "t\030\002 \001(\001B\"\n\013com.gz.msgsB\023HeightmapGeomPro"
      "tosb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 611);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/heightmapgeom.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fimage_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fvector3d_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fheightmapgeom_2eproto
namespace gz {
namespace msgs {

// ===================================================================

void HeightmapGeom_Texture::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeightmapGeom_Texture::kDiffuseFieldNumber;
const int HeightmapGeom_Texture::kNormalFieldNumber;
const int HeightmapGeom_Texture::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeightmapGeom_Texture::HeightmapGeom_Texture()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::scc_info_HeightmapGeom_Texture.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.HeightmapGeom.Texture)
}
HeightmapGeom_Texture::HeightmapGeom_Texture(const HeightmapGeom_Texture& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diffuse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.diffuse().size() > 0) {
    diffuse_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diffuse_);
  }
  normal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.normal().size() > 0) {
    normal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normal_);
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:gz.msgs.HeightmapGeom.Texture)
}

void HeightmapGeom_Texture::SharedCtor() {
  diffuse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
}

HeightmapGeom_Texture::~HeightmapGeom_Texture() {
  // @@protoc_insertion_point(destructor:gz.msgs.HeightmapGeom.Texture)
  SharedDtor();
}

void HeightmapGeom_Texture::SharedDtor() {
  diffuse_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HeightmapGeom_Texture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HeightmapGeom_Texture::descriptor() {
  ::protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeightmapGeom_Texture& HeightmapGeom_Texture::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::scc_info_HeightmapGeom_Texture.base);
  return *internal_default_instance();
}


void HeightmapGeom_Texture::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.HeightmapGeom.Texture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diffuse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
  _internal_metadata_.Clear();
}

bool HeightmapGeom_Texture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.HeightmapGeom.Texture)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string diffuse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diffuse()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->diffuse().data(), static_cast<int>(this->diffuse().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.HeightmapGeom.Texture.diffuse"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string normal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normal()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->normal().data(), static_cast<int>(this->normal().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.HeightmapGeom.Texture.normal"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.HeightmapGeom.Texture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.HeightmapGeom.Texture)
  return false;
#undef DO_
}

void HeightmapGeom_Texture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.HeightmapGeom.Texture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diffuse = 1;
  if (this->diffuse().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diffuse().data(), static_cast<int>(this->diffuse().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.HeightmapGeom.Texture.diffuse");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->diffuse(), output);
  }

  // string normal = 2;
  if (this->normal().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->normal().data(), static_cast<int>(this->normal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.HeightmapGeom.Texture.normal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->normal(), output);
  }

  // double size = 3;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.HeightmapGeom.Texture)
}

::google::protobuf::uint8* HeightmapGeom_Texture::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.HeightmapGeom.Texture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diffuse = 1;
  if (this->diffuse().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diffuse().data(), static_cast<int>(this->diffuse().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.HeightmapGeom.Texture.diffuse");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->diffuse(), target);
  }

  // string normal = 2;
  if (this->normal().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->normal().data(), static_cast<int>(this->normal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.HeightmapGeom.Texture.normal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->normal(), target);
  }

  // double size = 3;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.HeightmapGeom.Texture)
  return target;
}

size_t HeightmapGeom_Texture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.HeightmapGeom.Texture)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string diffuse = 1;
  if (this->diffuse().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diffuse());
  }

  // string normal = 2;
  if (this->normal().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->normal());
  }

  // double size = 3;
  if (this->size() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeightmapGeom_Texture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.HeightmapGeom.Texture)
  GOOGLE_DCHECK_NE(&from, this);
  const HeightmapGeom_Texture* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeightmapGeom_Texture>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.HeightmapGeom.Texture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.HeightmapGeom.Texture)
    MergeFrom(*source);
  }
}

void HeightmapGeom_Texture::MergeFrom(const HeightmapGeom_Texture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.HeightmapGeom.Texture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diffuse().size() > 0) {

    diffuse_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diffuse_);
  }
  if (from.normal().size() > 0) {

    normal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normal_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void HeightmapGeom_Texture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.HeightmapGeom.Texture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeightmapGeom_Texture::CopyFrom(const HeightmapGeom_Texture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.HeightmapGeom.Texture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightmapGeom_Texture::IsInitialized() const {
  return true;
}

void HeightmapGeom_Texture::Swap(HeightmapGeom_Texture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeightmapGeom_Texture::InternalSwap(HeightmapGeom_Texture* other) {
  using std::swap;
  diffuse_.Swap(&other->diffuse_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  normal_.Swap(&other->normal_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HeightmapGeom_Texture::GetMetadata() const {
  protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeightmapGeom_Blend::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeightmapGeom_Blend::kMinHeightFieldNumber;
const int HeightmapGeom_Blend::kFadeDistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeightmapGeom_Blend::HeightmapGeom_Blend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::scc_info_HeightmapGeom_Blend.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.HeightmapGeom.Blend)
}
HeightmapGeom_Blend::HeightmapGeom_Blend(const HeightmapGeom_Blend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_height_, &from.min_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&fade_dist_) -
    reinterpret_cast<char*>(&min_height_)) + sizeof(fade_dist_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.HeightmapGeom.Blend)
}

void HeightmapGeom_Blend::SharedCtor() {
  ::memset(&min_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fade_dist_) -
      reinterpret_cast<char*>(&min_height_)) + sizeof(fade_dist_));
}

HeightmapGeom_Blend::~HeightmapGeom_Blend() {
  // @@protoc_insertion_point(destructor:gz.msgs.HeightmapGeom.Blend)
  SharedDtor();
}

void HeightmapGeom_Blend::SharedDtor() {
}

void HeightmapGeom_Blend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HeightmapGeom_Blend::descriptor() {
  ::protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeightmapGeom_Blend& HeightmapGeom_Blend::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::scc_info_HeightmapGeom_Blend.base);
  return *internal_default_instance();
}


void HeightmapGeom_Blend::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.HeightmapGeom.Blend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fade_dist_) -
      reinterpret_cast<char*>(&min_height_)) + sizeof(fade_dist_));
  _internal_metadata_.Clear();
}

bool HeightmapGeom_Blend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.HeightmapGeom.Blend)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double min_height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fade_dist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fade_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.HeightmapGeom.Blend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.HeightmapGeom.Blend)
  return false;
#undef DO_
}

void HeightmapGeom_Blend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.HeightmapGeom.Blend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double min_height = 1;
  if (this->min_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min_height(), output);
  }

  // double fade_dist = 2;
  if (this->fade_dist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->fade_dist(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.HeightmapGeom.Blend)
}

::google::protobuf::uint8* HeightmapGeom_Blend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.HeightmapGeom.Blend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double min_height = 1;
  if (this->min_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min_height(), target);
  }

  // double fade_dist = 2;
  if (this->fade_dist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->fade_dist(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.HeightmapGeom.Blend)
  return target;
}

size_t HeightmapGeom_Blend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.HeightmapGeom.Blend)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double min_height = 1;
  if (this->min_height() != 0) {
    total_size += 1 + 8;
  }

  // double fade_dist = 2;
  if (this->fade_dist() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeightmapGeom_Blend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.HeightmapGeom.Blend)
  GOOGLE_DCHECK_NE(&from, this);
  const HeightmapGeom_Blend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeightmapGeom_Blend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.HeightmapGeom.Blend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.HeightmapGeom.Blend)
    MergeFrom(*source);
  }
}

void HeightmapGeom_Blend::MergeFrom(const HeightmapGeom_Blend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.HeightmapGeom.Blend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min_height() != 0) {
    set_min_height(from.min_height());
  }
  if (from.fade_dist() != 0) {
    set_fade_dist(from.fade_dist());
  }
}

void HeightmapGeom_Blend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.HeightmapGeom.Blend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeightmapGeom_Blend::CopyFrom(const HeightmapGeom_Blend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.HeightmapGeom.Blend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightmapGeom_Blend::IsInitialized() const {
  return true;
}

void HeightmapGeom_Blend::Swap(HeightmapGeom_Blend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeightmapGeom_Blend::InternalSwap(HeightmapGeom_Blend* other) {
  using std::swap;
  swap(min_height_, other->min_height_);
  swap(fade_dist_, other->fade_dist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HeightmapGeom_Blend::GetMetadata() const {
  protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeightmapGeom::InitAsDefaultInstance() {
  ::gz::msgs::_HeightmapGeom_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_HeightmapGeom_default_instance_._instance.get_mutable()->image_ = const_cast< ::gz::msgs::Image*>(
      ::gz::msgs::Image::internal_default_instance());
  ::gz::msgs::_HeightmapGeom_default_instance_._instance.get_mutable()->size_ = const_cast< ::gz::msgs::Vector3d*>(
      ::gz::msgs::Vector3d::internal_default_instance());
  ::gz::msgs::_HeightmapGeom_default_instance_._instance.get_mutable()->origin_ = const_cast< ::gz::msgs::Vector3d*>(
      ::gz::msgs::Vector3d::internal_default_instance());
}
void HeightmapGeom::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void HeightmapGeom::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
}
void HeightmapGeom::clear_size() {
  if (GetArenaNoVirtual() == NULL && size_ != NULL) {
    delete size_;
  }
  size_ = NULL;
}
void HeightmapGeom::clear_origin() {
  if (GetArenaNoVirtual() == NULL && origin_ != NULL) {
    delete origin_;
  }
  origin_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeightmapGeom::kHeaderFieldNumber;
const int HeightmapGeom::kImageFieldNumber;
const int HeightmapGeom::kSizeFieldNumber;
const int HeightmapGeom::kOriginFieldNumber;
const int HeightmapGeom::kHeightsFieldNumber;
const int HeightmapGeom::kWidthFieldNumber;
const int HeightmapGeom::kHeightFieldNumber;
const int HeightmapGeom::kTextureFieldNumber;
const int HeightmapGeom::kBlendFieldNumber;
const int HeightmapGeom::kUseTerrainPagingFieldNumber;
const int HeightmapGeom::kFilenameFieldNumber;
const int HeightmapGeom::kSamplingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeightmapGeom::HeightmapGeom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::scc_info_HeightmapGeom.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.HeightmapGeom)
}
HeightmapGeom::HeightmapGeom(const HeightmapGeom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      heights_(from.heights_),
      texture_(from.texture_),
      blend_(from.blend_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_image()) {
    image_ = new ::gz::msgs::Image(*from.image_);
  } else {
    image_ = NULL;
  }
  if (from.has_size()) {
    size_ = new ::gz::msgs::Vector3d(*from.size_);
  } else {
    size_ = NULL;
  }
  if (from.has_origin()) {
    origin_ = new ::gz::msgs::Vector3d(*from.origin_);
  } else {
    origin_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&sampling_) -
    reinterpret_cast<char*>(&width_)) + sizeof(sampling_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.HeightmapGeom)
}

void HeightmapGeom::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sampling_) -
      reinterpret_cast<char*>(&header_)) + sizeof(sampling_));
}

HeightmapGeom::~HeightmapGeom() {
  // @@protoc_insertion_point(destructor:gz.msgs.HeightmapGeom)
  SharedDtor();
}

void HeightmapGeom::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete size_;
  if (this != internal_default_instance()) delete origin_;
}

void HeightmapGeom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HeightmapGeom::descriptor() {
  ::protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeightmapGeom& HeightmapGeom::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::scc_info_HeightmapGeom.base);
  return *internal_default_instance();
}


void HeightmapGeom::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.HeightmapGeom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heights_.Clear();
  texture_.Clear();
  blend_.Clear();
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
  if (GetArenaNoVirtual() == NULL && size_ != NULL) {
    delete size_;
  }
  size_ = NULL;
  if (GetArenaNoVirtual() == NULL && origin_ != NULL) {
    delete origin_;
  }
  origin_ = NULL;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sampling_) -
      reinterpret_cast<char*>(&width_)) + sizeof(sampling_));
  _internal_metadata_.Clear();
}

bool HeightmapGeom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.HeightmapGeom)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Image image = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Vector3d size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Vector3d origin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float heights = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_heights())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_heights())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.HeightmapGeom.Texture texture = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_texture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.HeightmapGeom.Blend blend = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_blend()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_terrain_paging = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_terrain_paging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.HeightmapGeom.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sampling = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sampling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.HeightmapGeom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.HeightmapGeom)
  return false;
#undef DO_
}

void HeightmapGeom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.HeightmapGeom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .gz.msgs.Image image = 2;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_image(), output);
  }

  // .gz.msgs.Vector3d size = 3;
  if (this->has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_size(), output);
  }

  // .gz.msgs.Vector3d origin = 4;
  if (this->has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_origin(), output);
  }

  // repeated float heights = 5;
  if (this->heights_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _heights_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->heights().data(), this->heights_size(), output);
  }

  // int32 width = 6;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->width(), output);
  }

  // int32 height = 7;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->height(), output);
  }

  // repeated .gz.msgs.HeightmapGeom.Texture texture = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->texture_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->texture(static_cast<int>(i)),
      output);
  }

  // repeated .gz.msgs.HeightmapGeom.Blend blend = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blend_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->blend(static_cast<int>(i)),
      output);
  }

  // bool use_terrain_paging = 10;
  if (this->use_terrain_paging() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->use_terrain_paging(), output);
  }

  // string filename = 11;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.HeightmapGeom.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->filename(), output);
  }

  // uint32 sampling = 12;
  if (this->sampling() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->sampling(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.HeightmapGeom)
}

::google::protobuf::uint8* HeightmapGeom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.HeightmapGeom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .gz.msgs.Image image = 2;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_image(), deterministic, target);
  }

  // .gz.msgs.Vector3d size = 3;
  if (this->has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_size(), deterministic, target);
  }

  // .gz.msgs.Vector3d origin = 4;
  if (this->has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_origin(), deterministic, target);
  }

  // repeated float heights = 5;
  if (this->heights_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _heights_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->heights_, target);
  }

  // int32 width = 6;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->width(), target);
  }

  // int32 height = 7;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->height(), target);
  }

  // repeated .gz.msgs.HeightmapGeom.Texture texture = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->texture_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->texture(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gz.msgs.HeightmapGeom.Blend blend = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blend_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->blend(static_cast<int>(i)), deterministic, target);
  }

  // bool use_terrain_paging = 10;
  if (this->use_terrain_paging() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->use_terrain_paging(), target);
  }

  // string filename = 11;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.HeightmapGeom.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->filename(), target);
  }

  // uint32 sampling = 12;
  if (this->sampling() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->sampling(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.HeightmapGeom)
  return target;
}

size_t HeightmapGeom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.HeightmapGeom)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float heights = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->heights_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _heights_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .gz.msgs.HeightmapGeom.Texture texture = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->texture_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->texture(static_cast<int>(i)));
    }
  }

  // repeated .gz.msgs.HeightmapGeom.Blend blend = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->blend_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->blend(static_cast<int>(i)));
    }
  }

  // string filename = 11;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.Image image = 2;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // .gz.msgs.Vector3d size = 3;
  if (this->has_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // .gz.msgs.Vector3d origin = 4;
  if (this->has_origin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  // int32 width = 6;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 7;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // bool use_terrain_paging = 10;
  if (this->use_terrain_paging() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sampling = 12;
  if (this->sampling() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sampling());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeightmapGeom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.HeightmapGeom)
  GOOGLE_DCHECK_NE(&from, this);
  const HeightmapGeom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeightmapGeom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.HeightmapGeom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.HeightmapGeom)
    MergeFrom(*source);
  }
}

void HeightmapGeom::MergeFrom(const HeightmapGeom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.HeightmapGeom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  heights_.MergeFrom(from.heights_);
  texture_.MergeFrom(from.texture_);
  blend_.MergeFrom(from.blend_);
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_image()) {
    mutable_image()->::gz::msgs::Image::MergeFrom(from.image());
  }
  if (from.has_size()) {
    mutable_size()->::gz::msgs::Vector3d::MergeFrom(from.size());
  }
  if (from.has_origin()) {
    mutable_origin()->::gz::msgs::Vector3d::MergeFrom(from.origin());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.use_terrain_paging() != 0) {
    set_use_terrain_paging(from.use_terrain_paging());
  }
  if (from.sampling() != 0) {
    set_sampling(from.sampling());
  }
}

void HeightmapGeom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.HeightmapGeom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeightmapGeom::CopyFrom(const HeightmapGeom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.HeightmapGeom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightmapGeom::IsInitialized() const {
  return true;
}

void HeightmapGeom::Swap(HeightmapGeom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeightmapGeom::InternalSwap(HeightmapGeom* other) {
  using std::swap;
  heights_.InternalSwap(&other->heights_);
  CastToBase(&texture_)->InternalSwap(CastToBase(&other->texture_));
  CastToBase(&blend_)->InternalSwap(CastToBase(&other->blend_));
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(image_, other->image_);
  swap(size_, other->size_);
  swap(origin_, other->origin_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(use_terrain_paging_, other->use_terrain_paging_);
  swap(sampling_, other->sampling_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HeightmapGeom::GetMetadata() const {
  protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::HeightmapGeom_Texture* Arena::CreateMaybeMessage< ::gz::msgs::HeightmapGeom_Texture >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::HeightmapGeom_Texture >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::HeightmapGeom_Blend* Arena::CreateMaybeMessage< ::gz::msgs::HeightmapGeom_Blend >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::HeightmapGeom_Blend >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::HeightmapGeom* Arena::CreateMaybeMessage< ::gz::msgs::HeightmapGeom >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::HeightmapGeom >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
