// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/camerasensor.proto

#include "gz/msgs/camerasensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.CameraSensor", CameraSensor)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fdistortion_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fdistortion_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Distortion;
}  // namespace protobuf_gz_2fmsgs_2fdistortion_2eproto
namespace protobuf_gz_2fmsgs_2fdouble_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fdouble_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Double;
}  // namespace protobuf_gz_2fmsgs_2fdouble_2eproto
namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace protobuf_gz_2fmsgs_2flens_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2flens_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Lens;
}  // namespace protobuf_gz_2fmsgs_2flens_2eproto
namespace protobuf_gz_2fmsgs_2fsensor_5fnoise_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fsensor_5fnoise_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SensorNoise;
}  // namespace protobuf_gz_2fmsgs_2fsensor_5fnoise_2eproto
namespace protobuf_gz_2fmsgs_2fvector2d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fvector2d_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Vector2d;
}  // namespace protobuf_gz_2fmsgs_2fvector2d_2eproto
namespace gz {
namespace msgs {
class CameraSensorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraSensor>
      _instance;
} _CameraSensor_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fcamerasensor_2eproto {
static void InitDefaultsCameraSensor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_CameraSensor_default_instance_;
    new (ptr) ::gz::msgs::CameraSensor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::CameraSensor::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<6> scc_info_CameraSensor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsCameraSensor}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2fvector2d_2eproto::scc_info_Vector2d.base,
      &protobuf_gz_2fmsgs_2fdistortion_2eproto::scc_info_Distortion.base,
      &protobuf_gz_2fmsgs_2fsensor_5fnoise_2eproto::scc_info_SensorNoise.base,
      &protobuf_gz_2fmsgs_2fdouble_2eproto::scc_info_Double.base,
      &protobuf_gz_2fmsgs_2flens_2eproto::scc_info_Lens.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CameraSensor.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, horizontal_fov_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, image_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, image_format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, near_clip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, far_clip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, save_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, save_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, distortion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, image_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, depth_near_clip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, depth_far_clip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, bounding_box_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, segmentation_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, lens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, triggered_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, triggered_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, anti_aliasing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, visibility_mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, is_depth_camera_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraSensor, pixel_format_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::CameraSensor)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_CameraSensor_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/camerasensor.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032gz/msgs/camerasensor.proto\022\007gz.msgs\032\030g"
      "z/msgs/distortion.proto\032\024gz/msgs/double."
      "proto\032\024gz/msgs/header.proto\032\023gz/msgs/ima"
      "ge.proto\032\022gz/msgs/lens.proto\032\032gz/msgs/se"
      "nsor_noise.proto\032\026gz/msgs/vector2d.proto"
      "\"\336\006\n\014CameraSensor\022\037\n\006header\030\001 \001(\0132\017.gz.m"
      "sgs.Header\022\026\n\016horizontal_fov\030\002 \001(\001\022%\n\nim"
      "age_size\030\003 \001(\0132\021.gz.msgs.Vector2d\022\024\n\014ima"
      "ge_format\030\004 \001(\t\022\021\n\tnear_clip\030\005 \001(\001\022\020\n\010fa"
      "r_clip\030\006 \001(\001\022\024\n\014save_enabled\030\007 \001(\010\022\021\n\tsa"
      "ve_path\030\010 \001(\t\022\'\n\ndistortion\030\t \001(\0132\023.gz.m"
      "sgs.Distortion\022)\n\013image_noise\030\n \001(\0132\024.gz"
      ".msgs.SensorNoise\022(\n\017depth_near_clip\030\013 \001"
      "(\0132\017.gz.msgs.Double\022\'\n\016depth_far_clip\030\014 "
      "\001(\0132\017.gz.msgs.Double\022@\n\021bounding_box_typ"
      "e\030\r \001(\0162%.gz.msgs.CameraSensor.BoundingB"
      "oxType\022A\n\021segmentation_type\030\016 \001(\0162&.gz.m"
      "sgs.CameraSensor.SegmentationType\022\033\n\004len"
      "s\030\017 \001(\0132\r.gz.msgs.Lens\022\021\n\ttriggered\030\020 \001("
      "\010\022\027\n\017triggered_topic\030\021 \001(\t\022\025\n\ranti_alias"
      "ing\030\022 \001(\005\022\027\n\017visibility_mask\030\023 \001(\r\022\027\n\017is"
      "_depth_camera\030\024 \001(\010\022.\n\014pixel_format\030\025 \001("
      "\0162\030.gz.msgs.PixelFormatType\"W\n\017BoundingB"
      "oxType\022\023\n\017NO_BOUNDING_BOX\020\000\022\017\n\013FULL_BOX_"
      "2D\020\001\022\022\n\016VISIBLE_BOX_2D\020\002\022\n\n\006BOX_3D\020\003\"C\n\020"
      "SegmentationType\022\023\n\017NO_SEGMENTATION\020\000\022\014\n"
      "\010SEMANTIC\020\001\022\014\n\010PANOPTIC\020\002B!\n\013com.gz.msgs"
      "B\022CameraSensorProtosb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1108);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/camerasensor.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fdistortion_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fdouble_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fimage_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2flens_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fsensor_5fnoise_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fvector2d_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fcamerasensor_2eproto
namespace gz {
namespace msgs {
const ::google::protobuf::EnumDescriptor* CameraSensor_BoundingBoxType_descriptor() {
  protobuf_gz_2fmsgs_2fcamerasensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gz_2fmsgs_2fcamerasensor_2eproto::file_level_enum_descriptors[0];
}
bool CameraSensor_BoundingBoxType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CameraSensor_BoundingBoxType CameraSensor::NO_BOUNDING_BOX;
const CameraSensor_BoundingBoxType CameraSensor::FULL_BOX_2D;
const CameraSensor_BoundingBoxType CameraSensor::VISIBLE_BOX_2D;
const CameraSensor_BoundingBoxType CameraSensor::BOX_3D;
const CameraSensor_BoundingBoxType CameraSensor::BoundingBoxType_MIN;
const CameraSensor_BoundingBoxType CameraSensor::BoundingBoxType_MAX;
const int CameraSensor::BoundingBoxType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CameraSensor_SegmentationType_descriptor() {
  protobuf_gz_2fmsgs_2fcamerasensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gz_2fmsgs_2fcamerasensor_2eproto::file_level_enum_descriptors[1];
}
bool CameraSensor_SegmentationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CameraSensor_SegmentationType CameraSensor::NO_SEGMENTATION;
const CameraSensor_SegmentationType CameraSensor::SEMANTIC;
const CameraSensor_SegmentationType CameraSensor::PANOPTIC;
const CameraSensor_SegmentationType CameraSensor::SegmentationType_MIN;
const CameraSensor_SegmentationType CameraSensor::SegmentationType_MAX;
const int CameraSensor::SegmentationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CameraSensor::InitAsDefaultInstance() {
  ::gz::msgs::_CameraSensor_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_CameraSensor_default_instance_._instance.get_mutable()->image_size_ = const_cast< ::gz::msgs::Vector2d*>(
      ::gz::msgs::Vector2d::internal_default_instance());
  ::gz::msgs::_CameraSensor_default_instance_._instance.get_mutable()->distortion_ = const_cast< ::gz::msgs::Distortion*>(
      ::gz::msgs::Distortion::internal_default_instance());
  ::gz::msgs::_CameraSensor_default_instance_._instance.get_mutable()->image_noise_ = const_cast< ::gz::msgs::SensorNoise*>(
      ::gz::msgs::SensorNoise::internal_default_instance());
  ::gz::msgs::_CameraSensor_default_instance_._instance.get_mutable()->depth_near_clip_ = const_cast< ::gz::msgs::Double*>(
      ::gz::msgs::Double::internal_default_instance());
  ::gz::msgs::_CameraSensor_default_instance_._instance.get_mutable()->depth_far_clip_ = const_cast< ::gz::msgs::Double*>(
      ::gz::msgs::Double::internal_default_instance());
  ::gz::msgs::_CameraSensor_default_instance_._instance.get_mutable()->lens_ = const_cast< ::gz::msgs::Lens*>(
      ::gz::msgs::Lens::internal_default_instance());
}
void CameraSensor::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void CameraSensor::clear_image_size() {
  if (GetArenaNoVirtual() == NULL && image_size_ != NULL) {
    delete image_size_;
  }
  image_size_ = NULL;
}
void CameraSensor::clear_distortion() {
  if (GetArenaNoVirtual() == NULL && distortion_ != NULL) {
    delete distortion_;
  }
  distortion_ = NULL;
}
void CameraSensor::clear_image_noise() {
  if (GetArenaNoVirtual() == NULL && image_noise_ != NULL) {
    delete image_noise_;
  }
  image_noise_ = NULL;
}
void CameraSensor::clear_depth_near_clip() {
  if (GetArenaNoVirtual() == NULL && depth_near_clip_ != NULL) {
    delete depth_near_clip_;
  }
  depth_near_clip_ = NULL;
}
void CameraSensor::clear_depth_far_clip() {
  if (GetArenaNoVirtual() == NULL && depth_far_clip_ != NULL) {
    delete depth_far_clip_;
  }
  depth_far_clip_ = NULL;
}
void CameraSensor::clear_lens() {
  if (GetArenaNoVirtual() == NULL && lens_ != NULL) {
    delete lens_;
  }
  lens_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraSensor::kHeaderFieldNumber;
const int CameraSensor::kHorizontalFovFieldNumber;
const int CameraSensor::kImageSizeFieldNumber;
const int CameraSensor::kImageFormatFieldNumber;
const int CameraSensor::kNearClipFieldNumber;
const int CameraSensor::kFarClipFieldNumber;
const int CameraSensor::kSaveEnabledFieldNumber;
const int CameraSensor::kSavePathFieldNumber;
const int CameraSensor::kDistortionFieldNumber;
const int CameraSensor::kImageNoiseFieldNumber;
const int CameraSensor::kDepthNearClipFieldNumber;
const int CameraSensor::kDepthFarClipFieldNumber;
const int CameraSensor::kBoundingBoxTypeFieldNumber;
const int CameraSensor::kSegmentationTypeFieldNumber;
const int CameraSensor::kLensFieldNumber;
const int CameraSensor::kTriggeredFieldNumber;
const int CameraSensor::kTriggeredTopicFieldNumber;
const int CameraSensor::kAntiAliasingFieldNumber;
const int CameraSensor::kVisibilityMaskFieldNumber;
const int CameraSensor::kIsDepthCameraFieldNumber;
const int CameraSensor::kPixelFormatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraSensor::CameraSensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fcamerasensor_2eproto::scc_info_CameraSensor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.CameraSensor)
}
CameraSensor::CameraSensor(const CameraSensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_format().size() > 0) {
    image_format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_format_);
  }
  save_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.save_path().size() > 0) {
    save_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_path_);
  }
  triggered_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.triggered_topic().size() > 0) {
    triggered_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.triggered_topic_);
  }
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_image_size()) {
    image_size_ = new ::gz::msgs::Vector2d(*from.image_size_);
  } else {
    image_size_ = NULL;
  }
  if (from.has_distortion()) {
    distortion_ = new ::gz::msgs::Distortion(*from.distortion_);
  } else {
    distortion_ = NULL;
  }
  if (from.has_image_noise()) {
    image_noise_ = new ::gz::msgs::SensorNoise(*from.image_noise_);
  } else {
    image_noise_ = NULL;
  }
  if (from.has_depth_near_clip()) {
    depth_near_clip_ = new ::gz::msgs::Double(*from.depth_near_clip_);
  } else {
    depth_near_clip_ = NULL;
  }
  if (from.has_depth_far_clip()) {
    depth_far_clip_ = new ::gz::msgs::Double(*from.depth_far_clip_);
  } else {
    depth_far_clip_ = NULL;
  }
  if (from.has_lens()) {
    lens_ = new ::gz::msgs::Lens(*from.lens_);
  } else {
    lens_ = NULL;
  }
  ::memcpy(&horizontal_fov_, &from.horizontal_fov_,
    static_cast<size_t>(reinterpret_cast<char*>(&pixel_format_) -
    reinterpret_cast<char*>(&horizontal_fov_)) + sizeof(pixel_format_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.CameraSensor)
}

void CameraSensor::SharedCtor() {
  image_format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  triggered_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_format_) -
      reinterpret_cast<char*>(&header_)) + sizeof(pixel_format_));
}

CameraSensor::~CameraSensor() {
  // @@protoc_insertion_point(destructor:gz.msgs.CameraSensor)
  SharedDtor();
}

void CameraSensor::SharedDtor() {
  image_format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  triggered_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete image_size_;
  if (this != internal_default_instance()) delete distortion_;
  if (this != internal_default_instance()) delete image_noise_;
  if (this != internal_default_instance()) delete depth_near_clip_;
  if (this != internal_default_instance()) delete depth_far_clip_;
  if (this != internal_default_instance()) delete lens_;
}

void CameraSensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CameraSensor::descriptor() {
  ::protobuf_gz_2fmsgs_2fcamerasensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fcamerasensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraSensor& CameraSensor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fcamerasensor_2eproto::scc_info_CameraSensor.base);
  return *internal_default_instance();
}


void CameraSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.CameraSensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  triggered_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && image_size_ != NULL) {
    delete image_size_;
  }
  image_size_ = NULL;
  if (GetArenaNoVirtual() == NULL && distortion_ != NULL) {
    delete distortion_;
  }
  distortion_ = NULL;
  if (GetArenaNoVirtual() == NULL && image_noise_ != NULL) {
    delete image_noise_;
  }
  image_noise_ = NULL;
  if (GetArenaNoVirtual() == NULL && depth_near_clip_ != NULL) {
    delete depth_near_clip_;
  }
  depth_near_clip_ = NULL;
  if (GetArenaNoVirtual() == NULL && depth_far_clip_ != NULL) {
    delete depth_far_clip_;
  }
  depth_far_clip_ = NULL;
  if (GetArenaNoVirtual() == NULL && lens_ != NULL) {
    delete lens_;
  }
  lens_ = NULL;
  ::memset(&horizontal_fov_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_format_) -
      reinterpret_cast<char*>(&horizontal_fov_)) + sizeof(pixel_format_));
  _internal_metadata_.Clear();
}

bool CameraSensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.CameraSensor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double horizontal_fov = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &horizontal_fov_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Vector2d image_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_image_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string image_format = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_format()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_format().data(), static_cast<int>(this->image_format().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.CameraSensor.image_format"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double near_clip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &near_clip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double far_clip = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &far_clip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool save_enabled = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string save_path = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_save_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->save_path().data(), static_cast<int>(this->save_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.CameraSensor.save_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Distortion distortion = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_distortion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.SensorNoise image_noise = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_image_noise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Double depth_near_clip = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_depth_near_clip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Double depth_far_clip = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_depth_far_clip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.CameraSensor.BoundingBoxType bounding_box_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bounding_box_type(static_cast< ::gz::msgs::CameraSensor_BoundingBoxType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.CameraSensor.SegmentationType segmentation_type = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_segmentation_type(static_cast< ::gz::msgs::CameraSensor_SegmentationType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Lens lens = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool triggered = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &triggered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string triggered_topic = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_triggered_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->triggered_topic().data(), static_cast<int>(this->triggered_topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.CameraSensor.triggered_topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 anti_aliasing = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &anti_aliasing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 visibility_mask = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visibility_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_depth_camera = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_depth_camera_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.PixelFormatType pixel_format = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pixel_format(static_cast< ::gz::msgs::PixelFormatType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.CameraSensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.CameraSensor)
  return false;
#undef DO_
}

void CameraSensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.CameraSensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // double horizontal_fov = 2;
  if (this->horizontal_fov() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->horizontal_fov(), output);
  }

  // .gz.msgs.Vector2d image_size = 3;
  if (this->has_image_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_image_size(), output);
  }

  // string image_format = 4;
  if (this->image_format().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_format().data(), static_cast<int>(this->image_format().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.CameraSensor.image_format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->image_format(), output);
  }

  // double near_clip = 5;
  if (this->near_clip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->near_clip(), output);
  }

  // double far_clip = 6;
  if (this->far_clip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->far_clip(), output);
  }

  // bool save_enabled = 7;
  if (this->save_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->save_enabled(), output);
  }

  // string save_path = 8;
  if (this->save_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->save_path().data(), static_cast<int>(this->save_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.CameraSensor.save_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->save_path(), output);
  }

  // .gz.msgs.Distortion distortion = 9;
  if (this->has_distortion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_distortion(), output);
  }

  // .gz.msgs.SensorNoise image_noise = 10;
  if (this->has_image_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_image_noise(), output);
  }

  // .gz.msgs.Double depth_near_clip = 11;
  if (this->has_depth_near_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_depth_near_clip(), output);
  }

  // .gz.msgs.Double depth_far_clip = 12;
  if (this->has_depth_far_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_depth_far_clip(), output);
  }

  // .gz.msgs.CameraSensor.BoundingBoxType bounding_box_type = 13;
  if (this->bounding_box_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->bounding_box_type(), output);
  }

  // .gz.msgs.CameraSensor.SegmentationType segmentation_type = 14;
  if (this->segmentation_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->segmentation_type(), output);
  }

  // .gz.msgs.Lens lens = 15;
  if (this->has_lens()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_lens(), output);
  }

  // bool triggered = 16;
  if (this->triggered() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->triggered(), output);
  }

  // string triggered_topic = 17;
  if (this->triggered_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->triggered_topic().data(), static_cast<int>(this->triggered_topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.CameraSensor.triggered_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->triggered_topic(), output);
  }

  // int32 anti_aliasing = 18;
  if (this->anti_aliasing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->anti_aliasing(), output);
  }

  // uint32 visibility_mask = 19;
  if (this->visibility_mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->visibility_mask(), output);
  }

  // bool is_depth_camera = 20;
  if (this->is_depth_camera() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->is_depth_camera(), output);
  }

  // .gz.msgs.PixelFormatType pixel_format = 21;
  if (this->pixel_format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->pixel_format(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.CameraSensor)
}

::google::protobuf::uint8* CameraSensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.CameraSensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // double horizontal_fov = 2;
  if (this->horizontal_fov() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->horizontal_fov(), target);
  }

  // .gz.msgs.Vector2d image_size = 3;
  if (this->has_image_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_image_size(), deterministic, target);
  }

  // string image_format = 4;
  if (this->image_format().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_format().data(), static_cast<int>(this->image_format().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.CameraSensor.image_format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->image_format(), target);
  }

  // double near_clip = 5;
  if (this->near_clip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->near_clip(), target);
  }

  // double far_clip = 6;
  if (this->far_clip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->far_clip(), target);
  }

  // bool save_enabled = 7;
  if (this->save_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->save_enabled(), target);
  }

  // string save_path = 8;
  if (this->save_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->save_path().data(), static_cast<int>(this->save_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.CameraSensor.save_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->save_path(), target);
  }

  // .gz.msgs.Distortion distortion = 9;
  if (this->has_distortion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_distortion(), deterministic, target);
  }

  // .gz.msgs.SensorNoise image_noise = 10;
  if (this->has_image_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_image_noise(), deterministic, target);
  }

  // .gz.msgs.Double depth_near_clip = 11;
  if (this->has_depth_near_clip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_depth_near_clip(), deterministic, target);
  }

  // .gz.msgs.Double depth_far_clip = 12;
  if (this->has_depth_far_clip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_depth_far_clip(), deterministic, target);
  }

  // .gz.msgs.CameraSensor.BoundingBoxType bounding_box_type = 13;
  if (this->bounding_box_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->bounding_box_type(), target);
  }

  // .gz.msgs.CameraSensor.SegmentationType segmentation_type = 14;
  if (this->segmentation_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->segmentation_type(), target);
  }

  // .gz.msgs.Lens lens = 15;
  if (this->has_lens()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_lens(), deterministic, target);
  }

  // bool triggered = 16;
  if (this->triggered() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->triggered(), target);
  }

  // string triggered_topic = 17;
  if (this->triggered_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->triggered_topic().data(), static_cast<int>(this->triggered_topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.CameraSensor.triggered_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->triggered_topic(), target);
  }

  // int32 anti_aliasing = 18;
  if (this->anti_aliasing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->anti_aliasing(), target);
  }

  // uint32 visibility_mask = 19;
  if (this->visibility_mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->visibility_mask(), target);
  }

  // bool is_depth_camera = 20;
  if (this->is_depth_camera() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->is_depth_camera(), target);
  }

  // .gz.msgs.PixelFormatType pixel_format = 21;
  if (this->pixel_format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->pixel_format(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.CameraSensor)
  return target;
}

size_t CameraSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.CameraSensor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string image_format = 4;
  if (this->image_format().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_format());
  }

  // string save_path = 8;
  if (this->save_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->save_path());
  }

  // string triggered_topic = 17;
  if (this->triggered_topic().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->triggered_topic());
  }

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.Vector2d image_size = 3;
  if (this->has_image_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *image_size_);
  }

  // .gz.msgs.Distortion distortion = 9;
  if (this->has_distortion()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *distortion_);
  }

  // .gz.msgs.SensorNoise image_noise = 10;
  if (this->has_image_noise()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *image_noise_);
  }

  // .gz.msgs.Double depth_near_clip = 11;
  if (this->has_depth_near_clip()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *depth_near_clip_);
  }

  // .gz.msgs.Double depth_far_clip = 12;
  if (this->has_depth_far_clip()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *depth_far_clip_);
  }

  // .gz.msgs.Lens lens = 15;
  if (this->has_lens()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lens_);
  }

  // double horizontal_fov = 2;
  if (this->horizontal_fov() != 0) {
    total_size += 1 + 8;
  }

  // double near_clip = 5;
  if (this->near_clip() != 0) {
    total_size += 1 + 8;
  }

  // double far_clip = 6;
  if (this->far_clip() != 0) {
    total_size += 1 + 8;
  }

  // .gz.msgs.CameraSensor.BoundingBoxType bounding_box_type = 13;
  if (this->bounding_box_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bounding_box_type());
  }

  // .gz.msgs.CameraSensor.SegmentationType segmentation_type = 14;
  if (this->segmentation_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->segmentation_type());
  }

  // bool save_enabled = 7;
  if (this->save_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool triggered = 16;
  if (this->triggered() != 0) {
    total_size += 2 + 1;
  }

  // bool is_depth_camera = 20;
  if (this->is_depth_camera() != 0) {
    total_size += 2 + 1;
  }

  // int32 anti_aliasing = 18;
  if (this->anti_aliasing() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->anti_aliasing());
  }

  // uint32 visibility_mask = 19;
  if (this->visibility_mask() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->visibility_mask());
  }

  // .gz.msgs.PixelFormatType pixel_format = 21;
  if (this->pixel_format() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pixel_format());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraSensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.CameraSensor)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraSensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraSensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.CameraSensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.CameraSensor)
    MergeFrom(*source);
  }
}

void CameraSensor::MergeFrom(const CameraSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.CameraSensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_format().size() > 0) {

    image_format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_format_);
  }
  if (from.save_path().size() > 0) {

    save_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_path_);
  }
  if (from.triggered_topic().size() > 0) {

    triggered_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.triggered_topic_);
  }
  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_image_size()) {
    mutable_image_size()->::gz::msgs::Vector2d::MergeFrom(from.image_size());
  }
  if (from.has_distortion()) {
    mutable_distortion()->::gz::msgs::Distortion::MergeFrom(from.distortion());
  }
  if (from.has_image_noise()) {
    mutable_image_noise()->::gz::msgs::SensorNoise::MergeFrom(from.image_noise());
  }
  if (from.has_depth_near_clip()) {
    mutable_depth_near_clip()->::gz::msgs::Double::MergeFrom(from.depth_near_clip());
  }
  if (from.has_depth_far_clip()) {
    mutable_depth_far_clip()->::gz::msgs::Double::MergeFrom(from.depth_far_clip());
  }
  if (from.has_lens()) {
    mutable_lens()->::gz::msgs::Lens::MergeFrom(from.lens());
  }
  if (from.horizontal_fov() != 0) {
    set_horizontal_fov(from.horizontal_fov());
  }
  if (from.near_clip() != 0) {
    set_near_clip(from.near_clip());
  }
  if (from.far_clip() != 0) {
    set_far_clip(from.far_clip());
  }
  if (from.bounding_box_type() != 0) {
    set_bounding_box_type(from.bounding_box_type());
  }
  if (from.segmentation_type() != 0) {
    set_segmentation_type(from.segmentation_type());
  }
  if (from.save_enabled() != 0) {
    set_save_enabled(from.save_enabled());
  }
  if (from.triggered() != 0) {
    set_triggered(from.triggered());
  }
  if (from.is_depth_camera() != 0) {
    set_is_depth_camera(from.is_depth_camera());
  }
  if (from.anti_aliasing() != 0) {
    set_anti_aliasing(from.anti_aliasing());
  }
  if (from.visibility_mask() != 0) {
    set_visibility_mask(from.visibility_mask());
  }
  if (from.pixel_format() != 0) {
    set_pixel_format(from.pixel_format());
  }
}

void CameraSensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.CameraSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraSensor::CopyFrom(const CameraSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.CameraSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraSensor::IsInitialized() const {
  return true;
}

void CameraSensor::Swap(CameraSensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraSensor::InternalSwap(CameraSensor* other) {
  using std::swap;
  image_format_.Swap(&other->image_format_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  save_path_.Swap(&other->save_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  triggered_topic_.Swap(&other->triggered_topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(image_size_, other->image_size_);
  swap(distortion_, other->distortion_);
  swap(image_noise_, other->image_noise_);
  swap(depth_near_clip_, other->depth_near_clip_);
  swap(depth_far_clip_, other->depth_far_clip_);
  swap(lens_, other->lens_);
  swap(horizontal_fov_, other->horizontal_fov_);
  swap(near_clip_, other->near_clip_);
  swap(far_clip_, other->far_clip_);
  swap(bounding_box_type_, other->bounding_box_type_);
  swap(segmentation_type_, other->segmentation_type_);
  swap(save_enabled_, other->save_enabled_);
  swap(triggered_, other->triggered_);
  swap(is_depth_camera_, other->is_depth_camera_);
  swap(anti_aliasing_, other->anti_aliasing_);
  swap(visibility_mask_, other->visibility_mask_);
  swap(pixel_format_, other->pixel_format_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CameraSensor::GetMetadata() const {
  protobuf_gz_2fmsgs_2fcamerasensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fcamerasensor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::CameraSensor* Arena::CreateMaybeMessage< ::gz::msgs::CameraSensor >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::CameraSensor >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
