// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/light.proto

#include "gz/msgs/light.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.Light", Light)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fcolor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fcolor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Color;
}  // namespace protobuf_gz_2fmsgs_2fcolor_2eproto
namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace protobuf_gz_2fmsgs_2fpose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fpose_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Pose;
}  // namespace protobuf_gz_2fmsgs_2fpose_2eproto
namespace protobuf_gz_2fmsgs_2fvector3d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fvector3d_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Vector3d;
}  // namespace protobuf_gz_2fmsgs_2fvector3d_2eproto
namespace gz {
namespace msgs {
class LightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Light>
      _instance;
} _Light_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2flight_2eproto {
static void InitDefaultsLight() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Light_default_instance_;
    new (ptr) ::gz::msgs::Light();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Light::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<4> scc_info_Light =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsLight}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2fpose_2eproto::scc_info_Pose.base,
      &protobuf_gz_2fmsgs_2fcolor_2eproto::scc_info_Color.base,
      &protobuf_gz_2fmsgs_2fvector3d_2eproto::scc_info_Vector3d.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Light.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, diffuse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, specular_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, attenuation_constant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, attenuation_linear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, attenuation_quadratic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, cast_shadows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, spot_inner_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, spot_outer_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, spot_falloff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, parent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, intensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, is_light_off_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Light, visualize_visual_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::Light)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Light_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/light.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023gz/msgs/light.proto\022\007gz.msgs\032\024gz/msgs/"
      "header.proto\032\022gz/msgs/pose.proto\032\026gz/msg"
      "s/vector3d.proto\032\023gz/msgs/color.proto\"\301\004"
      "\n\005Light\022\037\n\006header\030\001 \001(\0132\017.gz.msgs.Header"
      "\022\014\n\004name\030\002 \001(\t\022&\n\004type\030\003 \001(\0162\030.gz.msgs.L"
      "ight.LightType\022\033\n\004pose\030\004 \001(\0132\r.gz.msgs.P"
      "ose\022\037\n\007diffuse\030\005 \001(\0132\016.gz.msgs.Color\022 \n\010"
      "specular\030\006 \001(\0132\016.gz.msgs.Color\022\034\n\024attenu"
      "ation_constant\030\007 \001(\002\022\032\n\022attenuation_line"
      "ar\030\010 \001(\002\022\035\n\025attenuation_quadratic\030\t \001(\002\022"
      "$\n\tdirection\030\n \001(\0132\021.gz.msgs.Vector3d\022\r\n"
      "\005range\030\013 \001(\002\022\024\n\014cast_shadows\030\014 \001(\010\022\030\n\020sp"
      "ot_inner_angle\030\r \001(\002\022\030\n\020spot_outer_angle"
      "\030\016 \001(\002\022\024\n\014spot_falloff\030\017 \001(\002\022\n\n\002id\030\020 \001(\r"
      "\022\021\n\tparent_id\030\021 \001(\r\022\021\n\tintensity\030\022 \001(\002\022\024"
      "\n\014is_light_off\030\023 \001(\010\022\030\n\020visualize_visual"
      "\030\024 \001(\010\"1\n\tLightType\022\t\n\005POINT\020\000\022\010\n\004SPOT\020\001"
      "\022\017\n\013DIRECTIONAL\020\002B\032\n\013com.gz.msgsB\013LightP"
      "rotosb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 733);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/light.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fpose_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fvector3d_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fcolor_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2flight_2eproto
namespace gz {
namespace msgs {
const ::google::protobuf::EnumDescriptor* Light_LightType_descriptor() {
  protobuf_gz_2fmsgs_2flight_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gz_2fmsgs_2flight_2eproto::file_level_enum_descriptors[0];
}
bool Light_LightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_LightType Light::POINT;
const Light_LightType Light::SPOT;
const Light_LightType Light::DIRECTIONAL;
const Light_LightType Light::LightType_MIN;
const Light_LightType Light::LightType_MAX;
const int Light::LightType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Light::InitAsDefaultInstance() {
  ::gz::msgs::_Light_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_Light_default_instance_._instance.get_mutable()->pose_ = const_cast< ::gz::msgs::Pose*>(
      ::gz::msgs::Pose::internal_default_instance());
  ::gz::msgs::_Light_default_instance_._instance.get_mutable()->diffuse_ = const_cast< ::gz::msgs::Color*>(
      ::gz::msgs::Color::internal_default_instance());
  ::gz::msgs::_Light_default_instance_._instance.get_mutable()->specular_ = const_cast< ::gz::msgs::Color*>(
      ::gz::msgs::Color::internal_default_instance());
  ::gz::msgs::_Light_default_instance_._instance.get_mutable()->direction_ = const_cast< ::gz::msgs::Vector3d*>(
      ::gz::msgs::Vector3d::internal_default_instance());
}
void Light::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void Light::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
void Light::clear_diffuse() {
  if (GetArenaNoVirtual() == NULL && diffuse_ != NULL) {
    delete diffuse_;
  }
  diffuse_ = NULL;
}
void Light::clear_specular() {
  if (GetArenaNoVirtual() == NULL && specular_ != NULL) {
    delete specular_;
  }
  specular_ = NULL;
}
void Light::clear_direction() {
  if (GetArenaNoVirtual() == NULL && direction_ != NULL) {
    delete direction_;
  }
  direction_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Light::kHeaderFieldNumber;
const int Light::kNameFieldNumber;
const int Light::kTypeFieldNumber;
const int Light::kPoseFieldNumber;
const int Light::kDiffuseFieldNumber;
const int Light::kSpecularFieldNumber;
const int Light::kAttenuationConstantFieldNumber;
const int Light::kAttenuationLinearFieldNumber;
const int Light::kAttenuationQuadraticFieldNumber;
const int Light::kDirectionFieldNumber;
const int Light::kRangeFieldNumber;
const int Light::kCastShadowsFieldNumber;
const int Light::kSpotInnerAngleFieldNumber;
const int Light::kSpotOuterAngleFieldNumber;
const int Light::kSpotFalloffFieldNumber;
const int Light::kIdFieldNumber;
const int Light::kParentIdFieldNumber;
const int Light::kIntensityFieldNumber;
const int Light::kIsLightOffFieldNumber;
const int Light::kVisualizeVisualFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Light::Light()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2flight_2eproto::scc_info_Light.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Light)
}
Light::Light(const Light& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::gz::msgs::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_diffuse()) {
    diffuse_ = new ::gz::msgs::Color(*from.diffuse_);
  } else {
    diffuse_ = NULL;
  }
  if (from.has_specular()) {
    specular_ = new ::gz::msgs::Color(*from.specular_);
  } else {
    specular_ = NULL;
  }
  if (from.has_direction()) {
    direction_ = new ::gz::msgs::Vector3d(*from.direction_);
  } else {
    direction_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&intensity_) -
    reinterpret_cast<char*>(&type_)) + sizeof(intensity_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Light)
}

void Light::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intensity_) -
      reinterpret_cast<char*>(&header_)) + sizeof(intensity_));
}

Light::~Light() {
  // @@protoc_insertion_point(destructor:gz.msgs.Light)
  SharedDtor();
}

void Light::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete diffuse_;
  if (this != internal_default_instance()) delete specular_;
  if (this != internal_default_instance()) delete direction_;
}

void Light::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Light::descriptor() {
  ::protobuf_gz_2fmsgs_2flight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2flight_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Light& Light::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2flight_2eproto::scc_info_Light.base);
  return *internal_default_instance();
}


void Light::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Light)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && diffuse_ != NULL) {
    delete diffuse_;
  }
  diffuse_ = NULL;
  if (GetArenaNoVirtual() == NULL && specular_ != NULL) {
    delete specular_;
  }
  specular_ = NULL;
  if (GetArenaNoVirtual() == NULL && direction_ != NULL) {
    delete direction_;
  }
  direction_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intensity_) -
      reinterpret_cast<char*>(&type_)) + sizeof(intensity_));
  _internal_metadata_.Clear();
}

bool Light::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Light)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Light.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Light.LightType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gz::msgs::Light_LightType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Pose pose = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Color diffuse = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_diffuse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Color specular = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_specular()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float attenuation_constant = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attenuation_constant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float attenuation_linear = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attenuation_linear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float attenuation_quadratic = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attenuation_quadratic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Vector3d direction = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float range = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool cast_shadows = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cast_shadows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float spot_inner_angle = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spot_inner_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float spot_outer_angle = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spot_outer_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float spot_falloff = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spot_falloff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 parent_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float intensity = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_light_off = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_light_off_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool visualize_visual = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visualize_visual_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Light)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Light)
  return false;
#undef DO_
}

void Light::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Light)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Light.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .gz.msgs.Light.LightType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // .gz.msgs.Pose pose = 4;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_pose(), output);
  }

  // .gz.msgs.Color diffuse = 5;
  if (this->has_diffuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_diffuse(), output);
  }

  // .gz.msgs.Color specular = 6;
  if (this->has_specular()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_specular(), output);
  }

  // float attenuation_constant = 7;
  if (this->attenuation_constant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->attenuation_constant(), output);
  }

  // float attenuation_linear = 8;
  if (this->attenuation_linear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->attenuation_linear(), output);
  }

  // float attenuation_quadratic = 9;
  if (this->attenuation_quadratic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->attenuation_quadratic(), output);
  }

  // .gz.msgs.Vector3d direction = 10;
  if (this->has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_direction(), output);
  }

  // float range = 11;
  if (this->range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->range(), output);
  }

  // bool cast_shadows = 12;
  if (this->cast_shadows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->cast_shadows(), output);
  }

  // float spot_inner_angle = 13;
  if (this->spot_inner_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->spot_inner_angle(), output);
  }

  // float spot_outer_angle = 14;
  if (this->spot_outer_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->spot_outer_angle(), output);
  }

  // float spot_falloff = 15;
  if (this->spot_falloff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->spot_falloff(), output);
  }

  // uint32 id = 16;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->id(), output);
  }

  // uint32 parent_id = 17;
  if (this->parent_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->parent_id(), output);
  }

  // float intensity = 18;
  if (this->intensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->intensity(), output);
  }

  // bool is_light_off = 19;
  if (this->is_light_off() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_light_off(), output);
  }

  // bool visualize_visual = 20;
  if (this->visualize_visual() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->visualize_visual(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Light)
}

::google::protobuf::uint8* Light::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Light)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Light.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .gz.msgs.Light.LightType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // .gz.msgs.Pose pose = 4;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_pose(), deterministic, target);
  }

  // .gz.msgs.Color diffuse = 5;
  if (this->has_diffuse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_diffuse(), deterministic, target);
  }

  // .gz.msgs.Color specular = 6;
  if (this->has_specular()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_specular(), deterministic, target);
  }

  // float attenuation_constant = 7;
  if (this->attenuation_constant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->attenuation_constant(), target);
  }

  // float attenuation_linear = 8;
  if (this->attenuation_linear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->attenuation_linear(), target);
  }

  // float attenuation_quadratic = 9;
  if (this->attenuation_quadratic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->attenuation_quadratic(), target);
  }

  // .gz.msgs.Vector3d direction = 10;
  if (this->has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_direction(), deterministic, target);
  }

  // float range = 11;
  if (this->range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->range(), target);
  }

  // bool cast_shadows = 12;
  if (this->cast_shadows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->cast_shadows(), target);
  }

  // float spot_inner_angle = 13;
  if (this->spot_inner_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->spot_inner_angle(), target);
  }

  // float spot_outer_angle = 14;
  if (this->spot_outer_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->spot_outer_angle(), target);
  }

  // float spot_falloff = 15;
  if (this->spot_falloff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->spot_falloff(), target);
  }

  // uint32 id = 16;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->id(), target);
  }

  // uint32 parent_id = 17;
  if (this->parent_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->parent_id(), target);
  }

  // float intensity = 18;
  if (this->intensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->intensity(), target);
  }

  // bool is_light_off = 19;
  if (this->is_light_off() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_light_off(), target);
  }

  // bool visualize_visual = 20;
  if (this->visualize_visual() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->visualize_visual(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Light)
  return target;
}

size_t Light::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Light)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.Pose pose = 4;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .gz.msgs.Color diffuse = 5;
  if (this->has_diffuse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *diffuse_);
  }

  // .gz.msgs.Color specular = 6;
  if (this->has_specular()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *specular_);
  }

  // .gz.msgs.Vector3d direction = 10;
  if (this->has_direction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *direction_);
  }

  // .gz.msgs.Light.LightType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // float attenuation_constant = 7;
  if (this->attenuation_constant() != 0) {
    total_size += 1 + 4;
  }

  // float attenuation_linear = 8;
  if (this->attenuation_linear() != 0) {
    total_size += 1 + 4;
  }

  // float attenuation_quadratic = 9;
  if (this->attenuation_quadratic() != 0) {
    total_size += 1 + 4;
  }

  // float range = 11;
  if (this->range() != 0) {
    total_size += 1 + 4;
  }

  // float spot_inner_angle = 13;
  if (this->spot_inner_angle() != 0) {
    total_size += 1 + 4;
  }

  // float spot_outer_angle = 14;
  if (this->spot_outer_angle() != 0) {
    total_size += 1 + 4;
  }

  // float spot_falloff = 15;
  if (this->spot_falloff() != 0) {
    total_size += 1 + 4;
  }

  // uint32 id = 16;
  if (this->id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 parent_id = 17;
  if (this->parent_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->parent_id());
  }

  // bool cast_shadows = 12;
  if (this->cast_shadows() != 0) {
    total_size += 1 + 1;
  }

  // bool is_light_off = 19;
  if (this->is_light_off() != 0) {
    total_size += 2 + 1;
  }

  // bool visualize_visual = 20;
  if (this->visualize_visual() != 0) {
    total_size += 2 + 1;
  }

  // float intensity = 18;
  if (this->intensity() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Light::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Light)
  GOOGLE_DCHECK_NE(&from, this);
  const Light* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Light>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Light)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Light)
    MergeFrom(*source);
  }
}

void Light::MergeFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Light)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_pose()) {
    mutable_pose()->::gz::msgs::Pose::MergeFrom(from.pose());
  }
  if (from.has_diffuse()) {
    mutable_diffuse()->::gz::msgs::Color::MergeFrom(from.diffuse());
  }
  if (from.has_specular()) {
    mutable_specular()->::gz::msgs::Color::MergeFrom(from.specular());
  }
  if (from.has_direction()) {
    mutable_direction()->::gz::msgs::Vector3d::MergeFrom(from.direction());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.attenuation_constant() != 0) {
    set_attenuation_constant(from.attenuation_constant());
  }
  if (from.attenuation_linear() != 0) {
    set_attenuation_linear(from.attenuation_linear());
  }
  if (from.attenuation_quadratic() != 0) {
    set_attenuation_quadratic(from.attenuation_quadratic());
  }
  if (from.range() != 0) {
    set_range(from.range());
  }
  if (from.spot_inner_angle() != 0) {
    set_spot_inner_angle(from.spot_inner_angle());
  }
  if (from.spot_outer_angle() != 0) {
    set_spot_outer_angle(from.spot_outer_angle());
  }
  if (from.spot_falloff() != 0) {
    set_spot_falloff(from.spot_falloff());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.parent_id() != 0) {
    set_parent_id(from.parent_id());
  }
  if (from.cast_shadows() != 0) {
    set_cast_shadows(from.cast_shadows());
  }
  if (from.is_light_off() != 0) {
    set_is_light_off(from.is_light_off());
  }
  if (from.visualize_visual() != 0) {
    set_visualize_visual(from.visualize_visual());
  }
  if (from.intensity() != 0) {
    set_intensity(from.intensity());
  }
}

void Light::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Light::CopyFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Light::IsInitialized() const {
  return true;
}

void Light::Swap(Light* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Light::InternalSwap(Light* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(pose_, other->pose_);
  swap(diffuse_, other->diffuse_);
  swap(specular_, other->specular_);
  swap(direction_, other->direction_);
  swap(type_, other->type_);
  swap(attenuation_constant_, other->attenuation_constant_);
  swap(attenuation_linear_, other->attenuation_linear_);
  swap(attenuation_quadratic_, other->attenuation_quadratic_);
  swap(range_, other->range_);
  swap(spot_inner_angle_, other->spot_inner_angle_);
  swap(spot_outer_angle_, other->spot_outer_angle_);
  swap(spot_falloff_, other->spot_falloff_);
  swap(id_, other->id_);
  swap(parent_id_, other->parent_id_);
  swap(cast_shadows_, other->cast_shadows_);
  swap(is_light_off_, other->is_light_off_);
  swap(visualize_visual_, other->visualize_visual_);
  swap(intensity_, other->intensity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Light::GetMetadata() const {
  protobuf_gz_2fmsgs_2flight_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2flight_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Light* Arena::CreateMaybeMessage< ::gz::msgs::Light >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Light >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
