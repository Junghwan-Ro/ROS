// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/camera_info.proto

#include "gz/msgs/camera_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.CameraInfo", CameraInfo)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CameraInfo_Distortion;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CameraInfo_Intrinsics;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CameraInfo_Projection;
}  // namespace protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto
namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace gz {
namespace msgs {
class CameraInfo_DistortionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraInfo_Distortion>
      _instance;
} _CameraInfo_Distortion_default_instance_;
class CameraInfo_IntrinsicsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraInfo_Intrinsics>
      _instance;
} _CameraInfo_Intrinsics_default_instance_;
class CameraInfo_ProjectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraInfo_Projection>
      _instance;
} _CameraInfo_Projection_default_instance_;
class CameraInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraInfo>
      _instance;
} _CameraInfo_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto {
static void InitDefaultsCameraInfo_Distortion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_CameraInfo_Distortion_default_instance_;
    new (ptr) ::gz::msgs::CameraInfo_Distortion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::CameraInfo_Distortion::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<0> scc_info_CameraInfo_Distortion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCameraInfo_Distortion}, {}};

static void InitDefaultsCameraInfo_Intrinsics() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_CameraInfo_Intrinsics_default_instance_;
    new (ptr) ::gz::msgs::CameraInfo_Intrinsics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::CameraInfo_Intrinsics::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<0> scc_info_CameraInfo_Intrinsics =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCameraInfo_Intrinsics}, {}};

static void InitDefaultsCameraInfo_Projection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_CameraInfo_Projection_default_instance_;
    new (ptr) ::gz::msgs::CameraInfo_Projection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::CameraInfo_Projection::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<0> scc_info_CameraInfo_Projection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCameraInfo_Projection}, {}};

static void InitDefaultsCameraInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_CameraInfo_default_instance_;
    new (ptr) ::gz::msgs::CameraInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::CameraInfo::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<4> scc_info_CameraInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsCameraInfo}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::scc_info_CameraInfo_Distortion.base,
      &protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::scc_info_CameraInfo_Intrinsics.base,
      &protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::scc_info_CameraInfo_Projection.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CameraInfo_Distortion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CameraInfo_Intrinsics.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CameraInfo_Projection.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CameraInfo.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraInfo_Distortion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraInfo_Distortion, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraInfo_Distortion, k_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraInfo_Intrinsics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraInfo_Intrinsics, k_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraInfo_Projection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraInfo_Projection, p_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraInfo, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraInfo, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraInfo, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraInfo, distortion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraInfo, intrinsics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraInfo, projection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraInfo, rectification_matrix_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::CameraInfo_Distortion)},
  { 7, -1, sizeof(::gz::msgs::CameraInfo_Intrinsics)},
  { 13, -1, sizeof(::gz::msgs::CameraInfo_Projection)},
  { 19, -1, sizeof(::gz::msgs::CameraInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_CameraInfo_Distortion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_CameraInfo_Intrinsics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_CameraInfo_Projection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_CameraInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/camera_info.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031gz/msgs/camera_info.proto\022\007gz.msgs\032\024gz"
      "/msgs/header.proto\"\351\003\n\nCameraInfo\022\037\n\006hea"
      "der\030\001 \001(\0132\017.gz.msgs.Header\022\r\n\005width\030\002 \001("
      "\r\022\016\n\006height\030\003 \001(\r\0222\n\ndistortion\030\004 \001(\0132\036."
      "gz.msgs.CameraInfo.Distortion\0222\n\nintrins"
      "ics\030\005 \001(\0132\036.gz.msgs.CameraInfo.Intrinsic"
      "s\0222\n\nprojection\030\006 \001(\0132\036.gz.msgs.CameraIn"
      "fo.Projection\022 \n\024rectification_matrix\030\007 "
      "\003(\001B\002\020\001\032\252\001\n\nDistortion\022A\n\005model\030\001 \001(\01622."
      "gz.msgs.CameraInfo.Distortion.Distortion"
      "ModelType\022\t\n\001k\030\002 \003(\001\"N\n\023DistortionModelT"
      "ype\022\r\n\tPLUMB_BOB\020\000\022\027\n\023RATIONAL_POLYNOMIA"
      "L\020\001\022\017\n\013EQUIDISTANT\020\002\032\027\n\nIntrinsics\022\t\n\001k\030"
      "\001 \003(\001\032\027\n\nProjection\022\t\n\001p\030\001 \003(\001B\037\n\013com.gz"
      ".msgsB\020CameraInfoProtosb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 591);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/camera_info.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto
namespace gz {
namespace msgs {
const ::google::protobuf::EnumDescriptor* CameraInfo_Distortion_DistortionModelType_descriptor() {
  protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::file_level_enum_descriptors[0];
}
bool CameraInfo_Distortion_DistortionModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CameraInfo_Distortion_DistortionModelType CameraInfo_Distortion::PLUMB_BOB;
const CameraInfo_Distortion_DistortionModelType CameraInfo_Distortion::RATIONAL_POLYNOMIAL;
const CameraInfo_Distortion_DistortionModelType CameraInfo_Distortion::EQUIDISTANT;
const CameraInfo_Distortion_DistortionModelType CameraInfo_Distortion::DistortionModelType_MIN;
const CameraInfo_Distortion_DistortionModelType CameraInfo_Distortion::DistortionModelType_MAX;
const int CameraInfo_Distortion::DistortionModelType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CameraInfo_Distortion::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraInfo_Distortion::kModelFieldNumber;
const int CameraInfo_Distortion::kKFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraInfo_Distortion::CameraInfo_Distortion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::scc_info_CameraInfo_Distortion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.CameraInfo.Distortion)
}
CameraInfo_Distortion::CameraInfo_Distortion(const CameraInfo_Distortion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      k_(from.k_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_ = from.model_;
  // @@protoc_insertion_point(copy_constructor:gz.msgs.CameraInfo.Distortion)
}

void CameraInfo_Distortion::SharedCtor() {
  model_ = 0;
}

CameraInfo_Distortion::~CameraInfo_Distortion() {
  // @@protoc_insertion_point(destructor:gz.msgs.CameraInfo.Distortion)
  SharedDtor();
}

void CameraInfo_Distortion::SharedDtor() {
}

void CameraInfo_Distortion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CameraInfo_Distortion::descriptor() {
  ::protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraInfo_Distortion& CameraInfo_Distortion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::scc_info_CameraInfo_Distortion.base);
  return *internal_default_instance();
}


void CameraInfo_Distortion::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.CameraInfo.Distortion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  k_.Clear();
  model_ = 0;
  _internal_metadata_.Clear();
}

bool CameraInfo_Distortion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.CameraInfo.Distortion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.CameraInfo.Distortion.DistortionModelType model = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_model(static_cast< ::gz::msgs::CameraInfo_Distortion_DistortionModelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double k = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_k())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_k())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.CameraInfo.Distortion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.CameraInfo.Distortion)
  return false;
#undef DO_
}

void CameraInfo_Distortion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.CameraInfo.Distortion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.CameraInfo.Distortion.DistortionModelType model = 1;
  if (this->model() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->model(), output);
  }

  // repeated double k = 2;
  if (this->k_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _k_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->k().data(), this->k_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.CameraInfo.Distortion)
}

::google::protobuf::uint8* CameraInfo_Distortion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.CameraInfo.Distortion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.CameraInfo.Distortion.DistortionModelType model = 1;
  if (this->model() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->model(), target);
  }

  // repeated double k = 2;
  if (this->k_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _k_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->k_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.CameraInfo.Distortion)
  return target;
}

size_t CameraInfo_Distortion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.CameraInfo.Distortion)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double k = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->k_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _k_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .gz.msgs.CameraInfo.Distortion.DistortionModelType model = 1;
  if (this->model() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->model());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraInfo_Distortion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.CameraInfo.Distortion)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraInfo_Distortion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraInfo_Distortion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.CameraInfo.Distortion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.CameraInfo.Distortion)
    MergeFrom(*source);
  }
}

void CameraInfo_Distortion::MergeFrom(const CameraInfo_Distortion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.CameraInfo.Distortion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  k_.MergeFrom(from.k_);
  if (from.model() != 0) {
    set_model(from.model());
  }
}

void CameraInfo_Distortion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.CameraInfo.Distortion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraInfo_Distortion::CopyFrom(const CameraInfo_Distortion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.CameraInfo.Distortion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraInfo_Distortion::IsInitialized() const {
  return true;
}

void CameraInfo_Distortion::Swap(CameraInfo_Distortion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraInfo_Distortion::InternalSwap(CameraInfo_Distortion* other) {
  using std::swap;
  k_.InternalSwap(&other->k_);
  swap(model_, other->model_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CameraInfo_Distortion::GetMetadata() const {
  protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CameraInfo_Intrinsics::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraInfo_Intrinsics::kKFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraInfo_Intrinsics::CameraInfo_Intrinsics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::scc_info_CameraInfo_Intrinsics.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.CameraInfo.Intrinsics)
}
CameraInfo_Intrinsics::CameraInfo_Intrinsics(const CameraInfo_Intrinsics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      k_(from.k_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gz.msgs.CameraInfo.Intrinsics)
}

void CameraInfo_Intrinsics::SharedCtor() {
}

CameraInfo_Intrinsics::~CameraInfo_Intrinsics() {
  // @@protoc_insertion_point(destructor:gz.msgs.CameraInfo.Intrinsics)
  SharedDtor();
}

void CameraInfo_Intrinsics::SharedDtor() {
}

void CameraInfo_Intrinsics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CameraInfo_Intrinsics::descriptor() {
  ::protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraInfo_Intrinsics& CameraInfo_Intrinsics::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::scc_info_CameraInfo_Intrinsics.base);
  return *internal_default_instance();
}


void CameraInfo_Intrinsics::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.CameraInfo.Intrinsics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  k_.Clear();
  _internal_metadata_.Clear();
}

bool CameraInfo_Intrinsics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.CameraInfo.Intrinsics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double k = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_k())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10u, input, this->mutable_k())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.CameraInfo.Intrinsics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.CameraInfo.Intrinsics)
  return false;
#undef DO_
}

void CameraInfo_Intrinsics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.CameraInfo.Intrinsics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double k = 1;
  if (this->k_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _k_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->k().data(), this->k_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.CameraInfo.Intrinsics)
}

::google::protobuf::uint8* CameraInfo_Intrinsics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.CameraInfo.Intrinsics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double k = 1;
  if (this->k_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _k_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->k_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.CameraInfo.Intrinsics)
  return target;
}

size_t CameraInfo_Intrinsics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.CameraInfo.Intrinsics)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double k = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->k_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _k_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraInfo_Intrinsics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.CameraInfo.Intrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraInfo_Intrinsics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraInfo_Intrinsics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.CameraInfo.Intrinsics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.CameraInfo.Intrinsics)
    MergeFrom(*source);
  }
}

void CameraInfo_Intrinsics::MergeFrom(const CameraInfo_Intrinsics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.CameraInfo.Intrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  k_.MergeFrom(from.k_);
}

void CameraInfo_Intrinsics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.CameraInfo.Intrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraInfo_Intrinsics::CopyFrom(const CameraInfo_Intrinsics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.CameraInfo.Intrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraInfo_Intrinsics::IsInitialized() const {
  return true;
}

void CameraInfo_Intrinsics::Swap(CameraInfo_Intrinsics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraInfo_Intrinsics::InternalSwap(CameraInfo_Intrinsics* other) {
  using std::swap;
  k_.InternalSwap(&other->k_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CameraInfo_Intrinsics::GetMetadata() const {
  protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CameraInfo_Projection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraInfo_Projection::kPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraInfo_Projection::CameraInfo_Projection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::scc_info_CameraInfo_Projection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.CameraInfo.Projection)
}
CameraInfo_Projection::CameraInfo_Projection(const CameraInfo_Projection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      p_(from.p_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gz.msgs.CameraInfo.Projection)
}

void CameraInfo_Projection::SharedCtor() {
}

CameraInfo_Projection::~CameraInfo_Projection() {
  // @@protoc_insertion_point(destructor:gz.msgs.CameraInfo.Projection)
  SharedDtor();
}

void CameraInfo_Projection::SharedDtor() {
}

void CameraInfo_Projection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CameraInfo_Projection::descriptor() {
  ::protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraInfo_Projection& CameraInfo_Projection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::scc_info_CameraInfo_Projection.base);
  return *internal_default_instance();
}


void CameraInfo_Projection::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.CameraInfo.Projection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  p_.Clear();
  _internal_metadata_.Clear();
}

bool CameraInfo_Projection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.CameraInfo.Projection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double p = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_p())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10u, input, this->mutable_p())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.CameraInfo.Projection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.CameraInfo.Projection)
  return false;
#undef DO_
}

void CameraInfo_Projection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.CameraInfo.Projection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double p = 1;
  if (this->p_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _p_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->p().data(), this->p_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.CameraInfo.Projection)
}

::google::protobuf::uint8* CameraInfo_Projection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.CameraInfo.Projection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double p = 1;
  if (this->p_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _p_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->p_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.CameraInfo.Projection)
  return target;
}

size_t CameraInfo_Projection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.CameraInfo.Projection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double p = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->p_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _p_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraInfo_Projection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.CameraInfo.Projection)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraInfo_Projection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraInfo_Projection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.CameraInfo.Projection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.CameraInfo.Projection)
    MergeFrom(*source);
  }
}

void CameraInfo_Projection::MergeFrom(const CameraInfo_Projection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.CameraInfo.Projection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  p_.MergeFrom(from.p_);
}

void CameraInfo_Projection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.CameraInfo.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraInfo_Projection::CopyFrom(const CameraInfo_Projection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.CameraInfo.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraInfo_Projection::IsInitialized() const {
  return true;
}

void CameraInfo_Projection::Swap(CameraInfo_Projection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraInfo_Projection::InternalSwap(CameraInfo_Projection* other) {
  using std::swap;
  p_.InternalSwap(&other->p_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CameraInfo_Projection::GetMetadata() const {
  protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CameraInfo::InitAsDefaultInstance() {
  ::gz::msgs::_CameraInfo_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_CameraInfo_default_instance_._instance.get_mutable()->distortion_ = const_cast< ::gz::msgs::CameraInfo_Distortion*>(
      ::gz::msgs::CameraInfo_Distortion::internal_default_instance());
  ::gz::msgs::_CameraInfo_default_instance_._instance.get_mutable()->intrinsics_ = const_cast< ::gz::msgs::CameraInfo_Intrinsics*>(
      ::gz::msgs::CameraInfo_Intrinsics::internal_default_instance());
  ::gz::msgs::_CameraInfo_default_instance_._instance.get_mutable()->projection_ = const_cast< ::gz::msgs::CameraInfo_Projection*>(
      ::gz::msgs::CameraInfo_Projection::internal_default_instance());
}
void CameraInfo::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraInfo::kHeaderFieldNumber;
const int CameraInfo::kWidthFieldNumber;
const int CameraInfo::kHeightFieldNumber;
const int CameraInfo::kDistortionFieldNumber;
const int CameraInfo::kIntrinsicsFieldNumber;
const int CameraInfo::kProjectionFieldNumber;
const int CameraInfo::kRectificationMatrixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraInfo::CameraInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::scc_info_CameraInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.CameraInfo)
}
CameraInfo::CameraInfo(const CameraInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rectification_matrix_(from.rectification_matrix_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_distortion()) {
    distortion_ = new ::gz::msgs::CameraInfo_Distortion(*from.distortion_);
  } else {
    distortion_ = NULL;
  }
  if (from.has_intrinsics()) {
    intrinsics_ = new ::gz::msgs::CameraInfo_Intrinsics(*from.intrinsics_);
  } else {
    intrinsics_ = NULL;
  }
  if (from.has_projection()) {
    projection_ = new ::gz::msgs::CameraInfo_Projection(*from.projection_);
  } else {
    projection_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.CameraInfo)
}

void CameraInfo::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&header_)) + sizeof(height_));
}

CameraInfo::~CameraInfo() {
  // @@protoc_insertion_point(destructor:gz.msgs.CameraInfo)
  SharedDtor();
}

void CameraInfo::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete distortion_;
  if (this != internal_default_instance()) delete intrinsics_;
  if (this != internal_default_instance()) delete projection_;
}

void CameraInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CameraInfo::descriptor() {
  ::protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraInfo& CameraInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::scc_info_CameraInfo.base);
  return *internal_default_instance();
}


void CameraInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.CameraInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rectification_matrix_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && distortion_ != NULL) {
    delete distortion_;
  }
  distortion_ = NULL;
  if (GetArenaNoVirtual() == NULL && intrinsics_ != NULL) {
    delete intrinsics_;
  }
  intrinsics_ = NULL;
  if (GetArenaNoVirtual() == NULL && projection_ != NULL) {
    delete projection_;
  }
  projection_ = NULL;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool CameraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.CameraInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.CameraInfo.Distortion distortion = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_distortion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.CameraInfo.Intrinsics intrinsics = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intrinsics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.CameraInfo.Projection projection = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_projection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double rectification_matrix = 7 [packed = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_rectification_matrix())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 58u, input, this->mutable_rectification_matrix())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.CameraInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.CameraInfo)
  return false;
#undef DO_
}

void CameraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.CameraInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // .gz.msgs.CameraInfo.Distortion distortion = 4;
  if (this->has_distortion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_distortion(), output);
  }

  // .gz.msgs.CameraInfo.Intrinsics intrinsics = 5;
  if (this->has_intrinsics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_intrinsics(), output);
  }

  // .gz.msgs.CameraInfo.Projection projection = 6;
  if (this->has_projection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_projection(), output);
  }

  // repeated double rectification_matrix = 7 [packed = true];
  if (this->rectification_matrix_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _rectification_matrix_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->rectification_matrix().data(), this->rectification_matrix_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.CameraInfo)
}

::google::protobuf::uint8* CameraInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.CameraInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // .gz.msgs.CameraInfo.Distortion distortion = 4;
  if (this->has_distortion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_distortion(), deterministic, target);
  }

  // .gz.msgs.CameraInfo.Intrinsics intrinsics = 5;
  if (this->has_intrinsics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_intrinsics(), deterministic, target);
  }

  // .gz.msgs.CameraInfo.Projection projection = 6;
  if (this->has_projection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_projection(), deterministic, target);
  }

  // repeated double rectification_matrix = 7 [packed = true];
  if (this->rectification_matrix_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _rectification_matrix_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->rectification_matrix_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.CameraInfo)
  return target;
}

size_t CameraInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.CameraInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double rectification_matrix = 7 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->rectification_matrix_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rectification_matrix_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.CameraInfo.Distortion distortion = 4;
  if (this->has_distortion()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *distortion_);
  }

  // .gz.msgs.CameraInfo.Intrinsics intrinsics = 5;
  if (this->has_intrinsics()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *intrinsics_);
  }

  // .gz.msgs.CameraInfo.Projection projection = 6;
  if (this->has_projection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *projection_);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.CameraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.CameraInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.CameraInfo)
    MergeFrom(*source);
  }
}

void CameraInfo::MergeFrom(const CameraInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.CameraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rectification_matrix_.MergeFrom(from.rectification_matrix_);
  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_distortion()) {
    mutable_distortion()->::gz::msgs::CameraInfo_Distortion::MergeFrom(from.distortion());
  }
  if (from.has_intrinsics()) {
    mutable_intrinsics()->::gz::msgs::CameraInfo_Intrinsics::MergeFrom(from.intrinsics());
  }
  if (from.has_projection()) {
    mutable_projection()->::gz::msgs::CameraInfo_Projection::MergeFrom(from.projection());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void CameraInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.CameraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraInfo::CopyFrom(const CameraInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.CameraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraInfo::IsInitialized() const {
  return true;
}

void CameraInfo::Swap(CameraInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraInfo::InternalSwap(CameraInfo* other) {
  using std::swap;
  rectification_matrix_.InternalSwap(&other->rectification_matrix_);
  swap(header_, other->header_);
  swap(distortion_, other->distortion_);
  swap(intrinsics_, other->intrinsics_);
  swap(projection_, other->projection_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CameraInfo::GetMetadata() const {
  protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::CameraInfo_Distortion* Arena::CreateMaybeMessage< ::gz::msgs::CameraInfo_Distortion >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::CameraInfo_Distortion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::CameraInfo_Intrinsics* Arena::CreateMaybeMessage< ::gz::msgs::CameraInfo_Intrinsics >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::CameraInfo_Intrinsics >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::CameraInfo_Projection* Arena::CreateMaybeMessage< ::gz::msgs::CameraInfo_Projection >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::CameraInfo_Projection >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::CameraInfo* Arena::CreateMaybeMessage< ::gz::msgs::CameraInfo >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::CameraInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
