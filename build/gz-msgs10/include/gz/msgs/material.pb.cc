// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/material.proto

#include "gz/msgs/material.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.Material", Material)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fcolor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fcolor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Color;
}  // namespace protobuf_gz_2fmsgs_2fcolor_2eproto
namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace protobuf_gz_2fmsgs_2fmaterial_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fmaterial_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Material_PBR;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fmaterial_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Material_Script;
}  // namespace protobuf_gz_2fmsgs_2fmaterial_2eproto
namespace gz {
namespace msgs {
class Material_ScriptDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Material_Script>
      _instance;
} _Material_Script_default_instance_;
class Material_PBRDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Material_PBR>
      _instance;
} _Material_PBR_default_instance_;
class MaterialDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Material>
      _instance;
} _Material_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fmaterial_2eproto {
static void InitDefaultsMaterial_Script() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Material_Script_default_instance_;
    new (ptr) ::gz::msgs::Material_Script();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Material_Script::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<0> scc_info_Material_Script =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMaterial_Script}, {}};

static void InitDefaultsMaterial_PBR() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Material_PBR_default_instance_;
    new (ptr) ::gz::msgs::Material_PBR();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Material_PBR::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<0> scc_info_Material_PBR =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMaterial_PBR}, {}};

static void InitDefaultsMaterial() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Material_default_instance_;
    new (ptr) ::gz::msgs::Material();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Material::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<4> scc_info_Material =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsMaterial}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2fmaterial_2eproto::scc_info_Material_Script.base,
      &protobuf_gz_2fmsgs_2fcolor_2eproto::scc_info_Color.base,
      &protobuf_gz_2fmsgs_2fmaterial_2eproto::scc_info_Material_PBR.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Material_Script.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Material_PBR.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Material.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material_Script, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material_Script, uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material_Script, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material_PBR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material_PBR, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material_PBR, albedo_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material_PBR, normal_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material_PBR, metalness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material_PBR, metalness_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material_PBR, roughness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material_PBR, roughness_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material_PBR, glossiness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material_PBR, glossiness_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material_PBR, specular_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material_PBR, environment_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material_PBR, ambient_occlusion_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material_PBR, emissive_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material_PBR, light_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material_PBR, light_map_texcoord_set_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material, script_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material, shader_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material, normal_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material, ambient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material, diffuse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material, specular_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material, emissive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material, lighting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material, pbr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material, render_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material, double_sided_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Material, shininess_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::Material_Script)},
  { 7, -1, sizeof(::gz::msgs::Material_PBR)},
  { 27, -1, sizeof(::gz::msgs::Material)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Material_Script_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Material_PBR_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Material_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/material.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026gz/msgs/material.proto\022\007gz.msgs\032\023gz/ms"
      "gs/color.proto\032\024gz/msgs/header.proto\"\310\007\n"
      "\010Material\022\037\n\006header\030\001 \001(\0132\017.gz.msgs.Head"
      "er\022(\n\006script\030\002 \001(\0132\030.gz.msgs.Material.Sc"
      "ript\0221\n\013shader_type\030\003 \001(\0162\034.gz.msgs.Mate"
      "rial.ShaderType\022\022\n\nnormal_map\030\004 \001(\t\022\037\n\007a"
      "mbient\030\005 \001(\0132\016.gz.msgs.Color\022\037\n\007diffuse\030"
      "\006 \001(\0132\016.gz.msgs.Color\022 \n\010specular\030\007 \001(\0132"
      "\016.gz.msgs.Color\022 \n\010emissive\030\010 \001(\0132\016.gz.m"
      "sgs.Color\022\020\n\010lighting\030\t \001(\010\022\"\n\003pbr\030\n \001(\013"
      "2\025.gz.msgs.Material.PBR\022\024\n\014render_order\030"
      "\013 \001(\001\022\024\n\014double_sided\030\014 \001(\010\022\021\n\tshininess"
      "\030\r \001(\001\032#\n\006Script\022\013\n\003uri\030\001 \003(\t\022\014\n\004name\030\002 "
      "\001(\t\032\251\003\n\003PBR\0220\n\004type\030\001 \001(\0162\".gz.msgs.Mate"
      "rial.PBR.WorkflowType\022\022\n\nalbedo_map\030\002 \001("
      "\t\022\022\n\nnormal_map\030\003 \001(\t\022\021\n\tmetalness\030\004 \001(\001"
      "\022\025\n\rmetalness_map\030\005 \001(\t\022\021\n\troughness\030\006 \001"
      "(\001\022\025\n\rroughness_map\030\007 \001(\t\022\022\n\nglossiness\030"
      "\010 \001(\001\022\026\n\016glossiness_map\030\t \001(\t\022\024\n\014specula"
      "r_map\030\n \001(\t\022\027\n\017environment_map\030\013 \001(\t\022\035\n\025"
      "ambient_occlusion_map\030\014 \001(\t\022\024\n\014emissive_"
      "map\030\r \001(\t\022\021\n\tlight_map\030\016 \001(\t\022\036\n\026light_ma"
      "p_texcoord_set\030\017 \001(\r\"1\n\014WorkflowType\022\010\n\004"
      "NONE\020\000\022\t\n\005METAL\020\001\022\014\n\010SPECULAR\020\002\"^\n\nShade"
      "rType\022\n\n\006VERTEX\020\000\022\t\n\005PIXEL\020\001\022\033\n\027NORMAL_M"
      "AP_OBJECT_SPACE\020\002\022\034\n\030NORMAL_MAP_TANGENT_"
      "SPACE\020\003B\035\n\013com.gz.msgsB\016MaterialProtosb\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1086);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/material.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fcolor_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fmaterial_2eproto
namespace gz {
namespace msgs {
const ::google::protobuf::EnumDescriptor* Material_PBR_WorkflowType_descriptor() {
  protobuf_gz_2fmsgs_2fmaterial_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gz_2fmsgs_2fmaterial_2eproto::file_level_enum_descriptors[0];
}
bool Material_PBR_WorkflowType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Material_PBR_WorkflowType Material_PBR::NONE;
const Material_PBR_WorkflowType Material_PBR::METAL;
const Material_PBR_WorkflowType Material_PBR::SPECULAR;
const Material_PBR_WorkflowType Material_PBR::WorkflowType_MIN;
const Material_PBR_WorkflowType Material_PBR::WorkflowType_MAX;
const int Material_PBR::WorkflowType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Material_ShaderType_descriptor() {
  protobuf_gz_2fmsgs_2fmaterial_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gz_2fmsgs_2fmaterial_2eproto::file_level_enum_descriptors[1];
}
bool Material_ShaderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Material_ShaderType Material::VERTEX;
const Material_ShaderType Material::PIXEL;
const Material_ShaderType Material::NORMAL_MAP_OBJECT_SPACE;
const Material_ShaderType Material::NORMAL_MAP_TANGENT_SPACE;
const Material_ShaderType Material::ShaderType_MIN;
const Material_ShaderType Material::ShaderType_MAX;
const int Material::ShaderType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Material_Script::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Material_Script::kUriFieldNumber;
const int Material_Script::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Material_Script::Material_Script()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fmaterial_2eproto::scc_info_Material_Script.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Material.Script)
}
Material_Script::Material_Script(const Material_Script& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      uri_(from.uri_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Material.Script)
}

void Material_Script::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Material_Script::~Material_Script() {
  // @@protoc_insertion_point(destructor:gz.msgs.Material.Script)
  SharedDtor();
}

void Material_Script::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Material_Script::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Material_Script::descriptor() {
  ::protobuf_gz_2fmsgs_2fmaterial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fmaterial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Material_Script& Material_Script::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fmaterial_2eproto::scc_info_Material_Script.base);
  return *internal_default_instance();
}


void Material_Script::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Material.Script)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Material_Script::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Material.Script)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri(this->uri_size() - 1).data(),
            static_cast<int>(this->uri(this->uri_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Material.Script.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Material.Script.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Material.Script)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Material.Script)
  return false;
#undef DO_
}

void Material_Script::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Material.Script)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string uri = 1;
  for (int i = 0, n = this->uri_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri(i).data(), static_cast<int>(this->uri(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.Script.uri");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uri(i), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.Script.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Material.Script)
}

::google::protobuf::uint8* Material_Script::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Material.Script)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string uri = 1;
  for (int i = 0, n = this->uri_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri(i).data(), static_cast<int>(this->uri(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.Script.uri");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->uri(i), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.Script.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Material.Script)
  return target;
}

size_t Material_Script::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Material.Script)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string uri = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->uri_size());
  for (int i = 0, n = this->uri_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->uri(i));
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Material_Script::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Material.Script)
  GOOGLE_DCHECK_NE(&from, this);
  const Material_Script* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Material_Script>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Material.Script)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Material.Script)
    MergeFrom(*source);
  }
}

void Material_Script::MergeFrom(const Material_Script& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Material.Script)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uri_.MergeFrom(from.uri_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Material_Script::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Material.Script)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Material_Script::CopyFrom(const Material_Script& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Material.Script)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material_Script::IsInitialized() const {
  return true;
}

void Material_Script::Swap(Material_Script* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Material_Script::InternalSwap(Material_Script* other) {
  using std::swap;
  uri_.InternalSwap(CastToBase(&other->uri_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Material_Script::GetMetadata() const {
  protobuf_gz_2fmsgs_2fmaterial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fmaterial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Material_PBR::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Material_PBR::kTypeFieldNumber;
const int Material_PBR::kAlbedoMapFieldNumber;
const int Material_PBR::kNormalMapFieldNumber;
const int Material_PBR::kMetalnessFieldNumber;
const int Material_PBR::kMetalnessMapFieldNumber;
const int Material_PBR::kRoughnessFieldNumber;
const int Material_PBR::kRoughnessMapFieldNumber;
const int Material_PBR::kGlossinessFieldNumber;
const int Material_PBR::kGlossinessMapFieldNumber;
const int Material_PBR::kSpecularMapFieldNumber;
const int Material_PBR::kEnvironmentMapFieldNumber;
const int Material_PBR::kAmbientOcclusionMapFieldNumber;
const int Material_PBR::kEmissiveMapFieldNumber;
const int Material_PBR::kLightMapFieldNumber;
const int Material_PBR::kLightMapTexcoordSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Material_PBR::Material_PBR()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fmaterial_2eproto::scc_info_Material_PBR.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Material.PBR)
}
Material_PBR::Material_PBR(const Material_PBR& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  albedo_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.albedo_map().size() > 0) {
    albedo_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albedo_map_);
  }
  normal_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.normal_map().size() > 0) {
    normal_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normal_map_);
  }
  metalness_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metalness_map().size() > 0) {
    metalness_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metalness_map_);
  }
  roughness_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.roughness_map().size() > 0) {
    roughness_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roughness_map_);
  }
  glossiness_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.glossiness_map().size() > 0) {
    glossiness_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.glossiness_map_);
  }
  specular_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.specular_map().size() > 0) {
    specular_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.specular_map_);
  }
  environment_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.environment_map().size() > 0) {
    environment_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.environment_map_);
  }
  ambient_occlusion_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ambient_occlusion_map().size() > 0) {
    ambient_occlusion_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ambient_occlusion_map_);
  }
  emissive_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.emissive_map().size() > 0) {
    emissive_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emissive_map_);
  }
  light_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.light_map().size() > 0) {
    light_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.light_map_);
  }
  ::memcpy(&metalness_, &from.metalness_,
    static_cast<size_t>(reinterpret_cast<char*>(&light_map_texcoord_set_) -
    reinterpret_cast<char*>(&metalness_)) + sizeof(light_map_texcoord_set_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Material.PBR)
}

void Material_PBR::SharedCtor() {
  albedo_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normal_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metalness_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roughness_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  glossiness_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  specular_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  environment_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ambient_occlusion_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  emissive_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  light_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&metalness_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&light_map_texcoord_set_) -
      reinterpret_cast<char*>(&metalness_)) + sizeof(light_map_texcoord_set_));
}

Material_PBR::~Material_PBR() {
  // @@protoc_insertion_point(destructor:gz.msgs.Material.PBR)
  SharedDtor();
}

void Material_PBR::SharedDtor() {
  albedo_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normal_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metalness_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roughness_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  glossiness_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  specular_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  environment_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ambient_occlusion_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  emissive_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  light_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Material_PBR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Material_PBR::descriptor() {
  ::protobuf_gz_2fmsgs_2fmaterial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fmaterial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Material_PBR& Material_PBR::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fmaterial_2eproto::scc_info_Material_PBR.base);
  return *internal_default_instance();
}


void Material_PBR::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Material.PBR)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  albedo_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normal_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metalness_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roughness_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  glossiness_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  specular_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  environment_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ambient_occlusion_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  emissive_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  light_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&metalness_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&light_map_texcoord_set_) -
      reinterpret_cast<char*>(&metalness_)) + sizeof(light_map_texcoord_set_));
  _internal_metadata_.Clear();
}

bool Material_PBR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Material.PBR)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Material.PBR.WorkflowType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gz::msgs::Material_PBR_WorkflowType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string albedo_map = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_albedo_map()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->albedo_map().data(), static_cast<int>(this->albedo_map().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Material.PBR.albedo_map"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string normal_map = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normal_map()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->normal_map().data(), static_cast<int>(this->normal_map().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Material.PBR.normal_map"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double metalness = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &metalness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string metalness_map = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metalness_map()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metalness_map().data(), static_cast<int>(this->metalness_map().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Material.PBR.metalness_map"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double roughness = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roughness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string roughness_map = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roughness_map()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roughness_map().data(), static_cast<int>(this->roughness_map().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Material.PBR.roughness_map"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double glossiness = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &glossiness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string glossiness_map = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_glossiness_map()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->glossiness_map().data(), static_cast<int>(this->glossiness_map().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Material.PBR.glossiness_map"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string specular_map = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_specular_map()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->specular_map().data(), static_cast<int>(this->specular_map().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Material.PBR.specular_map"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string environment_map = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_environment_map()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->environment_map().data(), static_cast<int>(this->environment_map().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Material.PBR.environment_map"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ambient_occlusion_map = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ambient_occlusion_map()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ambient_occlusion_map().data(), static_cast<int>(this->ambient_occlusion_map().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Material.PBR.ambient_occlusion_map"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string emissive_map = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emissive_map()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->emissive_map().data(), static_cast<int>(this->emissive_map().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Material.PBR.emissive_map"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string light_map = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_light_map()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->light_map().data(), static_cast<int>(this->light_map().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Material.PBR.light_map"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 light_map_texcoord_set = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &light_map_texcoord_set_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Material.PBR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Material.PBR)
  return false;
#undef DO_
}

void Material_PBR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Material.PBR)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Material.PBR.WorkflowType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string albedo_map = 2;
  if (this->albedo_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->albedo_map().data(), static_cast<int>(this->albedo_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.PBR.albedo_map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->albedo_map(), output);
  }

  // string normal_map = 3;
  if (this->normal_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->normal_map().data(), static_cast<int>(this->normal_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.PBR.normal_map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->normal_map(), output);
  }

  // double metalness = 4;
  if (this->metalness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->metalness(), output);
  }

  // string metalness_map = 5;
  if (this->metalness_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metalness_map().data(), static_cast<int>(this->metalness_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.PBR.metalness_map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->metalness_map(), output);
  }

  // double roughness = 6;
  if (this->roughness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->roughness(), output);
  }

  // string roughness_map = 7;
  if (this->roughness_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roughness_map().data(), static_cast<int>(this->roughness_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.PBR.roughness_map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->roughness_map(), output);
  }

  // double glossiness = 8;
  if (this->glossiness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->glossiness(), output);
  }

  // string glossiness_map = 9;
  if (this->glossiness_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->glossiness_map().data(), static_cast<int>(this->glossiness_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.PBR.glossiness_map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->glossiness_map(), output);
  }

  // string specular_map = 10;
  if (this->specular_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->specular_map().data(), static_cast<int>(this->specular_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.PBR.specular_map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->specular_map(), output);
  }

  // string environment_map = 11;
  if (this->environment_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->environment_map().data(), static_cast<int>(this->environment_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.PBR.environment_map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->environment_map(), output);
  }

  // string ambient_occlusion_map = 12;
  if (this->ambient_occlusion_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ambient_occlusion_map().data(), static_cast<int>(this->ambient_occlusion_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.PBR.ambient_occlusion_map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->ambient_occlusion_map(), output);
  }

  // string emissive_map = 13;
  if (this->emissive_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->emissive_map().data(), static_cast<int>(this->emissive_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.PBR.emissive_map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->emissive_map(), output);
  }

  // string light_map = 14;
  if (this->light_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->light_map().data(), static_cast<int>(this->light_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.PBR.light_map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->light_map(), output);
  }

  // uint32 light_map_texcoord_set = 15;
  if (this->light_map_texcoord_set() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->light_map_texcoord_set(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Material.PBR)
}

::google::protobuf::uint8* Material_PBR::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Material.PBR)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Material.PBR.WorkflowType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string albedo_map = 2;
  if (this->albedo_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->albedo_map().data(), static_cast<int>(this->albedo_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.PBR.albedo_map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->albedo_map(), target);
  }

  // string normal_map = 3;
  if (this->normal_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->normal_map().data(), static_cast<int>(this->normal_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.PBR.normal_map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->normal_map(), target);
  }

  // double metalness = 4;
  if (this->metalness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->metalness(), target);
  }

  // string metalness_map = 5;
  if (this->metalness_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metalness_map().data(), static_cast<int>(this->metalness_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.PBR.metalness_map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->metalness_map(), target);
  }

  // double roughness = 6;
  if (this->roughness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->roughness(), target);
  }

  // string roughness_map = 7;
  if (this->roughness_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roughness_map().data(), static_cast<int>(this->roughness_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.PBR.roughness_map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->roughness_map(), target);
  }

  // double glossiness = 8;
  if (this->glossiness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->glossiness(), target);
  }

  // string glossiness_map = 9;
  if (this->glossiness_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->glossiness_map().data(), static_cast<int>(this->glossiness_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.PBR.glossiness_map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->glossiness_map(), target);
  }

  // string specular_map = 10;
  if (this->specular_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->specular_map().data(), static_cast<int>(this->specular_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.PBR.specular_map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->specular_map(), target);
  }

  // string environment_map = 11;
  if (this->environment_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->environment_map().data(), static_cast<int>(this->environment_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.PBR.environment_map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->environment_map(), target);
  }

  // string ambient_occlusion_map = 12;
  if (this->ambient_occlusion_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ambient_occlusion_map().data(), static_cast<int>(this->ambient_occlusion_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.PBR.ambient_occlusion_map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->ambient_occlusion_map(), target);
  }

  // string emissive_map = 13;
  if (this->emissive_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->emissive_map().data(), static_cast<int>(this->emissive_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.PBR.emissive_map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->emissive_map(), target);
  }

  // string light_map = 14;
  if (this->light_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->light_map().data(), static_cast<int>(this->light_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.PBR.light_map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->light_map(), target);
  }

  // uint32 light_map_texcoord_set = 15;
  if (this->light_map_texcoord_set() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->light_map_texcoord_set(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Material.PBR)
  return target;
}

size_t Material_PBR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Material.PBR)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string albedo_map = 2;
  if (this->albedo_map().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->albedo_map());
  }

  // string normal_map = 3;
  if (this->normal_map().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->normal_map());
  }

  // string metalness_map = 5;
  if (this->metalness_map().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metalness_map());
  }

  // string roughness_map = 7;
  if (this->roughness_map().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roughness_map());
  }

  // string glossiness_map = 9;
  if (this->glossiness_map().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->glossiness_map());
  }

  // string specular_map = 10;
  if (this->specular_map().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->specular_map());
  }

  // string environment_map = 11;
  if (this->environment_map().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->environment_map());
  }

  // string ambient_occlusion_map = 12;
  if (this->ambient_occlusion_map().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ambient_occlusion_map());
  }

  // string emissive_map = 13;
  if (this->emissive_map().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->emissive_map());
  }

  // string light_map = 14;
  if (this->light_map().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->light_map());
  }

  // double metalness = 4;
  if (this->metalness() != 0) {
    total_size += 1 + 8;
  }

  // double roughness = 6;
  if (this->roughness() != 0) {
    total_size += 1 + 8;
  }

  // double glossiness = 8;
  if (this->glossiness() != 0) {
    total_size += 1 + 8;
  }

  // .gz.msgs.Material.PBR.WorkflowType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 light_map_texcoord_set = 15;
  if (this->light_map_texcoord_set() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->light_map_texcoord_set());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Material_PBR::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Material.PBR)
  GOOGLE_DCHECK_NE(&from, this);
  const Material_PBR* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Material_PBR>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Material.PBR)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Material.PBR)
    MergeFrom(*source);
  }
}

void Material_PBR::MergeFrom(const Material_PBR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Material.PBR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.albedo_map().size() > 0) {

    albedo_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albedo_map_);
  }
  if (from.normal_map().size() > 0) {

    normal_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normal_map_);
  }
  if (from.metalness_map().size() > 0) {

    metalness_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metalness_map_);
  }
  if (from.roughness_map().size() > 0) {

    roughness_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roughness_map_);
  }
  if (from.glossiness_map().size() > 0) {

    glossiness_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.glossiness_map_);
  }
  if (from.specular_map().size() > 0) {

    specular_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.specular_map_);
  }
  if (from.environment_map().size() > 0) {

    environment_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.environment_map_);
  }
  if (from.ambient_occlusion_map().size() > 0) {

    ambient_occlusion_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ambient_occlusion_map_);
  }
  if (from.emissive_map().size() > 0) {

    emissive_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emissive_map_);
  }
  if (from.light_map().size() > 0) {

    light_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.light_map_);
  }
  if (from.metalness() != 0) {
    set_metalness(from.metalness());
  }
  if (from.roughness() != 0) {
    set_roughness(from.roughness());
  }
  if (from.glossiness() != 0) {
    set_glossiness(from.glossiness());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.light_map_texcoord_set() != 0) {
    set_light_map_texcoord_set(from.light_map_texcoord_set());
  }
}

void Material_PBR::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Material.PBR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Material_PBR::CopyFrom(const Material_PBR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Material.PBR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material_PBR::IsInitialized() const {
  return true;
}

void Material_PBR::Swap(Material_PBR* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Material_PBR::InternalSwap(Material_PBR* other) {
  using std::swap;
  albedo_map_.Swap(&other->albedo_map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  normal_map_.Swap(&other->normal_map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  metalness_map_.Swap(&other->metalness_map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  roughness_map_.Swap(&other->roughness_map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  glossiness_map_.Swap(&other->glossiness_map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  specular_map_.Swap(&other->specular_map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  environment_map_.Swap(&other->environment_map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ambient_occlusion_map_.Swap(&other->ambient_occlusion_map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  emissive_map_.Swap(&other->emissive_map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  light_map_.Swap(&other->light_map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(metalness_, other->metalness_);
  swap(roughness_, other->roughness_);
  swap(glossiness_, other->glossiness_);
  swap(type_, other->type_);
  swap(light_map_texcoord_set_, other->light_map_texcoord_set_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Material_PBR::GetMetadata() const {
  protobuf_gz_2fmsgs_2fmaterial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fmaterial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Material::InitAsDefaultInstance() {
  ::gz::msgs::_Material_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_Material_default_instance_._instance.get_mutable()->script_ = const_cast< ::gz::msgs::Material_Script*>(
      ::gz::msgs::Material_Script::internal_default_instance());
  ::gz::msgs::_Material_default_instance_._instance.get_mutable()->ambient_ = const_cast< ::gz::msgs::Color*>(
      ::gz::msgs::Color::internal_default_instance());
  ::gz::msgs::_Material_default_instance_._instance.get_mutable()->diffuse_ = const_cast< ::gz::msgs::Color*>(
      ::gz::msgs::Color::internal_default_instance());
  ::gz::msgs::_Material_default_instance_._instance.get_mutable()->specular_ = const_cast< ::gz::msgs::Color*>(
      ::gz::msgs::Color::internal_default_instance());
  ::gz::msgs::_Material_default_instance_._instance.get_mutable()->emissive_ = const_cast< ::gz::msgs::Color*>(
      ::gz::msgs::Color::internal_default_instance());
  ::gz::msgs::_Material_default_instance_._instance.get_mutable()->pbr_ = const_cast< ::gz::msgs::Material_PBR*>(
      ::gz::msgs::Material_PBR::internal_default_instance());
}
void Material::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void Material::clear_ambient() {
  if (GetArenaNoVirtual() == NULL && ambient_ != NULL) {
    delete ambient_;
  }
  ambient_ = NULL;
}
void Material::clear_diffuse() {
  if (GetArenaNoVirtual() == NULL && diffuse_ != NULL) {
    delete diffuse_;
  }
  diffuse_ = NULL;
}
void Material::clear_specular() {
  if (GetArenaNoVirtual() == NULL && specular_ != NULL) {
    delete specular_;
  }
  specular_ = NULL;
}
void Material::clear_emissive() {
  if (GetArenaNoVirtual() == NULL && emissive_ != NULL) {
    delete emissive_;
  }
  emissive_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Material::kHeaderFieldNumber;
const int Material::kScriptFieldNumber;
const int Material::kShaderTypeFieldNumber;
const int Material::kNormalMapFieldNumber;
const int Material::kAmbientFieldNumber;
const int Material::kDiffuseFieldNumber;
const int Material::kSpecularFieldNumber;
const int Material::kEmissiveFieldNumber;
const int Material::kLightingFieldNumber;
const int Material::kPbrFieldNumber;
const int Material::kRenderOrderFieldNumber;
const int Material::kDoubleSidedFieldNumber;
const int Material::kShininessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Material::Material()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fmaterial_2eproto::scc_info_Material.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Material)
}
Material::Material(const Material& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  normal_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.normal_map().size() > 0) {
    normal_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normal_map_);
  }
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_script()) {
    script_ = new ::gz::msgs::Material_Script(*from.script_);
  } else {
    script_ = NULL;
  }
  if (from.has_ambient()) {
    ambient_ = new ::gz::msgs::Color(*from.ambient_);
  } else {
    ambient_ = NULL;
  }
  if (from.has_diffuse()) {
    diffuse_ = new ::gz::msgs::Color(*from.diffuse_);
  } else {
    diffuse_ = NULL;
  }
  if (from.has_specular()) {
    specular_ = new ::gz::msgs::Color(*from.specular_);
  } else {
    specular_ = NULL;
  }
  if (from.has_emissive()) {
    emissive_ = new ::gz::msgs::Color(*from.emissive_);
  } else {
    emissive_ = NULL;
  }
  if (from.has_pbr()) {
    pbr_ = new ::gz::msgs::Material_PBR(*from.pbr_);
  } else {
    pbr_ = NULL;
  }
  ::memcpy(&shader_type_, &from.shader_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&shininess_) -
    reinterpret_cast<char*>(&shader_type_)) + sizeof(shininess_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Material)
}

void Material::SharedCtor() {
  normal_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shininess_) -
      reinterpret_cast<char*>(&header_)) + sizeof(shininess_));
}

Material::~Material() {
  // @@protoc_insertion_point(destructor:gz.msgs.Material)
  SharedDtor();
}

void Material::SharedDtor() {
  normal_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete script_;
  if (this != internal_default_instance()) delete ambient_;
  if (this != internal_default_instance()) delete diffuse_;
  if (this != internal_default_instance()) delete specular_;
  if (this != internal_default_instance()) delete emissive_;
  if (this != internal_default_instance()) delete pbr_;
}

void Material::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Material::descriptor() {
  ::protobuf_gz_2fmsgs_2fmaterial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fmaterial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Material& Material::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fmaterial_2eproto::scc_info_Material.base);
  return *internal_default_instance();
}


void Material::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Material)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  normal_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && script_ != NULL) {
    delete script_;
  }
  script_ = NULL;
  if (GetArenaNoVirtual() == NULL && ambient_ != NULL) {
    delete ambient_;
  }
  ambient_ = NULL;
  if (GetArenaNoVirtual() == NULL && diffuse_ != NULL) {
    delete diffuse_;
  }
  diffuse_ = NULL;
  if (GetArenaNoVirtual() == NULL && specular_ != NULL) {
    delete specular_;
  }
  specular_ = NULL;
  if (GetArenaNoVirtual() == NULL && emissive_ != NULL) {
    delete emissive_;
  }
  emissive_ = NULL;
  if (GetArenaNoVirtual() == NULL && pbr_ != NULL) {
    delete pbr_;
  }
  pbr_ = NULL;
  ::memset(&shader_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shininess_) -
      reinterpret_cast<char*>(&shader_type_)) + sizeof(shininess_));
  _internal_metadata_.Clear();
}

bool Material::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Material)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Material.Script script = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_script()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Material.ShaderType shader_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_shader_type(static_cast< ::gz::msgs::Material_ShaderType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string normal_map = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normal_map()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->normal_map().data(), static_cast<int>(this->normal_map().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Material.normal_map"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Color ambient = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ambient()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Color diffuse = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_diffuse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Color specular = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_specular()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Color emissive = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_emissive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool lighting = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lighting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Material.PBR pbr = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pbr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double render_order = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &render_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool double_sided = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &double_sided_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double shininess = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shininess_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Material)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Material)
  return false;
#undef DO_
}

void Material::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Material)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .gz.msgs.Material.Script script = 2;
  if (this->has_script()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_script(), output);
  }

  // .gz.msgs.Material.ShaderType shader_type = 3;
  if (this->shader_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->shader_type(), output);
  }

  // string normal_map = 4;
  if (this->normal_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->normal_map().data(), static_cast<int>(this->normal_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.normal_map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->normal_map(), output);
  }

  // .gz.msgs.Color ambient = 5;
  if (this->has_ambient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_ambient(), output);
  }

  // .gz.msgs.Color diffuse = 6;
  if (this->has_diffuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_diffuse(), output);
  }

  // .gz.msgs.Color specular = 7;
  if (this->has_specular()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_specular(), output);
  }

  // .gz.msgs.Color emissive = 8;
  if (this->has_emissive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_emissive(), output);
  }

  // bool lighting = 9;
  if (this->lighting() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->lighting(), output);
  }

  // .gz.msgs.Material.PBR pbr = 10;
  if (this->has_pbr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_pbr(), output);
  }

  // double render_order = 11;
  if (this->render_order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->render_order(), output);
  }

  // bool double_sided = 12;
  if (this->double_sided() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->double_sided(), output);
  }

  // double shininess = 13;
  if (this->shininess() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->shininess(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Material)
}

::google::protobuf::uint8* Material::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Material)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .gz.msgs.Material.Script script = 2;
  if (this->has_script()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_script(), deterministic, target);
  }

  // .gz.msgs.Material.ShaderType shader_type = 3;
  if (this->shader_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->shader_type(), target);
  }

  // string normal_map = 4;
  if (this->normal_map().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->normal_map().data(), static_cast<int>(this->normal_map().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Material.normal_map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->normal_map(), target);
  }

  // .gz.msgs.Color ambient = 5;
  if (this->has_ambient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_ambient(), deterministic, target);
  }

  // .gz.msgs.Color diffuse = 6;
  if (this->has_diffuse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_diffuse(), deterministic, target);
  }

  // .gz.msgs.Color specular = 7;
  if (this->has_specular()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_specular(), deterministic, target);
  }

  // .gz.msgs.Color emissive = 8;
  if (this->has_emissive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_emissive(), deterministic, target);
  }

  // bool lighting = 9;
  if (this->lighting() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->lighting(), target);
  }

  // .gz.msgs.Material.PBR pbr = 10;
  if (this->has_pbr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_pbr(), deterministic, target);
  }

  // double render_order = 11;
  if (this->render_order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->render_order(), target);
  }

  // bool double_sided = 12;
  if (this->double_sided() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->double_sided(), target);
  }

  // double shininess = 13;
  if (this->shininess() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->shininess(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Material)
  return target;
}

size_t Material::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Material)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string normal_map = 4;
  if (this->normal_map().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->normal_map());
  }

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.Material.Script script = 2;
  if (this->has_script()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *script_);
  }

  // .gz.msgs.Color ambient = 5;
  if (this->has_ambient()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ambient_);
  }

  // .gz.msgs.Color diffuse = 6;
  if (this->has_diffuse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *diffuse_);
  }

  // .gz.msgs.Color specular = 7;
  if (this->has_specular()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *specular_);
  }

  // .gz.msgs.Color emissive = 8;
  if (this->has_emissive()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *emissive_);
  }

  // .gz.msgs.Material.PBR pbr = 10;
  if (this->has_pbr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pbr_);
  }

  // .gz.msgs.Material.ShaderType shader_type = 3;
  if (this->shader_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->shader_type());
  }

  // bool lighting = 9;
  if (this->lighting() != 0) {
    total_size += 1 + 1;
  }

  // bool double_sided = 12;
  if (this->double_sided() != 0) {
    total_size += 1 + 1;
  }

  // double render_order = 11;
  if (this->render_order() != 0) {
    total_size += 1 + 8;
  }

  // double shininess = 13;
  if (this->shininess() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Material::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Material)
  GOOGLE_DCHECK_NE(&from, this);
  const Material* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Material>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Material)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Material)
    MergeFrom(*source);
  }
}

void Material::MergeFrom(const Material& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Material)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.normal_map().size() > 0) {

    normal_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normal_map_);
  }
  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_script()) {
    mutable_script()->::gz::msgs::Material_Script::MergeFrom(from.script());
  }
  if (from.has_ambient()) {
    mutable_ambient()->::gz::msgs::Color::MergeFrom(from.ambient());
  }
  if (from.has_diffuse()) {
    mutable_diffuse()->::gz::msgs::Color::MergeFrom(from.diffuse());
  }
  if (from.has_specular()) {
    mutable_specular()->::gz::msgs::Color::MergeFrom(from.specular());
  }
  if (from.has_emissive()) {
    mutable_emissive()->::gz::msgs::Color::MergeFrom(from.emissive());
  }
  if (from.has_pbr()) {
    mutable_pbr()->::gz::msgs::Material_PBR::MergeFrom(from.pbr());
  }
  if (from.shader_type() != 0) {
    set_shader_type(from.shader_type());
  }
  if (from.lighting() != 0) {
    set_lighting(from.lighting());
  }
  if (from.double_sided() != 0) {
    set_double_sided(from.double_sided());
  }
  if (from.render_order() != 0) {
    set_render_order(from.render_order());
  }
  if (from.shininess() != 0) {
    set_shininess(from.shininess());
  }
}

void Material::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Material::CopyFrom(const Material& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material::IsInitialized() const {
  return true;
}

void Material::Swap(Material* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Material::InternalSwap(Material* other) {
  using std::swap;
  normal_map_.Swap(&other->normal_map_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(script_, other->script_);
  swap(ambient_, other->ambient_);
  swap(diffuse_, other->diffuse_);
  swap(specular_, other->specular_);
  swap(emissive_, other->emissive_);
  swap(pbr_, other->pbr_);
  swap(shader_type_, other->shader_type_);
  swap(lighting_, other->lighting_);
  swap(double_sided_, other->double_sided_);
  swap(render_order_, other->render_order_);
  swap(shininess_, other->shininess_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Material::GetMetadata() const {
  protobuf_gz_2fmsgs_2fmaterial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fmaterial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Material_Script* Arena::CreateMaybeMessage< ::gz::msgs::Material_Script >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Material_Script >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Material_PBR* Arena::CreateMaybeMessage< ::gz::msgs::Material_PBR >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Material_PBR >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Material* Arena::CreateMaybeMessage< ::gz::msgs::Material >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Material >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
