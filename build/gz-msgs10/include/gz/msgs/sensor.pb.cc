// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/sensor.proto

#include "gz/msgs/sensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.Sensor", Sensor)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fair_5fpressure_5fsensor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fair_5fpressure_5fsensor_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AirPressureSensor;
}  // namespace protobuf_gz_2fmsgs_2fair_5fpressure_5fsensor_2eproto
namespace protobuf_gz_2fmsgs_2faltimeter_5fsensor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2faltimeter_5fsensor_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AltimeterSensor;
}  // namespace protobuf_gz_2fmsgs_2faltimeter_5fsensor_2eproto
namespace protobuf_gz_2fmsgs_2fcamerasensor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fcamerasensor_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_CameraSensor;
}  // namespace protobuf_gz_2fmsgs_2fcamerasensor_2eproto
namespace protobuf_gz_2fmsgs_2fcontactsensor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fcontactsensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ContactSensor;
}  // namespace protobuf_gz_2fmsgs_2fcontactsensor_2eproto
namespace protobuf_gz_2fmsgs_2fgps_5fsensor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fgps_5fsensor_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GPSSensor;
}  // namespace protobuf_gz_2fmsgs_2fgps_5fsensor_2eproto
namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_IMUSensor;
}  // namespace protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto
namespace protobuf_gz_2fmsgs_2flidar_5fsensor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2flidar_5fsensor_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LidarSensor;
}  // namespace protobuf_gz_2fmsgs_2flidar_5fsensor_2eproto
namespace protobuf_gz_2fmsgs_2flogical_5fcamera_5fsensor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2flogical_5fcamera_5fsensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LogicalCameraSensor;
}  // namespace protobuf_gz_2fmsgs_2flogical_5fcamera_5fsensor_2eproto
namespace protobuf_gz_2fmsgs_2fmagnetometer_5fsensor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fmagnetometer_5fsensor_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MagnetometerSensor;
}  // namespace protobuf_gz_2fmsgs_2fmagnetometer_5fsensor_2eproto
namespace protobuf_gz_2fmsgs_2fpose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fpose_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Pose;
}  // namespace protobuf_gz_2fmsgs_2fpose_2eproto
namespace gz {
namespace msgs {
class SensorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sensor>
      _instance;
} _Sensor_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fsensor_2eproto {
static void InitDefaultsSensor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Sensor_default_instance_;
    new (ptr) ::gz::msgs::Sensor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Sensor::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<11> scc_info_Sensor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsSensor}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2fpose_2eproto::scc_info_Pose.base,
      &protobuf_gz_2fmsgs_2fcamerasensor_2eproto::scc_info_CameraSensor.base,
      &protobuf_gz_2fmsgs_2fcontactsensor_2eproto::scc_info_ContactSensor.base,
      &protobuf_gz_2fmsgs_2flogical_5fcamera_5fsensor_2eproto::scc_info_LogicalCameraSensor.base,
      &protobuf_gz_2fmsgs_2fgps_5fsensor_2eproto::scc_info_GPSSensor.base,
      &protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::scc_info_IMUSensor.base,
      &protobuf_gz_2fmsgs_2fmagnetometer_5fsensor_2eproto::scc_info_MagnetometerSensor.base,
      &protobuf_gz_2fmsgs_2faltimeter_5fsensor_2eproto::scc_info_AltimeterSensor.base,
      &protobuf_gz_2fmsgs_2fair_5fpressure_5fsensor_2eproto::scc_info_AirPressureSensor.base,
      &protobuf_gz_2fmsgs_2flidar_5fsensor_2eproto::scc_info_LidarSensor.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Sensor.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, parent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, parent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, always_on_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, update_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, camera_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, contact_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, visualize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, logical_camera_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, gps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, imu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, magnetometer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, altimeter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, air_pressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sensor, lidar_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::Sensor)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Sensor_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/sensor.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024gz/msgs/sensor.proto\022\007gz.msgs\032\036gz/msgs"
      "/altimeter_sensor.proto\032\032gz/msgs/cameras"
      "ensor.proto\032\033gz/msgs/contactsensor.proto"
      "\032!gz/msgs/air_pressure_sensor.proto\032\030gz/"
      "msgs/gps_sensor.proto\032\024gz/msgs/header.pr"
      "oto\032\030gz/msgs/imu_sensor.proto\032\032gz/msgs/l"
      "idar_sensor.proto\032#gz/msgs/logical_camer"
      "a_sensor.proto\032!gz/msgs/magnetometer_sen"
      "sor.proto\032\022gz/msgs/pose.proto\"\332\004\n\006Sensor"
      "\022\037\n\006header\030\001 \001(\0132\017.gz.msgs.Header\022\014\n\004nam"
      "e\030\002 \001(\t\022\n\n\002id\030\003 \001(\r\022\016\n\006parent\030\004 \001(\t\022\021\n\tp"
      "arent_id\030\005 \001(\r\022\014\n\004type\030\006 \001(\t\022\021\n\talways_o"
      "n\030\007 \001(\010\022\023\n\013update_rate\030\010 \001(\001\022\033\n\004pose\030\t \001"
      "(\0132\r.gz.msgs.Pose\022%\n\006camera\030\n \001(\0132\025.gz.m"
      "sgs.CameraSensor\022\'\n\007contact\030\013 \001(\0132\026.gz.m"
      "sgs.ContactSensor\022\021\n\tvisualize\030\014 \001(\010\022\r\n\005"
      "topic\030\r \001(\t\0224\n\016logical_camera\030\016 \001(\0132\034.gz"
      ".msgs.LogicalCameraSensor\022\037\n\003gps\030\017 \001(\0132\022"
      ".gz.msgs.GPSSensor\022\037\n\003imu\030\020 \001(\0132\022.gz.msg"
      "s.IMUSensor\0221\n\014magnetometer\030\021 \001(\0132\033.gz.m"
      "sgs.MagnetometerSensor\022+\n\taltimeter\030\022 \001("
      "\0132\030.gz.msgs.AltimeterSensor\0220\n\014air_press"
      "ure\030\023 \001(\0132\032.gz.msgs.AirPressureSensor\022#\n"
      "\005lidar\030\024 \001(\0132\024.gz.msgs.LidarSensorB\033\n\013co"
      "m.gz.msgsB\014SensorProtosb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 991);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/sensor.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2faltimeter_5fsensor_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fcamerasensor_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fcontactsensor_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fair_5fpressure_5fsensor_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fgps_5fsensor_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2flidar_5fsensor_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2flogical_5fcamera_5fsensor_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fmagnetometer_5fsensor_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fpose_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fsensor_2eproto
namespace gz {
namespace msgs {

// ===================================================================

void Sensor::InitAsDefaultInstance() {
  ::gz::msgs::_Sensor_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_Sensor_default_instance_._instance.get_mutable()->pose_ = const_cast< ::gz::msgs::Pose*>(
      ::gz::msgs::Pose::internal_default_instance());
  ::gz::msgs::_Sensor_default_instance_._instance.get_mutable()->camera_ = const_cast< ::gz::msgs::CameraSensor*>(
      ::gz::msgs::CameraSensor::internal_default_instance());
  ::gz::msgs::_Sensor_default_instance_._instance.get_mutable()->contact_ = const_cast< ::gz::msgs::ContactSensor*>(
      ::gz::msgs::ContactSensor::internal_default_instance());
  ::gz::msgs::_Sensor_default_instance_._instance.get_mutable()->logical_camera_ = const_cast< ::gz::msgs::LogicalCameraSensor*>(
      ::gz::msgs::LogicalCameraSensor::internal_default_instance());
  ::gz::msgs::_Sensor_default_instance_._instance.get_mutable()->gps_ = const_cast< ::gz::msgs::GPSSensor*>(
      ::gz::msgs::GPSSensor::internal_default_instance());
  ::gz::msgs::_Sensor_default_instance_._instance.get_mutable()->imu_ = const_cast< ::gz::msgs::IMUSensor*>(
      ::gz::msgs::IMUSensor::internal_default_instance());
  ::gz::msgs::_Sensor_default_instance_._instance.get_mutable()->magnetometer_ = const_cast< ::gz::msgs::MagnetometerSensor*>(
      ::gz::msgs::MagnetometerSensor::internal_default_instance());
  ::gz::msgs::_Sensor_default_instance_._instance.get_mutable()->altimeter_ = const_cast< ::gz::msgs::AltimeterSensor*>(
      ::gz::msgs::AltimeterSensor::internal_default_instance());
  ::gz::msgs::_Sensor_default_instance_._instance.get_mutable()->air_pressure_ = const_cast< ::gz::msgs::AirPressureSensor*>(
      ::gz::msgs::AirPressureSensor::internal_default_instance());
  ::gz::msgs::_Sensor_default_instance_._instance.get_mutable()->lidar_ = const_cast< ::gz::msgs::LidarSensor*>(
      ::gz::msgs::LidarSensor::internal_default_instance());
}
void Sensor::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void Sensor::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
void Sensor::clear_camera() {
  if (GetArenaNoVirtual() == NULL && camera_ != NULL) {
    delete camera_;
  }
  camera_ = NULL;
}
void Sensor::clear_contact() {
  if (GetArenaNoVirtual() == NULL && contact_ != NULL) {
    delete contact_;
  }
  contact_ = NULL;
}
void Sensor::clear_logical_camera() {
  if (GetArenaNoVirtual() == NULL && logical_camera_ != NULL) {
    delete logical_camera_;
  }
  logical_camera_ = NULL;
}
void Sensor::clear_gps() {
  if (GetArenaNoVirtual() == NULL && gps_ != NULL) {
    delete gps_;
  }
  gps_ = NULL;
}
void Sensor::clear_imu() {
  if (GetArenaNoVirtual() == NULL && imu_ != NULL) {
    delete imu_;
  }
  imu_ = NULL;
}
void Sensor::clear_magnetometer() {
  if (GetArenaNoVirtual() == NULL && magnetometer_ != NULL) {
    delete magnetometer_;
  }
  magnetometer_ = NULL;
}
void Sensor::clear_altimeter() {
  if (GetArenaNoVirtual() == NULL && altimeter_ != NULL) {
    delete altimeter_;
  }
  altimeter_ = NULL;
}
void Sensor::clear_air_pressure() {
  if (GetArenaNoVirtual() == NULL && air_pressure_ != NULL) {
    delete air_pressure_;
  }
  air_pressure_ = NULL;
}
void Sensor::clear_lidar() {
  if (GetArenaNoVirtual() == NULL && lidar_ != NULL) {
    delete lidar_;
  }
  lidar_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sensor::kHeaderFieldNumber;
const int Sensor::kNameFieldNumber;
const int Sensor::kIdFieldNumber;
const int Sensor::kParentFieldNumber;
const int Sensor::kParentIdFieldNumber;
const int Sensor::kTypeFieldNumber;
const int Sensor::kAlwaysOnFieldNumber;
const int Sensor::kUpdateRateFieldNumber;
const int Sensor::kPoseFieldNumber;
const int Sensor::kCameraFieldNumber;
const int Sensor::kContactFieldNumber;
const int Sensor::kVisualizeFieldNumber;
const int Sensor::kTopicFieldNumber;
const int Sensor::kLogicalCameraFieldNumber;
const int Sensor::kGpsFieldNumber;
const int Sensor::kImuFieldNumber;
const int Sensor::kMagnetometerFieldNumber;
const int Sensor::kAltimeterFieldNumber;
const int Sensor::kAirPressureFieldNumber;
const int Sensor::kLidarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sensor::Sensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fsensor_2eproto::scc_info_Sensor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Sensor)
}
Sensor::Sensor(const Sensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::gz::msgs::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_camera()) {
    camera_ = new ::gz::msgs::CameraSensor(*from.camera_);
  } else {
    camera_ = NULL;
  }
  if (from.has_contact()) {
    contact_ = new ::gz::msgs::ContactSensor(*from.contact_);
  } else {
    contact_ = NULL;
  }
  if (from.has_logical_camera()) {
    logical_camera_ = new ::gz::msgs::LogicalCameraSensor(*from.logical_camera_);
  } else {
    logical_camera_ = NULL;
  }
  if (from.has_gps()) {
    gps_ = new ::gz::msgs::GPSSensor(*from.gps_);
  } else {
    gps_ = NULL;
  }
  if (from.has_imu()) {
    imu_ = new ::gz::msgs::IMUSensor(*from.imu_);
  } else {
    imu_ = NULL;
  }
  if (from.has_magnetometer()) {
    magnetometer_ = new ::gz::msgs::MagnetometerSensor(*from.magnetometer_);
  } else {
    magnetometer_ = NULL;
  }
  if (from.has_altimeter()) {
    altimeter_ = new ::gz::msgs::AltimeterSensor(*from.altimeter_);
  } else {
    altimeter_ = NULL;
  }
  if (from.has_air_pressure()) {
    air_pressure_ = new ::gz::msgs::AirPressureSensor(*from.air_pressure_);
  } else {
    air_pressure_ = NULL;
  }
  if (from.has_lidar()) {
    lidar_ = new ::gz::msgs::LidarSensor(*from.lidar_);
  } else {
    lidar_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&visualize_) -
    reinterpret_cast<char*>(&id_)) + sizeof(visualize_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Sensor)
}

void Sensor::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visualize_) -
      reinterpret_cast<char*>(&header_)) + sizeof(visualize_));
}

Sensor::~Sensor() {
  // @@protoc_insertion_point(destructor:gz.msgs.Sensor)
  SharedDtor();
}

void Sensor::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete camera_;
  if (this != internal_default_instance()) delete contact_;
  if (this != internal_default_instance()) delete logical_camera_;
  if (this != internal_default_instance()) delete gps_;
  if (this != internal_default_instance()) delete imu_;
  if (this != internal_default_instance()) delete magnetometer_;
  if (this != internal_default_instance()) delete altimeter_;
  if (this != internal_default_instance()) delete air_pressure_;
  if (this != internal_default_instance()) delete lidar_;
}

void Sensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sensor::descriptor() {
  ::protobuf_gz_2fmsgs_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sensor& Sensor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fsensor_2eproto::scc_info_Sensor.base);
  return *internal_default_instance();
}


void Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && camera_ != NULL) {
    delete camera_;
  }
  camera_ = NULL;
  if (GetArenaNoVirtual() == NULL && contact_ != NULL) {
    delete contact_;
  }
  contact_ = NULL;
  if (GetArenaNoVirtual() == NULL && logical_camera_ != NULL) {
    delete logical_camera_;
  }
  logical_camera_ = NULL;
  if (GetArenaNoVirtual() == NULL && gps_ != NULL) {
    delete gps_;
  }
  gps_ = NULL;
  if (GetArenaNoVirtual() == NULL && imu_ != NULL) {
    delete imu_;
  }
  imu_ = NULL;
  if (GetArenaNoVirtual() == NULL && magnetometer_ != NULL) {
    delete magnetometer_;
  }
  magnetometer_ = NULL;
  if (GetArenaNoVirtual() == NULL && altimeter_ != NULL) {
    delete altimeter_;
  }
  altimeter_ = NULL;
  if (GetArenaNoVirtual() == NULL && air_pressure_ != NULL) {
    delete air_pressure_;
  }
  air_pressure_ = NULL;
  if (GetArenaNoVirtual() == NULL && lidar_ != NULL) {
    delete lidar_;
  }
  lidar_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visualize_) -
      reinterpret_cast<char*>(&id_)) + sizeof(visualize_));
  _internal_metadata_.Clear();
}

bool Sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Sensor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Sensor.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string parent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Sensor.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 parent_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Sensor.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool always_on = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &always_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double update_rate = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &update_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Pose pose = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.CameraSensor camera = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.ContactSensor contact = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_contact()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool visualize = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visualize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Sensor.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.LogicalCameraSensor logical_camera = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_logical_camera()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.GPSSensor gps = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.IMUSensor imu = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_imu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.MagnetometerSensor magnetometer = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_magnetometer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.AltimeterSensor altimeter = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_altimeter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.AirPressureSensor air_pressure = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_air_pressure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.LidarSensor lidar = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lidar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Sensor)
  return false;
#undef DO_
}

void Sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Sensor.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // string parent = 4;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Sensor.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->parent(), output);
  }

  // uint32 parent_id = 5;
  if (this->parent_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->parent_id(), output);
  }

  // string type = 6;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Sensor.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->type(), output);
  }

  // bool always_on = 7;
  if (this->always_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->always_on(), output);
  }

  // double update_rate = 8;
  if (this->update_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->update_rate(), output);
  }

  // .gz.msgs.Pose pose = 9;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_pose(), output);
  }

  // .gz.msgs.CameraSensor camera = 10;
  if (this->has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_camera(), output);
  }

  // .gz.msgs.ContactSensor contact = 11;
  if (this->has_contact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_contact(), output);
  }

  // bool visualize = 12;
  if (this->visualize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->visualize(), output);
  }

  // string topic = 13;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Sensor.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->topic(), output);
  }

  // .gz.msgs.LogicalCameraSensor logical_camera = 14;
  if (this->has_logical_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_logical_camera(), output);
  }

  // .gz.msgs.GPSSensor gps = 15;
  if (this->has_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_gps(), output);
  }

  // .gz.msgs.IMUSensor imu = 16;
  if (this->has_imu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_imu(), output);
  }

  // .gz.msgs.MagnetometerSensor magnetometer = 17;
  if (this->has_magnetometer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_magnetometer(), output);
  }

  // .gz.msgs.AltimeterSensor altimeter = 18;
  if (this->has_altimeter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_internal_altimeter(), output);
  }

  // .gz.msgs.AirPressureSensor air_pressure = 19;
  if (this->has_air_pressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_air_pressure(), output);
  }

  // .gz.msgs.LidarSensor lidar = 20;
  if (this->has_lidar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_lidar(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Sensor)
}

::google::protobuf::uint8* Sensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Sensor.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // string parent = 4;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Sensor.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->parent(), target);
  }

  // uint32 parent_id = 5;
  if (this->parent_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->parent_id(), target);
  }

  // string type = 6;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Sensor.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->type(), target);
  }

  // bool always_on = 7;
  if (this->always_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->always_on(), target);
  }

  // double update_rate = 8;
  if (this->update_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->update_rate(), target);
  }

  // .gz.msgs.Pose pose = 9;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_pose(), deterministic, target);
  }

  // .gz.msgs.CameraSensor camera = 10;
  if (this->has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_camera(), deterministic, target);
  }

  // .gz.msgs.ContactSensor contact = 11;
  if (this->has_contact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_contact(), deterministic, target);
  }

  // bool visualize = 12;
  if (this->visualize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->visualize(), target);
  }

  // string topic = 13;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Sensor.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->topic(), target);
  }

  // .gz.msgs.LogicalCameraSensor logical_camera = 14;
  if (this->has_logical_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_logical_camera(), deterministic, target);
  }

  // .gz.msgs.GPSSensor gps = 15;
  if (this->has_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_gps(), deterministic, target);
  }

  // .gz.msgs.IMUSensor imu = 16;
  if (this->has_imu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_imu(), deterministic, target);
  }

  // .gz.msgs.MagnetometerSensor magnetometer = 17;
  if (this->has_magnetometer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_magnetometer(), deterministic, target);
  }

  // .gz.msgs.AltimeterSensor altimeter = 18;
  if (this->has_altimeter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->_internal_altimeter(), deterministic, target);
  }

  // .gz.msgs.AirPressureSensor air_pressure = 19;
  if (this->has_air_pressure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_air_pressure(), deterministic, target);
  }

  // .gz.msgs.LidarSensor lidar = 20;
  if (this->has_lidar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_lidar(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Sensor)
  return target;
}

size_t Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Sensor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string parent = 4;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string type = 6;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string topic = 13;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.Pose pose = 9;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .gz.msgs.CameraSensor camera = 10;
  if (this->has_camera()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *camera_);
  }

  // .gz.msgs.ContactSensor contact = 11;
  if (this->has_contact()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *contact_);
  }

  // .gz.msgs.LogicalCameraSensor logical_camera = 14;
  if (this->has_logical_camera()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *logical_camera_);
  }

  // .gz.msgs.GPSSensor gps = 15;
  if (this->has_gps()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gps_);
  }

  // .gz.msgs.IMUSensor imu = 16;
  if (this->has_imu()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *imu_);
  }

  // .gz.msgs.MagnetometerSensor magnetometer = 17;
  if (this->has_magnetometer()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *magnetometer_);
  }

  // .gz.msgs.AltimeterSensor altimeter = 18;
  if (this->has_altimeter()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *altimeter_);
  }

  // .gz.msgs.AirPressureSensor air_pressure = 19;
  if (this->has_air_pressure()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *air_pressure_);
  }

  // .gz.msgs.LidarSensor lidar = 20;
  if (this->has_lidar()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lidar_);
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 parent_id = 5;
  if (this->parent_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->parent_id());
  }

  // double update_rate = 8;
  if (this->update_rate() != 0) {
    total_size += 1 + 8;
  }

  // bool always_on = 7;
  if (this->always_on() != 0) {
    total_size += 1 + 1;
  }

  // bool visualize = 12;
  if (this->visualize() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  const Sensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Sensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Sensor)
    MergeFrom(*source);
  }
}

void Sensor::MergeFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_pose()) {
    mutable_pose()->::gz::msgs::Pose::MergeFrom(from.pose());
  }
  if (from.has_camera()) {
    mutable_camera()->::gz::msgs::CameraSensor::MergeFrom(from.camera());
  }
  if (from.has_contact()) {
    mutable_contact()->::gz::msgs::ContactSensor::MergeFrom(from.contact());
  }
  if (from.has_logical_camera()) {
    mutable_logical_camera()->::gz::msgs::LogicalCameraSensor::MergeFrom(from.logical_camera());
  }
  if (from.has_gps()) {
    mutable_gps()->::gz::msgs::GPSSensor::MergeFrom(from.gps());
  }
  if (from.has_imu()) {
    mutable_imu()->::gz::msgs::IMUSensor::MergeFrom(from.imu());
  }
  if (from.has_magnetometer()) {
    mutable_magnetometer()->::gz::msgs::MagnetometerSensor::MergeFrom(from.magnetometer());
  }
  if (from.has_altimeter()) {
    mutable_altimeter()->::gz::msgs::AltimeterSensor::MergeFrom(from.altimeter());
  }
  if (from.has_air_pressure()) {
    mutable_air_pressure()->::gz::msgs::AirPressureSensor::MergeFrom(from.air_pressure());
  }
  if (from.has_lidar()) {
    mutable_lidar()->::gz::msgs::LidarSensor::MergeFrom(from.lidar());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.parent_id() != 0) {
    set_parent_id(from.parent_id());
  }
  if (from.update_rate() != 0) {
    set_update_rate(from.update_rate());
  }
  if (from.always_on() != 0) {
    set_always_on(from.always_on());
  }
  if (from.visualize() != 0) {
    set_visualize(from.visualize());
  }
}

void Sensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sensor::CopyFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensor::IsInitialized() const {
  return true;
}

void Sensor::Swap(Sensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sensor::InternalSwap(Sensor* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  topic_.Swap(&other->topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(pose_, other->pose_);
  swap(camera_, other->camera_);
  swap(contact_, other->contact_);
  swap(logical_camera_, other->logical_camera_);
  swap(gps_, other->gps_);
  swap(imu_, other->imu_);
  swap(magnetometer_, other->magnetometer_);
  swap(altimeter_, other->altimeter_);
  swap(air_pressure_, other->air_pressure_);
  swap(lidar_, other->lidar_);
  swap(id_, other->id_);
  swap(parent_id_, other->parent_id_);
  swap(update_rate_, other->update_rate_);
  swap(always_on_, other->always_on_);
  swap(visualize_, other->visualize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sensor::GetMetadata() const {
  protobuf_gz_2fmsgs_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Sensor* Arena::CreateMaybeMessage< ::gz::msgs::Sensor >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Sensor >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
