// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/contact.proto

#include "gz/msgs/contact.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.Contact", Contact)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fentity_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fentity_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Entity;
}  // namespace protobuf_gz_2fmsgs_2fentity_2eproto
namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace protobuf_gz_2fmsgs_2fjoint_5fwrench_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fjoint_5fwrench_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_JointWrench;
}  // namespace protobuf_gz_2fmsgs_2fjoint_5fwrench_2eproto
namespace protobuf_gz_2fmsgs_2fvector3d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fvector3d_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Vector3d;
}  // namespace protobuf_gz_2fmsgs_2fvector3d_2eproto
namespace gz {
namespace msgs {
class ContactDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Contact>
      _instance;
} _Contact_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fcontact_2eproto {
static void InitDefaultsContact() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Contact_default_instance_;
    new (ptr) ::gz::msgs::Contact();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Contact::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<4> scc_info_Contact =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsContact}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2fentity_2eproto::scc_info_Entity.base,
      &protobuf_gz_2fmsgs_2fvector3d_2eproto::scc_info_Vector3d.base,
      &protobuf_gz_2fmsgs_2fjoint_5fwrench_2eproto::scc_info_JointWrench.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Contact.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Contact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Contact, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Contact, collision1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Contact, collision2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Contact, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Contact, normal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Contact, depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Contact, wrench_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Contact, world_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::Contact)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Contact_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/contact.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025gz/msgs/contact.proto\022\007gz.msgs\032\024gz/msg"
      "s/entity.proto\032\026gz/msgs/vector3d.proto\032\032"
      "gz/msgs/joint_wrench.proto\032\024gz/msgs/head"
      "er.proto\"\221\002\n\007Contact\022\037\n\006header\030\001 \001(\0132\017.g"
      "z.msgs.Header\022#\n\ncollision1\030\002 \001(\0132\017.gz.m"
      "sgs.Entity\022#\n\ncollision2\030\003 \001(\0132\017.gz.msgs"
      ".Entity\022#\n\010position\030\004 \003(\0132\021.gz.msgs.Vect"
      "or3d\022!\n\006normal\030\005 \003(\0132\021.gz.msgs.Vector3d\022"
      "\r\n\005depth\030\006 \003(\001\022$\n\006wrench\030\007 \003(\0132\024.gz.msgs"
      ".JointWrench\022\036\n\005world\030\010 \001(\0132\017.gz.msgs.En"
      "tityB\034\n\013com.gz.msgsB\rContactProtosb\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 442);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/contact.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fentity_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fvector3d_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fjoint_5fwrench_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fcontact_2eproto
namespace gz {
namespace msgs {

// ===================================================================

void Contact::InitAsDefaultInstance() {
  ::gz::msgs::_Contact_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_Contact_default_instance_._instance.get_mutable()->collision1_ = const_cast< ::gz::msgs::Entity*>(
      ::gz::msgs::Entity::internal_default_instance());
  ::gz::msgs::_Contact_default_instance_._instance.get_mutable()->collision2_ = const_cast< ::gz::msgs::Entity*>(
      ::gz::msgs::Entity::internal_default_instance());
  ::gz::msgs::_Contact_default_instance_._instance.get_mutable()->world_ = const_cast< ::gz::msgs::Entity*>(
      ::gz::msgs::Entity::internal_default_instance());
}
void Contact::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void Contact::clear_collision1() {
  if (GetArenaNoVirtual() == NULL && collision1_ != NULL) {
    delete collision1_;
  }
  collision1_ = NULL;
}
void Contact::clear_collision2() {
  if (GetArenaNoVirtual() == NULL && collision2_ != NULL) {
    delete collision2_;
  }
  collision2_ = NULL;
}
void Contact::clear_position() {
  position_.Clear();
}
void Contact::clear_normal() {
  normal_.Clear();
}
void Contact::clear_wrench() {
  wrench_.Clear();
}
void Contact::clear_world() {
  if (GetArenaNoVirtual() == NULL && world_ != NULL) {
    delete world_;
  }
  world_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Contact::kHeaderFieldNumber;
const int Contact::kCollision1FieldNumber;
const int Contact::kCollision2FieldNumber;
const int Contact::kPositionFieldNumber;
const int Contact::kNormalFieldNumber;
const int Contact::kDepthFieldNumber;
const int Contact::kWrenchFieldNumber;
const int Contact::kWorldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Contact::Contact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fcontact_2eproto::scc_info_Contact.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Contact)
}
Contact::Contact(const Contact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      position_(from.position_),
      normal_(from.normal_),
      depth_(from.depth_),
      wrench_(from.wrench_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_collision1()) {
    collision1_ = new ::gz::msgs::Entity(*from.collision1_);
  } else {
    collision1_ = NULL;
  }
  if (from.has_collision2()) {
    collision2_ = new ::gz::msgs::Entity(*from.collision2_);
  } else {
    collision2_ = NULL;
  }
  if (from.has_world()) {
    world_ = new ::gz::msgs::Entity(*from.world_);
  } else {
    world_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Contact)
}

void Contact::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_) -
      reinterpret_cast<char*>(&header_)) + sizeof(world_));
}

Contact::~Contact() {
  // @@protoc_insertion_point(destructor:gz.msgs.Contact)
  SharedDtor();
}

void Contact::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete collision1_;
  if (this != internal_default_instance()) delete collision2_;
  if (this != internal_default_instance()) delete world_;
}

void Contact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Contact::descriptor() {
  ::protobuf_gz_2fmsgs_2fcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fcontact_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Contact& Contact::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fcontact_2eproto::scc_info_Contact.base);
  return *internal_default_instance();
}


void Contact::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Contact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  normal_.Clear();
  depth_.Clear();
  wrench_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && collision1_ != NULL) {
    delete collision1_;
  }
  collision1_ = NULL;
  if (GetArenaNoVirtual() == NULL && collision2_ != NULL) {
    delete collision2_;
  }
  collision2_ = NULL;
  if (GetArenaNoVirtual() == NULL && world_ != NULL) {
    delete world_;
  }
  world_ = NULL;
  _internal_metadata_.Clear();
}

bool Contact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Contact)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Entity collision1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_collision1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Entity collision2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_collision2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.Vector3d position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.Vector3d normal = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_normal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double depth = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_depth())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50u, input, this->mutable_depth())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.JointWrench wrench = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_wrench()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Entity world = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_world()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Contact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Contact)
  return false;
#undef DO_
}

void Contact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Contact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .gz.msgs.Entity collision1 = 2;
  if (this->has_collision1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_collision1(), output);
  }

  // .gz.msgs.Entity collision2 = 3;
  if (this->has_collision2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_collision2(), output);
  }

  // repeated .gz.msgs.Vector3d position = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->position_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->position(static_cast<int>(i)),
      output);
  }

  // repeated .gz.msgs.Vector3d normal = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->normal_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->normal(static_cast<int>(i)),
      output);
  }

  // repeated double depth = 6;
  if (this->depth_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _depth_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->depth().data(), this->depth_size(), output);
  }

  // repeated .gz.msgs.JointWrench wrench = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wrench_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->wrench(static_cast<int>(i)),
      output);
  }

  // .gz.msgs.Entity world = 8;
  if (this->has_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_world(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Contact)
}

::google::protobuf::uint8* Contact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Contact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .gz.msgs.Entity collision1 = 2;
  if (this->has_collision1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_collision1(), deterministic, target);
  }

  // .gz.msgs.Entity collision2 = 3;
  if (this->has_collision2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_collision2(), deterministic, target);
  }

  // repeated .gz.msgs.Vector3d position = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->position_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->position(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gz.msgs.Vector3d normal = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->normal_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->normal(static_cast<int>(i)), deterministic, target);
  }

  // repeated double depth = 6;
  if (this->depth_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _depth_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->depth_, target);
  }

  // repeated .gz.msgs.JointWrench wrench = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wrench_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->wrench(static_cast<int>(i)), deterministic, target);
  }

  // .gz.msgs.Entity world = 8;
  if (this->has_world()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_world(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Contact)
  return target;
}

size_t Contact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Contact)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gz.msgs.Vector3d position = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->position(static_cast<int>(i)));
    }
  }

  // repeated .gz.msgs.Vector3d normal = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->normal_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->normal(static_cast<int>(i)));
    }
  }

  // repeated double depth = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->depth_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _depth_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .gz.msgs.JointWrench wrench = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->wrench_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->wrench(static_cast<int>(i)));
    }
  }

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.Entity collision1 = 2;
  if (this->has_collision1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *collision1_);
  }

  // .gz.msgs.Entity collision2 = 3;
  if (this->has_collision2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *collision2_);
  }

  // .gz.msgs.Entity world = 8;
  if (this->has_world()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *world_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Contact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Contact)
  GOOGLE_DCHECK_NE(&from, this);
  const Contact* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Contact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Contact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Contact)
    MergeFrom(*source);
  }
}

void Contact::MergeFrom(const Contact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Contact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  normal_.MergeFrom(from.normal_);
  depth_.MergeFrom(from.depth_);
  wrench_.MergeFrom(from.wrench_);
  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_collision1()) {
    mutable_collision1()->::gz::msgs::Entity::MergeFrom(from.collision1());
  }
  if (from.has_collision2()) {
    mutable_collision2()->::gz::msgs::Entity::MergeFrom(from.collision2());
  }
  if (from.has_world()) {
    mutable_world()->::gz::msgs::Entity::MergeFrom(from.world());
  }
}

void Contact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Contact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contact::CopyFrom(const Contact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Contact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contact::IsInitialized() const {
  return true;
}

void Contact::Swap(Contact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Contact::InternalSwap(Contact* other) {
  using std::swap;
  CastToBase(&position_)->InternalSwap(CastToBase(&other->position_));
  CastToBase(&normal_)->InternalSwap(CastToBase(&other->normal_));
  depth_.InternalSwap(&other->depth_);
  CastToBase(&wrench_)->InternalSwap(CastToBase(&other->wrench_));
  swap(header_, other->header_);
  swap(collision1_, other->collision1_);
  swap(collision2_, other->collision2_);
  swap(world_, other->world_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Contact::GetMetadata() const {
  protobuf_gz_2fmsgs_2fcontact_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fcontact_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Contact* Arena::CreateMaybeMessage< ::gz::msgs::Contact >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Contact >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
