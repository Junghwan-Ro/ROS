// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/particle_emitter.proto

#include "gz/msgs/particle_emitter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.ParticleEmitter", ParticleEmitter)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fboolean_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fboolean_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Boolean;
}  // namespace protobuf_gz_2fmsgs_2fboolean_2eproto
namespace protobuf_gz_2fmsgs_2fcolor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fcolor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Color;
}  // namespace protobuf_gz_2fmsgs_2fcolor_2eproto
namespace protobuf_gz_2fmsgs_2ffloat_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2ffloat_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Float;
}  // namespace protobuf_gz_2fmsgs_2ffloat_2eproto
namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace protobuf_gz_2fmsgs_2fmaterial_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fmaterial_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Material;
}  // namespace protobuf_gz_2fmsgs_2fmaterial_2eproto
namespace protobuf_gz_2fmsgs_2fpose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fpose_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Pose;
}  // namespace protobuf_gz_2fmsgs_2fpose_2eproto
namespace protobuf_gz_2fmsgs_2fstringmsg_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fstringmsg_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StringMsg;
}  // namespace protobuf_gz_2fmsgs_2fstringmsg_2eproto
namespace protobuf_gz_2fmsgs_2fvector3d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fvector3d_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Vector3d;
}  // namespace protobuf_gz_2fmsgs_2fvector3d_2eproto
namespace gz {
namespace msgs {
class ParticleEmitterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParticleEmitter>
      _instance;
} _ParticleEmitter_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fparticle_5femitter_2eproto {
static void InitDefaultsParticleEmitter() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_ParticleEmitter_default_instance_;
    new (ptr) ::gz::msgs::ParticleEmitter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::ParticleEmitter::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<8> scc_info_ParticleEmitter =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsParticleEmitter}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2fpose_2eproto::scc_info_Pose.base,
      &protobuf_gz_2fmsgs_2fvector3d_2eproto::scc_info_Vector3d.base,
      &protobuf_gz_2fmsgs_2ffloat_2eproto::scc_info_Float.base,
      &protobuf_gz_2fmsgs_2fboolean_2eproto::scc_info_Boolean.base,
      &protobuf_gz_2fmsgs_2fmaterial_2eproto::scc_info_Material.base,
      &protobuf_gz_2fmsgs_2fcolor_2eproto::scc_info_Color.base,
      &protobuf_gz_2fmsgs_2fstringmsg_2eproto::scc_info_StringMsg.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ParticleEmitter.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, emitting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, particle_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, lifetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, material_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, min_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, max_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, color_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, color_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, scale_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, color_range_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::ParticleEmitter, particle_scatter_ratio_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::ParticleEmitter)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_ParticleEmitter_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/particle_emitter.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\036gz/msgs/particle_emitter.proto\022\007gz.msg"
      "s\032\025gz/msgs/boolean.proto\032\023gz/msgs/color."
      "proto\032\023gz/msgs/float.proto\032\024gz/msgs/head"
      "er.proto\032\026gz/msgs/material.proto\032\022gz/msg"
      "s/pose.proto\032\027gz/msgs/stringmsg.proto\032\026g"
      "z/msgs/vector3d.proto\"\215\006\n\017ParticleEmitte"
      "r\022\037\n\006header\030\001 \001(\0132\017.gz.msgs.Header\022\014\n\004na"
      "me\030\002 \001(\t\022\n\n\002id\030\003 \001(\r\0222\n\004type\030\004 \001(\0162$.gz."
      "msgs.ParticleEmitter.EmitterType\022\033\n\004pose"
      "\030\005 \001(\0132\r.gz.msgs.Pose\022\037\n\004size\030\006 \001(\0132\021.gz"
      ".msgs.Vector3d\022\034\n\004rate\030\007 \001(\0132\016.gz.msgs.F"
      "loat\022 \n\010duration\030\010 \001(\0132\016.gz.msgs.Float\022\""
      "\n\010emitting\030\t \001(\0132\020.gz.msgs.Boolean\022(\n\rpa"
      "rticle_size\030\n \001(\0132\021.gz.msgs.Vector3d\022 \n\010"
      "lifetime\030\013 \001(\0132\016.gz.msgs.Float\022#\n\010materi"
      "al\030\014 \001(\0132\021.gz.msgs.Material\022$\n\014min_veloc"
      "ity\030\r \001(\0132\016.gz.msgs.Float\022$\n\014max_velocit"
      "y\030\016 \001(\0132\016.gz.msgs.Float\022#\n\013color_start\030\017"
      " \001(\0132\016.gz.msgs.Color\022!\n\tcolor_end\030\020 \001(\0132"
      "\016.gz.msgs.Color\022\"\n\nscale_rate\030\021 \001(\0132\016.gz"
      ".msgs.Float\022-\n\021color_range_image\030\022 \001(\0132\022"
      ".gz.msgs.StringMsg\022!\n\005topic\030\023 \001(\0132\022.gz.m"
      "sgs.StringMsg\022.\n\026particle_scatter_ratio\030"
      "\024 \001(\0132\016.gz.msgs.Float\">\n\013EmitterType\022\t\n\005"
      "POINT\020\000\022\007\n\003BOX\020\001\022\014\n\010CYLINDER\020\002\022\r\n\tELLIPS"
      "OID\020\003B$\n\013com.gz.msgsB\025ParticleEmitterPro"
      "tosb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1051);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/particle_emitter.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fboolean_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fcolor_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2ffloat_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fmaterial_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fpose_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fstringmsg_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fvector3d_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fparticle_5femitter_2eproto
namespace gz {
namespace msgs {
const ::google::protobuf::EnumDescriptor* ParticleEmitter_EmitterType_descriptor() {
  protobuf_gz_2fmsgs_2fparticle_5femitter_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gz_2fmsgs_2fparticle_5femitter_2eproto::file_level_enum_descriptors[0];
}
bool ParticleEmitter_EmitterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ParticleEmitter_EmitterType ParticleEmitter::POINT;
const ParticleEmitter_EmitterType ParticleEmitter::BOX;
const ParticleEmitter_EmitterType ParticleEmitter::CYLINDER;
const ParticleEmitter_EmitterType ParticleEmitter::ELLIPSOID;
const ParticleEmitter_EmitterType ParticleEmitter::EmitterType_MIN;
const ParticleEmitter_EmitterType ParticleEmitter::EmitterType_MAX;
const int ParticleEmitter::EmitterType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ParticleEmitter::InitAsDefaultInstance() {
  ::gz::msgs::_ParticleEmitter_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_ParticleEmitter_default_instance_._instance.get_mutable()->pose_ = const_cast< ::gz::msgs::Pose*>(
      ::gz::msgs::Pose::internal_default_instance());
  ::gz::msgs::_ParticleEmitter_default_instance_._instance.get_mutable()->size_ = const_cast< ::gz::msgs::Vector3d*>(
      ::gz::msgs::Vector3d::internal_default_instance());
  ::gz::msgs::_ParticleEmitter_default_instance_._instance.get_mutable()->rate_ = const_cast< ::gz::msgs::Float*>(
      ::gz::msgs::Float::internal_default_instance());
  ::gz::msgs::_ParticleEmitter_default_instance_._instance.get_mutable()->duration_ = const_cast< ::gz::msgs::Float*>(
      ::gz::msgs::Float::internal_default_instance());
  ::gz::msgs::_ParticleEmitter_default_instance_._instance.get_mutable()->emitting_ = const_cast< ::gz::msgs::Boolean*>(
      ::gz::msgs::Boolean::internal_default_instance());
  ::gz::msgs::_ParticleEmitter_default_instance_._instance.get_mutable()->particle_size_ = const_cast< ::gz::msgs::Vector3d*>(
      ::gz::msgs::Vector3d::internal_default_instance());
  ::gz::msgs::_ParticleEmitter_default_instance_._instance.get_mutable()->lifetime_ = const_cast< ::gz::msgs::Float*>(
      ::gz::msgs::Float::internal_default_instance());
  ::gz::msgs::_ParticleEmitter_default_instance_._instance.get_mutable()->material_ = const_cast< ::gz::msgs::Material*>(
      ::gz::msgs::Material::internal_default_instance());
  ::gz::msgs::_ParticleEmitter_default_instance_._instance.get_mutable()->min_velocity_ = const_cast< ::gz::msgs::Float*>(
      ::gz::msgs::Float::internal_default_instance());
  ::gz::msgs::_ParticleEmitter_default_instance_._instance.get_mutable()->max_velocity_ = const_cast< ::gz::msgs::Float*>(
      ::gz::msgs::Float::internal_default_instance());
  ::gz::msgs::_ParticleEmitter_default_instance_._instance.get_mutable()->color_start_ = const_cast< ::gz::msgs::Color*>(
      ::gz::msgs::Color::internal_default_instance());
  ::gz::msgs::_ParticleEmitter_default_instance_._instance.get_mutable()->color_end_ = const_cast< ::gz::msgs::Color*>(
      ::gz::msgs::Color::internal_default_instance());
  ::gz::msgs::_ParticleEmitter_default_instance_._instance.get_mutable()->scale_rate_ = const_cast< ::gz::msgs::Float*>(
      ::gz::msgs::Float::internal_default_instance());
  ::gz::msgs::_ParticleEmitter_default_instance_._instance.get_mutable()->color_range_image_ = const_cast< ::gz::msgs::StringMsg*>(
      ::gz::msgs::StringMsg::internal_default_instance());
  ::gz::msgs::_ParticleEmitter_default_instance_._instance.get_mutable()->topic_ = const_cast< ::gz::msgs::StringMsg*>(
      ::gz::msgs::StringMsg::internal_default_instance());
  ::gz::msgs::_ParticleEmitter_default_instance_._instance.get_mutable()->particle_scatter_ratio_ = const_cast< ::gz::msgs::Float*>(
      ::gz::msgs::Float::internal_default_instance());
}
void ParticleEmitter::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void ParticleEmitter::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
void ParticleEmitter::clear_size() {
  if (GetArenaNoVirtual() == NULL && size_ != NULL) {
    delete size_;
  }
  size_ = NULL;
}
void ParticleEmitter::clear_rate() {
  if (GetArenaNoVirtual() == NULL && rate_ != NULL) {
    delete rate_;
  }
  rate_ = NULL;
}
void ParticleEmitter::clear_duration() {
  if (GetArenaNoVirtual() == NULL && duration_ != NULL) {
    delete duration_;
  }
  duration_ = NULL;
}
void ParticleEmitter::clear_emitting() {
  if (GetArenaNoVirtual() == NULL && emitting_ != NULL) {
    delete emitting_;
  }
  emitting_ = NULL;
}
void ParticleEmitter::clear_particle_size() {
  if (GetArenaNoVirtual() == NULL && particle_size_ != NULL) {
    delete particle_size_;
  }
  particle_size_ = NULL;
}
void ParticleEmitter::clear_lifetime() {
  if (GetArenaNoVirtual() == NULL && lifetime_ != NULL) {
    delete lifetime_;
  }
  lifetime_ = NULL;
}
void ParticleEmitter::clear_material() {
  if (GetArenaNoVirtual() == NULL && material_ != NULL) {
    delete material_;
  }
  material_ = NULL;
}
void ParticleEmitter::clear_min_velocity() {
  if (GetArenaNoVirtual() == NULL && min_velocity_ != NULL) {
    delete min_velocity_;
  }
  min_velocity_ = NULL;
}
void ParticleEmitter::clear_max_velocity() {
  if (GetArenaNoVirtual() == NULL && max_velocity_ != NULL) {
    delete max_velocity_;
  }
  max_velocity_ = NULL;
}
void ParticleEmitter::clear_color_start() {
  if (GetArenaNoVirtual() == NULL && color_start_ != NULL) {
    delete color_start_;
  }
  color_start_ = NULL;
}
void ParticleEmitter::clear_color_end() {
  if (GetArenaNoVirtual() == NULL && color_end_ != NULL) {
    delete color_end_;
  }
  color_end_ = NULL;
}
void ParticleEmitter::clear_scale_rate() {
  if (GetArenaNoVirtual() == NULL && scale_rate_ != NULL) {
    delete scale_rate_;
  }
  scale_rate_ = NULL;
}
void ParticleEmitter::clear_color_range_image() {
  if (GetArenaNoVirtual() == NULL && color_range_image_ != NULL) {
    delete color_range_image_;
  }
  color_range_image_ = NULL;
}
void ParticleEmitter::clear_topic() {
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) {
    delete topic_;
  }
  topic_ = NULL;
}
void ParticleEmitter::clear_particle_scatter_ratio() {
  if (GetArenaNoVirtual() == NULL && particle_scatter_ratio_ != NULL) {
    delete particle_scatter_ratio_;
  }
  particle_scatter_ratio_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParticleEmitter::kHeaderFieldNumber;
const int ParticleEmitter::kNameFieldNumber;
const int ParticleEmitter::kIdFieldNumber;
const int ParticleEmitter::kTypeFieldNumber;
const int ParticleEmitter::kPoseFieldNumber;
const int ParticleEmitter::kSizeFieldNumber;
const int ParticleEmitter::kRateFieldNumber;
const int ParticleEmitter::kDurationFieldNumber;
const int ParticleEmitter::kEmittingFieldNumber;
const int ParticleEmitter::kParticleSizeFieldNumber;
const int ParticleEmitter::kLifetimeFieldNumber;
const int ParticleEmitter::kMaterialFieldNumber;
const int ParticleEmitter::kMinVelocityFieldNumber;
const int ParticleEmitter::kMaxVelocityFieldNumber;
const int ParticleEmitter::kColorStartFieldNumber;
const int ParticleEmitter::kColorEndFieldNumber;
const int ParticleEmitter::kScaleRateFieldNumber;
const int ParticleEmitter::kColorRangeImageFieldNumber;
const int ParticleEmitter::kTopicFieldNumber;
const int ParticleEmitter::kParticleScatterRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParticleEmitter::ParticleEmitter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fparticle_5femitter_2eproto::scc_info_ParticleEmitter.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.ParticleEmitter)
}
ParticleEmitter::ParticleEmitter(const ParticleEmitter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::gz::msgs::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_size()) {
    size_ = new ::gz::msgs::Vector3d(*from.size_);
  } else {
    size_ = NULL;
  }
  if (from.has_rate()) {
    rate_ = new ::gz::msgs::Float(*from.rate_);
  } else {
    rate_ = NULL;
  }
  if (from.has_duration()) {
    duration_ = new ::gz::msgs::Float(*from.duration_);
  } else {
    duration_ = NULL;
  }
  if (from.has_emitting()) {
    emitting_ = new ::gz::msgs::Boolean(*from.emitting_);
  } else {
    emitting_ = NULL;
  }
  if (from.has_particle_size()) {
    particle_size_ = new ::gz::msgs::Vector3d(*from.particle_size_);
  } else {
    particle_size_ = NULL;
  }
  if (from.has_lifetime()) {
    lifetime_ = new ::gz::msgs::Float(*from.lifetime_);
  } else {
    lifetime_ = NULL;
  }
  if (from.has_material()) {
    material_ = new ::gz::msgs::Material(*from.material_);
  } else {
    material_ = NULL;
  }
  if (from.has_min_velocity()) {
    min_velocity_ = new ::gz::msgs::Float(*from.min_velocity_);
  } else {
    min_velocity_ = NULL;
  }
  if (from.has_max_velocity()) {
    max_velocity_ = new ::gz::msgs::Float(*from.max_velocity_);
  } else {
    max_velocity_ = NULL;
  }
  if (from.has_color_start()) {
    color_start_ = new ::gz::msgs::Color(*from.color_start_);
  } else {
    color_start_ = NULL;
  }
  if (from.has_color_end()) {
    color_end_ = new ::gz::msgs::Color(*from.color_end_);
  } else {
    color_end_ = NULL;
  }
  if (from.has_scale_rate()) {
    scale_rate_ = new ::gz::msgs::Float(*from.scale_rate_);
  } else {
    scale_rate_ = NULL;
  }
  if (from.has_color_range_image()) {
    color_range_image_ = new ::gz::msgs::StringMsg(*from.color_range_image_);
  } else {
    color_range_image_ = NULL;
  }
  if (from.has_topic()) {
    topic_ = new ::gz::msgs::StringMsg(*from.topic_);
  } else {
    topic_ = NULL;
  }
  if (from.has_particle_scatter_ratio()) {
    particle_scatter_ratio_ = new ::gz::msgs::Float(*from.particle_scatter_ratio_);
  } else {
    particle_scatter_ratio_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.ParticleEmitter)
}

void ParticleEmitter::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(type_));
}

ParticleEmitter::~ParticleEmitter() {
  // @@protoc_insertion_point(destructor:gz.msgs.ParticleEmitter)
  SharedDtor();
}

void ParticleEmitter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete size_;
  if (this != internal_default_instance()) delete rate_;
  if (this != internal_default_instance()) delete duration_;
  if (this != internal_default_instance()) delete emitting_;
  if (this != internal_default_instance()) delete particle_size_;
  if (this != internal_default_instance()) delete lifetime_;
  if (this != internal_default_instance()) delete material_;
  if (this != internal_default_instance()) delete min_velocity_;
  if (this != internal_default_instance()) delete max_velocity_;
  if (this != internal_default_instance()) delete color_start_;
  if (this != internal_default_instance()) delete color_end_;
  if (this != internal_default_instance()) delete scale_rate_;
  if (this != internal_default_instance()) delete color_range_image_;
  if (this != internal_default_instance()) delete topic_;
  if (this != internal_default_instance()) delete particle_scatter_ratio_;
}

void ParticleEmitter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ParticleEmitter::descriptor() {
  ::protobuf_gz_2fmsgs_2fparticle_5femitter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fparticle_5femitter_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParticleEmitter& ParticleEmitter::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fparticle_5femitter_2eproto::scc_info_ParticleEmitter.base);
  return *internal_default_instance();
}


void ParticleEmitter::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.ParticleEmitter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && size_ != NULL) {
    delete size_;
  }
  size_ = NULL;
  if (GetArenaNoVirtual() == NULL && rate_ != NULL) {
    delete rate_;
  }
  rate_ = NULL;
  if (GetArenaNoVirtual() == NULL && duration_ != NULL) {
    delete duration_;
  }
  duration_ = NULL;
  if (GetArenaNoVirtual() == NULL && emitting_ != NULL) {
    delete emitting_;
  }
  emitting_ = NULL;
  if (GetArenaNoVirtual() == NULL && particle_size_ != NULL) {
    delete particle_size_;
  }
  particle_size_ = NULL;
  if (GetArenaNoVirtual() == NULL && lifetime_ != NULL) {
    delete lifetime_;
  }
  lifetime_ = NULL;
  if (GetArenaNoVirtual() == NULL && material_ != NULL) {
    delete material_;
  }
  material_ = NULL;
  if (GetArenaNoVirtual() == NULL && min_velocity_ != NULL) {
    delete min_velocity_;
  }
  min_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_velocity_ != NULL) {
    delete max_velocity_;
  }
  max_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && color_start_ != NULL) {
    delete color_start_;
  }
  color_start_ = NULL;
  if (GetArenaNoVirtual() == NULL && color_end_ != NULL) {
    delete color_end_;
  }
  color_end_ = NULL;
  if (GetArenaNoVirtual() == NULL && scale_rate_ != NULL) {
    delete scale_rate_;
  }
  scale_rate_ = NULL;
  if (GetArenaNoVirtual() == NULL && color_range_image_ != NULL) {
    delete color_range_image_;
  }
  color_range_image_ = NULL;
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) {
    delete topic_;
  }
  topic_ = NULL;
  if (GetArenaNoVirtual() == NULL && particle_scatter_ratio_ != NULL) {
    delete particle_scatter_ratio_;
  }
  particle_scatter_ratio_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool ParticleEmitter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.ParticleEmitter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.ParticleEmitter.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.ParticleEmitter.EmitterType type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gz::msgs::ParticleEmitter_EmitterType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Pose pose = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Vector3d size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Float rate = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Float duration = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Boolean emitting = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_emitting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Vector3d particle_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_particle_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Float lifetime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lifetime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Material material = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_material()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Float min_velocity = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_min_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Float max_velocity = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Color color_start = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Color color_end = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Float scale_rate = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scale_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.StringMsg color_range_image = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color_range_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.StringMsg topic = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_topic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Float particle_scatter_ratio = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_particle_scatter_ratio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.ParticleEmitter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.ParticleEmitter)
  return false;
#undef DO_
}

void ParticleEmitter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.ParticleEmitter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.ParticleEmitter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // .gz.msgs.ParticleEmitter.EmitterType type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // .gz.msgs.Pose pose = 5;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_pose(), output);
  }

  // .gz.msgs.Vector3d size = 6;
  if (this->has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_size(), output);
  }

  // .gz.msgs.Float rate = 7;
  if (this->has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_rate(), output);
  }

  // .gz.msgs.Float duration = 8;
  if (this->has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_duration(), output);
  }

  // .gz.msgs.Boolean emitting = 9;
  if (this->has_emitting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_emitting(), output);
  }

  // .gz.msgs.Vector3d particle_size = 10;
  if (this->has_particle_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_particle_size(), output);
  }

  // .gz.msgs.Float lifetime = 11;
  if (this->has_lifetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_lifetime(), output);
  }

  // .gz.msgs.Material material = 12;
  if (this->has_material()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_material(), output);
  }

  // .gz.msgs.Float min_velocity = 13;
  if (this->has_min_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_min_velocity(), output);
  }

  // .gz.msgs.Float max_velocity = 14;
  if (this->has_max_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_max_velocity(), output);
  }

  // .gz.msgs.Color color_start = 15;
  if (this->has_color_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_color_start(), output);
  }

  // .gz.msgs.Color color_end = 16;
  if (this->has_color_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_color_end(), output);
  }

  // .gz.msgs.Float scale_rate = 17;
  if (this->has_scale_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_scale_rate(), output);
  }

  // .gz.msgs.StringMsg color_range_image = 18;
  if (this->has_color_range_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_internal_color_range_image(), output);
  }

  // .gz.msgs.StringMsg topic = 19;
  if (this->has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_topic(), output);
  }

  // .gz.msgs.Float particle_scatter_ratio = 20;
  if (this->has_particle_scatter_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_particle_scatter_ratio(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.ParticleEmitter)
}

::google::protobuf::uint8* ParticleEmitter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.ParticleEmitter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.ParticleEmitter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // .gz.msgs.ParticleEmitter.EmitterType type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // .gz.msgs.Pose pose = 5;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_pose(), deterministic, target);
  }

  // .gz.msgs.Vector3d size = 6;
  if (this->has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_size(), deterministic, target);
  }

  // .gz.msgs.Float rate = 7;
  if (this->has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_rate(), deterministic, target);
  }

  // .gz.msgs.Float duration = 8;
  if (this->has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_duration(), deterministic, target);
  }

  // .gz.msgs.Boolean emitting = 9;
  if (this->has_emitting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_emitting(), deterministic, target);
  }

  // .gz.msgs.Vector3d particle_size = 10;
  if (this->has_particle_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_particle_size(), deterministic, target);
  }

  // .gz.msgs.Float lifetime = 11;
  if (this->has_lifetime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_lifetime(), deterministic, target);
  }

  // .gz.msgs.Material material = 12;
  if (this->has_material()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_material(), deterministic, target);
  }

  // .gz.msgs.Float min_velocity = 13;
  if (this->has_min_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_min_velocity(), deterministic, target);
  }

  // .gz.msgs.Float max_velocity = 14;
  if (this->has_max_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_max_velocity(), deterministic, target);
  }

  // .gz.msgs.Color color_start = 15;
  if (this->has_color_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_color_start(), deterministic, target);
  }

  // .gz.msgs.Color color_end = 16;
  if (this->has_color_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_color_end(), deterministic, target);
  }

  // .gz.msgs.Float scale_rate = 17;
  if (this->has_scale_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_scale_rate(), deterministic, target);
  }

  // .gz.msgs.StringMsg color_range_image = 18;
  if (this->has_color_range_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->_internal_color_range_image(), deterministic, target);
  }

  // .gz.msgs.StringMsg topic = 19;
  if (this->has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_topic(), deterministic, target);
  }

  // .gz.msgs.Float particle_scatter_ratio = 20;
  if (this->has_particle_scatter_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_particle_scatter_ratio(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.ParticleEmitter)
  return target;
}

size_t ParticleEmitter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.ParticleEmitter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.Pose pose = 5;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .gz.msgs.Vector3d size = 6;
  if (this->has_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // .gz.msgs.Float rate = 7;
  if (this->has_rate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rate_);
  }

  // .gz.msgs.Float duration = 8;
  if (this->has_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // .gz.msgs.Boolean emitting = 9;
  if (this->has_emitting()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *emitting_);
  }

  // .gz.msgs.Vector3d particle_size = 10;
  if (this->has_particle_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *particle_size_);
  }

  // .gz.msgs.Float lifetime = 11;
  if (this->has_lifetime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lifetime_);
  }

  // .gz.msgs.Material material = 12;
  if (this->has_material()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *material_);
  }

  // .gz.msgs.Float min_velocity = 13;
  if (this->has_min_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *min_velocity_);
  }

  // .gz.msgs.Float max_velocity = 14;
  if (this->has_max_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *max_velocity_);
  }

  // .gz.msgs.Color color_start = 15;
  if (this->has_color_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *color_start_);
  }

  // .gz.msgs.Color color_end = 16;
  if (this->has_color_end()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *color_end_);
  }

  // .gz.msgs.Float scale_rate = 17;
  if (this->has_scale_rate()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *scale_rate_);
  }

  // .gz.msgs.StringMsg color_range_image = 18;
  if (this->has_color_range_image()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *color_range_image_);
  }

  // .gz.msgs.StringMsg topic = 19;
  if (this->has_topic()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *topic_);
  }

  // .gz.msgs.Float particle_scatter_ratio = 20;
  if (this->has_particle_scatter_ratio()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *particle_scatter_ratio_);
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // .gz.msgs.ParticleEmitter.EmitterType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParticleEmitter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.ParticleEmitter)
  GOOGLE_DCHECK_NE(&from, this);
  const ParticleEmitter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParticleEmitter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.ParticleEmitter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.ParticleEmitter)
    MergeFrom(*source);
  }
}

void ParticleEmitter::MergeFrom(const ParticleEmitter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.ParticleEmitter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_pose()) {
    mutable_pose()->::gz::msgs::Pose::MergeFrom(from.pose());
  }
  if (from.has_size()) {
    mutable_size()->::gz::msgs::Vector3d::MergeFrom(from.size());
  }
  if (from.has_rate()) {
    mutable_rate()->::gz::msgs::Float::MergeFrom(from.rate());
  }
  if (from.has_duration()) {
    mutable_duration()->::gz::msgs::Float::MergeFrom(from.duration());
  }
  if (from.has_emitting()) {
    mutable_emitting()->::gz::msgs::Boolean::MergeFrom(from.emitting());
  }
  if (from.has_particle_size()) {
    mutable_particle_size()->::gz::msgs::Vector3d::MergeFrom(from.particle_size());
  }
  if (from.has_lifetime()) {
    mutable_lifetime()->::gz::msgs::Float::MergeFrom(from.lifetime());
  }
  if (from.has_material()) {
    mutable_material()->::gz::msgs::Material::MergeFrom(from.material());
  }
  if (from.has_min_velocity()) {
    mutable_min_velocity()->::gz::msgs::Float::MergeFrom(from.min_velocity());
  }
  if (from.has_max_velocity()) {
    mutable_max_velocity()->::gz::msgs::Float::MergeFrom(from.max_velocity());
  }
  if (from.has_color_start()) {
    mutable_color_start()->::gz::msgs::Color::MergeFrom(from.color_start());
  }
  if (from.has_color_end()) {
    mutable_color_end()->::gz::msgs::Color::MergeFrom(from.color_end());
  }
  if (from.has_scale_rate()) {
    mutable_scale_rate()->::gz::msgs::Float::MergeFrom(from.scale_rate());
  }
  if (from.has_color_range_image()) {
    mutable_color_range_image()->::gz::msgs::StringMsg::MergeFrom(from.color_range_image());
  }
  if (from.has_topic()) {
    mutable_topic()->::gz::msgs::StringMsg::MergeFrom(from.topic());
  }
  if (from.has_particle_scatter_ratio()) {
    mutable_particle_scatter_ratio()->::gz::msgs::Float::MergeFrom(from.particle_scatter_ratio());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ParticleEmitter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.ParticleEmitter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParticleEmitter::CopyFrom(const ParticleEmitter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.ParticleEmitter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticleEmitter::IsInitialized() const {
  return true;
}

void ParticleEmitter::Swap(ParticleEmitter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParticleEmitter::InternalSwap(ParticleEmitter* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(pose_, other->pose_);
  swap(size_, other->size_);
  swap(rate_, other->rate_);
  swap(duration_, other->duration_);
  swap(emitting_, other->emitting_);
  swap(particle_size_, other->particle_size_);
  swap(lifetime_, other->lifetime_);
  swap(material_, other->material_);
  swap(min_velocity_, other->min_velocity_);
  swap(max_velocity_, other->max_velocity_);
  swap(color_start_, other->color_start_);
  swap(color_end_, other->color_end_);
  swap(scale_rate_, other->scale_rate_);
  swap(color_range_image_, other->color_range_image_);
  swap(topic_, other->topic_);
  swap(particle_scatter_ratio_, other->particle_scatter_ratio_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ParticleEmitter::GetMetadata() const {
  protobuf_gz_2fmsgs_2fparticle_5femitter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fparticle_5femitter_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::ParticleEmitter* Arena::CreateMaybeMessage< ::gz::msgs::ParticleEmitter >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::ParticleEmitter >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
