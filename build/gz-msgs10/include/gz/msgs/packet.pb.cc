// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/packet.proto

#include "gz/msgs/packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.Packet", Packet)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fclock_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fclock_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Clock;
}  // namespace protobuf_gz_2fmsgs_2fclock_2eproto
namespace protobuf_gz_2fmsgs_2fcmd_5fvel2d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fcmd_5fvel2d_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CmdVel2D;
}  // namespace protobuf_gz_2fmsgs_2fcmd_5fvel2d_2eproto
namespace protobuf_gz_2fmsgs_2fdouble_5fv_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fdouble_5fv_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Double_V;
}  // namespace protobuf_gz_2fmsgs_2fdouble_5fv_2eproto
namespace protobuf_gz_2fmsgs_2fimage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fimage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Image;
}  // namespace protobuf_gz_2fmsgs_2fimage_2eproto
namespace protobuf_gz_2fmsgs_2fpose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fpose_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Pose;
}  // namespace protobuf_gz_2fmsgs_2fpose_2eproto
namespace protobuf_gz_2fmsgs_2fpose_5fv_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fpose_5fv_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Pose_V;
}  // namespace protobuf_gz_2fmsgs_2fpose_5fv_2eproto
namespace protobuf_gz_2fmsgs_2fstringmsg_5fv_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fstringmsg_5fv_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StringMsg_V;
}  // namespace protobuf_gz_2fmsgs_2fstringmsg_5fv_2eproto
namespace protobuf_gz_2fmsgs_2ftime_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2ftime_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Time;
}  // namespace protobuf_gz_2fmsgs_2ftime_2eproto
namespace protobuf_gz_2fmsgs_2fweb_5frequest_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fweb_5frequest_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WebRequest;
}  // namespace protobuf_gz_2fmsgs_2fweb_5frequest_2eproto
namespace protobuf_gz_2fmsgs_2fworld_5fstats_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fworld_5fstats_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_WorldStatistics;
}  // namespace protobuf_gz_2fmsgs_2fworld_5fstats_2eproto
namespace gz {
namespace msgs {
class PacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Packet>
      _instance;
  const ::gz::msgs::CmdVel2D* cmd_vel2d_;
  const ::gz::msgs::Image* image_;
  const ::gz::msgs::StringMsg_V* string_msg_v_;
  const ::gz::msgs::WebRequest* web_request_;
  const ::gz::msgs::Pose* pose_;
  const ::gz::msgs::Double_V* doublev_;
  const ::gz::msgs::Pose_V* pose_v_;
  const ::gz::msgs::Time* time_;
  const ::gz::msgs::Clock* clock_;
  const ::gz::msgs::WorldStatistics* world_stats_;
} _Packet_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fpacket_2eproto {
static void InitDefaultsPacket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Packet_default_instance_;
    new (ptr) ::gz::msgs::Packet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Packet::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<10> scc_info_Packet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 10, InitDefaultsPacket}, {
      &protobuf_gz_2fmsgs_2fcmd_5fvel2d_2eproto::scc_info_CmdVel2D.base,
      &protobuf_gz_2fmsgs_2fimage_2eproto::scc_info_Image.base,
      &protobuf_gz_2fmsgs_2fstringmsg_5fv_2eproto::scc_info_StringMsg_V.base,
      &protobuf_gz_2fmsgs_2fweb_5frequest_2eproto::scc_info_WebRequest.base,
      &protobuf_gz_2fmsgs_2fpose_2eproto::scc_info_Pose.base,
      &protobuf_gz_2fmsgs_2fdouble_5fv_2eproto::scc_info_Double_V.base,
      &protobuf_gz_2fmsgs_2fpose_5fv_2eproto::scc_info_Pose_V.base,
      &protobuf_gz_2fmsgs_2ftime_2eproto::scc_info_Time.base,
      &protobuf_gz_2fmsgs_2fclock_2eproto::scc_info_Clock.base,
      &protobuf_gz_2fmsgs_2fworld_5fstats_2eproto::scc_info_WorldStatistics.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Packet.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Packet, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Packet, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Packet, topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Packet, type_),
  offsetof(::gz::msgs::PacketDefaultTypeInternal, cmd_vel2d_),
  offsetof(::gz::msgs::PacketDefaultTypeInternal, image_),
  offsetof(::gz::msgs::PacketDefaultTypeInternal, string_msg_v_),
  offsetof(::gz::msgs::PacketDefaultTypeInternal, web_request_),
  offsetof(::gz::msgs::PacketDefaultTypeInternal, pose_),
  offsetof(::gz::msgs::PacketDefaultTypeInternal, doublev_),
  offsetof(::gz::msgs::PacketDefaultTypeInternal, pose_v_),
  offsetof(::gz::msgs::PacketDefaultTypeInternal, time_),
  offsetof(::gz::msgs::PacketDefaultTypeInternal, clock_),
  offsetof(::gz::msgs::PacketDefaultTypeInternal, world_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Packet, content_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::Packet)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Packet_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/packet.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024gz/msgs/packet.proto\022\007gz.msgs\032\026gz/msgs"
      "/double_v.proto\032\023gz/msgs/clock.proto\032\027gz"
      "/msgs/cmd_vel2d.proto\032\023gz/msgs/image.pro"
      "to\032\022gz/msgs/pose.proto\032\024gz/msgs/pose_v.p"
      "roto\032\031gz/msgs/stringmsg_v.proto\032\022gz/msgs"
      "/time.proto\032\031gz/msgs/web_request.proto\032\031"
      "gz/msgs/world_stats.proto\"\254\003\n\006Packet\022\r\n\005"
      "topic\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022&\n\tcmd_vel2d\030\003"
      " \001(\0132\021.gz.msgs.CmdVel2DH\000\022\037\n\005image\030\004 \001(\013"
      "2\016.gz.msgs.ImageH\000\022,\n\014string_msg_v\030\005 \001(\013"
      "2\024.gz.msgs.StringMsg_VH\000\022*\n\013web_request\030"
      "\006 \001(\0132\023.gz.msgs.WebRequestH\000\022\035\n\004pose\030\007 \001"
      "(\0132\r.gz.msgs.PoseH\000\022$\n\007doublev\030\010 \001(\0132\021.g"
      "z.msgs.Double_VH\000\022!\n\006pose_v\030\t \001(\0132\017.gz.m"
      "sgs.Pose_VH\000\022\035\n\004time\030\n \001(\0132\r.gz.msgs.Tim"
      "eH\000\022\037\n\005clock\030\013 \001(\0132\016.gz.msgs.ClockH\000\022/\n\013"
      "world_stats\030\014 \001(\0132\030.gz.msgs.WorldStatist"
      "icsH\000B\t\n\007contentB\033\n\013com.gz.msgsB\014PacketP"
      "rotosb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 733);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/packet.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fdouble_5fv_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fclock_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fcmd_5fvel2d_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fimage_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fpose_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fpose_5fv_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fstringmsg_5fv_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2ftime_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fweb_5frequest_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fworld_5fstats_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fpacket_2eproto
namespace gz {
namespace msgs {

// ===================================================================

void Packet::InitAsDefaultInstance() {
  ::gz::msgs::_Packet_default_instance_.cmd_vel2d_ = const_cast< ::gz::msgs::CmdVel2D*>(
      ::gz::msgs::CmdVel2D::internal_default_instance());
  ::gz::msgs::_Packet_default_instance_.image_ = const_cast< ::gz::msgs::Image*>(
      ::gz::msgs::Image::internal_default_instance());
  ::gz::msgs::_Packet_default_instance_.string_msg_v_ = const_cast< ::gz::msgs::StringMsg_V*>(
      ::gz::msgs::StringMsg_V::internal_default_instance());
  ::gz::msgs::_Packet_default_instance_.web_request_ = const_cast< ::gz::msgs::WebRequest*>(
      ::gz::msgs::WebRequest::internal_default_instance());
  ::gz::msgs::_Packet_default_instance_.pose_ = const_cast< ::gz::msgs::Pose*>(
      ::gz::msgs::Pose::internal_default_instance());
  ::gz::msgs::_Packet_default_instance_.doublev_ = const_cast< ::gz::msgs::Double_V*>(
      ::gz::msgs::Double_V::internal_default_instance());
  ::gz::msgs::_Packet_default_instance_.pose_v_ = const_cast< ::gz::msgs::Pose_V*>(
      ::gz::msgs::Pose_V::internal_default_instance());
  ::gz::msgs::_Packet_default_instance_.time_ = const_cast< ::gz::msgs::Time*>(
      ::gz::msgs::Time::internal_default_instance());
  ::gz::msgs::_Packet_default_instance_.clock_ = const_cast< ::gz::msgs::Clock*>(
      ::gz::msgs::Clock::internal_default_instance());
  ::gz::msgs::_Packet_default_instance_.world_stats_ = const_cast< ::gz::msgs::WorldStatistics*>(
      ::gz::msgs::WorldStatistics::internal_default_instance());
}
void Packet::set_allocated_cmd_vel2d(::gz::msgs::CmdVel2D* cmd_vel2d) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (cmd_vel2d) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cmd_vel2d = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cmd_vel2d, submessage_arena);
    }
    set_has_cmd_vel2d();
    content_.cmd_vel2d_ = cmd_vel2d;
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Packet.cmd_vel2d)
}
void Packet::clear_cmd_vel2d() {
  if (has_cmd_vel2d()) {
    delete content_.cmd_vel2d_;
    clear_has_content();
  }
}
void Packet::set_allocated_image(::gz::msgs::Image* image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (image) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    set_has_image();
    content_.image_ = image;
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Packet.image)
}
void Packet::clear_image() {
  if (has_image()) {
    delete content_.image_;
    clear_has_content();
  }
}
void Packet::set_allocated_string_msg_v(::gz::msgs::StringMsg_V* string_msg_v) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (string_msg_v) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      string_msg_v = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, string_msg_v, submessage_arena);
    }
    set_has_string_msg_v();
    content_.string_msg_v_ = string_msg_v;
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Packet.string_msg_v)
}
void Packet::clear_string_msg_v() {
  if (has_string_msg_v()) {
    delete content_.string_msg_v_;
    clear_has_content();
  }
}
void Packet::set_allocated_web_request(::gz::msgs::WebRequest* web_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (web_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      web_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, web_request, submessage_arena);
    }
    set_has_web_request();
    content_.web_request_ = web_request;
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Packet.web_request)
}
void Packet::clear_web_request() {
  if (has_web_request()) {
    delete content_.web_request_;
    clear_has_content();
  }
}
void Packet::set_allocated_pose(::gz::msgs::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    set_has_pose();
    content_.pose_ = pose;
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Packet.pose)
}
void Packet::clear_pose() {
  if (has_pose()) {
    delete content_.pose_;
    clear_has_content();
  }
}
void Packet::set_allocated_doublev(::gz::msgs::Double_V* doublev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (doublev) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      doublev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, doublev, submessage_arena);
    }
    set_has_doublev();
    content_.doublev_ = doublev;
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Packet.doublev)
}
void Packet::clear_doublev() {
  if (has_doublev()) {
    delete content_.doublev_;
    clear_has_content();
  }
}
void Packet::set_allocated_pose_v(::gz::msgs::Pose_V* pose_v) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (pose_v) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose_v = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose_v, submessage_arena);
    }
    set_has_pose_v();
    content_.pose_v_ = pose_v;
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Packet.pose_v)
}
void Packet::clear_pose_v() {
  if (has_pose_v()) {
    delete content_.pose_v_;
    clear_has_content();
  }
}
void Packet::set_allocated_time(::gz::msgs::Time* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    set_has_time();
    content_.time_ = time;
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Packet.time)
}
void Packet::clear_time() {
  if (has_time()) {
    delete content_.time_;
    clear_has_content();
  }
}
void Packet::set_allocated_clock(::gz::msgs::Clock* clock) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (clock) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      clock = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, clock, submessage_arena);
    }
    set_has_clock();
    content_.clock_ = clock;
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Packet.clock)
}
void Packet::clear_clock() {
  if (has_clock()) {
    delete content_.clock_;
    clear_has_content();
  }
}
void Packet::set_allocated_world_stats(::gz::msgs::WorldStatistics* world_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (world_stats) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      world_stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, world_stats, submessage_arena);
    }
    set_has_world_stats();
    content_.world_stats_ = world_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Packet.world_stats)
}
void Packet::clear_world_stats() {
  if (has_world_stats()) {
    delete content_.world_stats_;
    clear_has_content();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Packet::kTopicFieldNumber;
const int Packet::kTypeFieldNumber;
const int Packet::kCmdVel2DFieldNumber;
const int Packet::kImageFieldNumber;
const int Packet::kStringMsgVFieldNumber;
const int Packet::kWebRequestFieldNumber;
const int Packet::kPoseFieldNumber;
const int Packet::kDoublevFieldNumber;
const int Packet::kPoseVFieldNumber;
const int Packet::kTimeFieldNumber;
const int Packet::kClockFieldNumber;
const int Packet::kWorldStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Packet::Packet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fpacket_2eproto::scc_info_Packet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Packet)
}
Packet::Packet(const Packet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  clear_has_content();
  switch (from.content_case()) {
    case kCmdVel2D: {
      mutable_cmd_vel2d()->::gz::msgs::CmdVel2D::MergeFrom(from.cmd_vel2d());
      break;
    }
    case kImage: {
      mutable_image()->::gz::msgs::Image::MergeFrom(from.image());
      break;
    }
    case kStringMsgV: {
      mutable_string_msg_v()->::gz::msgs::StringMsg_V::MergeFrom(from.string_msg_v());
      break;
    }
    case kWebRequest: {
      mutable_web_request()->::gz::msgs::WebRequest::MergeFrom(from.web_request());
      break;
    }
    case kPose: {
      mutable_pose()->::gz::msgs::Pose::MergeFrom(from.pose());
      break;
    }
    case kDoublev: {
      mutable_doublev()->::gz::msgs::Double_V::MergeFrom(from.doublev());
      break;
    }
    case kPoseV: {
      mutable_pose_v()->::gz::msgs::Pose_V::MergeFrom(from.pose_v());
      break;
    }
    case kTime: {
      mutable_time()->::gz::msgs::Time::MergeFrom(from.time());
      break;
    }
    case kClock: {
      mutable_clock()->::gz::msgs::Clock::MergeFrom(from.clock());
      break;
    }
    case kWorldStats: {
      mutable_world_stats()->::gz::msgs::WorldStatistics::MergeFrom(from.world_stats());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Packet)
}

void Packet::SharedCtor() {
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:gz.msgs.Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_content()) {
    clear_content();
  }
}

void Packet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Packet::descriptor() {
  ::protobuf_gz_2fmsgs_2fpacket_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fpacket_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Packet& Packet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fpacket_2eproto::scc_info_Packet.base);
  return *internal_default_instance();
}


void Packet::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:gz.msgs.Packet)
  switch (content_case()) {
    case kCmdVel2D: {
      delete content_.cmd_vel2d_;
      break;
    }
    case kImage: {
      delete content_.image_;
      break;
    }
    case kStringMsgV: {
      delete content_.string_msg_v_;
      break;
    }
    case kWebRequest: {
      delete content_.web_request_;
      break;
    }
    case kPose: {
      delete content_.pose_;
      break;
    }
    case kDoublev: {
      delete content_.doublev_;
      break;
    }
    case kPoseV: {
      delete content_.pose_v_;
      break;
    }
    case kTime: {
      delete content_.time_;
      break;
    }
    case kClock: {
      delete content_.clock_;
      break;
    }
    case kWorldStats: {
      delete content_.world_stats_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_content();
  _internal_metadata_.Clear();
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Packet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string topic = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Packet.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Packet.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.CmdVel2D cmd_vel2d = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cmd_vel2d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Image image = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.StringMsg_V string_msg_v = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_string_msg_v()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.WebRequest web_request = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_web_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Pose pose = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Double_V doublev = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_doublev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Pose_V pose_v = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose_v()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Time time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Clock clock = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.WorldStatistics world_stats = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_world_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Packet.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Packet.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // .gz.msgs.CmdVel2D cmd_vel2d = 3;
  if (has_cmd_vel2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_cmd_vel2d(), output);
  }

  // .gz.msgs.Image image = 4;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_image(), output);
  }

  // .gz.msgs.StringMsg_V string_msg_v = 5;
  if (has_string_msg_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_string_msg_v(), output);
  }

  // .gz.msgs.WebRequest web_request = 6;
  if (has_web_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_web_request(), output);
  }

  // .gz.msgs.Pose pose = 7;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_pose(), output);
  }

  // .gz.msgs.Double_V doublev = 8;
  if (has_doublev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_doublev(), output);
  }

  // .gz.msgs.Pose_V pose_v = 9;
  if (has_pose_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_pose_v(), output);
  }

  // .gz.msgs.Time time = 10;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_time(), output);
  }

  // .gz.msgs.Clock clock = 11;
  if (has_clock()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_clock(), output);
  }

  // .gz.msgs.WorldStatistics world_stats = 12;
  if (has_world_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_world_stats(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Packet)
}

::google::protobuf::uint8* Packet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Packet.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Packet.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // .gz.msgs.CmdVel2D cmd_vel2d = 3;
  if (has_cmd_vel2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_cmd_vel2d(), deterministic, target);
  }

  // .gz.msgs.Image image = 4;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_image(), deterministic, target);
  }

  // .gz.msgs.StringMsg_V string_msg_v = 5;
  if (has_string_msg_v()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_string_msg_v(), deterministic, target);
  }

  // .gz.msgs.WebRequest web_request = 6;
  if (has_web_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_web_request(), deterministic, target);
  }

  // .gz.msgs.Pose pose = 7;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_pose(), deterministic, target);
  }

  // .gz.msgs.Double_V doublev = 8;
  if (has_doublev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_doublev(), deterministic, target);
  }

  // .gz.msgs.Pose_V pose_v = 9;
  if (has_pose_v()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_pose_v(), deterministic, target);
  }

  // .gz.msgs.Time time = 10;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_time(), deterministic, target);
  }

  // .gz.msgs.Clock clock = 11;
  if (has_clock()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_clock(), deterministic, target);
  }

  // .gz.msgs.WorldStatistics world_stats = 12;
  if (has_world_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_world_stats(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Packet)
  return target;
}

size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Packet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  switch (content_case()) {
    // .gz.msgs.CmdVel2D cmd_vel2d = 3;
    case kCmdVel2D: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.cmd_vel2d_);
      break;
    }
    // .gz.msgs.Image image = 4;
    case kImage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.image_);
      break;
    }
    // .gz.msgs.StringMsg_V string_msg_v = 5;
    case kStringMsgV: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.string_msg_v_);
      break;
    }
    // .gz.msgs.WebRequest web_request = 6;
    case kWebRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.web_request_);
      break;
    }
    // .gz.msgs.Pose pose = 7;
    case kPose: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.pose_);
      break;
    }
    // .gz.msgs.Double_V doublev = 8;
    case kDoublev: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.doublev_);
      break;
    }
    // .gz.msgs.Pose_V pose_v = 9;
    case kPoseV: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.pose_v_);
      break;
    }
    // .gz.msgs.Time time = 10;
    case kTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.time_);
      break;
    }
    // .gz.msgs.Clock clock = 11;
    case kClock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.clock_);
      break;
    }
    // .gz.msgs.WorldStatistics world_stats = 12;
    case kWorldStats: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.world_stats_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Packet)
  GOOGLE_DCHECK_NE(&from, this);
  const Packet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Packet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Packet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Packet)
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Packet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  switch (from.content_case()) {
    case kCmdVel2D: {
      mutable_cmd_vel2d()->::gz::msgs::CmdVel2D::MergeFrom(from.cmd_vel2d());
      break;
    }
    case kImage: {
      mutable_image()->::gz::msgs::Image::MergeFrom(from.image());
      break;
    }
    case kStringMsgV: {
      mutable_string_msg_v()->::gz::msgs::StringMsg_V::MergeFrom(from.string_msg_v());
      break;
    }
    case kWebRequest: {
      mutable_web_request()->::gz::msgs::WebRequest::MergeFrom(from.web_request());
      break;
    }
    case kPose: {
      mutable_pose()->::gz::msgs::Pose::MergeFrom(from.pose());
      break;
    }
    case kDoublev: {
      mutable_doublev()->::gz::msgs::Double_V::MergeFrom(from.doublev());
      break;
    }
    case kPoseV: {
      mutable_pose_v()->::gz::msgs::Pose_V::MergeFrom(from.pose_v());
      break;
    }
    case kTime: {
      mutable_time()->::gz::msgs::Time::MergeFrom(from.time());
      break;
    }
    case kClock: {
      mutable_clock()->::gz::msgs::Clock::MergeFrom(from.clock());
      break;
    }
    case kWorldStats: {
      mutable_world_stats()->::gz::msgs::WorldStatistics::MergeFrom(from.world_stats());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::Swap(Packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Packet::InternalSwap(Packet* other) {
  using std::swap;
  topic_.Swap(&other->topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_gz_2fmsgs_2fpacket_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fpacket_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Packet* Arena::CreateMaybeMessage< ::gz::msgs::Packet >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Packet >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
