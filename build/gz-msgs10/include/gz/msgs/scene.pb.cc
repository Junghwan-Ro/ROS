// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/scene.proto

#include "gz/msgs/scene.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.Scene", Scene)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fcolor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fcolor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Color;
}  // namespace protobuf_gz_2fmsgs_2fcolor_2eproto
namespace protobuf_gz_2fmsgs_2ffog_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2ffog_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Fog;
}  // namespace protobuf_gz_2fmsgs_2ffog_2eproto
namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace protobuf_gz_2fmsgs_2fjoint_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fjoint_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_Joint;
}  // namespace protobuf_gz_2fmsgs_2fjoint_2eproto
namespace protobuf_gz_2fmsgs_2flight_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2flight_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Light;
}  // namespace protobuf_gz_2fmsgs_2flight_2eproto
namespace protobuf_gz_2fmsgs_2fmaterial_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fmaterial_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Material_Script;
}  // namespace protobuf_gz_2fmsgs_2fmaterial_2eproto
namespace protobuf_gz_2fmsgs_2fmodel_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fmodel_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_Model;
}  // namespace protobuf_gz_2fmsgs_2fmodel_2eproto
namespace protobuf_gz_2fmsgs_2fsky_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fsky_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Sky;
}  // namespace protobuf_gz_2fmsgs_2fsky_2eproto
namespace gz {
namespace msgs {
class SceneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Scene>
      _instance;
} _Scene_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fscene_2eproto {
static void InitDefaultsScene() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Scene_default_instance_;
    new (ptr) ::gz::msgs::Scene();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Scene::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<8> scc_info_Scene =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsScene}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2fcolor_2eproto::scc_info_Color.base,
      &protobuf_gz_2fmsgs_2fsky_2eproto::scc_info_Sky.base,
      &protobuf_gz_2fmsgs_2ffog_2eproto::scc_info_Fog.base,
      &protobuf_gz_2fmsgs_2fmodel_2eproto::scc_info_Model.base,
      &protobuf_gz_2fmsgs_2flight_2eproto::scc_info_Light.base,
      &protobuf_gz_2fmsgs_2fjoint_2eproto::scc_info_Joint.base,
      &protobuf_gz_2fmsgs_2fmaterial_2eproto::scc_info_Material_Script.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Scene.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Scene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Scene, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Scene, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Scene, ambient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Scene, background_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Scene, sky_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Scene, shadows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Scene, fog_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Scene, grid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Scene, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Scene, light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Scene, joint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Scene, origin_visual_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Scene, shadow_caster_material_script_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::Scene)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Scene_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/scene.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023gz/msgs/scene.proto\022\007gz.msgs\032\023gz/msgs/"
      "color.proto\032\021gz/msgs/fog.proto\032\021gz/msgs/"
      "sky.proto\032\023gz/msgs/light.proto\032\023gz/msgs/"
      "joint.proto\032\026gz/msgs/material.proto\032\023gz/"
      "msgs/model.proto\032\024gz/msgs/header.proto\"\205"
      "\003\n\005Scene\022\037\n\006header\030\001 \001(\0132\017.gz.msgs.Heade"
      "r\022\014\n\004name\030\002 \001(\t\022\037\n\007ambient\030\003 \001(\0132\016.gz.ms"
      "gs.Color\022\"\n\nbackground\030\004 \001(\0132\016.gz.msgs.C"
      "olor\022\031\n\003sky\030\005 \001(\0132\014.gz.msgs.Sky\022\017\n\007shado"
      "ws\030\006 \001(\010\022\031\n\003fog\030\007 \001(\0132\014.gz.msgs.Fog\022\014\n\004g"
      "rid\030\010 \001(\010\022\035\n\005model\030\t \003(\0132\016.gz.msgs.Model"
      "\022\035\n\005light\030\n \003(\0132\016.gz.msgs.Light\022\035\n\005joint"
      "\030\013 \003(\0132\016.gz.msgs.Joint\022\025\n\rorigin_visual\030"
      "\014 \001(\010\022\?\n\035shadow_caster_material_script\030\r"
      " \001(\0132\030.gz.msgs.Material.ScriptB\032\n\013com.gz"
      ".msgsB\013SceneProtosb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 626);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/scene.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fcolor_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2ffog_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fsky_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2flight_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fjoint_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fmaterial_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fmodel_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fscene_2eproto
namespace gz {
namespace msgs {

// ===================================================================

void Scene::InitAsDefaultInstance() {
  ::gz::msgs::_Scene_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_Scene_default_instance_._instance.get_mutable()->ambient_ = const_cast< ::gz::msgs::Color*>(
      ::gz::msgs::Color::internal_default_instance());
  ::gz::msgs::_Scene_default_instance_._instance.get_mutable()->background_ = const_cast< ::gz::msgs::Color*>(
      ::gz::msgs::Color::internal_default_instance());
  ::gz::msgs::_Scene_default_instance_._instance.get_mutable()->sky_ = const_cast< ::gz::msgs::Sky*>(
      ::gz::msgs::Sky::internal_default_instance());
  ::gz::msgs::_Scene_default_instance_._instance.get_mutable()->fog_ = const_cast< ::gz::msgs::Fog*>(
      ::gz::msgs::Fog::internal_default_instance());
  ::gz::msgs::_Scene_default_instance_._instance.get_mutable()->shadow_caster_material_script_ = const_cast< ::gz::msgs::Material_Script*>(
      ::gz::msgs::Material_Script::internal_default_instance());
}
void Scene::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void Scene::clear_ambient() {
  if (GetArenaNoVirtual() == NULL && ambient_ != NULL) {
    delete ambient_;
  }
  ambient_ = NULL;
}
void Scene::clear_background() {
  if (GetArenaNoVirtual() == NULL && background_ != NULL) {
    delete background_;
  }
  background_ = NULL;
}
void Scene::clear_sky() {
  if (GetArenaNoVirtual() == NULL && sky_ != NULL) {
    delete sky_;
  }
  sky_ = NULL;
}
void Scene::clear_fog() {
  if (GetArenaNoVirtual() == NULL && fog_ != NULL) {
    delete fog_;
  }
  fog_ = NULL;
}
void Scene::clear_model() {
  model_.Clear();
}
void Scene::clear_light() {
  light_.Clear();
}
void Scene::clear_joint() {
  joint_.Clear();
}
void Scene::clear_shadow_caster_material_script() {
  if (GetArenaNoVirtual() == NULL && shadow_caster_material_script_ != NULL) {
    delete shadow_caster_material_script_;
  }
  shadow_caster_material_script_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scene::kHeaderFieldNumber;
const int Scene::kNameFieldNumber;
const int Scene::kAmbientFieldNumber;
const int Scene::kBackgroundFieldNumber;
const int Scene::kSkyFieldNumber;
const int Scene::kShadowsFieldNumber;
const int Scene::kFogFieldNumber;
const int Scene::kGridFieldNumber;
const int Scene::kModelFieldNumber;
const int Scene::kLightFieldNumber;
const int Scene::kJointFieldNumber;
const int Scene::kOriginVisualFieldNumber;
const int Scene::kShadowCasterMaterialScriptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scene::Scene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fscene_2eproto::scc_info_Scene.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Scene)
}
Scene::Scene(const Scene& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      model_(from.model_),
      light_(from.light_),
      joint_(from.joint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_ambient()) {
    ambient_ = new ::gz::msgs::Color(*from.ambient_);
  } else {
    ambient_ = NULL;
  }
  if (from.has_background()) {
    background_ = new ::gz::msgs::Color(*from.background_);
  } else {
    background_ = NULL;
  }
  if (from.has_sky()) {
    sky_ = new ::gz::msgs::Sky(*from.sky_);
  } else {
    sky_ = NULL;
  }
  if (from.has_fog()) {
    fog_ = new ::gz::msgs::Fog(*from.fog_);
  } else {
    fog_ = NULL;
  }
  if (from.has_shadow_caster_material_script()) {
    shadow_caster_material_script_ = new ::gz::msgs::Material_Script(*from.shadow_caster_material_script_);
  } else {
    shadow_caster_material_script_ = NULL;
  }
  ::memcpy(&shadows_, &from.shadows_,
    static_cast<size_t>(reinterpret_cast<char*>(&origin_visual_) -
    reinterpret_cast<char*>(&shadows_)) + sizeof(origin_visual_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Scene)
}

void Scene::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&origin_visual_) -
      reinterpret_cast<char*>(&header_)) + sizeof(origin_visual_));
}

Scene::~Scene() {
  // @@protoc_insertion_point(destructor:gz.msgs.Scene)
  SharedDtor();
}

void Scene::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete ambient_;
  if (this != internal_default_instance()) delete background_;
  if (this != internal_default_instance()) delete sky_;
  if (this != internal_default_instance()) delete fog_;
  if (this != internal_default_instance()) delete shadow_caster_material_script_;
}

void Scene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Scene::descriptor() {
  ::protobuf_gz_2fmsgs_2fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fscene_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Scene& Scene::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fscene_2eproto::scc_info_Scene.base);
  return *internal_default_instance();
}


void Scene::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Scene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.Clear();
  light_.Clear();
  joint_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && ambient_ != NULL) {
    delete ambient_;
  }
  ambient_ = NULL;
  if (GetArenaNoVirtual() == NULL && background_ != NULL) {
    delete background_;
  }
  background_ = NULL;
  if (GetArenaNoVirtual() == NULL && sky_ != NULL) {
    delete sky_;
  }
  sky_ = NULL;
  if (GetArenaNoVirtual() == NULL && fog_ != NULL) {
    delete fog_;
  }
  fog_ = NULL;
  if (GetArenaNoVirtual() == NULL && shadow_caster_material_script_ != NULL) {
    delete shadow_caster_material_script_;
  }
  shadow_caster_material_script_ = NULL;
  ::memset(&shadows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&origin_visual_) -
      reinterpret_cast<char*>(&shadows_)) + sizeof(origin_visual_));
  _internal_metadata_.Clear();
}

bool Scene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Scene)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Scene.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Color ambient = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ambient()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Color background = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_background()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Sky sky = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sky()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shadows = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shadows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Fog fog = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool grid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &grid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.Model model = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.Light light = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.Joint joint = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_joint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool origin_visual = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &origin_visual_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Material.Script shadow_caster_material_script = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shadow_caster_material_script()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Scene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Scene)
  return false;
#undef DO_
}

void Scene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Scene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Scene.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .gz.msgs.Color ambient = 3;
  if (this->has_ambient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_ambient(), output);
  }

  // .gz.msgs.Color background = 4;
  if (this->has_background()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_background(), output);
  }

  // .gz.msgs.Sky sky = 5;
  if (this->has_sky()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_sky(), output);
  }

  // bool shadows = 6;
  if (this->shadows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->shadows(), output);
  }

  // .gz.msgs.Fog fog = 7;
  if (this->has_fog()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_fog(), output);
  }

  // bool grid = 8;
  if (this->grid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->grid(), output);
  }

  // repeated .gz.msgs.Model model = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->model_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->model(static_cast<int>(i)),
      output);
  }

  // repeated .gz.msgs.Light light = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->light_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->light(static_cast<int>(i)),
      output);
  }

  // repeated .gz.msgs.Joint joint = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->joint_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->joint(static_cast<int>(i)),
      output);
  }

  // bool origin_visual = 12;
  if (this->origin_visual() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->origin_visual(), output);
  }

  // .gz.msgs.Material.Script shadow_caster_material_script = 13;
  if (this->has_shadow_caster_material_script()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_shadow_caster_material_script(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Scene)
}

::google::protobuf::uint8* Scene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Scene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Scene.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .gz.msgs.Color ambient = 3;
  if (this->has_ambient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_ambient(), deterministic, target);
  }

  // .gz.msgs.Color background = 4;
  if (this->has_background()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_background(), deterministic, target);
  }

  // .gz.msgs.Sky sky = 5;
  if (this->has_sky()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_sky(), deterministic, target);
  }

  // bool shadows = 6;
  if (this->shadows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->shadows(), target);
  }

  // .gz.msgs.Fog fog = 7;
  if (this->has_fog()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_fog(), deterministic, target);
  }

  // bool grid = 8;
  if (this->grid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->grid(), target);
  }

  // repeated .gz.msgs.Model model = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->model_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->model(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gz.msgs.Light light = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->light_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->light(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gz.msgs.Joint joint = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->joint_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->joint(static_cast<int>(i)), deterministic, target);
  }

  // bool origin_visual = 12;
  if (this->origin_visual() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->origin_visual(), target);
  }

  // .gz.msgs.Material.Script shadow_caster_material_script = 13;
  if (this->has_shadow_caster_material_script()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_shadow_caster_material_script(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Scene)
  return target;
}

size_t Scene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Scene)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gz.msgs.Model model = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->model_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->model(static_cast<int>(i)));
    }
  }

  // repeated .gz.msgs.Light light = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->light_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->light(static_cast<int>(i)));
    }
  }

  // repeated .gz.msgs.Joint joint = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->joint_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->joint(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.Color ambient = 3;
  if (this->has_ambient()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ambient_);
  }

  // .gz.msgs.Color background = 4;
  if (this->has_background()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *background_);
  }

  // .gz.msgs.Sky sky = 5;
  if (this->has_sky()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sky_);
  }

  // .gz.msgs.Fog fog = 7;
  if (this->has_fog()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fog_);
  }

  // .gz.msgs.Material.Script shadow_caster_material_script = 13;
  if (this->has_shadow_caster_material_script()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *shadow_caster_material_script_);
  }

  // bool shadows = 6;
  if (this->shadows() != 0) {
    total_size += 1 + 1;
  }

  // bool grid = 8;
  if (this->grid() != 0) {
    total_size += 1 + 1;
  }

  // bool origin_visual = 12;
  if (this->origin_visual() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Scene)
  GOOGLE_DCHECK_NE(&from, this);
  const Scene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Scene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Scene)
    MergeFrom(*source);
  }
}

void Scene::MergeFrom(const Scene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Scene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  model_.MergeFrom(from.model_);
  light_.MergeFrom(from.light_);
  joint_.MergeFrom(from.joint_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_ambient()) {
    mutable_ambient()->::gz::msgs::Color::MergeFrom(from.ambient());
  }
  if (from.has_background()) {
    mutable_background()->::gz::msgs::Color::MergeFrom(from.background());
  }
  if (from.has_sky()) {
    mutable_sky()->::gz::msgs::Sky::MergeFrom(from.sky());
  }
  if (from.has_fog()) {
    mutable_fog()->::gz::msgs::Fog::MergeFrom(from.fog());
  }
  if (from.has_shadow_caster_material_script()) {
    mutable_shadow_caster_material_script()->::gz::msgs::Material_Script::MergeFrom(from.shadow_caster_material_script());
  }
  if (from.shadows() != 0) {
    set_shadows(from.shadows());
  }
  if (from.grid() != 0) {
    set_grid(from.grid());
  }
  if (from.origin_visual() != 0) {
    set_origin_visual(from.origin_visual());
  }
}

void Scene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Scene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scene::CopyFrom(const Scene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Scene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scene::IsInitialized() const {
  return true;
}

void Scene::Swap(Scene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scene::InternalSwap(Scene* other) {
  using std::swap;
  CastToBase(&model_)->InternalSwap(CastToBase(&other->model_));
  CastToBase(&light_)->InternalSwap(CastToBase(&other->light_));
  CastToBase(&joint_)->InternalSwap(CastToBase(&other->joint_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(ambient_, other->ambient_);
  swap(background_, other->background_);
  swap(sky_, other->sky_);
  swap(fog_, other->fog_);
  swap(shadow_caster_material_script_, other->shadow_caster_material_script_);
  swap(shadows_, other->shadows_);
  swap(grid_, other->grid_);
  swap(origin_visual_, other->origin_visual_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Scene::GetMetadata() const {
  protobuf_gz_2fmsgs_2fscene_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fscene_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Scene* Arena::CreateMaybeMessage< ::gz::msgs::Scene >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Scene >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
