// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/distortion.proto

#include "gz/msgs/distortion.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.Distortion", Distortion)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace protobuf_gz_2fmsgs_2fvector2d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fvector2d_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Vector2d;
}  // namespace protobuf_gz_2fmsgs_2fvector2d_2eproto
namespace gz {
namespace msgs {
class DistortionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Distortion>
      _instance;
} _Distortion_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fdistortion_2eproto {
static void InitDefaultsDistortion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Distortion_default_instance_;
    new (ptr) ::gz::msgs::Distortion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Distortion::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<2> scc_info_Distortion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDistortion}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2fvector2d_2eproto::scc_info_Vector2d.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Distortion.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Distortion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Distortion, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Distortion, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Distortion, k1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Distortion, k2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Distortion, k3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Distortion, p1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Distortion, p2_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::Distortion)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Distortion_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/distortion.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030gz/msgs/distortion.proto\022\007gz.msgs\032\026gz/"
      "msgs/vector2d.proto\032\024gz/msgs/header.prot"
      "o\"\214\001\n\nDistortion\022\037\n\006header\030\001 \001(\0132\017.gz.ms"
      "gs.Header\022!\n\006center\030\002 \001(\0132\021.gz.msgs.Vect"
      "or2d\022\n\n\002k1\030\003 \001(\001\022\n\n\002k2\030\004 \001(\001\022\n\n\002k3\030\005 \001(\001"
      "\022\n\n\002p1\030\006 \001(\001\022\n\n\002p2\030\007 \001(\001B\037\n\013com.gz.msgsB"
      "\020DistortionProtosb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 265);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/distortion.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fvector2d_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fdistortion_2eproto
namespace gz {
namespace msgs {

// ===================================================================

void Distortion::InitAsDefaultInstance() {
  ::gz::msgs::_Distortion_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_Distortion_default_instance_._instance.get_mutable()->center_ = const_cast< ::gz::msgs::Vector2d*>(
      ::gz::msgs::Vector2d::internal_default_instance());
}
void Distortion::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void Distortion::clear_center() {
  if (GetArenaNoVirtual() == NULL && center_ != NULL) {
    delete center_;
  }
  center_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Distortion::kHeaderFieldNumber;
const int Distortion::kCenterFieldNumber;
const int Distortion::kK1FieldNumber;
const int Distortion::kK2FieldNumber;
const int Distortion::kK3FieldNumber;
const int Distortion::kP1FieldNumber;
const int Distortion::kP2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Distortion::Distortion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fdistortion_2eproto::scc_info_Distortion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Distortion)
}
Distortion::Distortion(const Distortion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_center()) {
    center_ = new ::gz::msgs::Vector2d(*from.center_);
  } else {
    center_ = NULL;
  }
  ::memcpy(&k1_, &from.k1_,
    static_cast<size_t>(reinterpret_cast<char*>(&p2_) -
    reinterpret_cast<char*>(&k1_)) + sizeof(p2_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Distortion)
}

void Distortion::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p2_) -
      reinterpret_cast<char*>(&header_)) + sizeof(p2_));
}

Distortion::~Distortion() {
  // @@protoc_insertion_point(destructor:gz.msgs.Distortion)
  SharedDtor();
}

void Distortion::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete center_;
}

void Distortion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Distortion::descriptor() {
  ::protobuf_gz_2fmsgs_2fdistortion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdistortion_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Distortion& Distortion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fdistortion_2eproto::scc_info_Distortion.base);
  return *internal_default_instance();
}


void Distortion::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Distortion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && center_ != NULL) {
    delete center_;
  }
  center_ = NULL;
  ::memset(&k1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p2_) -
      reinterpret_cast<char*>(&k1_)) + sizeof(p2_));
  _internal_metadata_.Clear();
}

bool Distortion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Distortion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Vector2d center = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double k1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double k2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double k3 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double p1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double p2 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Distortion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Distortion)
  return false;
#undef DO_
}

void Distortion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Distortion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .gz.msgs.Vector2d center = 2;
  if (this->has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_center(), output);
  }

  // double k1 = 3;
  if (this->k1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->k1(), output);
  }

  // double k2 = 4;
  if (this->k2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->k2(), output);
  }

  // double k3 = 5;
  if (this->k3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->k3(), output);
  }

  // double p1 = 6;
  if (this->p1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->p1(), output);
  }

  // double p2 = 7;
  if (this->p2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->p2(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Distortion)
}

::google::protobuf::uint8* Distortion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Distortion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .gz.msgs.Vector2d center = 2;
  if (this->has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_center(), deterministic, target);
  }

  // double k1 = 3;
  if (this->k1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->k1(), target);
  }

  // double k2 = 4;
  if (this->k2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->k2(), target);
  }

  // double k3 = 5;
  if (this->k3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->k3(), target);
  }

  // double p1 = 6;
  if (this->p1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->p1(), target);
  }

  // double p2 = 7;
  if (this->p2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->p2(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Distortion)
  return target;
}

size_t Distortion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Distortion)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.Vector2d center = 2;
  if (this->has_center()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // double k1 = 3;
  if (this->k1() != 0) {
    total_size += 1 + 8;
  }

  // double k2 = 4;
  if (this->k2() != 0) {
    total_size += 1 + 8;
  }

  // double k3 = 5;
  if (this->k3() != 0) {
    total_size += 1 + 8;
  }

  // double p1 = 6;
  if (this->p1() != 0) {
    total_size += 1 + 8;
  }

  // double p2 = 7;
  if (this->p2() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Distortion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Distortion)
  GOOGLE_DCHECK_NE(&from, this);
  const Distortion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Distortion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Distortion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Distortion)
    MergeFrom(*source);
  }
}

void Distortion::MergeFrom(const Distortion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Distortion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_center()) {
    mutable_center()->::gz::msgs::Vector2d::MergeFrom(from.center());
  }
  if (from.k1() != 0) {
    set_k1(from.k1());
  }
  if (from.k2() != 0) {
    set_k2(from.k2());
  }
  if (from.k3() != 0) {
    set_k3(from.k3());
  }
  if (from.p1() != 0) {
    set_p1(from.p1());
  }
  if (from.p2() != 0) {
    set_p2(from.p2());
  }
}

void Distortion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Distortion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distortion::CopyFrom(const Distortion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Distortion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distortion::IsInitialized() const {
  return true;
}

void Distortion::Swap(Distortion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Distortion::InternalSwap(Distortion* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(center_, other->center_);
  swap(k1_, other->k1_);
  swap(k2_, other->k2_);
  swap(k3_, other->k3_);
  swap(p1_, other->p1_);
  swap(p2_, other->p2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Distortion::GetMetadata() const {
  protobuf_gz_2fmsgs_2fdistortion_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdistortion_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Distortion* Arena::CreateMaybeMessage< ::gz::msgs::Distortion >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Distortion >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
