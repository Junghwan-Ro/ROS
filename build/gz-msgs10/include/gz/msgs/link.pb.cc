// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/link.proto

#include "gz/msgs/link.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.Link", Link)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fbattery_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fbattery_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Battery;
}  // namespace protobuf_gz_2fmsgs_2fbattery_2eproto
namespace protobuf_gz_2fmsgs_2fcollision_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fcollision_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Collision;
}  // namespace protobuf_gz_2fmsgs_2fcollision_2eproto
namespace protobuf_gz_2fmsgs_2fdensity_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fdensity_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Density;
}  // namespace protobuf_gz_2fmsgs_2fdensity_2eproto
namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace protobuf_gz_2fmsgs_2finertial_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2finertial_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Inertial;
}  // namespace protobuf_gz_2fmsgs_2finertial_2eproto
namespace protobuf_gz_2fmsgs_2flight_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2flight_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Light;
}  // namespace protobuf_gz_2fmsgs_2flight_2eproto
namespace protobuf_gz_2fmsgs_2fparticle_5femitter_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fparticle_5femitter_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_ParticleEmitter;
}  // namespace protobuf_gz_2fmsgs_2fparticle_5femitter_2eproto
namespace protobuf_gz_2fmsgs_2fpose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fpose_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Pose;
}  // namespace protobuf_gz_2fmsgs_2fpose_2eproto
namespace protobuf_gz_2fmsgs_2fprojector_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fprojector_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Projector;
}  // namespace protobuf_gz_2fmsgs_2fprojector_2eproto
namespace protobuf_gz_2fmsgs_2fsensor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<11> scc_info_Sensor;
}  // namespace protobuf_gz_2fmsgs_2fsensor_2eproto
namespace protobuf_gz_2fmsgs_2fvisual_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fvisual_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_Visual;
}  // namespace protobuf_gz_2fmsgs_2fvisual_2eproto
namespace gz {
namespace msgs {
class LinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Link>
      _instance;
} _Link_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2flink_2eproto {
static void InitDefaultsLink() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Link_default_instance_;
    new (ptr) ::gz::msgs::Link();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Link::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<11> scc_info_Link =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsLink}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2fdensity_2eproto::scc_info_Density.base,
      &protobuf_gz_2fmsgs_2finertial_2eproto::scc_info_Inertial.base,
      &protobuf_gz_2fmsgs_2fpose_2eproto::scc_info_Pose.base,
      &protobuf_gz_2fmsgs_2fvisual_2eproto::scc_info_Visual.base,
      &protobuf_gz_2fmsgs_2fcollision_2eproto::scc_info_Collision.base,
      &protobuf_gz_2fmsgs_2fsensor_2eproto::scc_info_Sensor.base,
      &protobuf_gz_2fmsgs_2fprojector_2eproto::scc_info_Projector.base,
      &protobuf_gz_2fmsgs_2fbattery_2eproto::scc_info_Battery.base,
      &protobuf_gz_2fmsgs_2flight_2eproto::scc_info_Light.base,
      &protobuf_gz_2fmsgs_2fparticle_5femitter_2eproto::scc_info_ParticleEmitter.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Link.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Link, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Link, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Link, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Link, self_collide_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Link, gravity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Link, kinematic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Link, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Link, density_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Link, inertial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Link, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Link, visual_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Link, collision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Link, sensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Link, projector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Link, canonical_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Link, battery_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Link, light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Link, particle_emitter_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::Link)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Link_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/link.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022gz/msgs/link.proto\022\007gz.msgs\032\026gz/msgs/i"
      "nertial.proto\032\027gz/msgs/collision.proto\032\024"
      "gz/msgs/visual.proto\032\023gz/msgs/light.prot"
      "o\032\024gz/msgs/sensor.proto\032\036gz/msgs/particl"
      "e_emitter.proto\032\027gz/msgs/projector.proto"
      "\032\022gz/msgs/pose.proto\032\025gz/msgs/battery.pr"
      "oto\032\025gz/msgs/density.proto\032\024gz/msgs/head"
      "er.proto\"\212\004\n\004Link\022\037\n\006header\030\001 \001(\0132\017.gz.m"
      "sgs.Header\022\n\n\002id\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\024\n\014"
      "self_collide\030\004 \001(\010\022\017\n\007gravity\030\005 \001(\010\022\021\n\tk"
      "inematic\030\006 \001(\010\022\017\n\007enabled\030\007 \001(\010\022!\n\007densi"
      "ty\030\010 \001(\0132\020.gz.msgs.Density\022#\n\010inertial\030\t"
      " \001(\0132\021.gz.msgs.Inertial\022\033\n\004pose\030\n \001(\0132\r."
      "gz.msgs.Pose\022\037\n\006visual\030\013 \003(\0132\017.gz.msgs.V"
      "isual\022%\n\tcollision\030\014 \003(\0132\022.gz.msgs.Colli"
      "sion\022\037\n\006sensor\030\r \003(\0132\017.gz.msgs.Sensor\022%\n"
      "\tprojector\030\016 \003(\0132\022.gz.msgs.Projector\022\021\n\t"
      "canonical\030\017 \001(\010\022!\n\007battery\030\020 \003(\0132\020.gz.ms"
      "gs.Battery\022\035\n\005light\030\021 \003(\0132\016.gz.msgs.Ligh"
      "t\0222\n\020particle_emitter\030\022 \003(\0132\030.gz.msgs.Pa"
      "rticleEmitterB\031\n\013com.gz.msgsB\nLinkProtos"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 848);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/link.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2finertial_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fcollision_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fvisual_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2flight_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fsensor_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fparticle_5femitter_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fprojector_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fpose_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fbattery_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fdensity_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2flink_2eproto
namespace gz {
namespace msgs {

// ===================================================================

void Link::InitAsDefaultInstance() {
  ::gz::msgs::_Link_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_Link_default_instance_._instance.get_mutable()->density_ = const_cast< ::gz::msgs::Density*>(
      ::gz::msgs::Density::internal_default_instance());
  ::gz::msgs::_Link_default_instance_._instance.get_mutable()->inertial_ = const_cast< ::gz::msgs::Inertial*>(
      ::gz::msgs::Inertial::internal_default_instance());
  ::gz::msgs::_Link_default_instance_._instance.get_mutable()->pose_ = const_cast< ::gz::msgs::Pose*>(
      ::gz::msgs::Pose::internal_default_instance());
}
void Link::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void Link::clear_density() {
  if (GetArenaNoVirtual() == NULL && density_ != NULL) {
    delete density_;
  }
  density_ = NULL;
}
void Link::clear_inertial() {
  if (GetArenaNoVirtual() == NULL && inertial_ != NULL) {
    delete inertial_;
  }
  inertial_ = NULL;
}
void Link::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
void Link::clear_visual() {
  visual_.Clear();
}
void Link::clear_collision() {
  collision_.Clear();
}
void Link::clear_sensor() {
  sensor_.Clear();
}
void Link::clear_projector() {
  projector_.Clear();
}
void Link::clear_battery() {
  battery_.Clear();
}
void Link::clear_light() {
  light_.Clear();
}
void Link::clear_particle_emitter() {
  particle_emitter_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Link::kHeaderFieldNumber;
const int Link::kIdFieldNumber;
const int Link::kNameFieldNumber;
const int Link::kSelfCollideFieldNumber;
const int Link::kGravityFieldNumber;
const int Link::kKinematicFieldNumber;
const int Link::kEnabledFieldNumber;
const int Link::kDensityFieldNumber;
const int Link::kInertialFieldNumber;
const int Link::kPoseFieldNumber;
const int Link::kVisualFieldNumber;
const int Link::kCollisionFieldNumber;
const int Link::kSensorFieldNumber;
const int Link::kProjectorFieldNumber;
const int Link::kCanonicalFieldNumber;
const int Link::kBatteryFieldNumber;
const int Link::kLightFieldNumber;
const int Link::kParticleEmitterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Link::Link()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2flink_2eproto::scc_info_Link.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Link)
}
Link::Link(const Link& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      visual_(from.visual_),
      collision_(from.collision_),
      sensor_(from.sensor_),
      projector_(from.projector_),
      battery_(from.battery_),
      light_(from.light_),
      particle_emitter_(from.particle_emitter_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_density()) {
    density_ = new ::gz::msgs::Density(*from.density_);
  } else {
    density_ = NULL;
  }
  if (from.has_inertial()) {
    inertial_ = new ::gz::msgs::Inertial(*from.inertial_);
  } else {
    inertial_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::gz::msgs::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&canonical_) -
    reinterpret_cast<char*>(&id_)) + sizeof(canonical_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Link)
}

void Link::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&canonical_) -
      reinterpret_cast<char*>(&header_)) + sizeof(canonical_));
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:gz.msgs.Link)
  SharedDtor();
}

void Link::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete density_;
  if (this != internal_default_instance()) delete inertial_;
  if (this != internal_default_instance()) delete pose_;
}

void Link::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Link::descriptor() {
  ::protobuf_gz_2fmsgs_2flink_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2flink_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Link& Link::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2flink_2eproto::scc_info_Link.base);
  return *internal_default_instance();
}


void Link::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  visual_.Clear();
  collision_.Clear();
  sensor_.Clear();
  projector_.Clear();
  battery_.Clear();
  light_.Clear();
  particle_emitter_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && density_ != NULL) {
    delete density_;
  }
  density_ = NULL;
  if (GetArenaNoVirtual() == NULL && inertial_ != NULL) {
    delete inertial_;
  }
  inertial_ = NULL;
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&canonical_) -
      reinterpret_cast<char*>(&id_)) + sizeof(canonical_));
  _internal_metadata_.Clear();
}

bool Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Link)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Link.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool self_collide = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &self_collide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool gravity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gravity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool kinematic = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kinematic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enabled = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Density density = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_density()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Inertial inertial = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inertial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Pose pose = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.Visual visual = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_visual()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.Collision collision = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_collision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.Sensor sensor = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.Projector projector = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_projector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool canonical = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canonical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.Battery battery = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_battery()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.Light light = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.ParticleEmitter particle_emitter = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_particle_emitter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Link)
  return false;
#undef DO_
}

void Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Link.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // bool self_collide = 4;
  if (this->self_collide() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->self_collide(), output);
  }

  // bool gravity = 5;
  if (this->gravity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->gravity(), output);
  }

  // bool kinematic = 6;
  if (this->kinematic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->kinematic(), output);
  }

  // bool enabled = 7;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enabled(), output);
  }

  // .gz.msgs.Density density = 8;
  if (this->has_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_density(), output);
  }

  // .gz.msgs.Inertial inertial = 9;
  if (this->has_inertial()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_inertial(), output);
  }

  // .gz.msgs.Pose pose = 10;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_pose(), output);
  }

  // repeated .gz.msgs.Visual visual = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->visual_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->visual(static_cast<int>(i)),
      output);
  }

  // repeated .gz.msgs.Collision collision = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->collision_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->collision(static_cast<int>(i)),
      output);
  }

  // repeated .gz.msgs.Sensor sensor = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->sensor(static_cast<int>(i)),
      output);
  }

  // repeated .gz.msgs.Projector projector = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->projector_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->projector(static_cast<int>(i)),
      output);
  }

  // bool canonical = 15;
  if (this->canonical() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->canonical(), output);
  }

  // repeated .gz.msgs.Battery battery = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->battery_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16,
      this->battery(static_cast<int>(i)),
      output);
  }

  // repeated .gz.msgs.Light light = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->light_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17,
      this->light(static_cast<int>(i)),
      output);
  }

  // repeated .gz.msgs.ParticleEmitter particle_emitter = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->particle_emitter_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->particle_emitter(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Link)
}

::google::protobuf::uint8* Link::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Link.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // bool self_collide = 4;
  if (this->self_collide() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->self_collide(), target);
  }

  // bool gravity = 5;
  if (this->gravity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->gravity(), target);
  }

  // bool kinematic = 6;
  if (this->kinematic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->kinematic(), target);
  }

  // bool enabled = 7;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->enabled(), target);
  }

  // .gz.msgs.Density density = 8;
  if (this->has_density()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_density(), deterministic, target);
  }

  // .gz.msgs.Inertial inertial = 9;
  if (this->has_inertial()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_inertial(), deterministic, target);
  }

  // .gz.msgs.Pose pose = 10;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_pose(), deterministic, target);
  }

  // repeated .gz.msgs.Visual visual = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->visual_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->visual(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gz.msgs.Collision collision = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->collision_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->collision(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gz.msgs.Sensor sensor = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->sensor(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gz.msgs.Projector projector = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->projector_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->projector(static_cast<int>(i)), deterministic, target);
  }

  // bool canonical = 15;
  if (this->canonical() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->canonical(), target);
  }

  // repeated .gz.msgs.Battery battery = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->battery_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->battery(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gz.msgs.Light light = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->light_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->light(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gz.msgs.ParticleEmitter particle_emitter = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->particle_emitter_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->particle_emitter(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Link)
  return target;
}

size_t Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Link)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gz.msgs.Visual visual = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->visual_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->visual(static_cast<int>(i)));
    }
  }

  // repeated .gz.msgs.Collision collision = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->collision_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->collision(static_cast<int>(i)));
    }
  }

  // repeated .gz.msgs.Sensor sensor = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sensor(static_cast<int>(i)));
    }
  }

  // repeated .gz.msgs.Projector projector = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->projector_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->projector(static_cast<int>(i)));
    }
  }

  // repeated .gz.msgs.Battery battery = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->battery_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->battery(static_cast<int>(i)));
    }
  }

  // repeated .gz.msgs.Light light = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->light_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->light(static_cast<int>(i)));
    }
  }

  // repeated .gz.msgs.ParticleEmitter particle_emitter = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->particle_emitter_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->particle_emitter(static_cast<int>(i)));
    }
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.Density density = 8;
  if (this->has_density()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *density_);
  }

  // .gz.msgs.Inertial inertial = 9;
  if (this->has_inertial()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inertial_);
  }

  // .gz.msgs.Pose pose = 10;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // bool self_collide = 4;
  if (this->self_collide() != 0) {
    total_size += 1 + 1;
  }

  // bool gravity = 5;
  if (this->gravity() != 0) {
    total_size += 1 + 1;
  }

  // bool kinematic = 6;
  if (this->kinematic() != 0) {
    total_size += 1 + 1;
  }

  // bool enabled = 7;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool canonical = 15;
  if (this->canonical() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Link::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Link)
  GOOGLE_DCHECK_NE(&from, this);
  const Link* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Link>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Link)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Link)
    MergeFrom(*source);
  }
}

void Link::MergeFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Link)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  visual_.MergeFrom(from.visual_);
  collision_.MergeFrom(from.collision_);
  sensor_.MergeFrom(from.sensor_);
  projector_.MergeFrom(from.projector_);
  battery_.MergeFrom(from.battery_);
  light_.MergeFrom(from.light_);
  particle_emitter_.MergeFrom(from.particle_emitter_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_density()) {
    mutable_density()->::gz::msgs::Density::MergeFrom(from.density());
  }
  if (from.has_inertial()) {
    mutable_inertial()->::gz::msgs::Inertial::MergeFrom(from.inertial());
  }
  if (from.has_pose()) {
    mutable_pose()->::gz::msgs::Pose::MergeFrom(from.pose());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.self_collide() != 0) {
    set_self_collide(from.self_collide());
  }
  if (from.gravity() != 0) {
    set_gravity(from.gravity());
  }
  if (from.kinematic() != 0) {
    set_kinematic(from.kinematic());
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
  if (from.canonical() != 0) {
    set_canonical(from.canonical());
  }
}

void Link::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Link::CopyFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {
  return true;
}

void Link::Swap(Link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Link::InternalSwap(Link* other) {
  using std::swap;
  CastToBase(&visual_)->InternalSwap(CastToBase(&other->visual_));
  CastToBase(&collision_)->InternalSwap(CastToBase(&other->collision_));
  CastToBase(&sensor_)->InternalSwap(CastToBase(&other->sensor_));
  CastToBase(&projector_)->InternalSwap(CastToBase(&other->projector_));
  CastToBase(&battery_)->InternalSwap(CastToBase(&other->battery_));
  CastToBase(&light_)->InternalSwap(CastToBase(&other->light_));
  CastToBase(&particle_emitter_)->InternalSwap(CastToBase(&other->particle_emitter_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(density_, other->density_);
  swap(inertial_, other->inertial_);
  swap(pose_, other->pose_);
  swap(id_, other->id_);
  swap(self_collide_, other->self_collide_);
  swap(gravity_, other->gravity_);
  swap(kinematic_, other->kinematic_);
  swap(enabled_, other->enabled_);
  swap(canonical_, other->canonical_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Link::GetMetadata() const {
  protobuf_gz_2fmsgs_2flink_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2flink_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Link* Arena::CreateMaybeMessage< ::gz::msgs::Link >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Link >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
