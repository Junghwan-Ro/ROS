// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/log_playback_control.proto

#include "gz/msgs/log_playback_control.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.LogPlaybackControl", LogPlaybackControl)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace protobuf_gz_2fmsgs_2ftime_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2ftime_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Time;
}  // namespace protobuf_gz_2fmsgs_2ftime_2eproto
namespace gz {
namespace msgs {
class LogPlaybackControlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogPlaybackControl>
      _instance;
} _LogPlaybackControl_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2flog_5fplayback_5fcontrol_2eproto {
static void InitDefaultsLogPlaybackControl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_LogPlaybackControl_default_instance_;
    new (ptr) ::gz::msgs::LogPlaybackControl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::LogPlaybackControl::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<2> scc_info_LogPlaybackControl =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLogPlaybackControl}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2ftime_2eproto::scc_info_Time.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LogPlaybackControl.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::LogPlaybackControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::LogPlaybackControl, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::LogPlaybackControl, pause_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::LogPlaybackControl, multi_step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::LogPlaybackControl, rewind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::LogPlaybackControl, forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::LogPlaybackControl, seek_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::LogPlaybackControl)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_LogPlaybackControl_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/log_playback_control.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\"gz/msgs/log_playback_control.proto\022\007gz"
      ".msgs\032\022gz/msgs/time.proto\032\024gz/msgs/heade"
      "r.proto\"\226\001\n\022LogPlaybackControl\022\037\n\006header"
      "\030\001 \001(\0132\017.gz.msgs.Header\022\r\n\005pause\030\002 \001(\010\022\022"
      "\n\nmulti_step\030\003 \001(\021\022\016\n\006rewind\030\004 \001(\010\022\017\n\007fo"
      "rward\030\005 \001(\010\022\033\n\004seek\030\006 \001(\0132\r.gz.msgs.Time"
      "B\'\n\013com.gz.msgsB\030LogPlaybackControlProto"
      "sb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 289);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/log_playback_control.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2ftime_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2flog_5fplayback_5fcontrol_2eproto
namespace gz {
namespace msgs {

// ===================================================================

void LogPlaybackControl::InitAsDefaultInstance() {
  ::gz::msgs::_LogPlaybackControl_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_LogPlaybackControl_default_instance_._instance.get_mutable()->seek_ = const_cast< ::gz::msgs::Time*>(
      ::gz::msgs::Time::internal_default_instance());
}
void LogPlaybackControl::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void LogPlaybackControl::clear_seek() {
  if (GetArenaNoVirtual() == NULL && seek_ != NULL) {
    delete seek_;
  }
  seek_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogPlaybackControl::kHeaderFieldNumber;
const int LogPlaybackControl::kPauseFieldNumber;
const int LogPlaybackControl::kMultiStepFieldNumber;
const int LogPlaybackControl::kRewindFieldNumber;
const int LogPlaybackControl::kForwardFieldNumber;
const int LogPlaybackControl::kSeekFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogPlaybackControl::LogPlaybackControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2flog_5fplayback_5fcontrol_2eproto::scc_info_LogPlaybackControl.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.LogPlaybackControl)
}
LogPlaybackControl::LogPlaybackControl(const LogPlaybackControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_seek()) {
    seek_ = new ::gz::msgs::Time(*from.seek_);
  } else {
    seek_ = NULL;
  }
  ::memcpy(&multi_step_, &from.multi_step_,
    static_cast<size_t>(reinterpret_cast<char*>(&forward_) -
    reinterpret_cast<char*>(&multi_step_)) + sizeof(forward_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.LogPlaybackControl)
}

void LogPlaybackControl::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&forward_) -
      reinterpret_cast<char*>(&header_)) + sizeof(forward_));
}

LogPlaybackControl::~LogPlaybackControl() {
  // @@protoc_insertion_point(destructor:gz.msgs.LogPlaybackControl)
  SharedDtor();
}

void LogPlaybackControl::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete seek_;
}

void LogPlaybackControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogPlaybackControl::descriptor() {
  ::protobuf_gz_2fmsgs_2flog_5fplayback_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2flog_5fplayback_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogPlaybackControl& LogPlaybackControl::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2flog_5fplayback_5fcontrol_2eproto::scc_info_LogPlaybackControl.base);
  return *internal_default_instance();
}


void LogPlaybackControl::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.LogPlaybackControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && seek_ != NULL) {
    delete seek_;
  }
  seek_ = NULL;
  ::memset(&multi_step_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&forward_) -
      reinterpret_cast<char*>(&multi_step_)) + sizeof(forward_));
  _internal_metadata_.Clear();
}

bool LogPlaybackControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.LogPlaybackControl)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool pause = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pause_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 multi_step = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &multi_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool rewind = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rewind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool forward = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Time seek = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_seek()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.LogPlaybackControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.LogPlaybackControl)
  return false;
#undef DO_
}

void LogPlaybackControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.LogPlaybackControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // bool pause = 2;
  if (this->pause() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->pause(), output);
  }

  // sint32 multi_step = 3;
  if (this->multi_step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->multi_step(), output);
  }

  // bool rewind = 4;
  if (this->rewind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->rewind(), output);
  }

  // bool forward = 5;
  if (this->forward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->forward(), output);
  }

  // .gz.msgs.Time seek = 6;
  if (this->has_seek()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_seek(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.LogPlaybackControl)
}

::google::protobuf::uint8* LogPlaybackControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.LogPlaybackControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // bool pause = 2;
  if (this->pause() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->pause(), target);
  }

  // sint32 multi_step = 3;
  if (this->multi_step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->multi_step(), target);
  }

  // bool rewind = 4;
  if (this->rewind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->rewind(), target);
  }

  // bool forward = 5;
  if (this->forward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->forward(), target);
  }

  // .gz.msgs.Time seek = 6;
  if (this->has_seek()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_seek(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.LogPlaybackControl)
  return target;
}

size_t LogPlaybackControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.LogPlaybackControl)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.Time seek = 6;
  if (this->has_seek()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *seek_);
  }

  // sint32 multi_step = 3;
  if (this->multi_step() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->multi_step());
  }

  // bool pause = 2;
  if (this->pause() != 0) {
    total_size += 1 + 1;
  }

  // bool rewind = 4;
  if (this->rewind() != 0) {
    total_size += 1 + 1;
  }

  // bool forward = 5;
  if (this->forward() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogPlaybackControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.LogPlaybackControl)
  GOOGLE_DCHECK_NE(&from, this);
  const LogPlaybackControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogPlaybackControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.LogPlaybackControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.LogPlaybackControl)
    MergeFrom(*source);
  }
}

void LogPlaybackControl::MergeFrom(const LogPlaybackControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.LogPlaybackControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_seek()) {
    mutable_seek()->::gz::msgs::Time::MergeFrom(from.seek());
  }
  if (from.multi_step() != 0) {
    set_multi_step(from.multi_step());
  }
  if (from.pause() != 0) {
    set_pause(from.pause());
  }
  if (from.rewind() != 0) {
    set_rewind(from.rewind());
  }
  if (from.forward() != 0) {
    set_forward(from.forward());
  }
}

void LogPlaybackControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.LogPlaybackControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogPlaybackControl::CopyFrom(const LogPlaybackControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.LogPlaybackControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogPlaybackControl::IsInitialized() const {
  return true;
}

void LogPlaybackControl::Swap(LogPlaybackControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogPlaybackControl::InternalSwap(LogPlaybackControl* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(seek_, other->seek_);
  swap(multi_step_, other->multi_step_);
  swap(pause_, other->pause_);
  swap(rewind_, other->rewind_);
  swap(forward_, other->forward_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogPlaybackControl::GetMetadata() const {
  protobuf_gz_2fmsgs_2flog_5fplayback_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2flog_5fplayback_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::LogPlaybackControl* Arena::CreateMaybeMessage< ::gz::msgs::LogPlaybackControl >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::LogPlaybackControl >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
