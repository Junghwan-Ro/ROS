// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/physics.proto

#include "gz/msgs/physics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.Physics", Physics)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace protobuf_gz_2fmsgs_2fvector3d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fvector3d_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Vector3d;
}  // namespace protobuf_gz_2fmsgs_2fvector3d_2eproto
namespace gz {
namespace msgs {
class PhysicsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Physics>
      _instance;
} _Physics_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fphysics_2eproto {
static void InitDefaultsPhysics() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Physics_default_instance_;
    new (ptr) ::gz::msgs::Physics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Physics::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<2> scc_info_Physics =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPhysics}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2fvector3d_2eproto::scc_info_Vector3d.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Physics.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Physics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Physics, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Physics, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Physics, solver_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Physics, min_step_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Physics, precon_iters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Physics, iters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Physics, sor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Physics, cfm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Physics, erp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Physics, contact_max_correcting_vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Physics, contact_surface_layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Physics, gravity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Physics, enable_physics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Physics, real_time_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Physics, real_time_update_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Physics, max_step_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Physics, profile_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Physics, magnetic_field_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::Physics)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Physics_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/physics.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025gz/msgs/physics.proto\022\007gz.msgs\032\026gz/msg"
      "s/vector3d.proto\032\024gz/msgs/header.proto\"\213"
      "\004\n\007Physics\022\037\n\006header\030\001 \001(\0132\017.gz.msgs.Hea"
      "der\022#\n\004type\030\002 \001(\0162\025.gz.msgs.Physics.Type"
      "\022\023\n\013solver_type\030\003 \001(\t\022\025\n\rmin_step_size\030\004"
      " \001(\001\022\024\n\014precon_iters\030\005 \001(\005\022\r\n\005iters\030\006 \001("
      "\005\022\013\n\003sor\030\007 \001(\001\022\013\n\003cfm\030\010 \001(\001\022\013\n\003erp\030\t \001(\001"
      "\022\"\n\032contact_max_correcting_vel\030\n \001(\001\022\035\n\025"
      "contact_surface_layer\030\013 \001(\001\022\"\n\007gravity\030\014"
      " \001(\0132\021.gz.msgs.Vector3d\022\026\n\016enable_physic"
      "s\030\r \001(\010\022\030\n\020real_time_factor\030\016 \001(\001\022\035\n\025rea"
      "l_time_update_rate\030\017 \001(\001\022\025\n\rmax_step_siz"
      "e\030\020 \001(\001\022\024\n\014profile_name\030\021 \001(\t\022)\n\016magneti"
      "c_field\030\022 \001(\0132\021.gz.msgs.Vector3d\"2\n\004Type"
      "\022\007\n\003ODE\020\000\022\n\n\006BULLET\020\001\022\013\n\007SIMBODY\020\002\022\010\n\004DA"
      "RT\020\003B\034\n\013com.gz.msgsB\rPhysicsProtosb\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 642);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/physics.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fvector3d_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fphysics_2eproto
namespace gz {
namespace msgs {
const ::google::protobuf::EnumDescriptor* Physics_Type_descriptor() {
  protobuf_gz_2fmsgs_2fphysics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gz_2fmsgs_2fphysics_2eproto::file_level_enum_descriptors[0];
}
bool Physics_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Physics_Type Physics::ODE;
const Physics_Type Physics::BULLET;
const Physics_Type Physics::SIMBODY;
const Physics_Type Physics::DART;
const Physics_Type Physics::Type_MIN;
const Physics_Type Physics::Type_MAX;
const int Physics::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Physics::InitAsDefaultInstance() {
  ::gz::msgs::_Physics_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_Physics_default_instance_._instance.get_mutable()->gravity_ = const_cast< ::gz::msgs::Vector3d*>(
      ::gz::msgs::Vector3d::internal_default_instance());
  ::gz::msgs::_Physics_default_instance_._instance.get_mutable()->magnetic_field_ = const_cast< ::gz::msgs::Vector3d*>(
      ::gz::msgs::Vector3d::internal_default_instance());
}
void Physics::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void Physics::clear_gravity() {
  if (GetArenaNoVirtual() == NULL && gravity_ != NULL) {
    delete gravity_;
  }
  gravity_ = NULL;
}
void Physics::clear_magnetic_field() {
  if (GetArenaNoVirtual() == NULL && magnetic_field_ != NULL) {
    delete magnetic_field_;
  }
  magnetic_field_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Physics::kHeaderFieldNumber;
const int Physics::kTypeFieldNumber;
const int Physics::kSolverTypeFieldNumber;
const int Physics::kMinStepSizeFieldNumber;
const int Physics::kPreconItersFieldNumber;
const int Physics::kItersFieldNumber;
const int Physics::kSorFieldNumber;
const int Physics::kCfmFieldNumber;
const int Physics::kErpFieldNumber;
const int Physics::kContactMaxCorrectingVelFieldNumber;
const int Physics::kContactSurfaceLayerFieldNumber;
const int Physics::kGravityFieldNumber;
const int Physics::kEnablePhysicsFieldNumber;
const int Physics::kRealTimeFactorFieldNumber;
const int Physics::kRealTimeUpdateRateFieldNumber;
const int Physics::kMaxStepSizeFieldNumber;
const int Physics::kProfileNameFieldNumber;
const int Physics::kMagneticFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Physics::Physics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fphysics_2eproto::scc_info_Physics.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Physics)
}
Physics::Physics(const Physics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  solver_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.solver_type().size() > 0) {
    solver_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.solver_type_);
  }
  profile_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.profile_name().size() > 0) {
    profile_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.profile_name_);
  }
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_gravity()) {
    gravity_ = new ::gz::msgs::Vector3d(*from.gravity_);
  } else {
    gravity_ = NULL;
  }
  if (from.has_magnetic_field()) {
    magnetic_field_ = new ::gz::msgs::Vector3d(*from.magnetic_field_);
  } else {
    magnetic_field_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_step_size_) -
    reinterpret_cast<char*>(&type_)) + sizeof(max_step_size_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Physics)
}

void Physics::SharedCtor() {
  solver_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_step_size_) -
      reinterpret_cast<char*>(&header_)) + sizeof(max_step_size_));
}

Physics::~Physics() {
  // @@protoc_insertion_point(destructor:gz.msgs.Physics)
  SharedDtor();
}

void Physics::SharedDtor() {
  solver_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete gravity_;
  if (this != internal_default_instance()) delete magnetic_field_;
}

void Physics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Physics::descriptor() {
  ::protobuf_gz_2fmsgs_2fphysics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fphysics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Physics& Physics::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fphysics_2eproto::scc_info_Physics.base);
  return *internal_default_instance();
}


void Physics::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Physics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  solver_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profile_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && gravity_ != NULL) {
    delete gravity_;
  }
  gravity_ = NULL;
  if (GetArenaNoVirtual() == NULL && magnetic_field_ != NULL) {
    delete magnetic_field_;
  }
  magnetic_field_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_step_size_) -
      reinterpret_cast<char*>(&type_)) + sizeof(max_step_size_));
  _internal_metadata_.Clear();
}

bool Physics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Physics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Physics.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gz::msgs::Physics_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string solver_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_solver_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->solver_type().data(), static_cast<int>(this->solver_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Physics.solver_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double min_step_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_step_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 precon_iters = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precon_iters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 iters = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sor = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cfm = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cfm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double erp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &erp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double contact_max_correcting_vel = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &contact_max_correcting_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double contact_surface_layer = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &contact_surface_layer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Vector3d gravity = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gravity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_physics = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_physics_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double real_time_factor = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &real_time_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double real_time_update_rate = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &real_time_update_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_step_size = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_step_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string profile_name = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profile_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->profile_name().data(), static_cast<int>(this->profile_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Physics.profile_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Vector3d magnetic_field = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_magnetic_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Physics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Physics)
  return false;
#undef DO_
}

void Physics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Physics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .gz.msgs.Physics.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // string solver_type = 3;
  if (this->solver_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->solver_type().data(), static_cast<int>(this->solver_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Physics.solver_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->solver_type(), output);
  }

  // double min_step_size = 4;
  if (this->min_step_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min_step_size(), output);
  }

  // int32 precon_iters = 5;
  if (this->precon_iters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->precon_iters(), output);
  }

  // int32 iters = 6;
  if (this->iters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->iters(), output);
  }

  // double sor = 7;
  if (this->sor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->sor(), output);
  }

  // double cfm = 8;
  if (this->cfm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->cfm(), output);
  }

  // double erp = 9;
  if (this->erp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->erp(), output);
  }

  // double contact_max_correcting_vel = 10;
  if (this->contact_max_correcting_vel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->contact_max_correcting_vel(), output);
  }

  // double contact_surface_layer = 11;
  if (this->contact_surface_layer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->contact_surface_layer(), output);
  }

  // .gz.msgs.Vector3d gravity = 12;
  if (this->has_gravity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_gravity(), output);
  }

  // bool enable_physics = 13;
  if (this->enable_physics() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->enable_physics(), output);
  }

  // double real_time_factor = 14;
  if (this->real_time_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->real_time_factor(), output);
  }

  // double real_time_update_rate = 15;
  if (this->real_time_update_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->real_time_update_rate(), output);
  }

  // double max_step_size = 16;
  if (this->max_step_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->max_step_size(), output);
  }

  // string profile_name = 17;
  if (this->profile_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->profile_name().data(), static_cast<int>(this->profile_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Physics.profile_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->profile_name(), output);
  }

  // .gz.msgs.Vector3d magnetic_field = 18;
  if (this->has_magnetic_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_internal_magnetic_field(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Physics)
}

::google::protobuf::uint8* Physics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Physics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .gz.msgs.Physics.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // string solver_type = 3;
  if (this->solver_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->solver_type().data(), static_cast<int>(this->solver_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Physics.solver_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->solver_type(), target);
  }

  // double min_step_size = 4;
  if (this->min_step_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min_step_size(), target);
  }

  // int32 precon_iters = 5;
  if (this->precon_iters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->precon_iters(), target);
  }

  // int32 iters = 6;
  if (this->iters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->iters(), target);
  }

  // double sor = 7;
  if (this->sor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->sor(), target);
  }

  // double cfm = 8;
  if (this->cfm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->cfm(), target);
  }

  // double erp = 9;
  if (this->erp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->erp(), target);
  }

  // double contact_max_correcting_vel = 10;
  if (this->contact_max_correcting_vel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->contact_max_correcting_vel(), target);
  }

  // double contact_surface_layer = 11;
  if (this->contact_surface_layer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->contact_surface_layer(), target);
  }

  // .gz.msgs.Vector3d gravity = 12;
  if (this->has_gravity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_gravity(), deterministic, target);
  }

  // bool enable_physics = 13;
  if (this->enable_physics() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->enable_physics(), target);
  }

  // double real_time_factor = 14;
  if (this->real_time_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->real_time_factor(), target);
  }

  // double real_time_update_rate = 15;
  if (this->real_time_update_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->real_time_update_rate(), target);
  }

  // double max_step_size = 16;
  if (this->max_step_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->max_step_size(), target);
  }

  // string profile_name = 17;
  if (this->profile_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->profile_name().data(), static_cast<int>(this->profile_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Physics.profile_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->profile_name(), target);
  }

  // .gz.msgs.Vector3d magnetic_field = 18;
  if (this->has_magnetic_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->_internal_magnetic_field(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Physics)
  return target;
}

size_t Physics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Physics)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string solver_type = 3;
  if (this->solver_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->solver_type());
  }

  // string profile_name = 17;
  if (this->profile_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->profile_name());
  }

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.Vector3d gravity = 12;
  if (this->has_gravity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gravity_);
  }

  // .gz.msgs.Vector3d magnetic_field = 18;
  if (this->has_magnetic_field()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *magnetic_field_);
  }

  // .gz.msgs.Physics.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 precon_iters = 5;
  if (this->precon_iters() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->precon_iters());
  }

  // double min_step_size = 4;
  if (this->min_step_size() != 0) {
    total_size += 1 + 8;
  }

  // double sor = 7;
  if (this->sor() != 0) {
    total_size += 1 + 8;
  }

  // double cfm = 8;
  if (this->cfm() != 0) {
    total_size += 1 + 8;
  }

  // double erp = 9;
  if (this->erp() != 0) {
    total_size += 1 + 8;
  }

  // int32 iters = 6;
  if (this->iters() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->iters());
  }

  // bool enable_physics = 13;
  if (this->enable_physics() != 0) {
    total_size += 1 + 1;
  }

  // double contact_max_correcting_vel = 10;
  if (this->contact_max_correcting_vel() != 0) {
    total_size += 1 + 8;
  }

  // double contact_surface_layer = 11;
  if (this->contact_surface_layer() != 0) {
    total_size += 1 + 8;
  }

  // double real_time_factor = 14;
  if (this->real_time_factor() != 0) {
    total_size += 1 + 8;
  }

  // double real_time_update_rate = 15;
  if (this->real_time_update_rate() != 0) {
    total_size += 1 + 8;
  }

  // double max_step_size = 16;
  if (this->max_step_size() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Physics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Physics)
  GOOGLE_DCHECK_NE(&from, this);
  const Physics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Physics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Physics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Physics)
    MergeFrom(*source);
  }
}

void Physics::MergeFrom(const Physics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Physics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.solver_type().size() > 0) {

    solver_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.solver_type_);
  }
  if (from.profile_name().size() > 0) {

    profile_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.profile_name_);
  }
  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_gravity()) {
    mutable_gravity()->::gz::msgs::Vector3d::MergeFrom(from.gravity());
  }
  if (from.has_magnetic_field()) {
    mutable_magnetic_field()->::gz::msgs::Vector3d::MergeFrom(from.magnetic_field());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.precon_iters() != 0) {
    set_precon_iters(from.precon_iters());
  }
  if (from.min_step_size() != 0) {
    set_min_step_size(from.min_step_size());
  }
  if (from.sor() != 0) {
    set_sor(from.sor());
  }
  if (from.cfm() != 0) {
    set_cfm(from.cfm());
  }
  if (from.erp() != 0) {
    set_erp(from.erp());
  }
  if (from.iters() != 0) {
    set_iters(from.iters());
  }
  if (from.enable_physics() != 0) {
    set_enable_physics(from.enable_physics());
  }
  if (from.contact_max_correcting_vel() != 0) {
    set_contact_max_correcting_vel(from.contact_max_correcting_vel());
  }
  if (from.contact_surface_layer() != 0) {
    set_contact_surface_layer(from.contact_surface_layer());
  }
  if (from.real_time_factor() != 0) {
    set_real_time_factor(from.real_time_factor());
  }
  if (from.real_time_update_rate() != 0) {
    set_real_time_update_rate(from.real_time_update_rate());
  }
  if (from.max_step_size() != 0) {
    set_max_step_size(from.max_step_size());
  }
}

void Physics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Physics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Physics::CopyFrom(const Physics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Physics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Physics::IsInitialized() const {
  return true;
}

void Physics::Swap(Physics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Physics::InternalSwap(Physics* other) {
  using std::swap;
  solver_type_.Swap(&other->solver_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  profile_name_.Swap(&other->profile_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(gravity_, other->gravity_);
  swap(magnetic_field_, other->magnetic_field_);
  swap(type_, other->type_);
  swap(precon_iters_, other->precon_iters_);
  swap(min_step_size_, other->min_step_size_);
  swap(sor_, other->sor_);
  swap(cfm_, other->cfm_);
  swap(erp_, other->erp_);
  swap(iters_, other->iters_);
  swap(enable_physics_, other->enable_physics_);
  swap(contact_max_correcting_vel_, other->contact_max_correcting_vel_);
  swap(contact_surface_layer_, other->contact_surface_layer_);
  swap(real_time_factor_, other->real_time_factor_);
  swap(real_time_update_rate_, other->real_time_update_rate_);
  swap(max_step_size_, other->max_step_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Physics::GetMetadata() const {
  protobuf_gz_2fmsgs_2fphysics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fphysics_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Physics* Arena::CreateMaybeMessage< ::gz::msgs::Physics >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Physics >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
