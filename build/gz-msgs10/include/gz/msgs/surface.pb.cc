// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/surface.proto

#include "gz/msgs/surface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.Surface", Surface)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2ffriction_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2ffriction_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Friction;
}  // namespace protobuf_gz_2fmsgs_2ffriction_2eproto
namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace gz {
namespace msgs {
class SurfaceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Surface>
      _instance;
} _Surface_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fsurface_2eproto {
static void InitDefaultsSurface() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Surface_default_instance_;
    new (ptr) ::gz::msgs::Surface();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Surface::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<2> scc_info_Surface =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSurface}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2ffriction_2eproto::scc_info_Friction.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Surface.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Surface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Surface, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Surface, friction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Surface, restitution_coefficient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Surface, bounce_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Surface, soft_cfm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Surface, soft_erp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Surface, kp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Surface, kd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Surface, max_vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Surface, min_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Surface, collide_without_contact_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Surface, collide_without_contact_bitmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Surface, collide_bitmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Surface, elastic_modulus_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::Surface)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Surface_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/surface.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025gz/msgs/surface.proto\022\007gz.msgs\032\024gz/msg"
      "s/header.proto\032\026gz/msgs/friction.proto\"\346"
      "\002\n\007Surface\022\037\n\006header\030\001 \001(\0132\017.gz.msgs.Hea"
      "der\022#\n\010friction\030\002 \001(\0132\021.gz.msgs.Friction"
      "\022\037\n\027restitution_coefficient\030\003 \001(\001\022\030\n\020bou"
      "nce_threshold\030\004 \001(\001\022\020\n\010soft_cfm\030\005 \001(\001\022\020\n"
      "\010soft_erp\030\006 \001(\001\022\n\n\002kp\030\007 \001(\001\022\n\n\002kd\030\010 \001(\001\022"
      "\017\n\007max_vel\030\t \001(\001\022\021\n\tmin_depth\030\n \001(\001\022\037\n\027c"
      "ollide_without_contact\030\013 \001(\010\022\'\n\037collide_"
      "without_contact_bitmask\030\014 \001(\r\022\027\n\017collide"
      "_bitmask\030\r \001(\r\022\027\n\017elastic_modulus\030\016 \001(\001B"
      "\034\n\013com.gz.msgsB\rSurfaceProtosb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 477);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/surface.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2ffriction_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fsurface_2eproto
namespace gz {
namespace msgs {

// ===================================================================

void Surface::InitAsDefaultInstance() {
  ::gz::msgs::_Surface_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_Surface_default_instance_._instance.get_mutable()->friction_ = const_cast< ::gz::msgs::Friction*>(
      ::gz::msgs::Friction::internal_default_instance());
}
void Surface::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void Surface::clear_friction() {
  if (GetArenaNoVirtual() == NULL && friction_ != NULL) {
    delete friction_;
  }
  friction_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Surface::kHeaderFieldNumber;
const int Surface::kFrictionFieldNumber;
const int Surface::kRestitutionCoefficientFieldNumber;
const int Surface::kBounceThresholdFieldNumber;
const int Surface::kSoftCfmFieldNumber;
const int Surface::kSoftErpFieldNumber;
const int Surface::kKpFieldNumber;
const int Surface::kKdFieldNumber;
const int Surface::kMaxVelFieldNumber;
const int Surface::kMinDepthFieldNumber;
const int Surface::kCollideWithoutContactFieldNumber;
const int Surface::kCollideWithoutContactBitmaskFieldNumber;
const int Surface::kCollideBitmaskFieldNumber;
const int Surface::kElasticModulusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Surface::Surface()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fsurface_2eproto::scc_info_Surface.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Surface)
}
Surface::Surface(const Surface& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_friction()) {
    friction_ = new ::gz::msgs::Friction(*from.friction_);
  } else {
    friction_ = NULL;
  }
  ::memcpy(&restitution_coefficient_, &from.restitution_coefficient_,
    static_cast<size_t>(reinterpret_cast<char*>(&collide_bitmask_) -
    reinterpret_cast<char*>(&restitution_coefficient_)) + sizeof(collide_bitmask_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Surface)
}

void Surface::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collide_bitmask_) -
      reinterpret_cast<char*>(&header_)) + sizeof(collide_bitmask_));
}

Surface::~Surface() {
  // @@protoc_insertion_point(destructor:gz.msgs.Surface)
  SharedDtor();
}

void Surface::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete friction_;
}

void Surface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Surface::descriptor() {
  ::protobuf_gz_2fmsgs_2fsurface_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fsurface_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Surface& Surface::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fsurface_2eproto::scc_info_Surface.base);
  return *internal_default_instance();
}


void Surface::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Surface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && friction_ != NULL) {
    delete friction_;
  }
  friction_ = NULL;
  ::memset(&restitution_coefficient_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collide_bitmask_) -
      reinterpret_cast<char*>(&restitution_coefficient_)) + sizeof(collide_bitmask_));
  _internal_metadata_.Clear();
}

bool Surface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Surface)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Friction friction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_friction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double restitution_coefficient = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &restitution_coefficient_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double bounce_threshold = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bounce_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double soft_cfm = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &soft_cfm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double soft_erp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &soft_erp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double kp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double kd = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_vel = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double min_depth = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool collide_without_contact = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collide_without_contact_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 collide_without_contact_bitmask = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collide_without_contact_bitmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 collide_bitmask = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collide_bitmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double elastic_modulus = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elastic_modulus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Surface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Surface)
  return false;
#undef DO_
}

void Surface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Surface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .gz.msgs.Friction friction = 2;
  if (this->has_friction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_friction(), output);
  }

  // double restitution_coefficient = 3;
  if (this->restitution_coefficient() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->restitution_coefficient(), output);
  }

  // double bounce_threshold = 4;
  if (this->bounce_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bounce_threshold(), output);
  }

  // double soft_cfm = 5;
  if (this->soft_cfm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->soft_cfm(), output);
  }

  // double soft_erp = 6;
  if (this->soft_erp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->soft_erp(), output);
  }

  // double kp = 7;
  if (this->kp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->kp(), output);
  }

  // double kd = 8;
  if (this->kd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->kd(), output);
  }

  // double max_vel = 9;
  if (this->max_vel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->max_vel(), output);
  }

  // double min_depth = 10;
  if (this->min_depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->min_depth(), output);
  }

  // bool collide_without_contact = 11;
  if (this->collide_without_contact() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->collide_without_contact(), output);
  }

  // uint32 collide_without_contact_bitmask = 12;
  if (this->collide_without_contact_bitmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->collide_without_contact_bitmask(), output);
  }

  // uint32 collide_bitmask = 13;
  if (this->collide_bitmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->collide_bitmask(), output);
  }

  // double elastic_modulus = 14;
  if (this->elastic_modulus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->elastic_modulus(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Surface)
}

::google::protobuf::uint8* Surface::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Surface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .gz.msgs.Friction friction = 2;
  if (this->has_friction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_friction(), deterministic, target);
  }

  // double restitution_coefficient = 3;
  if (this->restitution_coefficient() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->restitution_coefficient(), target);
  }

  // double bounce_threshold = 4;
  if (this->bounce_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bounce_threshold(), target);
  }

  // double soft_cfm = 5;
  if (this->soft_cfm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->soft_cfm(), target);
  }

  // double soft_erp = 6;
  if (this->soft_erp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->soft_erp(), target);
  }

  // double kp = 7;
  if (this->kp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->kp(), target);
  }

  // double kd = 8;
  if (this->kd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->kd(), target);
  }

  // double max_vel = 9;
  if (this->max_vel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->max_vel(), target);
  }

  // double min_depth = 10;
  if (this->min_depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->min_depth(), target);
  }

  // bool collide_without_contact = 11;
  if (this->collide_without_contact() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->collide_without_contact(), target);
  }

  // uint32 collide_without_contact_bitmask = 12;
  if (this->collide_without_contact_bitmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->collide_without_contact_bitmask(), target);
  }

  // uint32 collide_bitmask = 13;
  if (this->collide_bitmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->collide_bitmask(), target);
  }

  // double elastic_modulus = 14;
  if (this->elastic_modulus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->elastic_modulus(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Surface)
  return target;
}

size_t Surface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Surface)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.Friction friction = 2;
  if (this->has_friction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *friction_);
  }

  // double restitution_coefficient = 3;
  if (this->restitution_coefficient() != 0) {
    total_size += 1 + 8;
  }

  // double bounce_threshold = 4;
  if (this->bounce_threshold() != 0) {
    total_size += 1 + 8;
  }

  // double soft_cfm = 5;
  if (this->soft_cfm() != 0) {
    total_size += 1 + 8;
  }

  // double soft_erp = 6;
  if (this->soft_erp() != 0) {
    total_size += 1 + 8;
  }

  // double kp = 7;
  if (this->kp() != 0) {
    total_size += 1 + 8;
  }

  // double kd = 8;
  if (this->kd() != 0) {
    total_size += 1 + 8;
  }

  // double max_vel = 9;
  if (this->max_vel() != 0) {
    total_size += 1 + 8;
  }

  // double min_depth = 10;
  if (this->min_depth() != 0) {
    total_size += 1 + 8;
  }

  // bool collide_without_contact = 11;
  if (this->collide_without_contact() != 0) {
    total_size += 1 + 1;
  }

  // uint32 collide_without_contact_bitmask = 12;
  if (this->collide_without_contact_bitmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->collide_without_contact_bitmask());
  }

  // double elastic_modulus = 14;
  if (this->elastic_modulus() != 0) {
    total_size += 1 + 8;
  }

  // uint32 collide_bitmask = 13;
  if (this->collide_bitmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->collide_bitmask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Surface::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Surface)
  GOOGLE_DCHECK_NE(&from, this);
  const Surface* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Surface>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Surface)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Surface)
    MergeFrom(*source);
  }
}

void Surface::MergeFrom(const Surface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Surface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_friction()) {
    mutable_friction()->::gz::msgs::Friction::MergeFrom(from.friction());
  }
  if (from.restitution_coefficient() != 0) {
    set_restitution_coefficient(from.restitution_coefficient());
  }
  if (from.bounce_threshold() != 0) {
    set_bounce_threshold(from.bounce_threshold());
  }
  if (from.soft_cfm() != 0) {
    set_soft_cfm(from.soft_cfm());
  }
  if (from.soft_erp() != 0) {
    set_soft_erp(from.soft_erp());
  }
  if (from.kp() != 0) {
    set_kp(from.kp());
  }
  if (from.kd() != 0) {
    set_kd(from.kd());
  }
  if (from.max_vel() != 0) {
    set_max_vel(from.max_vel());
  }
  if (from.min_depth() != 0) {
    set_min_depth(from.min_depth());
  }
  if (from.collide_without_contact() != 0) {
    set_collide_without_contact(from.collide_without_contact());
  }
  if (from.collide_without_contact_bitmask() != 0) {
    set_collide_without_contact_bitmask(from.collide_without_contact_bitmask());
  }
  if (from.elastic_modulus() != 0) {
    set_elastic_modulus(from.elastic_modulus());
  }
  if (from.collide_bitmask() != 0) {
    set_collide_bitmask(from.collide_bitmask());
  }
}

void Surface::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Surface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Surface::CopyFrom(const Surface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Surface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Surface::IsInitialized() const {
  return true;
}

void Surface::Swap(Surface* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Surface::InternalSwap(Surface* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(friction_, other->friction_);
  swap(restitution_coefficient_, other->restitution_coefficient_);
  swap(bounce_threshold_, other->bounce_threshold_);
  swap(soft_cfm_, other->soft_cfm_);
  swap(soft_erp_, other->soft_erp_);
  swap(kp_, other->kp_);
  swap(kd_, other->kd_);
  swap(max_vel_, other->max_vel_);
  swap(min_depth_, other->min_depth_);
  swap(collide_without_contact_, other->collide_without_contact_);
  swap(collide_without_contact_bitmask_, other->collide_without_contact_bitmask_);
  swap(elastic_modulus_, other->elastic_modulus_);
  swap(collide_bitmask_, other->collide_bitmask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Surface::GetMetadata() const {
  protobuf_gz_2fmsgs_2fsurface_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fsurface_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Surface* Arena::CreateMaybeMessage< ::gz::msgs::Surface >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Surface >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
