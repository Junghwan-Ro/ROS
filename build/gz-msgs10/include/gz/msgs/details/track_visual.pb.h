// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/track_visual.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2ftrack_5fvisual_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2ftrack_5fvisual_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/vector3d.pb.h"
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2ftrack_5fvisual_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2ftrack_5fvisual_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2ftrack_5fvisual_2eproto
namespace gz {
namespace msgs {
class TrackVisual;
class TrackVisualDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern TrackVisualDefaultTypeInternal _TrackVisual_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::TrackVisual* Arena::CreateMaybeMessage<::gz::msgs::TrackVisual>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE TrackVisual : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.TrackVisual) */ {
 public:
  TrackVisual();
  virtual ~TrackVisual();

  TrackVisual(const TrackVisual& from);

  inline TrackVisual& operator=(const TrackVisual& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackVisual(TrackVisual&& from) noexcept
    : TrackVisual() {
    *this = ::std::move(from);
  }

  inline TrackVisual& operator=(TrackVisual&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackVisual& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackVisual* internal_default_instance() {
    return reinterpret_cast<const TrackVisual*>(
               &_TrackVisual_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TrackVisual* other);
  friend void swap(TrackVisual& a, TrackVisual& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackVisual* New() const final {
    return CreateMaybeMessage<TrackVisual>(NULL);
  }

  TrackVisual* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrackVisual>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrackVisual& from);
  void MergeFrom(const TrackVisual& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackVisual* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Vector3d xyz = 9;
  bool has_xyz() const;
  void clear_xyz();
  static const int kXyzFieldNumber = 9;
  private:
  const ::gz::msgs::Vector3d& _internal_xyz() const;
  public:
  const ::gz::msgs::Vector3d& xyz() const;
  ::gz::msgs::Vector3d* release_xyz();
  ::gz::msgs::Vector3d* mutable_xyz();
  void set_allocated_xyz(::gz::msgs::Vector3d* xyz);

  // double min_dist = 5;
  void clear_min_dist();
  static const int kMinDistFieldNumber = 5;
  double min_dist() const;
  void set_min_dist(double value);

  // double max_dist = 6;
  void clear_max_dist();
  static const int kMaxDistFieldNumber = 6;
  double max_dist() const;
  void set_max_dist(double value);

  // uint32 id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // bool inherit_orientation = 4;
  void clear_inherit_orientation();
  static const int kInheritOrientationFieldNumber = 4;
  bool inherit_orientation() const;
  void set_inherit_orientation(bool value);

  // bool static = 7;
  void clear_static_();
  static const int kStaticFieldNumber = 7;
  bool static_() const;
  void set_static_(bool value);

  // bool use_model_frame = 8;
  void clear_use_model_frame();
  static const int kUseModelFrameFieldNumber = 8;
  bool use_model_frame() const;
  void set_use_model_frame(bool value);

  // bool inherit_yaw = 10;
  void clear_inherit_yaw();
  static const int kInheritYawFieldNumber = 10;
  bool inherit_yaw() const;
  void set_inherit_yaw(bool value);

  // @@protoc_insertion_point(class_scope:gz.msgs.TrackVisual)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Vector3d* xyz_;
  double min_dist_;
  double max_dist_;
  ::google::protobuf::uint32 id_;
  bool inherit_orientation_;
  bool static__;
  bool use_model_frame_;
  bool inherit_yaw_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2ftrack_5fvisual_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrackVisual

// .gz.msgs.Header header = 1;
inline bool TrackVisual::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& TrackVisual::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& TrackVisual::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.TrackVisual.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* TrackVisual::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.TrackVisual.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* TrackVisual::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.TrackVisual.header)
  return header_;
}
inline void TrackVisual::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.TrackVisual.header)
}

// string name = 2;
inline void TrackVisual::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrackVisual::name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.TrackVisual.name)
  return name_.GetNoArena();
}
inline void TrackVisual::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.TrackVisual.name)
}
#if LANG_CXX11
inline void TrackVisual::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.TrackVisual.name)
}
#endif
inline void TrackVisual::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.TrackVisual.name)
}
inline void TrackVisual::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.TrackVisual.name)
}
inline ::std::string* TrackVisual::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.TrackVisual.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrackVisual::release_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.TrackVisual.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackVisual::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.TrackVisual.name)
}

// uint32 id = 3;
inline void TrackVisual::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TrackVisual::id() const {
  // @@protoc_insertion_point(field_get:gz.msgs.TrackVisual.id)
  return id_;
}
inline void TrackVisual::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.TrackVisual.id)
}

// bool inherit_orientation = 4;
inline void TrackVisual::clear_inherit_orientation() {
  inherit_orientation_ = false;
}
inline bool TrackVisual::inherit_orientation() const {
  // @@protoc_insertion_point(field_get:gz.msgs.TrackVisual.inherit_orientation)
  return inherit_orientation_;
}
inline void TrackVisual::set_inherit_orientation(bool value) {
  
  inherit_orientation_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.TrackVisual.inherit_orientation)
}

// double min_dist = 5;
inline void TrackVisual::clear_min_dist() {
  min_dist_ = 0;
}
inline double TrackVisual::min_dist() const {
  // @@protoc_insertion_point(field_get:gz.msgs.TrackVisual.min_dist)
  return min_dist_;
}
inline void TrackVisual::set_min_dist(double value) {
  
  min_dist_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.TrackVisual.min_dist)
}

// double max_dist = 6;
inline void TrackVisual::clear_max_dist() {
  max_dist_ = 0;
}
inline double TrackVisual::max_dist() const {
  // @@protoc_insertion_point(field_get:gz.msgs.TrackVisual.max_dist)
  return max_dist_;
}
inline void TrackVisual::set_max_dist(double value) {
  
  max_dist_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.TrackVisual.max_dist)
}

// bool static = 7;
inline void TrackVisual::clear_static_() {
  static__ = false;
}
inline bool TrackVisual::static_() const {
  // @@protoc_insertion_point(field_get:gz.msgs.TrackVisual.static)
  return static__;
}
inline void TrackVisual::set_static_(bool value) {
  
  static__ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.TrackVisual.static)
}

// bool use_model_frame = 8;
inline void TrackVisual::clear_use_model_frame() {
  use_model_frame_ = false;
}
inline bool TrackVisual::use_model_frame() const {
  // @@protoc_insertion_point(field_get:gz.msgs.TrackVisual.use_model_frame)
  return use_model_frame_;
}
inline void TrackVisual::set_use_model_frame(bool value) {
  
  use_model_frame_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.TrackVisual.use_model_frame)
}

// .gz.msgs.Vector3d xyz = 9;
inline bool TrackVisual::has_xyz() const {
  return this != internal_default_instance() && xyz_ != NULL;
}
inline const ::gz::msgs::Vector3d& TrackVisual::_internal_xyz() const {
  return *xyz_;
}
inline const ::gz::msgs::Vector3d& TrackVisual::xyz() const {
  const ::gz::msgs::Vector3d* p = xyz_;
  // @@protoc_insertion_point(field_get:gz.msgs.TrackVisual.xyz)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Vector3d*>(
      &::gz::msgs::_Vector3d_default_instance_);
}
inline ::gz::msgs::Vector3d* TrackVisual::release_xyz() {
  // @@protoc_insertion_point(field_release:gz.msgs.TrackVisual.xyz)
  
  ::gz::msgs::Vector3d* temp = xyz_;
  xyz_ = NULL;
  return temp;
}
inline ::gz::msgs::Vector3d* TrackVisual::mutable_xyz() {
  
  if (xyz_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Vector3d>(GetArenaNoVirtual());
    xyz_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.TrackVisual.xyz)
  return xyz_;
}
inline void TrackVisual::set_allocated_xyz(::gz::msgs::Vector3d* xyz) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(xyz_);
  }
  if (xyz) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      xyz = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, xyz, submessage_arena);
    }
    
  } else {
    
  }
  xyz_ = xyz;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.TrackVisual.xyz)
}

// bool inherit_yaw = 10;
inline void TrackVisual::clear_inherit_yaw() {
  inherit_yaw_ = false;
}
inline bool TrackVisual::inherit_yaw() const {
  // @@protoc_insertion_point(field_get:gz.msgs.TrackVisual.inherit_yaw)
  return inherit_yaw_;
}
inline void TrackVisual::set_inherit_yaw(bool value) {
  
  inherit_yaw_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.TrackVisual.inherit_yaw)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2ftrack_5fvisual_2eproto
