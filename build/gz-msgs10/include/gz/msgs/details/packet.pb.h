// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/packet.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fpacket_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fpacket_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/double_v.pb.h"
#include "gz/msgs/clock.pb.h"
#include "gz/msgs/cmd_vel2d.pb.h"
#include "gz/msgs/image.pb.h"
#include "gz/msgs/pose.pb.h"
#include "gz/msgs/pose_v.pb.h"
#include "gz/msgs/stringmsg_v.pb.h"
#include "gz/msgs/time.pb.h"
#include "gz/msgs/web_request.pb.h"
#include "gz/msgs/world_stats.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fpacket_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fpacket_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fpacket_2eproto
namespace gz {
namespace msgs {
class Packet;
class PacketDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern PacketDefaultTypeInternal _Packet_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Packet* Arena::CreateMaybeMessage<::gz::msgs::Packet>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE Packet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Packet) */ {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet& default_instance();

  enum ContentCase {
    kCmdVel2D = 3,
    kImage = 4,
    kStringMsgV = 5,
    kWebRequest = 6,
    kPose = 7,
    kDoublev = 8,
    kPoseV = 9,
    kTime = 10,
    kClock = 11,
    kWorldStats = 12,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Packet* other);
  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(NULL);
  }

  Packet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // .gz.msgs.CmdVel2D cmd_vel2d = 3;
  bool has_cmd_vel2d() const;
  void clear_cmd_vel2d();
  static const int kCmdVel2DFieldNumber = 3;
  private:
  const ::gz::msgs::CmdVel2D& _internal_cmd_vel2d() const;
  public:
  const ::gz::msgs::CmdVel2D& cmd_vel2d() const;
  ::gz::msgs::CmdVel2D* release_cmd_vel2d();
  ::gz::msgs::CmdVel2D* mutable_cmd_vel2d();
  void set_allocated_cmd_vel2d(::gz::msgs::CmdVel2D* cmd_vel2d);

  // .gz.msgs.Image image = 4;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 4;
  private:
  const ::gz::msgs::Image& _internal_image() const;
  public:
  const ::gz::msgs::Image& image() const;
  ::gz::msgs::Image* release_image();
  ::gz::msgs::Image* mutable_image();
  void set_allocated_image(::gz::msgs::Image* image);

  // .gz.msgs.StringMsg_V string_msg_v = 5;
  bool has_string_msg_v() const;
  void clear_string_msg_v();
  static const int kStringMsgVFieldNumber = 5;
  private:
  const ::gz::msgs::StringMsg_V& _internal_string_msg_v() const;
  public:
  const ::gz::msgs::StringMsg_V& string_msg_v() const;
  ::gz::msgs::StringMsg_V* release_string_msg_v();
  ::gz::msgs::StringMsg_V* mutable_string_msg_v();
  void set_allocated_string_msg_v(::gz::msgs::StringMsg_V* string_msg_v);

  // .gz.msgs.WebRequest web_request = 6;
  bool has_web_request() const;
  void clear_web_request();
  static const int kWebRequestFieldNumber = 6;
  private:
  const ::gz::msgs::WebRequest& _internal_web_request() const;
  public:
  const ::gz::msgs::WebRequest& web_request() const;
  ::gz::msgs::WebRequest* release_web_request();
  ::gz::msgs::WebRequest* mutable_web_request();
  void set_allocated_web_request(::gz::msgs::WebRequest* web_request);

  // .gz.msgs.Pose pose = 7;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 7;
  private:
  const ::gz::msgs::Pose& _internal_pose() const;
  public:
  const ::gz::msgs::Pose& pose() const;
  ::gz::msgs::Pose* release_pose();
  ::gz::msgs::Pose* mutable_pose();
  void set_allocated_pose(::gz::msgs::Pose* pose);

  // .gz.msgs.Double_V doublev = 8;
  bool has_doublev() const;
  void clear_doublev();
  static const int kDoublevFieldNumber = 8;
  private:
  const ::gz::msgs::Double_V& _internal_doublev() const;
  public:
  const ::gz::msgs::Double_V& doublev() const;
  ::gz::msgs::Double_V* release_doublev();
  ::gz::msgs::Double_V* mutable_doublev();
  void set_allocated_doublev(::gz::msgs::Double_V* doublev);

  // .gz.msgs.Pose_V pose_v = 9;
  bool has_pose_v() const;
  void clear_pose_v();
  static const int kPoseVFieldNumber = 9;
  private:
  const ::gz::msgs::Pose_V& _internal_pose_v() const;
  public:
  const ::gz::msgs::Pose_V& pose_v() const;
  ::gz::msgs::Pose_V* release_pose_v();
  ::gz::msgs::Pose_V* mutable_pose_v();
  void set_allocated_pose_v(::gz::msgs::Pose_V* pose_v);

  // .gz.msgs.Time time = 10;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 10;
  private:
  const ::gz::msgs::Time& _internal_time() const;
  public:
  const ::gz::msgs::Time& time() const;
  ::gz::msgs::Time* release_time();
  ::gz::msgs::Time* mutable_time();
  void set_allocated_time(::gz::msgs::Time* time);

  // .gz.msgs.Clock clock = 11;
  bool has_clock() const;
  void clear_clock();
  static const int kClockFieldNumber = 11;
  private:
  const ::gz::msgs::Clock& _internal_clock() const;
  public:
  const ::gz::msgs::Clock& clock() const;
  ::gz::msgs::Clock* release_clock();
  ::gz::msgs::Clock* mutable_clock();
  void set_allocated_clock(::gz::msgs::Clock* clock);

  // .gz.msgs.WorldStatistics world_stats = 12;
  bool has_world_stats() const;
  void clear_world_stats();
  static const int kWorldStatsFieldNumber = 12;
  private:
  const ::gz::msgs::WorldStatistics& _internal_world_stats() const;
  public:
  const ::gz::msgs::WorldStatistics& world_stats() const;
  ::gz::msgs::WorldStatistics* release_world_stats();
  ::gz::msgs::WorldStatistics* mutable_world_stats();
  void set_allocated_world_stats(::gz::msgs::WorldStatistics* world_stats);

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:gz.msgs.Packet)
 private:
  void set_has_cmd_vel2d();
  void set_has_image();
  void set_has_string_msg_v();
  void set_has_web_request();
  void set_has_pose();
  void set_has_doublev();
  void set_has_pose_v();
  void set_has_time();
  void set_has_clock();
  void set_has_world_stats();

  inline bool has_content() const;
  inline void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  union ContentUnion {
    ContentUnion() {}
    ::gz::msgs::CmdVel2D* cmd_vel2d_;
    ::gz::msgs::Image* image_;
    ::gz::msgs::StringMsg_V* string_msg_v_;
    ::gz::msgs::WebRequest* web_request_;
    ::gz::msgs::Pose* pose_;
    ::gz::msgs::Double_V* doublev_;
    ::gz::msgs::Pose_V* pose_v_;
    ::gz::msgs::Time* time_;
    ::gz::msgs::Clock* clock_;
    ::gz::msgs::WorldStatistics* world_stats_;
  } content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_gz_2fmsgs_2fpacket_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Packet

// string topic = 1;
inline void Packet::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Packet::topic() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Packet.topic)
  return topic_.GetNoArena();
}
inline void Packet::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Packet.topic)
}
#if LANG_CXX11
inline void Packet::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Packet.topic)
}
#endif
inline void Packet::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Packet.topic)
}
inline void Packet::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Packet.topic)
}
inline ::std::string* Packet::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Packet.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Packet::release_topic() {
  // @@protoc_insertion_point(field_release:gz.msgs.Packet.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Packet::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Packet.topic)
}

// string type = 2;
inline void Packet::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Packet::type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Packet.type)
  return type_.GetNoArena();
}
inline void Packet::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Packet.type)
}
#if LANG_CXX11
inline void Packet::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Packet.type)
}
#endif
inline void Packet::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Packet.type)
}
inline void Packet::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Packet.type)
}
inline ::std::string* Packet::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Packet.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Packet::release_type() {
  // @@protoc_insertion_point(field_release:gz.msgs.Packet.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Packet::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Packet.type)
}

// .gz.msgs.CmdVel2D cmd_vel2d = 3;
inline bool Packet::has_cmd_vel2d() const {
  return content_case() == kCmdVel2D;
}
inline void Packet::set_has_cmd_vel2d() {
  _oneof_case_[0] = kCmdVel2D;
}
inline const ::gz::msgs::CmdVel2D& Packet::_internal_cmd_vel2d() const {
  return *content_.cmd_vel2d_;
}
inline ::gz::msgs::CmdVel2D* Packet::release_cmd_vel2d() {
  // @@protoc_insertion_point(field_release:gz.msgs.Packet.cmd_vel2d)
  if (has_cmd_vel2d()) {
    clear_has_content();
      ::gz::msgs::CmdVel2D* temp = content_.cmd_vel2d_;
    content_.cmd_vel2d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gz::msgs::CmdVel2D& Packet::cmd_vel2d() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Packet.cmd_vel2d)
  return has_cmd_vel2d()
      ? *content_.cmd_vel2d_
      : *reinterpret_cast< ::gz::msgs::CmdVel2D*>(&::gz::msgs::_CmdVel2D_default_instance_);
}
inline ::gz::msgs::CmdVel2D* Packet::mutable_cmd_vel2d() {
  if (!has_cmd_vel2d()) {
    clear_content();
    set_has_cmd_vel2d();
    content_.cmd_vel2d_ = CreateMaybeMessage< ::gz::msgs::CmdVel2D >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Packet.cmd_vel2d)
  return content_.cmd_vel2d_;
}

// .gz.msgs.Image image = 4;
inline bool Packet::has_image() const {
  return content_case() == kImage;
}
inline void Packet::set_has_image() {
  _oneof_case_[0] = kImage;
}
inline const ::gz::msgs::Image& Packet::_internal_image() const {
  return *content_.image_;
}
inline ::gz::msgs::Image* Packet::release_image() {
  // @@protoc_insertion_point(field_release:gz.msgs.Packet.image)
  if (has_image()) {
    clear_has_content();
      ::gz::msgs::Image* temp = content_.image_;
    content_.image_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gz::msgs::Image& Packet::image() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Packet.image)
  return has_image()
      ? *content_.image_
      : *reinterpret_cast< ::gz::msgs::Image*>(&::gz::msgs::_Image_default_instance_);
}
inline ::gz::msgs::Image* Packet::mutable_image() {
  if (!has_image()) {
    clear_content();
    set_has_image();
    content_.image_ = CreateMaybeMessage< ::gz::msgs::Image >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Packet.image)
  return content_.image_;
}

// .gz.msgs.StringMsg_V string_msg_v = 5;
inline bool Packet::has_string_msg_v() const {
  return content_case() == kStringMsgV;
}
inline void Packet::set_has_string_msg_v() {
  _oneof_case_[0] = kStringMsgV;
}
inline const ::gz::msgs::StringMsg_V& Packet::_internal_string_msg_v() const {
  return *content_.string_msg_v_;
}
inline ::gz::msgs::StringMsg_V* Packet::release_string_msg_v() {
  // @@protoc_insertion_point(field_release:gz.msgs.Packet.string_msg_v)
  if (has_string_msg_v()) {
    clear_has_content();
      ::gz::msgs::StringMsg_V* temp = content_.string_msg_v_;
    content_.string_msg_v_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gz::msgs::StringMsg_V& Packet::string_msg_v() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Packet.string_msg_v)
  return has_string_msg_v()
      ? *content_.string_msg_v_
      : *reinterpret_cast< ::gz::msgs::StringMsg_V*>(&::gz::msgs::_StringMsg_V_default_instance_);
}
inline ::gz::msgs::StringMsg_V* Packet::mutable_string_msg_v() {
  if (!has_string_msg_v()) {
    clear_content();
    set_has_string_msg_v();
    content_.string_msg_v_ = CreateMaybeMessage< ::gz::msgs::StringMsg_V >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Packet.string_msg_v)
  return content_.string_msg_v_;
}

// .gz.msgs.WebRequest web_request = 6;
inline bool Packet::has_web_request() const {
  return content_case() == kWebRequest;
}
inline void Packet::set_has_web_request() {
  _oneof_case_[0] = kWebRequest;
}
inline const ::gz::msgs::WebRequest& Packet::_internal_web_request() const {
  return *content_.web_request_;
}
inline ::gz::msgs::WebRequest* Packet::release_web_request() {
  // @@protoc_insertion_point(field_release:gz.msgs.Packet.web_request)
  if (has_web_request()) {
    clear_has_content();
      ::gz::msgs::WebRequest* temp = content_.web_request_;
    content_.web_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gz::msgs::WebRequest& Packet::web_request() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Packet.web_request)
  return has_web_request()
      ? *content_.web_request_
      : *reinterpret_cast< ::gz::msgs::WebRequest*>(&::gz::msgs::_WebRequest_default_instance_);
}
inline ::gz::msgs::WebRequest* Packet::mutable_web_request() {
  if (!has_web_request()) {
    clear_content();
    set_has_web_request();
    content_.web_request_ = CreateMaybeMessage< ::gz::msgs::WebRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Packet.web_request)
  return content_.web_request_;
}

// .gz.msgs.Pose pose = 7;
inline bool Packet::has_pose() const {
  return content_case() == kPose;
}
inline void Packet::set_has_pose() {
  _oneof_case_[0] = kPose;
}
inline const ::gz::msgs::Pose& Packet::_internal_pose() const {
  return *content_.pose_;
}
inline ::gz::msgs::Pose* Packet::release_pose() {
  // @@protoc_insertion_point(field_release:gz.msgs.Packet.pose)
  if (has_pose()) {
    clear_has_content();
      ::gz::msgs::Pose* temp = content_.pose_;
    content_.pose_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gz::msgs::Pose& Packet::pose() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Packet.pose)
  return has_pose()
      ? *content_.pose_
      : *reinterpret_cast< ::gz::msgs::Pose*>(&::gz::msgs::_Pose_default_instance_);
}
inline ::gz::msgs::Pose* Packet::mutable_pose() {
  if (!has_pose()) {
    clear_content();
    set_has_pose();
    content_.pose_ = CreateMaybeMessage< ::gz::msgs::Pose >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Packet.pose)
  return content_.pose_;
}

// .gz.msgs.Double_V doublev = 8;
inline bool Packet::has_doublev() const {
  return content_case() == kDoublev;
}
inline void Packet::set_has_doublev() {
  _oneof_case_[0] = kDoublev;
}
inline const ::gz::msgs::Double_V& Packet::_internal_doublev() const {
  return *content_.doublev_;
}
inline ::gz::msgs::Double_V* Packet::release_doublev() {
  // @@protoc_insertion_point(field_release:gz.msgs.Packet.doublev)
  if (has_doublev()) {
    clear_has_content();
      ::gz::msgs::Double_V* temp = content_.doublev_;
    content_.doublev_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gz::msgs::Double_V& Packet::doublev() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Packet.doublev)
  return has_doublev()
      ? *content_.doublev_
      : *reinterpret_cast< ::gz::msgs::Double_V*>(&::gz::msgs::_Double_V_default_instance_);
}
inline ::gz::msgs::Double_V* Packet::mutable_doublev() {
  if (!has_doublev()) {
    clear_content();
    set_has_doublev();
    content_.doublev_ = CreateMaybeMessage< ::gz::msgs::Double_V >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Packet.doublev)
  return content_.doublev_;
}

// .gz.msgs.Pose_V pose_v = 9;
inline bool Packet::has_pose_v() const {
  return content_case() == kPoseV;
}
inline void Packet::set_has_pose_v() {
  _oneof_case_[0] = kPoseV;
}
inline const ::gz::msgs::Pose_V& Packet::_internal_pose_v() const {
  return *content_.pose_v_;
}
inline ::gz::msgs::Pose_V* Packet::release_pose_v() {
  // @@protoc_insertion_point(field_release:gz.msgs.Packet.pose_v)
  if (has_pose_v()) {
    clear_has_content();
      ::gz::msgs::Pose_V* temp = content_.pose_v_;
    content_.pose_v_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gz::msgs::Pose_V& Packet::pose_v() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Packet.pose_v)
  return has_pose_v()
      ? *content_.pose_v_
      : *reinterpret_cast< ::gz::msgs::Pose_V*>(&::gz::msgs::_Pose_V_default_instance_);
}
inline ::gz::msgs::Pose_V* Packet::mutable_pose_v() {
  if (!has_pose_v()) {
    clear_content();
    set_has_pose_v();
    content_.pose_v_ = CreateMaybeMessage< ::gz::msgs::Pose_V >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Packet.pose_v)
  return content_.pose_v_;
}

// .gz.msgs.Time time = 10;
inline bool Packet::has_time() const {
  return content_case() == kTime;
}
inline void Packet::set_has_time() {
  _oneof_case_[0] = kTime;
}
inline const ::gz::msgs::Time& Packet::_internal_time() const {
  return *content_.time_;
}
inline ::gz::msgs::Time* Packet::release_time() {
  // @@protoc_insertion_point(field_release:gz.msgs.Packet.time)
  if (has_time()) {
    clear_has_content();
      ::gz::msgs::Time* temp = content_.time_;
    content_.time_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gz::msgs::Time& Packet::time() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Packet.time)
  return has_time()
      ? *content_.time_
      : *reinterpret_cast< ::gz::msgs::Time*>(&::gz::msgs::_Time_default_instance_);
}
inline ::gz::msgs::Time* Packet::mutable_time() {
  if (!has_time()) {
    clear_content();
    set_has_time();
    content_.time_ = CreateMaybeMessage< ::gz::msgs::Time >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Packet.time)
  return content_.time_;
}

// .gz.msgs.Clock clock = 11;
inline bool Packet::has_clock() const {
  return content_case() == kClock;
}
inline void Packet::set_has_clock() {
  _oneof_case_[0] = kClock;
}
inline const ::gz::msgs::Clock& Packet::_internal_clock() const {
  return *content_.clock_;
}
inline ::gz::msgs::Clock* Packet::release_clock() {
  // @@protoc_insertion_point(field_release:gz.msgs.Packet.clock)
  if (has_clock()) {
    clear_has_content();
      ::gz::msgs::Clock* temp = content_.clock_;
    content_.clock_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gz::msgs::Clock& Packet::clock() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Packet.clock)
  return has_clock()
      ? *content_.clock_
      : *reinterpret_cast< ::gz::msgs::Clock*>(&::gz::msgs::_Clock_default_instance_);
}
inline ::gz::msgs::Clock* Packet::mutable_clock() {
  if (!has_clock()) {
    clear_content();
    set_has_clock();
    content_.clock_ = CreateMaybeMessage< ::gz::msgs::Clock >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Packet.clock)
  return content_.clock_;
}

// .gz.msgs.WorldStatistics world_stats = 12;
inline bool Packet::has_world_stats() const {
  return content_case() == kWorldStats;
}
inline void Packet::set_has_world_stats() {
  _oneof_case_[0] = kWorldStats;
}
inline const ::gz::msgs::WorldStatistics& Packet::_internal_world_stats() const {
  return *content_.world_stats_;
}
inline ::gz::msgs::WorldStatistics* Packet::release_world_stats() {
  // @@protoc_insertion_point(field_release:gz.msgs.Packet.world_stats)
  if (has_world_stats()) {
    clear_has_content();
      ::gz::msgs::WorldStatistics* temp = content_.world_stats_;
    content_.world_stats_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gz::msgs::WorldStatistics& Packet::world_stats() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Packet.world_stats)
  return has_world_stats()
      ? *content_.world_stats_
      : *reinterpret_cast< ::gz::msgs::WorldStatistics*>(&::gz::msgs::_WorldStatistics_default_instance_);
}
inline ::gz::msgs::WorldStatistics* Packet::mutable_world_stats() {
  if (!has_world_stats()) {
    clear_content();
    set_has_world_stats();
    content_.world_stats_ = CreateMaybeMessage< ::gz::msgs::WorldStatistics >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Packet.world_stats)
  return content_.world_stats_;
}

inline bool Packet::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void Packet::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline Packet::ContentCase Packet::content_case() const {
  return Packet::ContentCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fpacket_2eproto
