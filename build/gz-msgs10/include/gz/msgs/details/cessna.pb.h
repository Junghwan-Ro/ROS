// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/cessna.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fcessna_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fcessna_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fcessna_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fcessna_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fcessna_2eproto
namespace gz {
namespace msgs {
class Cessna;
class CessnaDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern CessnaDefaultTypeInternal _Cessna_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Cessna* Arena::CreateMaybeMessage<::gz::msgs::Cessna>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE Cessna : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Cessna) */ {
 public:
  Cessna();
  virtual ~Cessna();

  Cessna(const Cessna& from);

  inline Cessna& operator=(const Cessna& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Cessna(Cessna&& from) noexcept
    : Cessna() {
    *this = ::std::move(from);
  }

  inline Cessna& operator=(Cessna&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Cessna& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cessna* internal_default_instance() {
    return reinterpret_cast<const Cessna*>(
               &_Cessna_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Cessna* other);
  friend void swap(Cessna& a, Cessna& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Cessna* New() const final {
    return CreateMaybeMessage<Cessna>(NULL);
  }

  Cessna* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Cessna>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Cessna& from);
  void MergeFrom(const Cessna& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cessna* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // float propeller_speed = 2;
  void clear_propeller_speed();
  static const int kPropellerSpeedFieldNumber = 2;
  float propeller_speed() const;
  void set_propeller_speed(float value);

  // float left_aileron = 3;
  void clear_left_aileron();
  static const int kLeftAileronFieldNumber = 3;
  float left_aileron() const;
  void set_left_aileron(float value);

  // float left_flap = 4;
  void clear_left_flap();
  static const int kLeftFlapFieldNumber = 4;
  float left_flap() const;
  void set_left_flap(float value);

  // float right_aileron = 5;
  void clear_right_aileron();
  static const int kRightAileronFieldNumber = 5;
  float right_aileron() const;
  void set_right_aileron(float value);

  // float right_flap = 6;
  void clear_right_flap();
  static const int kRightFlapFieldNumber = 6;
  float right_flap() const;
  void set_right_flap(float value);

  // float elevators = 7;
  void clear_elevators();
  static const int kElevatorsFieldNumber = 7;
  float elevators() const;
  void set_elevators(float value);

  // float rudder = 8;
  void clear_rudder();
  static const int kRudderFieldNumber = 8;
  float rudder() const;
  void set_rudder(float value);

  // float cmd_propeller_speed = 9;
  void clear_cmd_propeller_speed();
  static const int kCmdPropellerSpeedFieldNumber = 9;
  float cmd_propeller_speed() const;
  void set_cmd_propeller_speed(float value);

  // float cmd_left_aileron = 10;
  void clear_cmd_left_aileron();
  static const int kCmdLeftAileronFieldNumber = 10;
  float cmd_left_aileron() const;
  void set_cmd_left_aileron(float value);

  // float cmd_left_flap = 11;
  void clear_cmd_left_flap();
  static const int kCmdLeftFlapFieldNumber = 11;
  float cmd_left_flap() const;
  void set_cmd_left_flap(float value);

  // float cmd_right_aileron = 12;
  void clear_cmd_right_aileron();
  static const int kCmdRightAileronFieldNumber = 12;
  float cmd_right_aileron() const;
  void set_cmd_right_aileron(float value);

  // float cmd_right_flap = 13;
  void clear_cmd_right_flap();
  static const int kCmdRightFlapFieldNumber = 13;
  float cmd_right_flap() const;
  void set_cmd_right_flap(float value);

  // float cmd_elevators = 14;
  void clear_cmd_elevators();
  static const int kCmdElevatorsFieldNumber = 14;
  float cmd_elevators() const;
  void set_cmd_elevators(float value);

  // float cmd_rudder = 15;
  void clear_cmd_rudder();
  static const int kCmdRudderFieldNumber = 15;
  float cmd_rudder() const;
  void set_cmd_rudder(float value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Cessna)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gz::msgs::Header* header_;
  float propeller_speed_;
  float left_aileron_;
  float left_flap_;
  float right_aileron_;
  float right_flap_;
  float elevators_;
  float rudder_;
  float cmd_propeller_speed_;
  float cmd_left_aileron_;
  float cmd_left_flap_;
  float cmd_right_aileron_;
  float cmd_right_flap_;
  float cmd_elevators_;
  float cmd_rudder_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fcessna_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cessna

// .gz.msgs.Header header = 1;
inline bool Cessna::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& Cessna::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& Cessna::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.Cessna.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* Cessna::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.Cessna.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* Cessna::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Cessna.header)
  return header_;
}
inline void Cessna::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Cessna.header)
}

// float propeller_speed = 2;
inline void Cessna::clear_propeller_speed() {
  propeller_speed_ = 0;
}
inline float Cessna::propeller_speed() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Cessna.propeller_speed)
  return propeller_speed_;
}
inline void Cessna::set_propeller_speed(float value) {
  
  propeller_speed_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Cessna.propeller_speed)
}

// float left_aileron = 3;
inline void Cessna::clear_left_aileron() {
  left_aileron_ = 0;
}
inline float Cessna::left_aileron() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Cessna.left_aileron)
  return left_aileron_;
}
inline void Cessna::set_left_aileron(float value) {
  
  left_aileron_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Cessna.left_aileron)
}

// float left_flap = 4;
inline void Cessna::clear_left_flap() {
  left_flap_ = 0;
}
inline float Cessna::left_flap() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Cessna.left_flap)
  return left_flap_;
}
inline void Cessna::set_left_flap(float value) {
  
  left_flap_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Cessna.left_flap)
}

// float right_aileron = 5;
inline void Cessna::clear_right_aileron() {
  right_aileron_ = 0;
}
inline float Cessna::right_aileron() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Cessna.right_aileron)
  return right_aileron_;
}
inline void Cessna::set_right_aileron(float value) {
  
  right_aileron_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Cessna.right_aileron)
}

// float right_flap = 6;
inline void Cessna::clear_right_flap() {
  right_flap_ = 0;
}
inline float Cessna::right_flap() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Cessna.right_flap)
  return right_flap_;
}
inline void Cessna::set_right_flap(float value) {
  
  right_flap_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Cessna.right_flap)
}

// float elevators = 7;
inline void Cessna::clear_elevators() {
  elevators_ = 0;
}
inline float Cessna::elevators() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Cessna.elevators)
  return elevators_;
}
inline void Cessna::set_elevators(float value) {
  
  elevators_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Cessna.elevators)
}

// float rudder = 8;
inline void Cessna::clear_rudder() {
  rudder_ = 0;
}
inline float Cessna::rudder() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Cessna.rudder)
  return rudder_;
}
inline void Cessna::set_rudder(float value) {
  
  rudder_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Cessna.rudder)
}

// float cmd_propeller_speed = 9;
inline void Cessna::clear_cmd_propeller_speed() {
  cmd_propeller_speed_ = 0;
}
inline float Cessna::cmd_propeller_speed() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Cessna.cmd_propeller_speed)
  return cmd_propeller_speed_;
}
inline void Cessna::set_cmd_propeller_speed(float value) {
  
  cmd_propeller_speed_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Cessna.cmd_propeller_speed)
}

// float cmd_left_aileron = 10;
inline void Cessna::clear_cmd_left_aileron() {
  cmd_left_aileron_ = 0;
}
inline float Cessna::cmd_left_aileron() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Cessna.cmd_left_aileron)
  return cmd_left_aileron_;
}
inline void Cessna::set_cmd_left_aileron(float value) {
  
  cmd_left_aileron_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Cessna.cmd_left_aileron)
}

// float cmd_left_flap = 11;
inline void Cessna::clear_cmd_left_flap() {
  cmd_left_flap_ = 0;
}
inline float Cessna::cmd_left_flap() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Cessna.cmd_left_flap)
  return cmd_left_flap_;
}
inline void Cessna::set_cmd_left_flap(float value) {
  
  cmd_left_flap_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Cessna.cmd_left_flap)
}

// float cmd_right_aileron = 12;
inline void Cessna::clear_cmd_right_aileron() {
  cmd_right_aileron_ = 0;
}
inline float Cessna::cmd_right_aileron() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Cessna.cmd_right_aileron)
  return cmd_right_aileron_;
}
inline void Cessna::set_cmd_right_aileron(float value) {
  
  cmd_right_aileron_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Cessna.cmd_right_aileron)
}

// float cmd_right_flap = 13;
inline void Cessna::clear_cmd_right_flap() {
  cmd_right_flap_ = 0;
}
inline float Cessna::cmd_right_flap() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Cessna.cmd_right_flap)
  return cmd_right_flap_;
}
inline void Cessna::set_cmd_right_flap(float value) {
  
  cmd_right_flap_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Cessna.cmd_right_flap)
}

// float cmd_elevators = 14;
inline void Cessna::clear_cmd_elevators() {
  cmd_elevators_ = 0;
}
inline float Cessna::cmd_elevators() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Cessna.cmd_elevators)
  return cmd_elevators_;
}
inline void Cessna::set_cmd_elevators(float value) {
  
  cmd_elevators_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Cessna.cmd_elevators)
}

// float cmd_rudder = 15;
inline void Cessna::clear_cmd_rudder() {
  cmd_rudder_ = 0;
}
inline float Cessna::cmd_rudder() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Cessna.cmd_rudder)
  return cmd_rudder_;
}
inline void Cessna::set_cmd_rudder(float value) {
  
  cmd_rudder_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Cessna.cmd_rudder)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fcessna_2eproto
