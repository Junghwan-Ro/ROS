// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/surface.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fsurface_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fsurface_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/header.pb.h"
#include "gz/msgs/friction.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fsurface_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fsurface_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fsurface_2eproto
namespace gz {
namespace msgs {
class Surface;
class SurfaceDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern SurfaceDefaultTypeInternal _Surface_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Surface* Arena::CreateMaybeMessage<::gz::msgs::Surface>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE Surface : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Surface) */ {
 public:
  Surface();
  virtual ~Surface();

  Surface(const Surface& from);

  inline Surface& operator=(const Surface& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Surface(Surface&& from) noexcept
    : Surface() {
    *this = ::std::move(from);
  }

  inline Surface& operator=(Surface&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Surface& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Surface* internal_default_instance() {
    return reinterpret_cast<const Surface*>(
               &_Surface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Surface* other);
  friend void swap(Surface& a, Surface& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Surface* New() const final {
    return CreateMaybeMessage<Surface>(NULL);
  }

  Surface* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Surface>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Surface& from);
  void MergeFrom(const Surface& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Surface* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Friction friction = 2;
  bool has_friction() const;
  void clear_friction();
  static const int kFrictionFieldNumber = 2;
  private:
  const ::gz::msgs::Friction& _internal_friction() const;
  public:
  const ::gz::msgs::Friction& friction() const;
  ::gz::msgs::Friction* release_friction();
  ::gz::msgs::Friction* mutable_friction();
  void set_allocated_friction(::gz::msgs::Friction* friction);

  // double restitution_coefficient = 3;
  void clear_restitution_coefficient();
  static const int kRestitutionCoefficientFieldNumber = 3;
  double restitution_coefficient() const;
  void set_restitution_coefficient(double value);

  // double bounce_threshold = 4;
  void clear_bounce_threshold();
  static const int kBounceThresholdFieldNumber = 4;
  double bounce_threshold() const;
  void set_bounce_threshold(double value);

  // double soft_cfm = 5;
  void clear_soft_cfm();
  static const int kSoftCfmFieldNumber = 5;
  double soft_cfm() const;
  void set_soft_cfm(double value);

  // double soft_erp = 6;
  void clear_soft_erp();
  static const int kSoftErpFieldNumber = 6;
  double soft_erp() const;
  void set_soft_erp(double value);

  // double kp = 7;
  void clear_kp();
  static const int kKpFieldNumber = 7;
  double kp() const;
  void set_kp(double value);

  // double kd = 8;
  void clear_kd();
  static const int kKdFieldNumber = 8;
  double kd() const;
  void set_kd(double value);

  // double max_vel = 9;
  void clear_max_vel();
  static const int kMaxVelFieldNumber = 9;
  double max_vel() const;
  void set_max_vel(double value);

  // double min_depth = 10;
  void clear_min_depth();
  static const int kMinDepthFieldNumber = 10;
  double min_depth() const;
  void set_min_depth(double value);

  // bool collide_without_contact = 11;
  void clear_collide_without_contact();
  static const int kCollideWithoutContactFieldNumber = 11;
  bool collide_without_contact() const;
  void set_collide_without_contact(bool value);

  // uint32 collide_without_contact_bitmask = 12;
  void clear_collide_without_contact_bitmask();
  static const int kCollideWithoutContactBitmaskFieldNumber = 12;
  ::google::protobuf::uint32 collide_without_contact_bitmask() const;
  void set_collide_without_contact_bitmask(::google::protobuf::uint32 value);

  // double elastic_modulus = 14;
  void clear_elastic_modulus();
  static const int kElasticModulusFieldNumber = 14;
  double elastic_modulus() const;
  void set_elastic_modulus(double value);

  // uint32 collide_bitmask = 13;
  void clear_collide_bitmask();
  static const int kCollideBitmaskFieldNumber = 13;
  ::google::protobuf::uint32 collide_bitmask() const;
  void set_collide_bitmask(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Surface)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Friction* friction_;
  double restitution_coefficient_;
  double bounce_threshold_;
  double soft_cfm_;
  double soft_erp_;
  double kp_;
  double kd_;
  double max_vel_;
  double min_depth_;
  bool collide_without_contact_;
  ::google::protobuf::uint32 collide_without_contact_bitmask_;
  double elastic_modulus_;
  ::google::protobuf::uint32 collide_bitmask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fsurface_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Surface

// .gz.msgs.Header header = 1;
inline bool Surface::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& Surface::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& Surface::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.Surface.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* Surface::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.Surface.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* Surface::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Surface.header)
  return header_;
}
inline void Surface::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Surface.header)
}

// .gz.msgs.Friction friction = 2;
inline bool Surface::has_friction() const {
  return this != internal_default_instance() && friction_ != NULL;
}
inline const ::gz::msgs::Friction& Surface::_internal_friction() const {
  return *friction_;
}
inline const ::gz::msgs::Friction& Surface::friction() const {
  const ::gz::msgs::Friction* p = friction_;
  // @@protoc_insertion_point(field_get:gz.msgs.Surface.friction)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Friction*>(
      &::gz::msgs::_Friction_default_instance_);
}
inline ::gz::msgs::Friction* Surface::release_friction() {
  // @@protoc_insertion_point(field_release:gz.msgs.Surface.friction)
  
  ::gz::msgs::Friction* temp = friction_;
  friction_ = NULL;
  return temp;
}
inline ::gz::msgs::Friction* Surface::mutable_friction() {
  
  if (friction_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Friction>(GetArenaNoVirtual());
    friction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Surface.friction)
  return friction_;
}
inline void Surface::set_allocated_friction(::gz::msgs::Friction* friction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(friction_);
  }
  if (friction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      friction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, friction, submessage_arena);
    }
    
  } else {
    
  }
  friction_ = friction;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Surface.friction)
}

// double restitution_coefficient = 3;
inline void Surface::clear_restitution_coefficient() {
  restitution_coefficient_ = 0;
}
inline double Surface::restitution_coefficient() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Surface.restitution_coefficient)
  return restitution_coefficient_;
}
inline void Surface::set_restitution_coefficient(double value) {
  
  restitution_coefficient_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Surface.restitution_coefficient)
}

// double bounce_threshold = 4;
inline void Surface::clear_bounce_threshold() {
  bounce_threshold_ = 0;
}
inline double Surface::bounce_threshold() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Surface.bounce_threshold)
  return bounce_threshold_;
}
inline void Surface::set_bounce_threshold(double value) {
  
  bounce_threshold_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Surface.bounce_threshold)
}

// double soft_cfm = 5;
inline void Surface::clear_soft_cfm() {
  soft_cfm_ = 0;
}
inline double Surface::soft_cfm() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Surface.soft_cfm)
  return soft_cfm_;
}
inline void Surface::set_soft_cfm(double value) {
  
  soft_cfm_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Surface.soft_cfm)
}

// double soft_erp = 6;
inline void Surface::clear_soft_erp() {
  soft_erp_ = 0;
}
inline double Surface::soft_erp() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Surface.soft_erp)
  return soft_erp_;
}
inline void Surface::set_soft_erp(double value) {
  
  soft_erp_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Surface.soft_erp)
}

// double kp = 7;
inline void Surface::clear_kp() {
  kp_ = 0;
}
inline double Surface::kp() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Surface.kp)
  return kp_;
}
inline void Surface::set_kp(double value) {
  
  kp_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Surface.kp)
}

// double kd = 8;
inline void Surface::clear_kd() {
  kd_ = 0;
}
inline double Surface::kd() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Surface.kd)
  return kd_;
}
inline void Surface::set_kd(double value) {
  
  kd_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Surface.kd)
}

// double max_vel = 9;
inline void Surface::clear_max_vel() {
  max_vel_ = 0;
}
inline double Surface::max_vel() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Surface.max_vel)
  return max_vel_;
}
inline void Surface::set_max_vel(double value) {
  
  max_vel_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Surface.max_vel)
}

// double min_depth = 10;
inline void Surface::clear_min_depth() {
  min_depth_ = 0;
}
inline double Surface::min_depth() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Surface.min_depth)
  return min_depth_;
}
inline void Surface::set_min_depth(double value) {
  
  min_depth_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Surface.min_depth)
}

// bool collide_without_contact = 11;
inline void Surface::clear_collide_without_contact() {
  collide_without_contact_ = false;
}
inline bool Surface::collide_without_contact() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Surface.collide_without_contact)
  return collide_without_contact_;
}
inline void Surface::set_collide_without_contact(bool value) {
  
  collide_without_contact_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Surface.collide_without_contact)
}

// uint32 collide_without_contact_bitmask = 12;
inline void Surface::clear_collide_without_contact_bitmask() {
  collide_without_contact_bitmask_ = 0u;
}
inline ::google::protobuf::uint32 Surface::collide_without_contact_bitmask() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Surface.collide_without_contact_bitmask)
  return collide_without_contact_bitmask_;
}
inline void Surface::set_collide_without_contact_bitmask(::google::protobuf::uint32 value) {
  
  collide_without_contact_bitmask_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Surface.collide_without_contact_bitmask)
}

// uint32 collide_bitmask = 13;
inline void Surface::clear_collide_bitmask() {
  collide_bitmask_ = 0u;
}
inline ::google::protobuf::uint32 Surface::collide_bitmask() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Surface.collide_bitmask)
  return collide_bitmask_;
}
inline void Surface::set_collide_bitmask(::google::protobuf::uint32 value) {
  
  collide_bitmask_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Surface.collide_bitmask)
}

// double elastic_modulus = 14;
inline void Surface::clear_elastic_modulus() {
  elastic_modulus_ = 0;
}
inline double Surface::elastic_modulus() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Surface.elastic_modulus)
  return elastic_modulus_;
}
inline void Surface::set_elastic_modulus(double value) {
  
  elastic_modulus_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Surface.elastic_modulus)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fsurface_2eproto
