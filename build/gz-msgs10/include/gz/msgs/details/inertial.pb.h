// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/inertial.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2finertial_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2finertial_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/pose.pb.h"
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2finertial_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2finertial_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2finertial_2eproto
namespace gz {
namespace msgs {
class Inertial;
class InertialDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern InertialDefaultTypeInternal _Inertial_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Inertial* Arena::CreateMaybeMessage<::gz::msgs::Inertial>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE Inertial : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Inertial) */ {
 public:
  Inertial();
  virtual ~Inertial();

  Inertial(const Inertial& from);

  inline Inertial& operator=(const Inertial& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Inertial(Inertial&& from) noexcept
    : Inertial() {
    *this = ::std::move(from);
  }

  inline Inertial& operator=(Inertial&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Inertial& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inertial* internal_default_instance() {
    return reinterpret_cast<const Inertial*>(
               &_Inertial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Inertial* other);
  friend void swap(Inertial& a, Inertial& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Inertial* New() const final {
    return CreateMaybeMessage<Inertial>(NULL);
  }

  Inertial* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Inertial>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Inertial& from);
  void MergeFrom(const Inertial& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inertial* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double fluid_added_mass = 10;
  int fluid_added_mass_size() const;
  void clear_fluid_added_mass();
  static const int kFluidAddedMassFieldNumber = 10;
  double fluid_added_mass(int index) const;
  void set_fluid_added_mass(int index, double value);
  void add_fluid_added_mass(double value);
  const ::google::protobuf::RepeatedField< double >&
      fluid_added_mass() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_fluid_added_mass();

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Pose pose = 3;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 3;
  private:
  const ::gz::msgs::Pose& _internal_pose() const;
  public:
  const ::gz::msgs::Pose& pose() const;
  ::gz::msgs::Pose* release_pose();
  ::gz::msgs::Pose* mutable_pose();
  void set_allocated_pose(::gz::msgs::Pose* pose);

  // double mass = 2;
  void clear_mass();
  static const int kMassFieldNumber = 2;
  double mass() const;
  void set_mass(double value);

  // double ixx = 4;
  void clear_ixx();
  static const int kIxxFieldNumber = 4;
  double ixx() const;
  void set_ixx(double value);

  // double ixy = 5;
  void clear_ixy();
  static const int kIxyFieldNumber = 5;
  double ixy() const;
  void set_ixy(double value);

  // double ixz = 6;
  void clear_ixz();
  static const int kIxzFieldNumber = 6;
  double ixz() const;
  void set_ixz(double value);

  // double iyy = 7;
  void clear_iyy();
  static const int kIyyFieldNumber = 7;
  double iyy() const;
  void set_iyy(double value);

  // double iyz = 8;
  void clear_iyz();
  static const int kIyzFieldNumber = 8;
  double iyz() const;
  void set_iyz(double value);

  // double izz = 9;
  void clear_izz();
  static const int kIzzFieldNumber = 9;
  double izz() const;
  void set_izz(double value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Inertial)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > fluid_added_mass_;
  mutable int _fluid_added_mass_cached_byte_size_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Pose* pose_;
  double mass_;
  double ixx_;
  double ixy_;
  double ixz_;
  double iyy_;
  double iyz_;
  double izz_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2finertial_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Inertial

// .gz.msgs.Header header = 1;
inline bool Inertial::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& Inertial::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& Inertial::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.Inertial.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* Inertial::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.Inertial.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* Inertial::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Inertial.header)
  return header_;
}
inline void Inertial::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Inertial.header)
}

// double mass = 2;
inline void Inertial::clear_mass() {
  mass_ = 0;
}
inline double Inertial::mass() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Inertial.mass)
  return mass_;
}
inline void Inertial::set_mass(double value) {
  
  mass_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Inertial.mass)
}

// .gz.msgs.Pose pose = 3;
inline bool Inertial::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::gz::msgs::Pose& Inertial::_internal_pose() const {
  return *pose_;
}
inline const ::gz::msgs::Pose& Inertial::pose() const {
  const ::gz::msgs::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:gz.msgs.Inertial.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Pose*>(
      &::gz::msgs::_Pose_default_instance_);
}
inline ::gz::msgs::Pose* Inertial::release_pose() {
  // @@protoc_insertion_point(field_release:gz.msgs.Inertial.pose)
  
  ::gz::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::gz::msgs::Pose* Inertial::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Inertial.pose)
  return pose_;
}
inline void Inertial::set_allocated_pose(::gz::msgs::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Inertial.pose)
}

// double ixx = 4;
inline void Inertial::clear_ixx() {
  ixx_ = 0;
}
inline double Inertial::ixx() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Inertial.ixx)
  return ixx_;
}
inline void Inertial::set_ixx(double value) {
  
  ixx_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Inertial.ixx)
}

// double ixy = 5;
inline void Inertial::clear_ixy() {
  ixy_ = 0;
}
inline double Inertial::ixy() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Inertial.ixy)
  return ixy_;
}
inline void Inertial::set_ixy(double value) {
  
  ixy_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Inertial.ixy)
}

// double ixz = 6;
inline void Inertial::clear_ixz() {
  ixz_ = 0;
}
inline double Inertial::ixz() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Inertial.ixz)
  return ixz_;
}
inline void Inertial::set_ixz(double value) {
  
  ixz_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Inertial.ixz)
}

// double iyy = 7;
inline void Inertial::clear_iyy() {
  iyy_ = 0;
}
inline double Inertial::iyy() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Inertial.iyy)
  return iyy_;
}
inline void Inertial::set_iyy(double value) {
  
  iyy_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Inertial.iyy)
}

// double iyz = 8;
inline void Inertial::clear_iyz() {
  iyz_ = 0;
}
inline double Inertial::iyz() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Inertial.iyz)
  return iyz_;
}
inline void Inertial::set_iyz(double value) {
  
  iyz_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Inertial.iyz)
}

// double izz = 9;
inline void Inertial::clear_izz() {
  izz_ = 0;
}
inline double Inertial::izz() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Inertial.izz)
  return izz_;
}
inline void Inertial::set_izz(double value) {
  
  izz_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Inertial.izz)
}

// repeated double fluid_added_mass = 10;
inline int Inertial::fluid_added_mass_size() const {
  return fluid_added_mass_.size();
}
inline void Inertial::clear_fluid_added_mass() {
  fluid_added_mass_.Clear();
}
inline double Inertial::fluid_added_mass(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.Inertial.fluid_added_mass)
  return fluid_added_mass_.Get(index);
}
inline void Inertial::set_fluid_added_mass(int index, double value) {
  fluid_added_mass_.Set(index, value);
  // @@protoc_insertion_point(field_set:gz.msgs.Inertial.fluid_added_mass)
}
inline void Inertial::add_fluid_added_mass(double value) {
  fluid_added_mass_.Add(value);
  // @@protoc_insertion_point(field_add:gz.msgs.Inertial.fluid_added_mass)
}
inline const ::google::protobuf::RepeatedField< double >&
Inertial::fluid_added_mass() const {
  // @@protoc_insertion_point(field_list:gz.msgs.Inertial.fluid_added_mass)
  return fluid_added_mass_;
}
inline ::google::protobuf::RepeatedField< double >*
Inertial::mutable_fluid_added_mass() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.Inertial.fluid_added_mass)
  return &fluid_added_mass_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2finertial_2eproto
