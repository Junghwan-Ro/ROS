// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/battery_state.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fbattery_5fstate_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fbattery_5fstate_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fbattery_5fstate_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fbattery_5fstate_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fbattery_5fstate_2eproto
namespace gz {
namespace msgs {
class BatteryState;
class BatteryStateDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern BatteryStateDefaultTypeInternal _BatteryState_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::BatteryState* Arena::CreateMaybeMessage<::gz::msgs::BatteryState>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

enum BatteryState_PowerSupplyStatus {
  BatteryState_PowerSupplyStatus_UNKNOWN = 0,
  BatteryState_PowerSupplyStatus_CHARGING = 1,
  BatteryState_PowerSupplyStatus_DISCHARGING = 2,
  BatteryState_PowerSupplyStatus_NOT_CHARGING = 3,
  BatteryState_PowerSupplyStatus_FULL = 4,
  BatteryState_PowerSupplyStatus_BatteryState_PowerSupplyStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BatteryState_PowerSupplyStatus_BatteryState_PowerSupplyStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool BatteryState_PowerSupplyStatus_IsValid(int value);
const BatteryState_PowerSupplyStatus BatteryState_PowerSupplyStatus_PowerSupplyStatus_MIN = BatteryState_PowerSupplyStatus_UNKNOWN;
const BatteryState_PowerSupplyStatus BatteryState_PowerSupplyStatus_PowerSupplyStatus_MAX = BatteryState_PowerSupplyStatus_FULL;
const int BatteryState_PowerSupplyStatus_PowerSupplyStatus_ARRAYSIZE = BatteryState_PowerSupplyStatus_PowerSupplyStatus_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* BatteryState_PowerSupplyStatus_descriptor();
inline const ::std::string& BatteryState_PowerSupplyStatus_Name(BatteryState_PowerSupplyStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    BatteryState_PowerSupplyStatus_descriptor(), value);
}
inline bool BatteryState_PowerSupplyStatus_Parse(
    const ::std::string& name, BatteryState_PowerSupplyStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BatteryState_PowerSupplyStatus>(
    BatteryState_PowerSupplyStatus_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE BatteryState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.BatteryState) */ {
 public:
  BatteryState();
  virtual ~BatteryState();

  BatteryState(const BatteryState& from);

  inline BatteryState& operator=(const BatteryState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatteryState(BatteryState&& from) noexcept
    : BatteryState() {
    *this = ::std::move(from);
  }

  inline BatteryState& operator=(BatteryState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatteryState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatteryState* internal_default_instance() {
    return reinterpret_cast<const BatteryState*>(
               &_BatteryState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BatteryState* other);
  friend void swap(BatteryState& a, BatteryState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatteryState* New() const final {
    return CreateMaybeMessage<BatteryState>(NULL);
  }

  BatteryState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatteryState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatteryState& from);
  void MergeFrom(const BatteryState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatteryState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BatteryState_PowerSupplyStatus PowerSupplyStatus;
  static const PowerSupplyStatus UNKNOWN =
    BatteryState_PowerSupplyStatus_UNKNOWN;
  static const PowerSupplyStatus CHARGING =
    BatteryState_PowerSupplyStatus_CHARGING;
  static const PowerSupplyStatus DISCHARGING =
    BatteryState_PowerSupplyStatus_DISCHARGING;
  static const PowerSupplyStatus NOT_CHARGING =
    BatteryState_PowerSupplyStatus_NOT_CHARGING;
  static const PowerSupplyStatus FULL =
    BatteryState_PowerSupplyStatus_FULL;
  static inline bool PowerSupplyStatus_IsValid(int value) {
    return BatteryState_PowerSupplyStatus_IsValid(value);
  }
  static const PowerSupplyStatus PowerSupplyStatus_MIN =
    BatteryState_PowerSupplyStatus_PowerSupplyStatus_MIN;
  static const PowerSupplyStatus PowerSupplyStatus_MAX =
    BatteryState_PowerSupplyStatus_PowerSupplyStatus_MAX;
  static const int PowerSupplyStatus_ARRAYSIZE =
    BatteryState_PowerSupplyStatus_PowerSupplyStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PowerSupplyStatus_descriptor() {
    return BatteryState_PowerSupplyStatus_descriptor();
  }
  static inline const ::std::string& PowerSupplyStatus_Name(PowerSupplyStatus value) {
    return BatteryState_PowerSupplyStatus_Name(value);
  }
  static inline bool PowerSupplyStatus_Parse(const ::std::string& name,
      PowerSupplyStatus* value) {
    return BatteryState_PowerSupplyStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // double voltage = 2;
  void clear_voltage();
  static const int kVoltageFieldNumber = 2;
  double voltage() const;
  void set_voltage(double value);

  // double current = 3;
  void clear_current();
  static const int kCurrentFieldNumber = 3;
  double current() const;
  void set_current(double value);

  // double charge = 4;
  void clear_charge();
  static const int kChargeFieldNumber = 4;
  double charge() const;
  void set_charge(double value);

  // double capacity = 5;
  void clear_capacity();
  static const int kCapacityFieldNumber = 5;
  double capacity() const;
  void set_capacity(double value);

  // double percentage = 6;
  void clear_percentage();
  static const int kPercentageFieldNumber = 6;
  double percentage() const;
  void set_percentage(double value);

  // .gz.msgs.BatteryState.PowerSupplyStatus power_supply_status = 7;
  void clear_power_supply_status();
  static const int kPowerSupplyStatusFieldNumber = 7;
  ::gz::msgs::BatteryState_PowerSupplyStatus power_supply_status() const;
  void set_power_supply_status(::gz::msgs::BatteryState_PowerSupplyStatus value);

  // @@protoc_insertion_point(class_scope:gz.msgs.BatteryState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gz::msgs::Header* header_;
  double voltage_;
  double current_;
  double charge_;
  double capacity_;
  double percentage_;
  int power_supply_status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fbattery_5fstate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BatteryState

// .gz.msgs.Header header = 1;
inline bool BatteryState::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& BatteryState::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& BatteryState::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.BatteryState.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* BatteryState::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.BatteryState.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* BatteryState::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.BatteryState.header)
  return header_;
}
inline void BatteryState::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.BatteryState.header)
}

// double voltage = 2;
inline void BatteryState::clear_voltage() {
  voltage_ = 0;
}
inline double BatteryState::voltage() const {
  // @@protoc_insertion_point(field_get:gz.msgs.BatteryState.voltage)
  return voltage_;
}
inline void BatteryState::set_voltage(double value) {
  
  voltage_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.BatteryState.voltage)
}

// double current = 3;
inline void BatteryState::clear_current() {
  current_ = 0;
}
inline double BatteryState::current() const {
  // @@protoc_insertion_point(field_get:gz.msgs.BatteryState.current)
  return current_;
}
inline void BatteryState::set_current(double value) {
  
  current_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.BatteryState.current)
}

// double charge = 4;
inline void BatteryState::clear_charge() {
  charge_ = 0;
}
inline double BatteryState::charge() const {
  // @@protoc_insertion_point(field_get:gz.msgs.BatteryState.charge)
  return charge_;
}
inline void BatteryState::set_charge(double value) {
  
  charge_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.BatteryState.charge)
}

// double capacity = 5;
inline void BatteryState::clear_capacity() {
  capacity_ = 0;
}
inline double BatteryState::capacity() const {
  // @@protoc_insertion_point(field_get:gz.msgs.BatteryState.capacity)
  return capacity_;
}
inline void BatteryState::set_capacity(double value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.BatteryState.capacity)
}

// double percentage = 6;
inline void BatteryState::clear_percentage() {
  percentage_ = 0;
}
inline double BatteryState::percentage() const {
  // @@protoc_insertion_point(field_get:gz.msgs.BatteryState.percentage)
  return percentage_;
}
inline void BatteryState::set_percentage(double value) {
  
  percentage_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.BatteryState.percentage)
}

// .gz.msgs.BatteryState.PowerSupplyStatus power_supply_status = 7;
inline void BatteryState::clear_power_supply_status() {
  power_supply_status_ = 0;
}
inline ::gz::msgs::BatteryState_PowerSupplyStatus BatteryState::power_supply_status() const {
  // @@protoc_insertion_point(field_get:gz.msgs.BatteryState.power_supply_status)
  return static_cast< ::gz::msgs::BatteryState_PowerSupplyStatus >(power_supply_status_);
}
inline void BatteryState::set_power_supply_status(::gz::msgs::BatteryState_PowerSupplyStatus value) {
  
  power_supply_status_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.BatteryState.power_supply_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::msgs::BatteryState_PowerSupplyStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::BatteryState_PowerSupplyStatus>() {
  return ::gz::msgs::BatteryState_PowerSupplyStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fbattery_5fstate_2eproto
