// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/fuel_metadata.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2ffuel_5fmetadata_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2ffuel_5fmetadata_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/version.pb.h"
#include "gz/msgs/version_range.pb.h"
#include "gz/msgs/versioned_name.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto
namespace gz {
namespace msgs {
class FuelMetadata;
class FuelMetadataDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern FuelMetadataDefaultTypeInternal _FuelMetadata_default_instance_;
class FuelMetadata_AnnotationsEntry_DoNotUse;
class FuelMetadata_AnnotationsEntry_DoNotUseDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern FuelMetadata_AnnotationsEntry_DoNotUseDefaultTypeInternal _FuelMetadata_AnnotationsEntry_DoNotUse_default_instance_;
class FuelMetadata_Categories;
class FuelMetadata_CategoriesDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern FuelMetadata_CategoriesDefaultTypeInternal _FuelMetadata_Categories_default_instance_;
class FuelMetadata_Compatibility;
class FuelMetadata_CompatibilityDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern FuelMetadata_CompatibilityDefaultTypeInternal _FuelMetadata_Compatibility_default_instance_;
class FuelMetadata_Contact;
class FuelMetadata_ContactDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern FuelMetadata_ContactDefaultTypeInternal _FuelMetadata_Contact_default_instance_;
class FuelMetadata_Dependency;
class FuelMetadata_DependencyDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern FuelMetadata_DependencyDefaultTypeInternal _FuelMetadata_Dependency_default_instance_;
class FuelMetadata_Legal;
class FuelMetadata_LegalDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern FuelMetadata_LegalDefaultTypeInternal _FuelMetadata_Legal_default_instance_;
class FuelMetadata_Model;
class FuelMetadata_ModelDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern FuelMetadata_ModelDefaultTypeInternal _FuelMetadata_Model_default_instance_;
class FuelMetadata_World;
class FuelMetadata_WorldDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern FuelMetadata_WorldDefaultTypeInternal _FuelMetadata_World_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::FuelMetadata* Arena::CreateMaybeMessage<::gz::msgs::FuelMetadata>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::FuelMetadata_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::gz::msgs::FuelMetadata_AnnotationsEntry_DoNotUse>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::FuelMetadata_Categories* Arena::CreateMaybeMessage<::gz::msgs::FuelMetadata_Categories>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::FuelMetadata_Compatibility* Arena::CreateMaybeMessage<::gz::msgs::FuelMetadata_Compatibility>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::FuelMetadata_Contact* Arena::CreateMaybeMessage<::gz::msgs::FuelMetadata_Contact>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::FuelMetadata_Dependency* Arena::CreateMaybeMessage<::gz::msgs::FuelMetadata_Dependency>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::FuelMetadata_Legal* Arena::CreateMaybeMessage<::gz::msgs::FuelMetadata_Legal>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::FuelMetadata_Model* Arena::CreateMaybeMessage<::gz::msgs::FuelMetadata_Model>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::FuelMetadata_World* Arena::CreateMaybeMessage<::gz::msgs::FuelMetadata_World>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE FuelMetadata_Contact : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.FuelMetadata.Contact) */ {
 public:
  FuelMetadata_Contact();
  virtual ~FuelMetadata_Contact();

  FuelMetadata_Contact(const FuelMetadata_Contact& from);

  inline FuelMetadata_Contact& operator=(const FuelMetadata_Contact& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FuelMetadata_Contact(FuelMetadata_Contact&& from) noexcept
    : FuelMetadata_Contact() {
    *this = ::std::move(from);
  }

  inline FuelMetadata_Contact& operator=(FuelMetadata_Contact&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FuelMetadata_Contact& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FuelMetadata_Contact* internal_default_instance() {
    return reinterpret_cast<const FuelMetadata_Contact*>(
               &_FuelMetadata_Contact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FuelMetadata_Contact* other);
  friend void swap(FuelMetadata_Contact& a, FuelMetadata_Contact& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FuelMetadata_Contact* New() const final {
    return CreateMaybeMessage<FuelMetadata_Contact>(NULL);
  }

  FuelMetadata_Contact* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FuelMetadata_Contact>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FuelMetadata_Contact& from);
  void MergeFrom(const FuelMetadata_Contact& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuelMetadata_Contact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string email = 2;
  void clear_email();
  static const int kEmailFieldNumber = 2;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:gz.msgs.FuelMetadata.Contact)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE FuelMetadata_Legal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.FuelMetadata.Legal) */ {
 public:
  FuelMetadata_Legal();
  virtual ~FuelMetadata_Legal();

  FuelMetadata_Legal(const FuelMetadata_Legal& from);

  inline FuelMetadata_Legal& operator=(const FuelMetadata_Legal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FuelMetadata_Legal(FuelMetadata_Legal&& from) noexcept
    : FuelMetadata_Legal() {
    *this = ::std::move(from);
  }

  inline FuelMetadata_Legal& operator=(FuelMetadata_Legal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FuelMetadata_Legal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FuelMetadata_Legal* internal_default_instance() {
    return reinterpret_cast<const FuelMetadata_Legal*>(
               &_FuelMetadata_Legal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FuelMetadata_Legal* other);
  friend void swap(FuelMetadata_Legal& a, FuelMetadata_Legal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FuelMetadata_Legal* New() const final {
    return CreateMaybeMessage<FuelMetadata_Legal>(NULL);
  }

  FuelMetadata_Legal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FuelMetadata_Legal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FuelMetadata_Legal& from);
  void MergeFrom(const FuelMetadata_Legal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuelMetadata_Legal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string copyright = 1;
  void clear_copyright();
  static const int kCopyrightFieldNumber = 1;
  const ::std::string& copyright() const;
  void set_copyright(const ::std::string& value);
  #if LANG_CXX11
  void set_copyright(::std::string&& value);
  #endif
  void set_copyright(const char* value);
  void set_copyright(const char* value, size_t size);
  ::std::string* mutable_copyright();
  ::std::string* release_copyright();
  void set_allocated_copyright(::std::string* copyright);

  // string license = 2;
  void clear_license();
  static const int kLicenseFieldNumber = 2;
  const ::std::string& license() const;
  void set_license(const ::std::string& value);
  #if LANG_CXX11
  void set_license(::std::string&& value);
  #endif
  void set_license(const char* value);
  void set_license(const char* value, size_t size);
  ::std::string* mutable_license();
  ::std::string* release_license();
  void set_allocated_license(::std::string* license);

  // @@protoc_insertion_point(class_scope:gz.msgs.FuelMetadata.Legal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr copyright_;
  ::google::protobuf::internal::ArenaStringPtr license_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE FuelMetadata_Model : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.FuelMetadata.Model) */ {
 public:
  FuelMetadata_Model();
  virtual ~FuelMetadata_Model();

  FuelMetadata_Model(const FuelMetadata_Model& from);

  inline FuelMetadata_Model& operator=(const FuelMetadata_Model& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FuelMetadata_Model(FuelMetadata_Model&& from) noexcept
    : FuelMetadata_Model() {
    *this = ::std::move(from);
  }

  inline FuelMetadata_Model& operator=(FuelMetadata_Model&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FuelMetadata_Model& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FuelMetadata_Model* internal_default_instance() {
    return reinterpret_cast<const FuelMetadata_Model*>(
               &_FuelMetadata_Model_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FuelMetadata_Model* other);
  friend void swap(FuelMetadata_Model& a, FuelMetadata_Model& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FuelMetadata_Model* New() const final {
    return CreateMaybeMessage<FuelMetadata_Model>(NULL);
  }

  FuelMetadata_Model* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FuelMetadata_Model>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FuelMetadata_Model& from);
  void MergeFrom(const FuelMetadata_Model& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuelMetadata_Model* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file = 1;
  void clear_file();
  static const int kFileFieldNumber = 1;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // .gz.msgs.VersionedName file_format = 2;
  bool has_file_format() const;
  void clear_file_format();
  static const int kFileFormatFieldNumber = 2;
  private:
  const ::gz::msgs::VersionedName& _internal_file_format() const;
  public:
  const ::gz::msgs::VersionedName& file_format() const;
  ::gz::msgs::VersionedName* release_file_format();
  ::gz::msgs::VersionedName* mutable_file_format();
  void set_allocated_file_format(::gz::msgs::VersionedName* file_format);

  // @@protoc_insertion_point(class_scope:gz.msgs.FuelMetadata.Model)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::gz::msgs::VersionedName* file_format_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE FuelMetadata_World : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.FuelMetadata.World) */ {
 public:
  FuelMetadata_World();
  virtual ~FuelMetadata_World();

  FuelMetadata_World(const FuelMetadata_World& from);

  inline FuelMetadata_World& operator=(const FuelMetadata_World& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FuelMetadata_World(FuelMetadata_World&& from) noexcept
    : FuelMetadata_World() {
    *this = ::std::move(from);
  }

  inline FuelMetadata_World& operator=(FuelMetadata_World&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FuelMetadata_World& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FuelMetadata_World* internal_default_instance() {
    return reinterpret_cast<const FuelMetadata_World*>(
               &_FuelMetadata_World_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FuelMetadata_World* other);
  friend void swap(FuelMetadata_World& a, FuelMetadata_World& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FuelMetadata_World* New() const final {
    return CreateMaybeMessage<FuelMetadata_World>(NULL);
  }

  FuelMetadata_World* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FuelMetadata_World>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FuelMetadata_World& from);
  void MergeFrom(const FuelMetadata_World& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuelMetadata_World* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file = 1;
  void clear_file();
  static const int kFileFieldNumber = 1;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // .gz.msgs.VersionedName file_format = 2;
  bool has_file_format() const;
  void clear_file_format();
  static const int kFileFormatFieldNumber = 2;
  private:
  const ::gz::msgs::VersionedName& _internal_file_format() const;
  public:
  const ::gz::msgs::VersionedName& file_format() const;
  ::gz::msgs::VersionedName* release_file_format();
  ::gz::msgs::VersionedName* mutable_file_format();
  void set_allocated_file_format(::gz::msgs::VersionedName* file_format);

  // @@protoc_insertion_point(class_scope:gz.msgs.FuelMetadata.World)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::gz::msgs::VersionedName* file_format_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE FuelMetadata_Dependency : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.FuelMetadata.Dependency) */ {
 public:
  FuelMetadata_Dependency();
  virtual ~FuelMetadata_Dependency();

  FuelMetadata_Dependency(const FuelMetadata_Dependency& from);

  inline FuelMetadata_Dependency& operator=(const FuelMetadata_Dependency& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FuelMetadata_Dependency(FuelMetadata_Dependency&& from) noexcept
    : FuelMetadata_Dependency() {
    *this = ::std::move(from);
  }

  inline FuelMetadata_Dependency& operator=(FuelMetadata_Dependency&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FuelMetadata_Dependency& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FuelMetadata_Dependency* internal_default_instance() {
    return reinterpret_cast<const FuelMetadata_Dependency*>(
               &_FuelMetadata_Dependency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(FuelMetadata_Dependency* other);
  friend void swap(FuelMetadata_Dependency& a, FuelMetadata_Dependency& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FuelMetadata_Dependency* New() const final {
    return CreateMaybeMessage<FuelMetadata_Dependency>(NULL);
  }

  FuelMetadata_Dependency* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FuelMetadata_Dependency>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FuelMetadata_Dependency& from);
  void MergeFrom(const FuelMetadata_Dependency& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuelMetadata_Dependency* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uri = 1;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // @@protoc_insertion_point(class_scope:gz.msgs.FuelMetadata.Dependency)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE FuelMetadata_Compatibility : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.FuelMetadata.Compatibility) */ {
 public:
  FuelMetadata_Compatibility();
  virtual ~FuelMetadata_Compatibility();

  FuelMetadata_Compatibility(const FuelMetadata_Compatibility& from);

  inline FuelMetadata_Compatibility& operator=(const FuelMetadata_Compatibility& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FuelMetadata_Compatibility(FuelMetadata_Compatibility&& from) noexcept
    : FuelMetadata_Compatibility() {
    *this = ::std::move(from);
  }

  inline FuelMetadata_Compatibility& operator=(FuelMetadata_Compatibility&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FuelMetadata_Compatibility& default_instance();

  enum VersionTypeCase {
    kVersion = 2,
    kVersionRange = 3,
    VERSION_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FuelMetadata_Compatibility* internal_default_instance() {
    return reinterpret_cast<const FuelMetadata_Compatibility*>(
               &_FuelMetadata_Compatibility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(FuelMetadata_Compatibility* other);
  friend void swap(FuelMetadata_Compatibility& a, FuelMetadata_Compatibility& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FuelMetadata_Compatibility* New() const final {
    return CreateMaybeMessage<FuelMetadata_Compatibility>(NULL);
  }

  FuelMetadata_Compatibility* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FuelMetadata_Compatibility>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FuelMetadata_Compatibility& from);
  void MergeFrom(const FuelMetadata_Compatibility& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuelMetadata_Compatibility* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .gz.msgs.Version version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  private:
  const ::gz::msgs::Version& _internal_version() const;
  public:
  const ::gz::msgs::Version& version() const;
  ::gz::msgs::Version* release_version();
  ::gz::msgs::Version* mutable_version();
  void set_allocated_version(::gz::msgs::Version* version);

  // .gz.msgs.VersionRange version_range = 3;
  bool has_version_range() const;
  void clear_version_range();
  static const int kVersionRangeFieldNumber = 3;
  private:
  const ::gz::msgs::VersionRange& _internal_version_range() const;
  public:
  const ::gz::msgs::VersionRange& version_range() const;
  ::gz::msgs::VersionRange* release_version_range();
  ::gz::msgs::VersionRange* mutable_version_range();
  void set_allocated_version_range(::gz::msgs::VersionRange* version_range);

  void clear_version_type();
  VersionTypeCase version_type_case() const;
  // @@protoc_insertion_point(class_scope:gz.msgs.FuelMetadata.Compatibility)
 private:
  void set_has_version();
  void set_has_version_range();

  inline bool has_version_type() const;
  inline void clear_has_version_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  union VersionTypeUnion {
    VersionTypeUnion() {}
    ::gz::msgs::Version* version_;
    ::gz::msgs::VersionRange* version_range_;
  } version_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE FuelMetadata_Categories : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.FuelMetadata.Categories) */ {
 public:
  FuelMetadata_Categories();
  virtual ~FuelMetadata_Categories();

  FuelMetadata_Categories(const FuelMetadata_Categories& from);

  inline FuelMetadata_Categories& operator=(const FuelMetadata_Categories& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FuelMetadata_Categories(FuelMetadata_Categories&& from) noexcept
    : FuelMetadata_Categories() {
    *this = ::std::move(from);
  }

  inline FuelMetadata_Categories& operator=(FuelMetadata_Categories&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FuelMetadata_Categories& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FuelMetadata_Categories* internal_default_instance() {
    return reinterpret_cast<const FuelMetadata_Categories*>(
               &_FuelMetadata_Categories_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(FuelMetadata_Categories* other);
  friend void swap(FuelMetadata_Categories& a, FuelMetadata_Categories& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FuelMetadata_Categories* New() const final {
    return CreateMaybeMessage<FuelMetadata_Categories>(NULL);
  }

  FuelMetadata_Categories* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FuelMetadata_Categories>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FuelMetadata_Categories& from);
  void MergeFrom(const FuelMetadata_Categories& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuelMetadata_Categories* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string first = 1;
  void clear_first();
  static const int kFirstFieldNumber = 1;
  const ::std::string& first() const;
  void set_first(const ::std::string& value);
  #if LANG_CXX11
  void set_first(::std::string&& value);
  #endif
  void set_first(const char* value);
  void set_first(const char* value, size_t size);
  ::std::string* mutable_first();
  ::std::string* release_first();
  void set_allocated_first(::std::string* first);

  // string second = 2;
  void clear_second();
  static const int kSecondFieldNumber = 2;
  const ::std::string& second() const;
  void set_second(const ::std::string& value);
  #if LANG_CXX11
  void set_second(::std::string&& value);
  #endif
  void set_second(const char* value);
  void set_second(const char* value, size_t size);
  ::std::string* mutable_second();
  ::std::string* release_second();
  void set_allocated_second(::std::string* second);

  // @@protoc_insertion_point(class_scope:gz.msgs.FuelMetadata.Categories)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr first_;
  ::google::protobuf::internal::ArenaStringPtr second_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FuelMetadata_AnnotationsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<FuelMetadata_AnnotationsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<FuelMetadata_AnnotationsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  FuelMetadata_AnnotationsEntry_DoNotUse();
  FuelMetadata_AnnotationsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const FuelMetadata_AnnotationsEntry_DoNotUse& other);
  static const FuelMetadata_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FuelMetadata_AnnotationsEntry_DoNotUse*>(&_FuelMetadata_AnnotationsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE FuelMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.FuelMetadata) */ {
 public:
  FuelMetadata();
  virtual ~FuelMetadata();

  FuelMetadata(const FuelMetadata& from);

  inline FuelMetadata& operator=(const FuelMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FuelMetadata(FuelMetadata&& from) noexcept
    : FuelMetadata() {
    *this = ::std::move(from);
  }

  inline FuelMetadata& operator=(FuelMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FuelMetadata& default_instance();

  enum ResourceTypeCase {
    kModel = 1,
    kWorld = 2,
    RESOURCE_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FuelMetadata* internal_default_instance() {
    return reinterpret_cast<const FuelMetadata*>(
               &_FuelMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(FuelMetadata* other);
  friend void swap(FuelMetadata& a, FuelMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FuelMetadata* New() const final {
    return CreateMaybeMessage<FuelMetadata>(NULL);
  }

  FuelMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FuelMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FuelMetadata& from);
  void MergeFrom(const FuelMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuelMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FuelMetadata_Contact Contact;
  typedef FuelMetadata_Legal Legal;
  typedef FuelMetadata_Model Model;
  typedef FuelMetadata_World World;
  typedef FuelMetadata_Dependency Dependency;
  typedef FuelMetadata_Compatibility Compatibility;
  typedef FuelMetadata_Categories Categories;

  // accessors -------------------------------------------------------

  // repeated .gz.msgs.FuelMetadata.Contact authors = 6;
  int authors_size() const;
  void clear_authors();
  static const int kAuthorsFieldNumber = 6;
  ::gz::msgs::FuelMetadata_Contact* mutable_authors(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::FuelMetadata_Contact >*
      mutable_authors();
  const ::gz::msgs::FuelMetadata_Contact& authors(int index) const;
  ::gz::msgs::FuelMetadata_Contact* add_authors();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::FuelMetadata_Contact >&
      authors() const;

  // repeated string tags = 8;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 8;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // map<string, string> annotations = 9;
  int annotations_size() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 9;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      annotations() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_annotations();

  // repeated .gz.msgs.FuelMetadata.Dependency dependencies = 10;
  int dependencies_size() const;
  void clear_dependencies();
  static const int kDependenciesFieldNumber = 10;
  ::gz::msgs::FuelMetadata_Dependency* mutable_dependencies(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::FuelMetadata_Dependency >*
      mutable_dependencies();
  const ::gz::msgs::FuelMetadata_Dependency& dependencies(int index) const;
  ::gz::msgs::FuelMetadata_Dependency* add_dependencies();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::FuelMetadata_Dependency >&
      dependencies() const;

  // repeated .gz.msgs.FuelMetadata.Compatibility compatibilities = 11;
  int compatibilities_size() const;
  void clear_compatibilities();
  static const int kCompatibilitiesFieldNumber = 11;
  ::gz::msgs::FuelMetadata_Compatibility* mutable_compatibilities(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::FuelMetadata_Compatibility >*
      mutable_compatibilities();
  const ::gz::msgs::FuelMetadata_Compatibility& compatibilities(int index) const;
  ::gz::msgs::FuelMetadata_Compatibility* add_compatibilities();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::FuelMetadata_Compatibility >&
      compatibilities() const;

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .gz.msgs.FuelMetadata.Legal legal = 7;
  bool has_legal() const;
  void clear_legal();
  static const int kLegalFieldNumber = 7;
  private:
  const ::gz::msgs::FuelMetadata_Legal& _internal_legal() const;
  public:
  const ::gz::msgs::FuelMetadata_Legal& legal() const;
  ::gz::msgs::FuelMetadata_Legal* release_legal();
  ::gz::msgs::FuelMetadata_Legal* mutable_legal();
  void set_allocated_legal(::gz::msgs::FuelMetadata_Legal* legal);

  // .gz.msgs.FuelMetadata.Categories categories = 12;
  bool has_categories() const;
  void clear_categories();
  static const int kCategoriesFieldNumber = 12;
  private:
  const ::gz::msgs::FuelMetadata_Categories& _internal_categories() const;
  public:
  const ::gz::msgs::FuelMetadata_Categories& categories() const;
  ::gz::msgs::FuelMetadata_Categories* release_categories();
  ::gz::msgs::FuelMetadata_Categories* mutable_categories();
  void set_allocated_categories(::gz::msgs::FuelMetadata_Categories* categories);

  // int32 version = 5;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // .gz.msgs.FuelMetadata.Model model = 1;
  bool has_model() const;
  void clear_model();
  static const int kModelFieldNumber = 1;
  private:
  const ::gz::msgs::FuelMetadata_Model& _internal_model() const;
  public:
  const ::gz::msgs::FuelMetadata_Model& model() const;
  ::gz::msgs::FuelMetadata_Model* release_model();
  ::gz::msgs::FuelMetadata_Model* mutable_model();
  void set_allocated_model(::gz::msgs::FuelMetadata_Model* model);

  // .gz.msgs.FuelMetadata.World world = 2;
  bool has_world() const;
  void clear_world();
  static const int kWorldFieldNumber = 2;
  private:
  const ::gz::msgs::FuelMetadata_World& _internal_world() const;
  public:
  const ::gz::msgs::FuelMetadata_World& world() const;
  ::gz::msgs::FuelMetadata_World* release_world();
  ::gz::msgs::FuelMetadata_World* mutable_world();
  void set_allocated_world(::gz::msgs::FuelMetadata_World* world);

  void clear_resource_type();
  ResourceTypeCase resource_type_case() const;
  // @@protoc_insertion_point(class_scope:gz.msgs.FuelMetadata)
 private:
  void set_has_model();
  void set_has_world();

  inline bool has_resource_type() const;
  inline void clear_has_resource_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::FuelMetadata_Contact > authors_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::internal::MapField<
      FuelMetadata_AnnotationsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > annotations_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::FuelMetadata_Dependency > dependencies_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::FuelMetadata_Compatibility > compatibilities_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::gz::msgs::FuelMetadata_Legal* legal_;
  ::gz::msgs::FuelMetadata_Categories* categories_;
  ::google::protobuf::int32 version_;
  union ResourceTypeUnion {
    ResourceTypeUnion() {}
    ::gz::msgs::FuelMetadata_Model* model_;
    ::gz::msgs::FuelMetadata_World* world_;
  } resource_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_gz_2fmsgs_2ffuel_5fmetadata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FuelMetadata_Contact

// string name = 1;
inline void FuelMetadata_Contact::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FuelMetadata_Contact::name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.Contact.name)
  return name_.GetNoArena();
}
inline void FuelMetadata_Contact::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.FuelMetadata.Contact.name)
}
#if LANG_CXX11
inline void FuelMetadata_Contact::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.FuelMetadata.Contact.name)
}
#endif
inline void FuelMetadata_Contact::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.FuelMetadata.Contact.name)
}
inline void FuelMetadata_Contact::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.FuelMetadata.Contact.name)
}
inline ::std::string* FuelMetadata_Contact::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.Contact.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FuelMetadata_Contact::release_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.FuelMetadata.Contact.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FuelMetadata_Contact::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.FuelMetadata.Contact.name)
}

// string email = 2;
inline void FuelMetadata_Contact::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FuelMetadata_Contact::email() const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.Contact.email)
  return email_.GetNoArena();
}
inline void FuelMetadata_Contact::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.FuelMetadata.Contact.email)
}
#if LANG_CXX11
inline void FuelMetadata_Contact::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.FuelMetadata.Contact.email)
}
#endif
inline void FuelMetadata_Contact::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.FuelMetadata.Contact.email)
}
inline void FuelMetadata_Contact::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.FuelMetadata.Contact.email)
}
inline ::std::string* FuelMetadata_Contact::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.Contact.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FuelMetadata_Contact::release_email() {
  // @@protoc_insertion_point(field_release:gz.msgs.FuelMetadata.Contact.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FuelMetadata_Contact::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.FuelMetadata.Contact.email)
}

// -------------------------------------------------------------------

// FuelMetadata_Legal

// string copyright = 1;
inline void FuelMetadata_Legal::clear_copyright() {
  copyright_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FuelMetadata_Legal::copyright() const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.Legal.copyright)
  return copyright_.GetNoArena();
}
inline void FuelMetadata_Legal::set_copyright(const ::std::string& value) {
  
  copyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.FuelMetadata.Legal.copyright)
}
#if LANG_CXX11
inline void FuelMetadata_Legal::set_copyright(::std::string&& value) {
  
  copyright_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.FuelMetadata.Legal.copyright)
}
#endif
inline void FuelMetadata_Legal::set_copyright(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  copyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.FuelMetadata.Legal.copyright)
}
inline void FuelMetadata_Legal::set_copyright(const char* value, size_t size) {
  
  copyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.FuelMetadata.Legal.copyright)
}
inline ::std::string* FuelMetadata_Legal::mutable_copyright() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.Legal.copyright)
  return copyright_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FuelMetadata_Legal::release_copyright() {
  // @@protoc_insertion_point(field_release:gz.msgs.FuelMetadata.Legal.copyright)
  
  return copyright_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FuelMetadata_Legal::set_allocated_copyright(::std::string* copyright) {
  if (copyright != NULL) {
    
  } else {
    
  }
  copyright_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), copyright);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.FuelMetadata.Legal.copyright)
}

// string license = 2;
inline void FuelMetadata_Legal::clear_license() {
  license_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FuelMetadata_Legal::license() const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.Legal.license)
  return license_.GetNoArena();
}
inline void FuelMetadata_Legal::set_license(const ::std::string& value) {
  
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.FuelMetadata.Legal.license)
}
#if LANG_CXX11
inline void FuelMetadata_Legal::set_license(::std::string&& value) {
  
  license_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.FuelMetadata.Legal.license)
}
#endif
inline void FuelMetadata_Legal::set_license(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.FuelMetadata.Legal.license)
}
inline void FuelMetadata_Legal::set_license(const char* value, size_t size) {
  
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.FuelMetadata.Legal.license)
}
inline ::std::string* FuelMetadata_Legal::mutable_license() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.Legal.license)
  return license_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FuelMetadata_Legal::release_license() {
  // @@protoc_insertion_point(field_release:gz.msgs.FuelMetadata.Legal.license)
  
  return license_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FuelMetadata_Legal::set_allocated_license(::std::string* license) {
  if (license != NULL) {
    
  } else {
    
  }
  license_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), license);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.FuelMetadata.Legal.license)
}

// -------------------------------------------------------------------

// FuelMetadata_Model

// string file = 1;
inline void FuelMetadata_Model::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FuelMetadata_Model::file() const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.Model.file)
  return file_.GetNoArena();
}
inline void FuelMetadata_Model::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.FuelMetadata.Model.file)
}
#if LANG_CXX11
inline void FuelMetadata_Model::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.FuelMetadata.Model.file)
}
#endif
inline void FuelMetadata_Model::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.FuelMetadata.Model.file)
}
inline void FuelMetadata_Model::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.FuelMetadata.Model.file)
}
inline ::std::string* FuelMetadata_Model::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.Model.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FuelMetadata_Model::release_file() {
  // @@protoc_insertion_point(field_release:gz.msgs.FuelMetadata.Model.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FuelMetadata_Model::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.FuelMetadata.Model.file)
}

// .gz.msgs.VersionedName file_format = 2;
inline bool FuelMetadata_Model::has_file_format() const {
  return this != internal_default_instance() && file_format_ != NULL;
}
inline const ::gz::msgs::VersionedName& FuelMetadata_Model::_internal_file_format() const {
  return *file_format_;
}
inline const ::gz::msgs::VersionedName& FuelMetadata_Model::file_format() const {
  const ::gz::msgs::VersionedName* p = file_format_;
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.Model.file_format)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::VersionedName*>(
      &::gz::msgs::_VersionedName_default_instance_);
}
inline ::gz::msgs::VersionedName* FuelMetadata_Model::release_file_format() {
  // @@protoc_insertion_point(field_release:gz.msgs.FuelMetadata.Model.file_format)
  
  ::gz::msgs::VersionedName* temp = file_format_;
  file_format_ = NULL;
  return temp;
}
inline ::gz::msgs::VersionedName* FuelMetadata_Model::mutable_file_format() {
  
  if (file_format_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::VersionedName>(GetArenaNoVirtual());
    file_format_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.Model.file_format)
  return file_format_;
}
inline void FuelMetadata_Model::set_allocated_file_format(::gz::msgs::VersionedName* file_format) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(file_format_);
  }
  if (file_format) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_format = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_format, submessage_arena);
    }
    
  } else {
    
  }
  file_format_ = file_format;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.FuelMetadata.Model.file_format)
}

// -------------------------------------------------------------------

// FuelMetadata_World

// string file = 1;
inline void FuelMetadata_World::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FuelMetadata_World::file() const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.World.file)
  return file_.GetNoArena();
}
inline void FuelMetadata_World::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.FuelMetadata.World.file)
}
#if LANG_CXX11
inline void FuelMetadata_World::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.FuelMetadata.World.file)
}
#endif
inline void FuelMetadata_World::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.FuelMetadata.World.file)
}
inline void FuelMetadata_World::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.FuelMetadata.World.file)
}
inline ::std::string* FuelMetadata_World::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.World.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FuelMetadata_World::release_file() {
  // @@protoc_insertion_point(field_release:gz.msgs.FuelMetadata.World.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FuelMetadata_World::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.FuelMetadata.World.file)
}

// .gz.msgs.VersionedName file_format = 2;
inline bool FuelMetadata_World::has_file_format() const {
  return this != internal_default_instance() && file_format_ != NULL;
}
inline const ::gz::msgs::VersionedName& FuelMetadata_World::_internal_file_format() const {
  return *file_format_;
}
inline const ::gz::msgs::VersionedName& FuelMetadata_World::file_format() const {
  const ::gz::msgs::VersionedName* p = file_format_;
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.World.file_format)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::VersionedName*>(
      &::gz::msgs::_VersionedName_default_instance_);
}
inline ::gz::msgs::VersionedName* FuelMetadata_World::release_file_format() {
  // @@protoc_insertion_point(field_release:gz.msgs.FuelMetadata.World.file_format)
  
  ::gz::msgs::VersionedName* temp = file_format_;
  file_format_ = NULL;
  return temp;
}
inline ::gz::msgs::VersionedName* FuelMetadata_World::mutable_file_format() {
  
  if (file_format_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::VersionedName>(GetArenaNoVirtual());
    file_format_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.World.file_format)
  return file_format_;
}
inline void FuelMetadata_World::set_allocated_file_format(::gz::msgs::VersionedName* file_format) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(file_format_);
  }
  if (file_format) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_format = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_format, submessage_arena);
    }
    
  } else {
    
  }
  file_format_ = file_format;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.FuelMetadata.World.file_format)
}

// -------------------------------------------------------------------

// FuelMetadata_Dependency

// string uri = 1;
inline void FuelMetadata_Dependency::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FuelMetadata_Dependency::uri() const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.Dependency.uri)
  return uri_.GetNoArena();
}
inline void FuelMetadata_Dependency::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.FuelMetadata.Dependency.uri)
}
#if LANG_CXX11
inline void FuelMetadata_Dependency::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.FuelMetadata.Dependency.uri)
}
#endif
inline void FuelMetadata_Dependency::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.FuelMetadata.Dependency.uri)
}
inline void FuelMetadata_Dependency::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.FuelMetadata.Dependency.uri)
}
inline ::std::string* FuelMetadata_Dependency::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.Dependency.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FuelMetadata_Dependency::release_uri() {
  // @@protoc_insertion_point(field_release:gz.msgs.FuelMetadata.Dependency.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FuelMetadata_Dependency::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.FuelMetadata.Dependency.uri)
}

// -------------------------------------------------------------------

// FuelMetadata_Compatibility

// string name = 1;
inline void FuelMetadata_Compatibility::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FuelMetadata_Compatibility::name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.Compatibility.name)
  return name_.GetNoArena();
}
inline void FuelMetadata_Compatibility::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.FuelMetadata.Compatibility.name)
}
#if LANG_CXX11
inline void FuelMetadata_Compatibility::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.FuelMetadata.Compatibility.name)
}
#endif
inline void FuelMetadata_Compatibility::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.FuelMetadata.Compatibility.name)
}
inline void FuelMetadata_Compatibility::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.FuelMetadata.Compatibility.name)
}
inline ::std::string* FuelMetadata_Compatibility::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.Compatibility.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FuelMetadata_Compatibility::release_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.FuelMetadata.Compatibility.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FuelMetadata_Compatibility::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.FuelMetadata.Compatibility.name)
}

// .gz.msgs.Version version = 2;
inline bool FuelMetadata_Compatibility::has_version() const {
  return version_type_case() == kVersion;
}
inline void FuelMetadata_Compatibility::set_has_version() {
  _oneof_case_[0] = kVersion;
}
inline const ::gz::msgs::Version& FuelMetadata_Compatibility::_internal_version() const {
  return *version_type_.version_;
}
inline ::gz::msgs::Version* FuelMetadata_Compatibility::release_version() {
  // @@protoc_insertion_point(field_release:gz.msgs.FuelMetadata.Compatibility.version)
  if (has_version()) {
    clear_has_version_type();
      ::gz::msgs::Version* temp = version_type_.version_;
    version_type_.version_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gz::msgs::Version& FuelMetadata_Compatibility::version() const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.Compatibility.version)
  return has_version()
      ? *version_type_.version_
      : *reinterpret_cast< ::gz::msgs::Version*>(&::gz::msgs::_Version_default_instance_);
}
inline ::gz::msgs::Version* FuelMetadata_Compatibility::mutable_version() {
  if (!has_version()) {
    clear_version_type();
    set_has_version();
    version_type_.version_ = CreateMaybeMessage< ::gz::msgs::Version >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.Compatibility.version)
  return version_type_.version_;
}

// .gz.msgs.VersionRange version_range = 3;
inline bool FuelMetadata_Compatibility::has_version_range() const {
  return version_type_case() == kVersionRange;
}
inline void FuelMetadata_Compatibility::set_has_version_range() {
  _oneof_case_[0] = kVersionRange;
}
inline const ::gz::msgs::VersionRange& FuelMetadata_Compatibility::_internal_version_range() const {
  return *version_type_.version_range_;
}
inline ::gz::msgs::VersionRange* FuelMetadata_Compatibility::release_version_range() {
  // @@protoc_insertion_point(field_release:gz.msgs.FuelMetadata.Compatibility.version_range)
  if (has_version_range()) {
    clear_has_version_type();
      ::gz::msgs::VersionRange* temp = version_type_.version_range_;
    version_type_.version_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gz::msgs::VersionRange& FuelMetadata_Compatibility::version_range() const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.Compatibility.version_range)
  return has_version_range()
      ? *version_type_.version_range_
      : *reinterpret_cast< ::gz::msgs::VersionRange*>(&::gz::msgs::_VersionRange_default_instance_);
}
inline ::gz::msgs::VersionRange* FuelMetadata_Compatibility::mutable_version_range() {
  if (!has_version_range()) {
    clear_version_type();
    set_has_version_range();
    version_type_.version_range_ = CreateMaybeMessage< ::gz::msgs::VersionRange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.Compatibility.version_range)
  return version_type_.version_range_;
}

inline bool FuelMetadata_Compatibility::has_version_type() const {
  return version_type_case() != VERSION_TYPE_NOT_SET;
}
inline void FuelMetadata_Compatibility::clear_has_version_type() {
  _oneof_case_[0] = VERSION_TYPE_NOT_SET;
}
inline FuelMetadata_Compatibility::VersionTypeCase FuelMetadata_Compatibility::version_type_case() const {
  return FuelMetadata_Compatibility::VersionTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FuelMetadata_Categories

// string first = 1;
inline void FuelMetadata_Categories::clear_first() {
  first_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FuelMetadata_Categories::first() const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.Categories.first)
  return first_.GetNoArena();
}
inline void FuelMetadata_Categories::set_first(const ::std::string& value) {
  
  first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.FuelMetadata.Categories.first)
}
#if LANG_CXX11
inline void FuelMetadata_Categories::set_first(::std::string&& value) {
  
  first_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.FuelMetadata.Categories.first)
}
#endif
inline void FuelMetadata_Categories::set_first(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.FuelMetadata.Categories.first)
}
inline void FuelMetadata_Categories::set_first(const char* value, size_t size) {
  
  first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.FuelMetadata.Categories.first)
}
inline ::std::string* FuelMetadata_Categories::mutable_first() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.Categories.first)
  return first_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FuelMetadata_Categories::release_first() {
  // @@protoc_insertion_point(field_release:gz.msgs.FuelMetadata.Categories.first)
  
  return first_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FuelMetadata_Categories::set_allocated_first(::std::string* first) {
  if (first != NULL) {
    
  } else {
    
  }
  first_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.FuelMetadata.Categories.first)
}

// string second = 2;
inline void FuelMetadata_Categories::clear_second() {
  second_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FuelMetadata_Categories::second() const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.Categories.second)
  return second_.GetNoArena();
}
inline void FuelMetadata_Categories::set_second(const ::std::string& value) {
  
  second_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.FuelMetadata.Categories.second)
}
#if LANG_CXX11
inline void FuelMetadata_Categories::set_second(::std::string&& value) {
  
  second_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.FuelMetadata.Categories.second)
}
#endif
inline void FuelMetadata_Categories::set_second(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  second_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.FuelMetadata.Categories.second)
}
inline void FuelMetadata_Categories::set_second(const char* value, size_t size) {
  
  second_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.FuelMetadata.Categories.second)
}
inline ::std::string* FuelMetadata_Categories::mutable_second() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.Categories.second)
  return second_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FuelMetadata_Categories::release_second() {
  // @@protoc_insertion_point(field_release:gz.msgs.FuelMetadata.Categories.second)
  
  return second_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FuelMetadata_Categories::set_allocated_second(::std::string* second) {
  if (second != NULL) {
    
  } else {
    
  }
  second_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), second);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.FuelMetadata.Categories.second)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FuelMetadata

// .gz.msgs.FuelMetadata.Model model = 1;
inline bool FuelMetadata::has_model() const {
  return resource_type_case() == kModel;
}
inline void FuelMetadata::set_has_model() {
  _oneof_case_[0] = kModel;
}
inline void FuelMetadata::clear_model() {
  if (has_model()) {
    delete resource_type_.model_;
    clear_has_resource_type();
  }
}
inline const ::gz::msgs::FuelMetadata_Model& FuelMetadata::_internal_model() const {
  return *resource_type_.model_;
}
inline ::gz::msgs::FuelMetadata_Model* FuelMetadata::release_model() {
  // @@protoc_insertion_point(field_release:gz.msgs.FuelMetadata.model)
  if (has_model()) {
    clear_has_resource_type();
      ::gz::msgs::FuelMetadata_Model* temp = resource_type_.model_;
    resource_type_.model_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gz::msgs::FuelMetadata_Model& FuelMetadata::model() const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.model)
  return has_model()
      ? *resource_type_.model_
      : *reinterpret_cast< ::gz::msgs::FuelMetadata_Model*>(&::gz::msgs::_FuelMetadata_Model_default_instance_);
}
inline ::gz::msgs::FuelMetadata_Model* FuelMetadata::mutable_model() {
  if (!has_model()) {
    clear_resource_type();
    set_has_model();
    resource_type_.model_ = CreateMaybeMessage< ::gz::msgs::FuelMetadata_Model >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.model)
  return resource_type_.model_;
}

// .gz.msgs.FuelMetadata.World world = 2;
inline bool FuelMetadata::has_world() const {
  return resource_type_case() == kWorld;
}
inline void FuelMetadata::set_has_world() {
  _oneof_case_[0] = kWorld;
}
inline void FuelMetadata::clear_world() {
  if (has_world()) {
    delete resource_type_.world_;
    clear_has_resource_type();
  }
}
inline const ::gz::msgs::FuelMetadata_World& FuelMetadata::_internal_world() const {
  return *resource_type_.world_;
}
inline ::gz::msgs::FuelMetadata_World* FuelMetadata::release_world() {
  // @@protoc_insertion_point(field_release:gz.msgs.FuelMetadata.world)
  if (has_world()) {
    clear_has_resource_type();
      ::gz::msgs::FuelMetadata_World* temp = resource_type_.world_;
    resource_type_.world_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gz::msgs::FuelMetadata_World& FuelMetadata::world() const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.world)
  return has_world()
      ? *resource_type_.world_
      : *reinterpret_cast< ::gz::msgs::FuelMetadata_World*>(&::gz::msgs::_FuelMetadata_World_default_instance_);
}
inline ::gz::msgs::FuelMetadata_World* FuelMetadata::mutable_world() {
  if (!has_world()) {
    clear_resource_type();
    set_has_world();
    resource_type_.world_ = CreateMaybeMessage< ::gz::msgs::FuelMetadata_World >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.world)
  return resource_type_.world_;
}

// string name = 3;
inline void FuelMetadata::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FuelMetadata::name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.name)
  return name_.GetNoArena();
}
inline void FuelMetadata::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.FuelMetadata.name)
}
#if LANG_CXX11
inline void FuelMetadata::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.FuelMetadata.name)
}
#endif
inline void FuelMetadata::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.FuelMetadata.name)
}
inline void FuelMetadata::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.FuelMetadata.name)
}
inline ::std::string* FuelMetadata::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FuelMetadata::release_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.FuelMetadata.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FuelMetadata::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.FuelMetadata.name)
}

// string description = 4;
inline void FuelMetadata::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FuelMetadata::description() const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.description)
  return description_.GetNoArena();
}
inline void FuelMetadata::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.FuelMetadata.description)
}
#if LANG_CXX11
inline void FuelMetadata::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.FuelMetadata.description)
}
#endif
inline void FuelMetadata::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.FuelMetadata.description)
}
inline void FuelMetadata::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.FuelMetadata.description)
}
inline ::std::string* FuelMetadata::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FuelMetadata::release_description() {
  // @@protoc_insertion_point(field_release:gz.msgs.FuelMetadata.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FuelMetadata::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.FuelMetadata.description)
}

// int32 version = 5;
inline void FuelMetadata::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 FuelMetadata::version() const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.version)
  return version_;
}
inline void FuelMetadata::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.FuelMetadata.version)
}

// repeated .gz.msgs.FuelMetadata.Contact authors = 6;
inline int FuelMetadata::authors_size() const {
  return authors_.size();
}
inline void FuelMetadata::clear_authors() {
  authors_.Clear();
}
inline ::gz::msgs::FuelMetadata_Contact* FuelMetadata::mutable_authors(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.authors)
  return authors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::FuelMetadata_Contact >*
FuelMetadata::mutable_authors() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.FuelMetadata.authors)
  return &authors_;
}
inline const ::gz::msgs::FuelMetadata_Contact& FuelMetadata::authors(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.authors)
  return authors_.Get(index);
}
inline ::gz::msgs::FuelMetadata_Contact* FuelMetadata::add_authors() {
  // @@protoc_insertion_point(field_add:gz.msgs.FuelMetadata.authors)
  return authors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::FuelMetadata_Contact >&
FuelMetadata::authors() const {
  // @@protoc_insertion_point(field_list:gz.msgs.FuelMetadata.authors)
  return authors_;
}

// .gz.msgs.FuelMetadata.Legal legal = 7;
inline bool FuelMetadata::has_legal() const {
  return this != internal_default_instance() && legal_ != NULL;
}
inline void FuelMetadata::clear_legal() {
  if (GetArenaNoVirtual() == NULL && legal_ != NULL) {
    delete legal_;
  }
  legal_ = NULL;
}
inline const ::gz::msgs::FuelMetadata_Legal& FuelMetadata::_internal_legal() const {
  return *legal_;
}
inline const ::gz::msgs::FuelMetadata_Legal& FuelMetadata::legal() const {
  const ::gz::msgs::FuelMetadata_Legal* p = legal_;
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.legal)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::FuelMetadata_Legal*>(
      &::gz::msgs::_FuelMetadata_Legal_default_instance_);
}
inline ::gz::msgs::FuelMetadata_Legal* FuelMetadata::release_legal() {
  // @@protoc_insertion_point(field_release:gz.msgs.FuelMetadata.legal)
  
  ::gz::msgs::FuelMetadata_Legal* temp = legal_;
  legal_ = NULL;
  return temp;
}
inline ::gz::msgs::FuelMetadata_Legal* FuelMetadata::mutable_legal() {
  
  if (legal_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::FuelMetadata_Legal>(GetArenaNoVirtual());
    legal_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.legal)
  return legal_;
}
inline void FuelMetadata::set_allocated_legal(::gz::msgs::FuelMetadata_Legal* legal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete legal_;
  }
  if (legal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      legal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, legal, submessage_arena);
    }
    
  } else {
    
  }
  legal_ = legal;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.FuelMetadata.legal)
}

// repeated string tags = 8;
inline int FuelMetadata::tags_size() const {
  return tags_.size();
}
inline void FuelMetadata::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& FuelMetadata::tags(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.tags)
  return tags_.Get(index);
}
inline ::std::string* FuelMetadata::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.tags)
  return tags_.Mutable(index);
}
inline void FuelMetadata::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gz.msgs.FuelMetadata.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FuelMetadata::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gz.msgs.FuelMetadata.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FuelMetadata::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gz.msgs.FuelMetadata.tags)
}
inline void FuelMetadata::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.FuelMetadata.tags)
}
inline ::std::string* FuelMetadata::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:gz.msgs.FuelMetadata.tags)
  return tags_.Add();
}
inline void FuelMetadata::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gz.msgs.FuelMetadata.tags)
}
#if LANG_CXX11
inline void FuelMetadata::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gz.msgs.FuelMetadata.tags)
}
#endif
inline void FuelMetadata::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gz.msgs.FuelMetadata.tags)
}
inline void FuelMetadata::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gz.msgs.FuelMetadata.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FuelMetadata::tags() const {
  // @@protoc_insertion_point(field_list:gz.msgs.FuelMetadata.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FuelMetadata::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.FuelMetadata.tags)
  return &tags_;
}

// map<string, string> annotations = 9;
inline int FuelMetadata::annotations_size() const {
  return annotations_.size();
}
inline void FuelMetadata::clear_annotations() {
  annotations_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
FuelMetadata::annotations() const {
  // @@protoc_insertion_point(field_map:gz.msgs.FuelMetadata.annotations)
  return annotations_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
FuelMetadata::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:gz.msgs.FuelMetadata.annotations)
  return annotations_.MutableMap();
}

// repeated .gz.msgs.FuelMetadata.Dependency dependencies = 10;
inline int FuelMetadata::dependencies_size() const {
  return dependencies_.size();
}
inline void FuelMetadata::clear_dependencies() {
  dependencies_.Clear();
}
inline ::gz::msgs::FuelMetadata_Dependency* FuelMetadata::mutable_dependencies(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.dependencies)
  return dependencies_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::FuelMetadata_Dependency >*
FuelMetadata::mutable_dependencies() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.FuelMetadata.dependencies)
  return &dependencies_;
}
inline const ::gz::msgs::FuelMetadata_Dependency& FuelMetadata::dependencies(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.dependencies)
  return dependencies_.Get(index);
}
inline ::gz::msgs::FuelMetadata_Dependency* FuelMetadata::add_dependencies() {
  // @@protoc_insertion_point(field_add:gz.msgs.FuelMetadata.dependencies)
  return dependencies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::FuelMetadata_Dependency >&
FuelMetadata::dependencies() const {
  // @@protoc_insertion_point(field_list:gz.msgs.FuelMetadata.dependencies)
  return dependencies_;
}

// repeated .gz.msgs.FuelMetadata.Compatibility compatibilities = 11;
inline int FuelMetadata::compatibilities_size() const {
  return compatibilities_.size();
}
inline void FuelMetadata::clear_compatibilities() {
  compatibilities_.Clear();
}
inline ::gz::msgs::FuelMetadata_Compatibility* FuelMetadata::mutable_compatibilities(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.compatibilities)
  return compatibilities_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::FuelMetadata_Compatibility >*
FuelMetadata::mutable_compatibilities() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.FuelMetadata.compatibilities)
  return &compatibilities_;
}
inline const ::gz::msgs::FuelMetadata_Compatibility& FuelMetadata::compatibilities(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.compatibilities)
  return compatibilities_.Get(index);
}
inline ::gz::msgs::FuelMetadata_Compatibility* FuelMetadata::add_compatibilities() {
  // @@protoc_insertion_point(field_add:gz.msgs.FuelMetadata.compatibilities)
  return compatibilities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::FuelMetadata_Compatibility >&
FuelMetadata::compatibilities() const {
  // @@protoc_insertion_point(field_list:gz.msgs.FuelMetadata.compatibilities)
  return compatibilities_;
}

// .gz.msgs.FuelMetadata.Categories categories = 12;
inline bool FuelMetadata::has_categories() const {
  return this != internal_default_instance() && categories_ != NULL;
}
inline void FuelMetadata::clear_categories() {
  if (GetArenaNoVirtual() == NULL && categories_ != NULL) {
    delete categories_;
  }
  categories_ = NULL;
}
inline const ::gz::msgs::FuelMetadata_Categories& FuelMetadata::_internal_categories() const {
  return *categories_;
}
inline const ::gz::msgs::FuelMetadata_Categories& FuelMetadata::categories() const {
  const ::gz::msgs::FuelMetadata_Categories* p = categories_;
  // @@protoc_insertion_point(field_get:gz.msgs.FuelMetadata.categories)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::FuelMetadata_Categories*>(
      &::gz::msgs::_FuelMetadata_Categories_default_instance_);
}
inline ::gz::msgs::FuelMetadata_Categories* FuelMetadata::release_categories() {
  // @@protoc_insertion_point(field_release:gz.msgs.FuelMetadata.categories)
  
  ::gz::msgs::FuelMetadata_Categories* temp = categories_;
  categories_ = NULL;
  return temp;
}
inline ::gz::msgs::FuelMetadata_Categories* FuelMetadata::mutable_categories() {
  
  if (categories_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::FuelMetadata_Categories>(GetArenaNoVirtual());
    categories_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.FuelMetadata.categories)
  return categories_;
}
inline void FuelMetadata::set_allocated_categories(::gz::msgs::FuelMetadata_Categories* categories) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete categories_;
  }
  if (categories) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      categories = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, categories, submessage_arena);
    }
    
  } else {
    
  }
  categories_ = categories;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.FuelMetadata.categories)
}

inline bool FuelMetadata::has_resource_type() const {
  return resource_type_case() != RESOURCE_TYPE_NOT_SET;
}
inline void FuelMetadata::clear_has_resource_type() {
  _oneof_case_[0] = RESOURCE_TYPE_NOT_SET;
}
inline FuelMetadata::ResourceTypeCase FuelMetadata::resource_type_case() const {
  return FuelMetadata::ResourceTypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2ffuel_5fmetadata_2eproto
