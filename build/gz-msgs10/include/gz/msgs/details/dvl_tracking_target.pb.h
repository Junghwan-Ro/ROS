// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/dvl_tracking_target.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fdvl_5ftracking_5ftarget_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fdvl_5ftracking_5ftarget_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/dvl_kinematic_estimate.pb.h"
#include "gz/msgs/dvl_range_estimate.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fdvl_5ftracking_5ftarget_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fdvl_5ftracking_5ftarget_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fdvl_5ftracking_5ftarget_2eproto
namespace gz {
namespace msgs {
class DVLTrackingTarget;
class DVLTrackingTargetDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern DVLTrackingTargetDefaultTypeInternal _DVLTrackingTarget_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::DVLTrackingTarget* Arena::CreateMaybeMessage<::gz::msgs::DVLTrackingTarget>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

enum DVLTrackingTarget_TargetType {
  DVLTrackingTarget_TargetType_DVL_TARGET_UNSPECIFIED = 0,
  DVLTrackingTarget_TargetType_DVL_TARGET_BOTTOM = 1,
  DVLTrackingTarget_TargetType_DVL_TARGET_WATER_MASS = 2,
  DVLTrackingTarget_TargetType_DVLTrackingTarget_TargetType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DVLTrackingTarget_TargetType_DVLTrackingTarget_TargetType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool DVLTrackingTarget_TargetType_IsValid(int value);
const DVLTrackingTarget_TargetType DVLTrackingTarget_TargetType_TargetType_MIN = DVLTrackingTarget_TargetType_DVL_TARGET_UNSPECIFIED;
const DVLTrackingTarget_TargetType DVLTrackingTarget_TargetType_TargetType_MAX = DVLTrackingTarget_TargetType_DVL_TARGET_WATER_MASS;
const int DVLTrackingTarget_TargetType_TargetType_ARRAYSIZE = DVLTrackingTarget_TargetType_TargetType_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* DVLTrackingTarget_TargetType_descriptor();
inline const ::std::string& DVLTrackingTarget_TargetType_Name(DVLTrackingTarget_TargetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DVLTrackingTarget_TargetType_descriptor(), value);
}
inline bool DVLTrackingTarget_TargetType_Parse(
    const ::std::string& name, DVLTrackingTarget_TargetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DVLTrackingTarget_TargetType>(
    DVLTrackingTarget_TargetType_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE DVLTrackingTarget : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.DVLTrackingTarget) */ {
 public:
  DVLTrackingTarget();
  virtual ~DVLTrackingTarget();

  DVLTrackingTarget(const DVLTrackingTarget& from);

  inline DVLTrackingTarget& operator=(const DVLTrackingTarget& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DVLTrackingTarget(DVLTrackingTarget&& from) noexcept
    : DVLTrackingTarget() {
    *this = ::std::move(from);
  }

  inline DVLTrackingTarget& operator=(DVLTrackingTarget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DVLTrackingTarget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DVLTrackingTarget* internal_default_instance() {
    return reinterpret_cast<const DVLTrackingTarget*>(
               &_DVLTrackingTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DVLTrackingTarget* other);
  friend void swap(DVLTrackingTarget& a, DVLTrackingTarget& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DVLTrackingTarget* New() const final {
    return CreateMaybeMessage<DVLTrackingTarget>(NULL);
  }

  DVLTrackingTarget* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DVLTrackingTarget>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DVLTrackingTarget& from);
  void MergeFrom(const DVLTrackingTarget& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DVLTrackingTarget* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DVLTrackingTarget_TargetType TargetType;
  static const TargetType DVL_TARGET_UNSPECIFIED =
    DVLTrackingTarget_TargetType_DVL_TARGET_UNSPECIFIED;
  static const TargetType DVL_TARGET_BOTTOM =
    DVLTrackingTarget_TargetType_DVL_TARGET_BOTTOM;
  static const TargetType DVL_TARGET_WATER_MASS =
    DVLTrackingTarget_TargetType_DVL_TARGET_WATER_MASS;
  static inline bool TargetType_IsValid(int value) {
    return DVLTrackingTarget_TargetType_IsValid(value);
  }
  static const TargetType TargetType_MIN =
    DVLTrackingTarget_TargetType_TargetType_MIN;
  static const TargetType TargetType_MAX =
    DVLTrackingTarget_TargetType_TargetType_MAX;
  static const int TargetType_ARRAYSIZE =
    DVLTrackingTarget_TargetType_TargetType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TargetType_descriptor() {
    return DVLTrackingTarget_TargetType_descriptor();
  }
  static inline const ::std::string& TargetType_Name(TargetType value) {
    return DVLTrackingTarget_TargetType_Name(value);
  }
  static inline bool TargetType_Parse(const ::std::string& name,
      TargetType* value) {
    return DVLTrackingTarget_TargetType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .gz.msgs.DVLRangeEstimate range = 2;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 2;
  private:
  const ::gz::msgs::DVLRangeEstimate& _internal_range() const;
  public:
  const ::gz::msgs::DVLRangeEstimate& range() const;
  ::gz::msgs::DVLRangeEstimate* release_range();
  ::gz::msgs::DVLRangeEstimate* mutable_range();
  void set_allocated_range(::gz::msgs::DVLRangeEstimate* range);

  // .gz.msgs.DVLKinematicEstimate position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  private:
  const ::gz::msgs::DVLKinematicEstimate& _internal_position() const;
  public:
  const ::gz::msgs::DVLKinematicEstimate& position() const;
  ::gz::msgs::DVLKinematicEstimate* release_position();
  ::gz::msgs::DVLKinematicEstimate* mutable_position();
  void set_allocated_position(::gz::msgs::DVLKinematicEstimate* position);

  // .gz.msgs.DVLTrackingTarget.TargetType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gz::msgs::DVLTrackingTarget_TargetType type() const;
  void set_type(::gz::msgs::DVLTrackingTarget_TargetType value);

  // @@protoc_insertion_point(class_scope:gz.msgs.DVLTrackingTarget)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gz::msgs::DVLRangeEstimate* range_;
  ::gz::msgs::DVLKinematicEstimate* position_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fdvl_5ftracking_5ftarget_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DVLTrackingTarget

// .gz.msgs.DVLTrackingTarget.TargetType type = 1;
inline void DVLTrackingTarget::clear_type() {
  type_ = 0;
}
inline ::gz::msgs::DVLTrackingTarget_TargetType DVLTrackingTarget::type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.DVLTrackingTarget.type)
  return static_cast< ::gz::msgs::DVLTrackingTarget_TargetType >(type_);
}
inline void DVLTrackingTarget::set_type(::gz::msgs::DVLTrackingTarget_TargetType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.DVLTrackingTarget.type)
}

// .gz.msgs.DVLRangeEstimate range = 2;
inline bool DVLTrackingTarget::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
inline const ::gz::msgs::DVLRangeEstimate& DVLTrackingTarget::_internal_range() const {
  return *range_;
}
inline const ::gz::msgs::DVLRangeEstimate& DVLTrackingTarget::range() const {
  const ::gz::msgs::DVLRangeEstimate* p = range_;
  // @@protoc_insertion_point(field_get:gz.msgs.DVLTrackingTarget.range)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::DVLRangeEstimate*>(
      &::gz::msgs::_DVLRangeEstimate_default_instance_);
}
inline ::gz::msgs::DVLRangeEstimate* DVLTrackingTarget::release_range() {
  // @@protoc_insertion_point(field_release:gz.msgs.DVLTrackingTarget.range)
  
  ::gz::msgs::DVLRangeEstimate* temp = range_;
  range_ = NULL;
  return temp;
}
inline ::gz::msgs::DVLRangeEstimate* DVLTrackingTarget::mutable_range() {
  
  if (range_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::DVLRangeEstimate>(GetArenaNoVirtual());
    range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.DVLTrackingTarget.range)
  return range_;
}
inline void DVLTrackingTarget::set_allocated_range(::gz::msgs::DVLRangeEstimate* range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(range_);
  }
  if (range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    
  } else {
    
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.DVLTrackingTarget.range)
}

// .gz.msgs.DVLKinematicEstimate position = 3;
inline bool DVLTrackingTarget::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::gz::msgs::DVLKinematicEstimate& DVLTrackingTarget::_internal_position() const {
  return *position_;
}
inline const ::gz::msgs::DVLKinematicEstimate& DVLTrackingTarget::position() const {
  const ::gz::msgs::DVLKinematicEstimate* p = position_;
  // @@protoc_insertion_point(field_get:gz.msgs.DVLTrackingTarget.position)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::DVLKinematicEstimate*>(
      &::gz::msgs::_DVLKinematicEstimate_default_instance_);
}
inline ::gz::msgs::DVLKinematicEstimate* DVLTrackingTarget::release_position() {
  // @@protoc_insertion_point(field_release:gz.msgs.DVLTrackingTarget.position)
  
  ::gz::msgs::DVLKinematicEstimate* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::gz::msgs::DVLKinematicEstimate* DVLTrackingTarget::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::DVLKinematicEstimate>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.DVLTrackingTarget.position)
  return position_;
}
inline void DVLTrackingTarget::set_allocated_position(::gz::msgs::DVLKinematicEstimate* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.DVLTrackingTarget.position)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::msgs::DVLTrackingTarget_TargetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::DVLTrackingTarget_TargetType>() {
  return ::gz::msgs::DVLTrackingTarget_TargetType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fdvl_5ftracking_5ftarget_2eproto
