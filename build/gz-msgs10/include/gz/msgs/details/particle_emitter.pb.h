// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/particle_emitter.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fparticle_5femitter_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fparticle_5femitter_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/boolean.pb.h"
#include "gz/msgs/color.pb.h"
#include "gz/msgs/float.pb.h"
#include "gz/msgs/header.pb.h"
#include "gz/msgs/material.pb.h"
#include "gz/msgs/pose.pb.h"
#include "gz/msgs/stringmsg.pb.h"
#include "gz/msgs/vector3d.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fparticle_5femitter_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fparticle_5femitter_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fparticle_5femitter_2eproto
namespace gz {
namespace msgs {
class ParticleEmitter;
class ParticleEmitterDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern ParticleEmitterDefaultTypeInternal _ParticleEmitter_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::ParticleEmitter* Arena::CreateMaybeMessage<::gz::msgs::ParticleEmitter>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

enum ParticleEmitter_EmitterType {
  ParticleEmitter_EmitterType_POINT = 0,
  ParticleEmitter_EmitterType_BOX = 1,
  ParticleEmitter_EmitterType_CYLINDER = 2,
  ParticleEmitter_EmitterType_ELLIPSOID = 3,
  ParticleEmitter_EmitterType_ParticleEmitter_EmitterType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ParticleEmitter_EmitterType_ParticleEmitter_EmitterType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool ParticleEmitter_EmitterType_IsValid(int value);
const ParticleEmitter_EmitterType ParticleEmitter_EmitterType_EmitterType_MIN = ParticleEmitter_EmitterType_POINT;
const ParticleEmitter_EmitterType ParticleEmitter_EmitterType_EmitterType_MAX = ParticleEmitter_EmitterType_ELLIPSOID;
const int ParticleEmitter_EmitterType_EmitterType_ARRAYSIZE = ParticleEmitter_EmitterType_EmitterType_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* ParticleEmitter_EmitterType_descriptor();
inline const ::std::string& ParticleEmitter_EmitterType_Name(ParticleEmitter_EmitterType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParticleEmitter_EmitterType_descriptor(), value);
}
inline bool ParticleEmitter_EmitterType_Parse(
    const ::std::string& name, ParticleEmitter_EmitterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParticleEmitter_EmitterType>(
    ParticleEmitter_EmitterType_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE ParticleEmitter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.ParticleEmitter) */ {
 public:
  ParticleEmitter();
  virtual ~ParticleEmitter();

  ParticleEmitter(const ParticleEmitter& from);

  inline ParticleEmitter& operator=(const ParticleEmitter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParticleEmitter(ParticleEmitter&& from) noexcept
    : ParticleEmitter() {
    *this = ::std::move(from);
  }

  inline ParticleEmitter& operator=(ParticleEmitter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ParticleEmitter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParticleEmitter* internal_default_instance() {
    return reinterpret_cast<const ParticleEmitter*>(
               &_ParticleEmitter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ParticleEmitter* other);
  friend void swap(ParticleEmitter& a, ParticleEmitter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParticleEmitter* New() const final {
    return CreateMaybeMessage<ParticleEmitter>(NULL);
  }

  ParticleEmitter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParticleEmitter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParticleEmitter& from);
  void MergeFrom(const ParticleEmitter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParticleEmitter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ParticleEmitter_EmitterType EmitterType;
  static const EmitterType POINT =
    ParticleEmitter_EmitterType_POINT;
  static const EmitterType BOX =
    ParticleEmitter_EmitterType_BOX;
  static const EmitterType CYLINDER =
    ParticleEmitter_EmitterType_CYLINDER;
  static const EmitterType ELLIPSOID =
    ParticleEmitter_EmitterType_ELLIPSOID;
  static inline bool EmitterType_IsValid(int value) {
    return ParticleEmitter_EmitterType_IsValid(value);
  }
  static const EmitterType EmitterType_MIN =
    ParticleEmitter_EmitterType_EmitterType_MIN;
  static const EmitterType EmitterType_MAX =
    ParticleEmitter_EmitterType_EmitterType_MAX;
  static const int EmitterType_ARRAYSIZE =
    ParticleEmitter_EmitterType_EmitterType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EmitterType_descriptor() {
    return ParticleEmitter_EmitterType_descriptor();
  }
  static inline const ::std::string& EmitterType_Name(EmitterType value) {
    return ParticleEmitter_EmitterType_Name(value);
  }
  static inline bool EmitterType_Parse(const ::std::string& name,
      EmitterType* value) {
    return ParticleEmitter_EmitterType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Pose pose = 5;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 5;
  private:
  const ::gz::msgs::Pose& _internal_pose() const;
  public:
  const ::gz::msgs::Pose& pose() const;
  ::gz::msgs::Pose* release_pose();
  ::gz::msgs::Pose* mutable_pose();
  void set_allocated_pose(::gz::msgs::Pose* pose);

  // .gz.msgs.Vector3d size = 6;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 6;
  private:
  const ::gz::msgs::Vector3d& _internal_size() const;
  public:
  const ::gz::msgs::Vector3d& size() const;
  ::gz::msgs::Vector3d* release_size();
  ::gz::msgs::Vector3d* mutable_size();
  void set_allocated_size(::gz::msgs::Vector3d* size);

  // .gz.msgs.Float rate = 7;
  bool has_rate() const;
  void clear_rate();
  static const int kRateFieldNumber = 7;
  private:
  const ::gz::msgs::Float& _internal_rate() const;
  public:
  const ::gz::msgs::Float& rate() const;
  ::gz::msgs::Float* release_rate();
  ::gz::msgs::Float* mutable_rate();
  void set_allocated_rate(::gz::msgs::Float* rate);

  // .gz.msgs.Float duration = 8;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 8;
  private:
  const ::gz::msgs::Float& _internal_duration() const;
  public:
  const ::gz::msgs::Float& duration() const;
  ::gz::msgs::Float* release_duration();
  ::gz::msgs::Float* mutable_duration();
  void set_allocated_duration(::gz::msgs::Float* duration);

  // .gz.msgs.Boolean emitting = 9;
  bool has_emitting() const;
  void clear_emitting();
  static const int kEmittingFieldNumber = 9;
  private:
  const ::gz::msgs::Boolean& _internal_emitting() const;
  public:
  const ::gz::msgs::Boolean& emitting() const;
  ::gz::msgs::Boolean* release_emitting();
  ::gz::msgs::Boolean* mutable_emitting();
  void set_allocated_emitting(::gz::msgs::Boolean* emitting);

  // .gz.msgs.Vector3d particle_size = 10;
  bool has_particle_size() const;
  void clear_particle_size();
  static const int kParticleSizeFieldNumber = 10;
  private:
  const ::gz::msgs::Vector3d& _internal_particle_size() const;
  public:
  const ::gz::msgs::Vector3d& particle_size() const;
  ::gz::msgs::Vector3d* release_particle_size();
  ::gz::msgs::Vector3d* mutable_particle_size();
  void set_allocated_particle_size(::gz::msgs::Vector3d* particle_size);

  // .gz.msgs.Float lifetime = 11;
  bool has_lifetime() const;
  void clear_lifetime();
  static const int kLifetimeFieldNumber = 11;
  private:
  const ::gz::msgs::Float& _internal_lifetime() const;
  public:
  const ::gz::msgs::Float& lifetime() const;
  ::gz::msgs::Float* release_lifetime();
  ::gz::msgs::Float* mutable_lifetime();
  void set_allocated_lifetime(::gz::msgs::Float* lifetime);

  // .gz.msgs.Material material = 12;
  bool has_material() const;
  void clear_material();
  static const int kMaterialFieldNumber = 12;
  private:
  const ::gz::msgs::Material& _internal_material() const;
  public:
  const ::gz::msgs::Material& material() const;
  ::gz::msgs::Material* release_material();
  ::gz::msgs::Material* mutable_material();
  void set_allocated_material(::gz::msgs::Material* material);

  // .gz.msgs.Float min_velocity = 13;
  bool has_min_velocity() const;
  void clear_min_velocity();
  static const int kMinVelocityFieldNumber = 13;
  private:
  const ::gz::msgs::Float& _internal_min_velocity() const;
  public:
  const ::gz::msgs::Float& min_velocity() const;
  ::gz::msgs::Float* release_min_velocity();
  ::gz::msgs::Float* mutable_min_velocity();
  void set_allocated_min_velocity(::gz::msgs::Float* min_velocity);

  // .gz.msgs.Float max_velocity = 14;
  bool has_max_velocity() const;
  void clear_max_velocity();
  static const int kMaxVelocityFieldNumber = 14;
  private:
  const ::gz::msgs::Float& _internal_max_velocity() const;
  public:
  const ::gz::msgs::Float& max_velocity() const;
  ::gz::msgs::Float* release_max_velocity();
  ::gz::msgs::Float* mutable_max_velocity();
  void set_allocated_max_velocity(::gz::msgs::Float* max_velocity);

  // .gz.msgs.Color color_start = 15;
  bool has_color_start() const;
  void clear_color_start();
  static const int kColorStartFieldNumber = 15;
  private:
  const ::gz::msgs::Color& _internal_color_start() const;
  public:
  const ::gz::msgs::Color& color_start() const;
  ::gz::msgs::Color* release_color_start();
  ::gz::msgs::Color* mutable_color_start();
  void set_allocated_color_start(::gz::msgs::Color* color_start);

  // .gz.msgs.Color color_end = 16;
  bool has_color_end() const;
  void clear_color_end();
  static const int kColorEndFieldNumber = 16;
  private:
  const ::gz::msgs::Color& _internal_color_end() const;
  public:
  const ::gz::msgs::Color& color_end() const;
  ::gz::msgs::Color* release_color_end();
  ::gz::msgs::Color* mutable_color_end();
  void set_allocated_color_end(::gz::msgs::Color* color_end);

  // .gz.msgs.Float scale_rate = 17;
  bool has_scale_rate() const;
  void clear_scale_rate();
  static const int kScaleRateFieldNumber = 17;
  private:
  const ::gz::msgs::Float& _internal_scale_rate() const;
  public:
  const ::gz::msgs::Float& scale_rate() const;
  ::gz::msgs::Float* release_scale_rate();
  ::gz::msgs::Float* mutable_scale_rate();
  void set_allocated_scale_rate(::gz::msgs::Float* scale_rate);

  // .gz.msgs.StringMsg color_range_image = 18;
  bool has_color_range_image() const;
  void clear_color_range_image();
  static const int kColorRangeImageFieldNumber = 18;
  private:
  const ::gz::msgs::StringMsg& _internal_color_range_image() const;
  public:
  const ::gz::msgs::StringMsg& color_range_image() const;
  ::gz::msgs::StringMsg* release_color_range_image();
  ::gz::msgs::StringMsg* mutable_color_range_image();
  void set_allocated_color_range_image(::gz::msgs::StringMsg* color_range_image);

  // .gz.msgs.StringMsg topic = 19;
  bool has_topic() const;
  void clear_topic();
  static const int kTopicFieldNumber = 19;
  private:
  const ::gz::msgs::StringMsg& _internal_topic() const;
  public:
  const ::gz::msgs::StringMsg& topic() const;
  ::gz::msgs::StringMsg* release_topic();
  ::gz::msgs::StringMsg* mutable_topic();
  void set_allocated_topic(::gz::msgs::StringMsg* topic);

  // .gz.msgs.Float particle_scatter_ratio = 20;
  bool has_particle_scatter_ratio() const;
  void clear_particle_scatter_ratio();
  static const int kParticleScatterRatioFieldNumber = 20;
  private:
  const ::gz::msgs::Float& _internal_particle_scatter_ratio() const;
  public:
  const ::gz::msgs::Float& particle_scatter_ratio() const;
  ::gz::msgs::Float* release_particle_scatter_ratio();
  ::gz::msgs::Float* mutable_particle_scatter_ratio();
  void set_allocated_particle_scatter_ratio(::gz::msgs::Float* particle_scatter_ratio);

  // uint32 id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // .gz.msgs.ParticleEmitter.EmitterType type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::gz::msgs::ParticleEmitter_EmitterType type() const;
  void set_type(::gz::msgs::ParticleEmitter_EmitterType value);

  // @@protoc_insertion_point(class_scope:gz.msgs.ParticleEmitter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Pose* pose_;
  ::gz::msgs::Vector3d* size_;
  ::gz::msgs::Float* rate_;
  ::gz::msgs::Float* duration_;
  ::gz::msgs::Boolean* emitting_;
  ::gz::msgs::Vector3d* particle_size_;
  ::gz::msgs::Float* lifetime_;
  ::gz::msgs::Material* material_;
  ::gz::msgs::Float* min_velocity_;
  ::gz::msgs::Float* max_velocity_;
  ::gz::msgs::Color* color_start_;
  ::gz::msgs::Color* color_end_;
  ::gz::msgs::Float* scale_rate_;
  ::gz::msgs::StringMsg* color_range_image_;
  ::gz::msgs::StringMsg* topic_;
  ::gz::msgs::Float* particle_scatter_ratio_;
  ::google::protobuf::uint32 id_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fparticle_5femitter_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParticleEmitter

// .gz.msgs.Header header = 1;
inline bool ParticleEmitter::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& ParticleEmitter::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& ParticleEmitter::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.ParticleEmitter.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* ParticleEmitter::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.ParticleEmitter.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* ParticleEmitter::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.ParticleEmitter.header)
  return header_;
}
inline void ParticleEmitter::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.ParticleEmitter.header)
}

// string name = 2;
inline void ParticleEmitter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParticleEmitter::name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.ParticleEmitter.name)
  return name_.GetNoArena();
}
inline void ParticleEmitter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.ParticleEmitter.name)
}
#if LANG_CXX11
inline void ParticleEmitter::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.ParticleEmitter.name)
}
#endif
inline void ParticleEmitter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.ParticleEmitter.name)
}
inline void ParticleEmitter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.ParticleEmitter.name)
}
inline ::std::string* ParticleEmitter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.ParticleEmitter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParticleEmitter::release_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.ParticleEmitter.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParticleEmitter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.ParticleEmitter.name)
}

// uint32 id = 3;
inline void ParticleEmitter::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 ParticleEmitter::id() const {
  // @@protoc_insertion_point(field_get:gz.msgs.ParticleEmitter.id)
  return id_;
}
inline void ParticleEmitter::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.ParticleEmitter.id)
}

// .gz.msgs.ParticleEmitter.EmitterType type = 4;
inline void ParticleEmitter::clear_type() {
  type_ = 0;
}
inline ::gz::msgs::ParticleEmitter_EmitterType ParticleEmitter::type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.ParticleEmitter.type)
  return static_cast< ::gz::msgs::ParticleEmitter_EmitterType >(type_);
}
inline void ParticleEmitter::set_type(::gz::msgs::ParticleEmitter_EmitterType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.ParticleEmitter.type)
}

// .gz.msgs.Pose pose = 5;
inline bool ParticleEmitter::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::gz::msgs::Pose& ParticleEmitter::_internal_pose() const {
  return *pose_;
}
inline const ::gz::msgs::Pose& ParticleEmitter::pose() const {
  const ::gz::msgs::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:gz.msgs.ParticleEmitter.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Pose*>(
      &::gz::msgs::_Pose_default_instance_);
}
inline ::gz::msgs::Pose* ParticleEmitter::release_pose() {
  // @@protoc_insertion_point(field_release:gz.msgs.ParticleEmitter.pose)
  
  ::gz::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::gz::msgs::Pose* ParticleEmitter::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.ParticleEmitter.pose)
  return pose_;
}
inline void ParticleEmitter::set_allocated_pose(::gz::msgs::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.ParticleEmitter.pose)
}

// .gz.msgs.Vector3d size = 6;
inline bool ParticleEmitter::has_size() const {
  return this != internal_default_instance() && size_ != NULL;
}
inline const ::gz::msgs::Vector3d& ParticleEmitter::_internal_size() const {
  return *size_;
}
inline const ::gz::msgs::Vector3d& ParticleEmitter::size() const {
  const ::gz::msgs::Vector3d* p = size_;
  // @@protoc_insertion_point(field_get:gz.msgs.ParticleEmitter.size)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Vector3d*>(
      &::gz::msgs::_Vector3d_default_instance_);
}
inline ::gz::msgs::Vector3d* ParticleEmitter::release_size() {
  // @@protoc_insertion_point(field_release:gz.msgs.ParticleEmitter.size)
  
  ::gz::msgs::Vector3d* temp = size_;
  size_ = NULL;
  return temp;
}
inline ::gz::msgs::Vector3d* ParticleEmitter::mutable_size() {
  
  if (size_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Vector3d>(GetArenaNoVirtual());
    size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.ParticleEmitter.size)
  return size_;
}
inline void ParticleEmitter::set_allocated_size(::gz::msgs::Vector3d* size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(size_);
  }
  if (size) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.ParticleEmitter.size)
}

// .gz.msgs.Float rate = 7;
inline bool ParticleEmitter::has_rate() const {
  return this != internal_default_instance() && rate_ != NULL;
}
inline const ::gz::msgs::Float& ParticleEmitter::_internal_rate() const {
  return *rate_;
}
inline const ::gz::msgs::Float& ParticleEmitter::rate() const {
  const ::gz::msgs::Float* p = rate_;
  // @@protoc_insertion_point(field_get:gz.msgs.ParticleEmitter.rate)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Float*>(
      &::gz::msgs::_Float_default_instance_);
}
inline ::gz::msgs::Float* ParticleEmitter::release_rate() {
  // @@protoc_insertion_point(field_release:gz.msgs.ParticleEmitter.rate)
  
  ::gz::msgs::Float* temp = rate_;
  rate_ = NULL;
  return temp;
}
inline ::gz::msgs::Float* ParticleEmitter::mutable_rate() {
  
  if (rate_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Float>(GetArenaNoVirtual());
    rate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.ParticleEmitter.rate)
  return rate_;
}
inline void ParticleEmitter::set_allocated_rate(::gz::msgs::Float* rate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rate_);
  }
  if (rate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rate, submessage_arena);
    }
    
  } else {
    
  }
  rate_ = rate;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.ParticleEmitter.rate)
}

// .gz.msgs.Float duration = 8;
inline bool ParticleEmitter::has_duration() const {
  return this != internal_default_instance() && duration_ != NULL;
}
inline const ::gz::msgs::Float& ParticleEmitter::_internal_duration() const {
  return *duration_;
}
inline const ::gz::msgs::Float& ParticleEmitter::duration() const {
  const ::gz::msgs::Float* p = duration_;
  // @@protoc_insertion_point(field_get:gz.msgs.ParticleEmitter.duration)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Float*>(
      &::gz::msgs::_Float_default_instance_);
}
inline ::gz::msgs::Float* ParticleEmitter::release_duration() {
  // @@protoc_insertion_point(field_release:gz.msgs.ParticleEmitter.duration)
  
  ::gz::msgs::Float* temp = duration_;
  duration_ = NULL;
  return temp;
}
inline ::gz::msgs::Float* ParticleEmitter::mutable_duration() {
  
  if (duration_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Float>(GetArenaNoVirtual());
    duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.ParticleEmitter.duration)
  return duration_;
}
inline void ParticleEmitter::set_allocated_duration(::gz::msgs::Float* duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(duration_);
  }
  if (duration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.ParticleEmitter.duration)
}

// .gz.msgs.Boolean emitting = 9;
inline bool ParticleEmitter::has_emitting() const {
  return this != internal_default_instance() && emitting_ != NULL;
}
inline const ::gz::msgs::Boolean& ParticleEmitter::_internal_emitting() const {
  return *emitting_;
}
inline const ::gz::msgs::Boolean& ParticleEmitter::emitting() const {
  const ::gz::msgs::Boolean* p = emitting_;
  // @@protoc_insertion_point(field_get:gz.msgs.ParticleEmitter.emitting)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Boolean*>(
      &::gz::msgs::_Boolean_default_instance_);
}
inline ::gz::msgs::Boolean* ParticleEmitter::release_emitting() {
  // @@protoc_insertion_point(field_release:gz.msgs.ParticleEmitter.emitting)
  
  ::gz::msgs::Boolean* temp = emitting_;
  emitting_ = NULL;
  return temp;
}
inline ::gz::msgs::Boolean* ParticleEmitter::mutable_emitting() {
  
  if (emitting_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Boolean>(GetArenaNoVirtual());
    emitting_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.ParticleEmitter.emitting)
  return emitting_;
}
inline void ParticleEmitter::set_allocated_emitting(::gz::msgs::Boolean* emitting) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(emitting_);
  }
  if (emitting) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      emitting = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, emitting, submessage_arena);
    }
    
  } else {
    
  }
  emitting_ = emitting;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.ParticleEmitter.emitting)
}

// .gz.msgs.Vector3d particle_size = 10;
inline bool ParticleEmitter::has_particle_size() const {
  return this != internal_default_instance() && particle_size_ != NULL;
}
inline const ::gz::msgs::Vector3d& ParticleEmitter::_internal_particle_size() const {
  return *particle_size_;
}
inline const ::gz::msgs::Vector3d& ParticleEmitter::particle_size() const {
  const ::gz::msgs::Vector3d* p = particle_size_;
  // @@protoc_insertion_point(field_get:gz.msgs.ParticleEmitter.particle_size)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Vector3d*>(
      &::gz::msgs::_Vector3d_default_instance_);
}
inline ::gz::msgs::Vector3d* ParticleEmitter::release_particle_size() {
  // @@protoc_insertion_point(field_release:gz.msgs.ParticleEmitter.particle_size)
  
  ::gz::msgs::Vector3d* temp = particle_size_;
  particle_size_ = NULL;
  return temp;
}
inline ::gz::msgs::Vector3d* ParticleEmitter::mutable_particle_size() {
  
  if (particle_size_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Vector3d>(GetArenaNoVirtual());
    particle_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.ParticleEmitter.particle_size)
  return particle_size_;
}
inline void ParticleEmitter::set_allocated_particle_size(::gz::msgs::Vector3d* particle_size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(particle_size_);
  }
  if (particle_size) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      particle_size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, particle_size, submessage_arena);
    }
    
  } else {
    
  }
  particle_size_ = particle_size;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.ParticleEmitter.particle_size)
}

// .gz.msgs.Float lifetime = 11;
inline bool ParticleEmitter::has_lifetime() const {
  return this != internal_default_instance() && lifetime_ != NULL;
}
inline const ::gz::msgs::Float& ParticleEmitter::_internal_lifetime() const {
  return *lifetime_;
}
inline const ::gz::msgs::Float& ParticleEmitter::lifetime() const {
  const ::gz::msgs::Float* p = lifetime_;
  // @@protoc_insertion_point(field_get:gz.msgs.ParticleEmitter.lifetime)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Float*>(
      &::gz::msgs::_Float_default_instance_);
}
inline ::gz::msgs::Float* ParticleEmitter::release_lifetime() {
  // @@protoc_insertion_point(field_release:gz.msgs.ParticleEmitter.lifetime)
  
  ::gz::msgs::Float* temp = lifetime_;
  lifetime_ = NULL;
  return temp;
}
inline ::gz::msgs::Float* ParticleEmitter::mutable_lifetime() {
  
  if (lifetime_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Float>(GetArenaNoVirtual());
    lifetime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.ParticleEmitter.lifetime)
  return lifetime_;
}
inline void ParticleEmitter::set_allocated_lifetime(::gz::msgs::Float* lifetime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lifetime_);
  }
  if (lifetime) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lifetime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lifetime, submessage_arena);
    }
    
  } else {
    
  }
  lifetime_ = lifetime;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.ParticleEmitter.lifetime)
}

// .gz.msgs.Material material = 12;
inline bool ParticleEmitter::has_material() const {
  return this != internal_default_instance() && material_ != NULL;
}
inline const ::gz::msgs::Material& ParticleEmitter::_internal_material() const {
  return *material_;
}
inline const ::gz::msgs::Material& ParticleEmitter::material() const {
  const ::gz::msgs::Material* p = material_;
  // @@protoc_insertion_point(field_get:gz.msgs.ParticleEmitter.material)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Material*>(
      &::gz::msgs::_Material_default_instance_);
}
inline ::gz::msgs::Material* ParticleEmitter::release_material() {
  // @@protoc_insertion_point(field_release:gz.msgs.ParticleEmitter.material)
  
  ::gz::msgs::Material* temp = material_;
  material_ = NULL;
  return temp;
}
inline ::gz::msgs::Material* ParticleEmitter::mutable_material() {
  
  if (material_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Material>(GetArenaNoVirtual());
    material_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.ParticleEmitter.material)
  return material_;
}
inline void ParticleEmitter::set_allocated_material(::gz::msgs::Material* material) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(material_);
  }
  if (material) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      material = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, material, submessage_arena);
    }
    
  } else {
    
  }
  material_ = material;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.ParticleEmitter.material)
}

// .gz.msgs.Float min_velocity = 13;
inline bool ParticleEmitter::has_min_velocity() const {
  return this != internal_default_instance() && min_velocity_ != NULL;
}
inline const ::gz::msgs::Float& ParticleEmitter::_internal_min_velocity() const {
  return *min_velocity_;
}
inline const ::gz::msgs::Float& ParticleEmitter::min_velocity() const {
  const ::gz::msgs::Float* p = min_velocity_;
  // @@protoc_insertion_point(field_get:gz.msgs.ParticleEmitter.min_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Float*>(
      &::gz::msgs::_Float_default_instance_);
}
inline ::gz::msgs::Float* ParticleEmitter::release_min_velocity() {
  // @@protoc_insertion_point(field_release:gz.msgs.ParticleEmitter.min_velocity)
  
  ::gz::msgs::Float* temp = min_velocity_;
  min_velocity_ = NULL;
  return temp;
}
inline ::gz::msgs::Float* ParticleEmitter::mutable_min_velocity() {
  
  if (min_velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Float>(GetArenaNoVirtual());
    min_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.ParticleEmitter.min_velocity)
  return min_velocity_;
}
inline void ParticleEmitter::set_allocated_min_velocity(::gz::msgs::Float* min_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(min_velocity_);
  }
  if (min_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      min_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, min_velocity, submessage_arena);
    }
    
  } else {
    
  }
  min_velocity_ = min_velocity;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.ParticleEmitter.min_velocity)
}

// .gz.msgs.Float max_velocity = 14;
inline bool ParticleEmitter::has_max_velocity() const {
  return this != internal_default_instance() && max_velocity_ != NULL;
}
inline const ::gz::msgs::Float& ParticleEmitter::_internal_max_velocity() const {
  return *max_velocity_;
}
inline const ::gz::msgs::Float& ParticleEmitter::max_velocity() const {
  const ::gz::msgs::Float* p = max_velocity_;
  // @@protoc_insertion_point(field_get:gz.msgs.ParticleEmitter.max_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Float*>(
      &::gz::msgs::_Float_default_instance_);
}
inline ::gz::msgs::Float* ParticleEmitter::release_max_velocity() {
  // @@protoc_insertion_point(field_release:gz.msgs.ParticleEmitter.max_velocity)
  
  ::gz::msgs::Float* temp = max_velocity_;
  max_velocity_ = NULL;
  return temp;
}
inline ::gz::msgs::Float* ParticleEmitter::mutable_max_velocity() {
  
  if (max_velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Float>(GetArenaNoVirtual());
    max_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.ParticleEmitter.max_velocity)
  return max_velocity_;
}
inline void ParticleEmitter::set_allocated_max_velocity(::gz::msgs::Float* max_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_velocity_);
  }
  if (max_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_velocity, submessage_arena);
    }
    
  } else {
    
  }
  max_velocity_ = max_velocity;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.ParticleEmitter.max_velocity)
}

// .gz.msgs.Color color_start = 15;
inline bool ParticleEmitter::has_color_start() const {
  return this != internal_default_instance() && color_start_ != NULL;
}
inline const ::gz::msgs::Color& ParticleEmitter::_internal_color_start() const {
  return *color_start_;
}
inline const ::gz::msgs::Color& ParticleEmitter::color_start() const {
  const ::gz::msgs::Color* p = color_start_;
  // @@protoc_insertion_point(field_get:gz.msgs.ParticleEmitter.color_start)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Color*>(
      &::gz::msgs::_Color_default_instance_);
}
inline ::gz::msgs::Color* ParticleEmitter::release_color_start() {
  // @@protoc_insertion_point(field_release:gz.msgs.ParticleEmitter.color_start)
  
  ::gz::msgs::Color* temp = color_start_;
  color_start_ = NULL;
  return temp;
}
inline ::gz::msgs::Color* ParticleEmitter::mutable_color_start() {
  
  if (color_start_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Color>(GetArenaNoVirtual());
    color_start_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.ParticleEmitter.color_start)
  return color_start_;
}
inline void ParticleEmitter::set_allocated_color_start(::gz::msgs::Color* color_start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(color_start_);
  }
  if (color_start) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      color_start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, color_start, submessage_arena);
    }
    
  } else {
    
  }
  color_start_ = color_start;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.ParticleEmitter.color_start)
}

// .gz.msgs.Color color_end = 16;
inline bool ParticleEmitter::has_color_end() const {
  return this != internal_default_instance() && color_end_ != NULL;
}
inline const ::gz::msgs::Color& ParticleEmitter::_internal_color_end() const {
  return *color_end_;
}
inline const ::gz::msgs::Color& ParticleEmitter::color_end() const {
  const ::gz::msgs::Color* p = color_end_;
  // @@protoc_insertion_point(field_get:gz.msgs.ParticleEmitter.color_end)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Color*>(
      &::gz::msgs::_Color_default_instance_);
}
inline ::gz::msgs::Color* ParticleEmitter::release_color_end() {
  // @@protoc_insertion_point(field_release:gz.msgs.ParticleEmitter.color_end)
  
  ::gz::msgs::Color* temp = color_end_;
  color_end_ = NULL;
  return temp;
}
inline ::gz::msgs::Color* ParticleEmitter::mutable_color_end() {
  
  if (color_end_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Color>(GetArenaNoVirtual());
    color_end_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.ParticleEmitter.color_end)
  return color_end_;
}
inline void ParticleEmitter::set_allocated_color_end(::gz::msgs::Color* color_end) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(color_end_);
  }
  if (color_end) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      color_end = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, color_end, submessage_arena);
    }
    
  } else {
    
  }
  color_end_ = color_end;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.ParticleEmitter.color_end)
}

// .gz.msgs.Float scale_rate = 17;
inline bool ParticleEmitter::has_scale_rate() const {
  return this != internal_default_instance() && scale_rate_ != NULL;
}
inline const ::gz::msgs::Float& ParticleEmitter::_internal_scale_rate() const {
  return *scale_rate_;
}
inline const ::gz::msgs::Float& ParticleEmitter::scale_rate() const {
  const ::gz::msgs::Float* p = scale_rate_;
  // @@protoc_insertion_point(field_get:gz.msgs.ParticleEmitter.scale_rate)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Float*>(
      &::gz::msgs::_Float_default_instance_);
}
inline ::gz::msgs::Float* ParticleEmitter::release_scale_rate() {
  // @@protoc_insertion_point(field_release:gz.msgs.ParticleEmitter.scale_rate)
  
  ::gz::msgs::Float* temp = scale_rate_;
  scale_rate_ = NULL;
  return temp;
}
inline ::gz::msgs::Float* ParticleEmitter::mutable_scale_rate() {
  
  if (scale_rate_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Float>(GetArenaNoVirtual());
    scale_rate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.ParticleEmitter.scale_rate)
  return scale_rate_;
}
inline void ParticleEmitter::set_allocated_scale_rate(::gz::msgs::Float* scale_rate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scale_rate_);
  }
  if (scale_rate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scale_rate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scale_rate, submessage_arena);
    }
    
  } else {
    
  }
  scale_rate_ = scale_rate;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.ParticleEmitter.scale_rate)
}

// .gz.msgs.StringMsg color_range_image = 18;
inline bool ParticleEmitter::has_color_range_image() const {
  return this != internal_default_instance() && color_range_image_ != NULL;
}
inline const ::gz::msgs::StringMsg& ParticleEmitter::_internal_color_range_image() const {
  return *color_range_image_;
}
inline const ::gz::msgs::StringMsg& ParticleEmitter::color_range_image() const {
  const ::gz::msgs::StringMsg* p = color_range_image_;
  // @@protoc_insertion_point(field_get:gz.msgs.ParticleEmitter.color_range_image)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::StringMsg*>(
      &::gz::msgs::_StringMsg_default_instance_);
}
inline ::gz::msgs::StringMsg* ParticleEmitter::release_color_range_image() {
  // @@protoc_insertion_point(field_release:gz.msgs.ParticleEmitter.color_range_image)
  
  ::gz::msgs::StringMsg* temp = color_range_image_;
  color_range_image_ = NULL;
  return temp;
}
inline ::gz::msgs::StringMsg* ParticleEmitter::mutable_color_range_image() {
  
  if (color_range_image_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::StringMsg>(GetArenaNoVirtual());
    color_range_image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.ParticleEmitter.color_range_image)
  return color_range_image_;
}
inline void ParticleEmitter::set_allocated_color_range_image(::gz::msgs::StringMsg* color_range_image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(color_range_image_);
  }
  if (color_range_image) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      color_range_image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, color_range_image, submessage_arena);
    }
    
  } else {
    
  }
  color_range_image_ = color_range_image;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.ParticleEmitter.color_range_image)
}

// .gz.msgs.StringMsg topic = 19;
inline bool ParticleEmitter::has_topic() const {
  return this != internal_default_instance() && topic_ != NULL;
}
inline const ::gz::msgs::StringMsg& ParticleEmitter::_internal_topic() const {
  return *topic_;
}
inline const ::gz::msgs::StringMsg& ParticleEmitter::topic() const {
  const ::gz::msgs::StringMsg* p = topic_;
  // @@protoc_insertion_point(field_get:gz.msgs.ParticleEmitter.topic)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::StringMsg*>(
      &::gz::msgs::_StringMsg_default_instance_);
}
inline ::gz::msgs::StringMsg* ParticleEmitter::release_topic() {
  // @@protoc_insertion_point(field_release:gz.msgs.ParticleEmitter.topic)
  
  ::gz::msgs::StringMsg* temp = topic_;
  topic_ = NULL;
  return temp;
}
inline ::gz::msgs::StringMsg* ParticleEmitter::mutable_topic() {
  
  if (topic_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::StringMsg>(GetArenaNoVirtual());
    topic_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.ParticleEmitter.topic)
  return topic_;
}
inline void ParticleEmitter::set_allocated_topic(::gz::msgs::StringMsg* topic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(topic_);
  }
  if (topic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      topic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, topic, submessage_arena);
    }
    
  } else {
    
  }
  topic_ = topic;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.ParticleEmitter.topic)
}

// .gz.msgs.Float particle_scatter_ratio = 20;
inline bool ParticleEmitter::has_particle_scatter_ratio() const {
  return this != internal_default_instance() && particle_scatter_ratio_ != NULL;
}
inline const ::gz::msgs::Float& ParticleEmitter::_internal_particle_scatter_ratio() const {
  return *particle_scatter_ratio_;
}
inline const ::gz::msgs::Float& ParticleEmitter::particle_scatter_ratio() const {
  const ::gz::msgs::Float* p = particle_scatter_ratio_;
  // @@protoc_insertion_point(field_get:gz.msgs.ParticleEmitter.particle_scatter_ratio)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Float*>(
      &::gz::msgs::_Float_default_instance_);
}
inline ::gz::msgs::Float* ParticleEmitter::release_particle_scatter_ratio() {
  // @@protoc_insertion_point(field_release:gz.msgs.ParticleEmitter.particle_scatter_ratio)
  
  ::gz::msgs::Float* temp = particle_scatter_ratio_;
  particle_scatter_ratio_ = NULL;
  return temp;
}
inline ::gz::msgs::Float* ParticleEmitter::mutable_particle_scatter_ratio() {
  
  if (particle_scatter_ratio_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Float>(GetArenaNoVirtual());
    particle_scatter_ratio_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.ParticleEmitter.particle_scatter_ratio)
  return particle_scatter_ratio_;
}
inline void ParticleEmitter::set_allocated_particle_scatter_ratio(::gz::msgs::Float* particle_scatter_ratio) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(particle_scatter_ratio_);
  }
  if (particle_scatter_ratio) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      particle_scatter_ratio = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, particle_scatter_ratio, submessage_arena);
    }
    
  } else {
    
  }
  particle_scatter_ratio_ = particle_scatter_ratio;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.ParticleEmitter.particle_scatter_ratio)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::msgs::ParticleEmitter_EmitterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::ParticleEmitter_EmitterType>() {
  return ::gz::msgs::ParticleEmitter_EmitterType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fparticle_5femitter_2eproto
