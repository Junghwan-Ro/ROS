// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/world_stats.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fworld_5fstats_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fworld_5fstats_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/log_playback_stats.pb.h"
#include "gz/msgs/time.pb.h"
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fworld_5fstats_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fworld_5fstats_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fworld_5fstats_2eproto
namespace gz {
namespace msgs {
class WorldStatistics;
class WorldStatisticsDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern WorldStatisticsDefaultTypeInternal _WorldStatistics_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::WorldStatistics* Arena::CreateMaybeMessage<::gz::msgs::WorldStatistics>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE WorldStatistics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.WorldStatistics) */ {
 public:
  WorldStatistics();
  virtual ~WorldStatistics();

  WorldStatistics(const WorldStatistics& from);

  inline WorldStatistics& operator=(const WorldStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorldStatistics(WorldStatistics&& from) noexcept
    : WorldStatistics() {
    *this = ::std::move(from);
  }

  inline WorldStatistics& operator=(WorldStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldStatistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldStatistics* internal_default_instance() {
    return reinterpret_cast<const WorldStatistics*>(
               &_WorldStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(WorldStatistics* other);
  friend void swap(WorldStatistics& a, WorldStatistics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorldStatistics* New() const final {
    return CreateMaybeMessage<WorldStatistics>(NULL);
  }

  WorldStatistics* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorldStatistics>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorldStatistics& from);
  void MergeFrom(const WorldStatistics& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldStatistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Time sim_time = 2;
  bool has_sim_time() const;
  void clear_sim_time();
  static const int kSimTimeFieldNumber = 2;
  private:
  const ::gz::msgs::Time& _internal_sim_time() const;
  public:
  const ::gz::msgs::Time& sim_time() const;
  ::gz::msgs::Time* release_sim_time();
  ::gz::msgs::Time* mutable_sim_time();
  void set_allocated_sim_time(::gz::msgs::Time* sim_time);

  // .gz.msgs.Time pause_time = 3;
  bool has_pause_time() const;
  void clear_pause_time();
  static const int kPauseTimeFieldNumber = 3;
  private:
  const ::gz::msgs::Time& _internal_pause_time() const;
  public:
  const ::gz::msgs::Time& pause_time() const;
  ::gz::msgs::Time* release_pause_time();
  ::gz::msgs::Time* mutable_pause_time();
  void set_allocated_pause_time(::gz::msgs::Time* pause_time);

  // .gz.msgs.Time real_time = 4;
  bool has_real_time() const;
  void clear_real_time();
  static const int kRealTimeFieldNumber = 4;
  private:
  const ::gz::msgs::Time& _internal_real_time() const;
  public:
  const ::gz::msgs::Time& real_time() const;
  ::gz::msgs::Time* release_real_time();
  ::gz::msgs::Time* mutable_real_time();
  void set_allocated_real_time(::gz::msgs::Time* real_time);

  // .gz.msgs.LogPlaybackStatistics log_playback_stats = 8;
  bool has_log_playback_stats() const;
  void clear_log_playback_stats();
  static const int kLogPlaybackStatsFieldNumber = 8;
  private:
  const ::gz::msgs::LogPlaybackStatistics& _internal_log_playback_stats() const;
  public:
  const ::gz::msgs::LogPlaybackStatistics& log_playback_stats() const;
  ::gz::msgs::LogPlaybackStatistics* release_log_playback_stats();
  ::gz::msgs::LogPlaybackStatistics* mutable_log_playback_stats();
  void set_allocated_log_playback_stats(::gz::msgs::LogPlaybackStatistics* log_playback_stats);

  // .gz.msgs.Time step_size = 10;
  bool has_step_size() const;
  void clear_step_size();
  static const int kStepSizeFieldNumber = 10;
  private:
  const ::gz::msgs::Time& _internal_step_size() const;
  public:
  const ::gz::msgs::Time& step_size() const;
  ::gz::msgs::Time* release_step_size();
  ::gz::msgs::Time* mutable_step_size();
  void set_allocated_step_size(::gz::msgs::Time* step_size);

  // uint64 iterations = 6;
  void clear_iterations();
  static const int kIterationsFieldNumber = 6;
  ::google::protobuf::uint64 iterations() const;
  void set_iterations(::google::protobuf::uint64 value);

  // int32 model_count = 7;
  void clear_model_count();
  static const int kModelCountFieldNumber = 7;
  ::google::protobuf::int32 model_count() const;
  void set_model_count(::google::protobuf::int32 value);

  // bool paused = 5;
  void clear_paused();
  static const int kPausedFieldNumber = 5;
  bool paused() const;
  void set_paused(bool value);

  // bool stepping = 11;
  void clear_stepping();
  static const int kSteppingFieldNumber = 11;
  bool stepping() const;
  void set_stepping(bool value);

  // double real_time_factor = 9;
  void clear_real_time_factor();
  static const int kRealTimeFactorFieldNumber = 9;
  double real_time_factor() const;
  void set_real_time_factor(double value);

  // @@protoc_insertion_point(class_scope:gz.msgs.WorldStatistics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Time* sim_time_;
  ::gz::msgs::Time* pause_time_;
  ::gz::msgs::Time* real_time_;
  ::gz::msgs::LogPlaybackStatistics* log_playback_stats_;
  ::gz::msgs::Time* step_size_;
  ::google::protobuf::uint64 iterations_;
  ::google::protobuf::int32 model_count_;
  bool paused_;
  bool stepping_;
  double real_time_factor_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fworld_5fstats_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorldStatistics

// .gz.msgs.Header header = 1;
inline bool WorldStatistics::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& WorldStatistics::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& WorldStatistics::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.WorldStatistics.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* WorldStatistics::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.WorldStatistics.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* WorldStatistics::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.WorldStatistics.header)
  return header_;
}
inline void WorldStatistics::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.WorldStatistics.header)
}

// .gz.msgs.Time sim_time = 2;
inline bool WorldStatistics::has_sim_time() const {
  return this != internal_default_instance() && sim_time_ != NULL;
}
inline const ::gz::msgs::Time& WorldStatistics::_internal_sim_time() const {
  return *sim_time_;
}
inline const ::gz::msgs::Time& WorldStatistics::sim_time() const {
  const ::gz::msgs::Time* p = sim_time_;
  // @@protoc_insertion_point(field_get:gz.msgs.WorldStatistics.sim_time)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Time*>(
      &::gz::msgs::_Time_default_instance_);
}
inline ::gz::msgs::Time* WorldStatistics::release_sim_time() {
  // @@protoc_insertion_point(field_release:gz.msgs.WorldStatistics.sim_time)
  
  ::gz::msgs::Time* temp = sim_time_;
  sim_time_ = NULL;
  return temp;
}
inline ::gz::msgs::Time* WorldStatistics::mutable_sim_time() {
  
  if (sim_time_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Time>(GetArenaNoVirtual());
    sim_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.WorldStatistics.sim_time)
  return sim_time_;
}
inline void WorldStatistics::set_allocated_sim_time(::gz::msgs::Time* sim_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sim_time_);
  }
  if (sim_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sim_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sim_time, submessage_arena);
    }
    
  } else {
    
  }
  sim_time_ = sim_time;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.WorldStatistics.sim_time)
}

// .gz.msgs.Time pause_time = 3;
inline bool WorldStatistics::has_pause_time() const {
  return this != internal_default_instance() && pause_time_ != NULL;
}
inline const ::gz::msgs::Time& WorldStatistics::_internal_pause_time() const {
  return *pause_time_;
}
inline const ::gz::msgs::Time& WorldStatistics::pause_time() const {
  const ::gz::msgs::Time* p = pause_time_;
  // @@protoc_insertion_point(field_get:gz.msgs.WorldStatistics.pause_time)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Time*>(
      &::gz::msgs::_Time_default_instance_);
}
inline ::gz::msgs::Time* WorldStatistics::release_pause_time() {
  // @@protoc_insertion_point(field_release:gz.msgs.WorldStatistics.pause_time)
  
  ::gz::msgs::Time* temp = pause_time_;
  pause_time_ = NULL;
  return temp;
}
inline ::gz::msgs::Time* WorldStatistics::mutable_pause_time() {
  
  if (pause_time_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Time>(GetArenaNoVirtual());
    pause_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.WorldStatistics.pause_time)
  return pause_time_;
}
inline void WorldStatistics::set_allocated_pause_time(::gz::msgs::Time* pause_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pause_time_);
  }
  if (pause_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pause_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pause_time, submessage_arena);
    }
    
  } else {
    
  }
  pause_time_ = pause_time;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.WorldStatistics.pause_time)
}

// .gz.msgs.Time real_time = 4;
inline bool WorldStatistics::has_real_time() const {
  return this != internal_default_instance() && real_time_ != NULL;
}
inline const ::gz::msgs::Time& WorldStatistics::_internal_real_time() const {
  return *real_time_;
}
inline const ::gz::msgs::Time& WorldStatistics::real_time() const {
  const ::gz::msgs::Time* p = real_time_;
  // @@protoc_insertion_point(field_get:gz.msgs.WorldStatistics.real_time)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Time*>(
      &::gz::msgs::_Time_default_instance_);
}
inline ::gz::msgs::Time* WorldStatistics::release_real_time() {
  // @@protoc_insertion_point(field_release:gz.msgs.WorldStatistics.real_time)
  
  ::gz::msgs::Time* temp = real_time_;
  real_time_ = NULL;
  return temp;
}
inline ::gz::msgs::Time* WorldStatistics::mutable_real_time() {
  
  if (real_time_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Time>(GetArenaNoVirtual());
    real_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.WorldStatistics.real_time)
  return real_time_;
}
inline void WorldStatistics::set_allocated_real_time(::gz::msgs::Time* real_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(real_time_);
  }
  if (real_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      real_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, real_time, submessage_arena);
    }
    
  } else {
    
  }
  real_time_ = real_time;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.WorldStatistics.real_time)
}

// bool paused = 5;
inline void WorldStatistics::clear_paused() {
  paused_ = false;
}
inline bool WorldStatistics::paused() const {
  // @@protoc_insertion_point(field_get:gz.msgs.WorldStatistics.paused)
  return paused_;
}
inline void WorldStatistics::set_paused(bool value) {
  
  paused_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.WorldStatistics.paused)
}

// uint64 iterations = 6;
inline void WorldStatistics::clear_iterations() {
  iterations_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WorldStatistics::iterations() const {
  // @@protoc_insertion_point(field_get:gz.msgs.WorldStatistics.iterations)
  return iterations_;
}
inline void WorldStatistics::set_iterations(::google::protobuf::uint64 value) {
  
  iterations_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.WorldStatistics.iterations)
}

// int32 model_count = 7;
inline void WorldStatistics::clear_model_count() {
  model_count_ = 0;
}
inline ::google::protobuf::int32 WorldStatistics::model_count() const {
  // @@protoc_insertion_point(field_get:gz.msgs.WorldStatistics.model_count)
  return model_count_;
}
inline void WorldStatistics::set_model_count(::google::protobuf::int32 value) {
  
  model_count_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.WorldStatistics.model_count)
}

// .gz.msgs.LogPlaybackStatistics log_playback_stats = 8;
inline bool WorldStatistics::has_log_playback_stats() const {
  return this != internal_default_instance() && log_playback_stats_ != NULL;
}
inline const ::gz::msgs::LogPlaybackStatistics& WorldStatistics::_internal_log_playback_stats() const {
  return *log_playback_stats_;
}
inline const ::gz::msgs::LogPlaybackStatistics& WorldStatistics::log_playback_stats() const {
  const ::gz::msgs::LogPlaybackStatistics* p = log_playback_stats_;
  // @@protoc_insertion_point(field_get:gz.msgs.WorldStatistics.log_playback_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::LogPlaybackStatistics*>(
      &::gz::msgs::_LogPlaybackStatistics_default_instance_);
}
inline ::gz::msgs::LogPlaybackStatistics* WorldStatistics::release_log_playback_stats() {
  // @@protoc_insertion_point(field_release:gz.msgs.WorldStatistics.log_playback_stats)
  
  ::gz::msgs::LogPlaybackStatistics* temp = log_playback_stats_;
  log_playback_stats_ = NULL;
  return temp;
}
inline ::gz::msgs::LogPlaybackStatistics* WorldStatistics::mutable_log_playback_stats() {
  
  if (log_playback_stats_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::LogPlaybackStatistics>(GetArenaNoVirtual());
    log_playback_stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.WorldStatistics.log_playback_stats)
  return log_playback_stats_;
}
inline void WorldStatistics::set_allocated_log_playback_stats(::gz::msgs::LogPlaybackStatistics* log_playback_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(log_playback_stats_);
  }
  if (log_playback_stats) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      log_playback_stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log_playback_stats, submessage_arena);
    }
    
  } else {
    
  }
  log_playback_stats_ = log_playback_stats;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.WorldStatistics.log_playback_stats)
}

// double real_time_factor = 9;
inline void WorldStatistics::clear_real_time_factor() {
  real_time_factor_ = 0;
}
inline double WorldStatistics::real_time_factor() const {
  // @@protoc_insertion_point(field_get:gz.msgs.WorldStatistics.real_time_factor)
  return real_time_factor_;
}
inline void WorldStatistics::set_real_time_factor(double value) {
  
  real_time_factor_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.WorldStatistics.real_time_factor)
}

// .gz.msgs.Time step_size = 10;
inline bool WorldStatistics::has_step_size() const {
  return this != internal_default_instance() && step_size_ != NULL;
}
inline const ::gz::msgs::Time& WorldStatistics::_internal_step_size() const {
  return *step_size_;
}
inline const ::gz::msgs::Time& WorldStatistics::step_size() const {
  const ::gz::msgs::Time* p = step_size_;
  // @@protoc_insertion_point(field_get:gz.msgs.WorldStatistics.step_size)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Time*>(
      &::gz::msgs::_Time_default_instance_);
}
inline ::gz::msgs::Time* WorldStatistics::release_step_size() {
  // @@protoc_insertion_point(field_release:gz.msgs.WorldStatistics.step_size)
  
  ::gz::msgs::Time* temp = step_size_;
  step_size_ = NULL;
  return temp;
}
inline ::gz::msgs::Time* WorldStatistics::mutable_step_size() {
  
  if (step_size_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Time>(GetArenaNoVirtual());
    step_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.WorldStatistics.step_size)
  return step_size_;
}
inline void WorldStatistics::set_allocated_step_size(::gz::msgs::Time* step_size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(step_size_);
  }
  if (step_size) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      step_size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, step_size, submessage_arena);
    }
    
  } else {
    
  }
  step_size_ = step_size;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.WorldStatistics.step_size)
}

// bool stepping = 11;
inline void WorldStatistics::clear_stepping() {
  stepping_ = false;
}
inline bool WorldStatistics::stepping() const {
  // @@protoc_insertion_point(field_get:gz.msgs.WorldStatistics.stepping)
  return stepping_;
}
inline void WorldStatistics::set_stepping(bool value) {
  
  stepping_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.WorldStatistics.stepping)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fworld_5fstats_2eproto
