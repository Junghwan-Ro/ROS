// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/dvl_beam_state.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fdvl_5fbeam_5fstate_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fdvl_5fbeam_5fstate_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/dvl_kinematic_estimate.pb.h"
#include "gz/msgs/dvl_range_estimate.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fdvl_5fbeam_5fstate_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fdvl_5fbeam_5fstate_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fdvl_5fbeam_5fstate_2eproto
namespace gz {
namespace msgs {
class DVLBeamState;
class DVLBeamStateDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern DVLBeamStateDefaultTypeInternal _DVLBeamState_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::DVLBeamState* Arena::CreateMaybeMessage<::gz::msgs::DVLBeamState>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE DVLBeamState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.DVLBeamState) */ {
 public:
  DVLBeamState();
  virtual ~DVLBeamState();

  DVLBeamState(const DVLBeamState& from);

  inline DVLBeamState& operator=(const DVLBeamState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DVLBeamState(DVLBeamState&& from) noexcept
    : DVLBeamState() {
    *this = ::std::move(from);
  }

  inline DVLBeamState& operator=(DVLBeamState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DVLBeamState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DVLBeamState* internal_default_instance() {
    return reinterpret_cast<const DVLBeamState*>(
               &_DVLBeamState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DVLBeamState* other);
  friend void swap(DVLBeamState& a, DVLBeamState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DVLBeamState* New() const final {
    return CreateMaybeMessage<DVLBeamState>(NULL);
  }

  DVLBeamState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DVLBeamState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DVLBeamState& from);
  void MergeFrom(const DVLBeamState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DVLBeamState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gz.msgs.DVLKinematicEstimate velocity = 2;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 2;
  private:
  const ::gz::msgs::DVLKinematicEstimate& _internal_velocity() const;
  public:
  const ::gz::msgs::DVLKinematicEstimate& velocity() const;
  ::gz::msgs::DVLKinematicEstimate* release_velocity();
  ::gz::msgs::DVLKinematicEstimate* mutable_velocity();
  void set_allocated_velocity(::gz::msgs::DVLKinematicEstimate* velocity);

  // .gz.msgs.DVLRangeEstimate range = 3;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 3;
  private:
  const ::gz::msgs::DVLRangeEstimate& _internal_range() const;
  public:
  const ::gz::msgs::DVLRangeEstimate& range() const;
  ::gz::msgs::DVLRangeEstimate* release_range();
  ::gz::msgs::DVLRangeEstimate* mutable_range();
  void set_allocated_range(::gz::msgs::DVLRangeEstimate* range);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // bool locked = 6;
  void clear_locked();
  static const int kLockedFieldNumber = 6;
  bool locked() const;
  void set_locked(bool value);

  // double rssi = 4;
  void clear_rssi();
  static const int kRssiFieldNumber = 4;
  double rssi() const;
  void set_rssi(double value);

  // double nsd = 5;
  void clear_nsd();
  static const int kNsdFieldNumber = 5;
  double nsd() const;
  void set_nsd(double value);

  // @@protoc_insertion_point(class_scope:gz.msgs.DVLBeamState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gz::msgs::DVLKinematicEstimate* velocity_;
  ::gz::msgs::DVLRangeEstimate* range_;
  ::google::protobuf::int32 id_;
  bool locked_;
  double rssi_;
  double nsd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fdvl_5fbeam_5fstate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DVLBeamState

// int32 id = 1;
inline void DVLBeamState::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 DVLBeamState::id() const {
  // @@protoc_insertion_point(field_get:gz.msgs.DVLBeamState.id)
  return id_;
}
inline void DVLBeamState::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.DVLBeamState.id)
}

// .gz.msgs.DVLKinematicEstimate velocity = 2;
inline bool DVLBeamState::has_velocity() const {
  return this != internal_default_instance() && velocity_ != NULL;
}
inline const ::gz::msgs::DVLKinematicEstimate& DVLBeamState::_internal_velocity() const {
  return *velocity_;
}
inline const ::gz::msgs::DVLKinematicEstimate& DVLBeamState::velocity() const {
  const ::gz::msgs::DVLKinematicEstimate* p = velocity_;
  // @@protoc_insertion_point(field_get:gz.msgs.DVLBeamState.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::DVLKinematicEstimate*>(
      &::gz::msgs::_DVLKinematicEstimate_default_instance_);
}
inline ::gz::msgs::DVLKinematicEstimate* DVLBeamState::release_velocity() {
  // @@protoc_insertion_point(field_release:gz.msgs.DVLBeamState.velocity)
  
  ::gz::msgs::DVLKinematicEstimate* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline ::gz::msgs::DVLKinematicEstimate* DVLBeamState::mutable_velocity() {
  
  if (velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::DVLKinematicEstimate>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.DVLBeamState.velocity)
  return velocity_;
}
inline void DVLBeamState::set_allocated_velocity(::gz::msgs::DVLKinematicEstimate* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.DVLBeamState.velocity)
}

// .gz.msgs.DVLRangeEstimate range = 3;
inline bool DVLBeamState::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
inline const ::gz::msgs::DVLRangeEstimate& DVLBeamState::_internal_range() const {
  return *range_;
}
inline const ::gz::msgs::DVLRangeEstimate& DVLBeamState::range() const {
  const ::gz::msgs::DVLRangeEstimate* p = range_;
  // @@protoc_insertion_point(field_get:gz.msgs.DVLBeamState.range)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::DVLRangeEstimate*>(
      &::gz::msgs::_DVLRangeEstimate_default_instance_);
}
inline ::gz::msgs::DVLRangeEstimate* DVLBeamState::release_range() {
  // @@protoc_insertion_point(field_release:gz.msgs.DVLBeamState.range)
  
  ::gz::msgs::DVLRangeEstimate* temp = range_;
  range_ = NULL;
  return temp;
}
inline ::gz::msgs::DVLRangeEstimate* DVLBeamState::mutable_range() {
  
  if (range_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::DVLRangeEstimate>(GetArenaNoVirtual());
    range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.DVLBeamState.range)
  return range_;
}
inline void DVLBeamState::set_allocated_range(::gz::msgs::DVLRangeEstimate* range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(range_);
  }
  if (range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    
  } else {
    
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.DVLBeamState.range)
}

// double rssi = 4;
inline void DVLBeamState::clear_rssi() {
  rssi_ = 0;
}
inline double DVLBeamState::rssi() const {
  // @@protoc_insertion_point(field_get:gz.msgs.DVLBeamState.rssi)
  return rssi_;
}
inline void DVLBeamState::set_rssi(double value) {
  
  rssi_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.DVLBeamState.rssi)
}

// double nsd = 5;
inline void DVLBeamState::clear_nsd() {
  nsd_ = 0;
}
inline double DVLBeamState::nsd() const {
  // @@protoc_insertion_point(field_get:gz.msgs.DVLBeamState.nsd)
  return nsd_;
}
inline void DVLBeamState::set_nsd(double value) {
  
  nsd_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.DVLBeamState.nsd)
}

// bool locked = 6;
inline void DVLBeamState::clear_locked() {
  locked_ = false;
}
inline bool DVLBeamState::locked() const {
  // @@protoc_insertion_point(field_get:gz.msgs.DVLBeamState.locked)
  return locked_;
}
inline void DVLBeamState::set_locked(bool value) {
  
  locked_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.DVLBeamState.locked)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fdvl_5fbeam_5fstate_2eproto
