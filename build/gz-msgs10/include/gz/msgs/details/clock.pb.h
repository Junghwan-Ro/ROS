// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/clock.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fclock_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fclock_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/time.pb.h"
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fclock_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fclock_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fclock_2eproto
namespace gz {
namespace msgs {
class Clock;
class ClockDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern ClockDefaultTypeInternal _Clock_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Clock* Arena::CreateMaybeMessage<::gz::msgs::Clock>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE Clock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Clock) */ {
 public:
  Clock();
  virtual ~Clock();

  Clock(const Clock& from);

  inline Clock& operator=(const Clock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Clock(Clock&& from) noexcept
    : Clock() {
    *this = ::std::move(from);
  }

  inline Clock& operator=(Clock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Clock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Clock* internal_default_instance() {
    return reinterpret_cast<const Clock*>(
               &_Clock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Clock* other);
  friend void swap(Clock& a, Clock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Clock* New() const final {
    return CreateMaybeMessage<Clock>(NULL);
  }

  Clock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Clock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Clock& from);
  void MergeFrom(const Clock& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Clock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Time system = 2;
  bool has_system() const;
  void clear_system();
  static const int kSystemFieldNumber = 2;
  private:
  const ::gz::msgs::Time& _internal_system() const;
  public:
  const ::gz::msgs::Time& system() const;
  ::gz::msgs::Time* release_system();
  ::gz::msgs::Time* mutable_system();
  void set_allocated_system(::gz::msgs::Time* system);

  // .gz.msgs.Time real = 3;
  bool has_real() const;
  void clear_real();
  static const int kRealFieldNumber = 3;
  private:
  const ::gz::msgs::Time& _internal_real() const;
  public:
  const ::gz::msgs::Time& real() const;
  ::gz::msgs::Time* release_real();
  ::gz::msgs::Time* mutable_real();
  void set_allocated_real(::gz::msgs::Time* real);

  // .gz.msgs.Time sim = 4;
  bool has_sim() const;
  void clear_sim();
  static const int kSimFieldNumber = 4;
  private:
  const ::gz::msgs::Time& _internal_sim() const;
  public:
  const ::gz::msgs::Time& sim() const;
  ::gz::msgs::Time* release_sim();
  ::gz::msgs::Time* mutable_sim();
  void set_allocated_sim(::gz::msgs::Time* sim);

  // @@protoc_insertion_point(class_scope:gz.msgs.Clock)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Time* system_;
  ::gz::msgs::Time* real_;
  ::gz::msgs::Time* sim_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fclock_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Clock

// .gz.msgs.Header header = 1;
inline bool Clock::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& Clock::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& Clock::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.Clock.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* Clock::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.Clock.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* Clock::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Clock.header)
  return header_;
}
inline void Clock::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Clock.header)
}

// .gz.msgs.Time system = 2;
inline bool Clock::has_system() const {
  return this != internal_default_instance() && system_ != NULL;
}
inline const ::gz::msgs::Time& Clock::_internal_system() const {
  return *system_;
}
inline const ::gz::msgs::Time& Clock::system() const {
  const ::gz::msgs::Time* p = system_;
  // @@protoc_insertion_point(field_get:gz.msgs.Clock.system)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Time*>(
      &::gz::msgs::_Time_default_instance_);
}
inline ::gz::msgs::Time* Clock::release_system() {
  // @@protoc_insertion_point(field_release:gz.msgs.Clock.system)
  
  ::gz::msgs::Time* temp = system_;
  system_ = NULL;
  return temp;
}
inline ::gz::msgs::Time* Clock::mutable_system() {
  
  if (system_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Time>(GetArenaNoVirtual());
    system_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Clock.system)
  return system_;
}
inline void Clock::set_allocated_system(::gz::msgs::Time* system) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(system_);
  }
  if (system) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system, submessage_arena);
    }
    
  } else {
    
  }
  system_ = system;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Clock.system)
}

// .gz.msgs.Time real = 3;
inline bool Clock::has_real() const {
  return this != internal_default_instance() && real_ != NULL;
}
inline const ::gz::msgs::Time& Clock::_internal_real() const {
  return *real_;
}
inline const ::gz::msgs::Time& Clock::real() const {
  const ::gz::msgs::Time* p = real_;
  // @@protoc_insertion_point(field_get:gz.msgs.Clock.real)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Time*>(
      &::gz::msgs::_Time_default_instance_);
}
inline ::gz::msgs::Time* Clock::release_real() {
  // @@protoc_insertion_point(field_release:gz.msgs.Clock.real)
  
  ::gz::msgs::Time* temp = real_;
  real_ = NULL;
  return temp;
}
inline ::gz::msgs::Time* Clock::mutable_real() {
  
  if (real_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Time>(GetArenaNoVirtual());
    real_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Clock.real)
  return real_;
}
inline void Clock::set_allocated_real(::gz::msgs::Time* real) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(real_);
  }
  if (real) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      real = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, real, submessage_arena);
    }
    
  } else {
    
  }
  real_ = real;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Clock.real)
}

// .gz.msgs.Time sim = 4;
inline bool Clock::has_sim() const {
  return this != internal_default_instance() && sim_ != NULL;
}
inline const ::gz::msgs::Time& Clock::_internal_sim() const {
  return *sim_;
}
inline const ::gz::msgs::Time& Clock::sim() const {
  const ::gz::msgs::Time* p = sim_;
  // @@protoc_insertion_point(field_get:gz.msgs.Clock.sim)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Time*>(
      &::gz::msgs::_Time_default_instance_);
}
inline ::gz::msgs::Time* Clock::release_sim() {
  // @@protoc_insertion_point(field_release:gz.msgs.Clock.sim)
  
  ::gz::msgs::Time* temp = sim_;
  sim_ = NULL;
  return temp;
}
inline ::gz::msgs::Time* Clock::mutable_sim() {
  
  if (sim_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Time>(GetArenaNoVirtual());
    sim_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Clock.sim)
  return sim_;
}
inline void Clock::set_allocated_sim(::gz::msgs::Time* sim) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sim_);
  }
  if (sim) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sim = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sim, submessage_arena);
    }
    
  } else {
    
  }
  sim_ = sim;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Clock.sim)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fclock_2eproto
