// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/diagnostics.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fdiagnostics_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fdiagnostics_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/time.pb.h"
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fdiagnostics_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fdiagnostics_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fdiagnostics_2eproto
namespace gz {
namespace msgs {
class Diagnostics;
class DiagnosticsDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern DiagnosticsDefaultTypeInternal _Diagnostics_default_instance_;
class Diagnostics_DiagTime;
class Diagnostics_DiagTimeDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern Diagnostics_DiagTimeDefaultTypeInternal _Diagnostics_DiagTime_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Diagnostics* Arena::CreateMaybeMessage<::gz::msgs::Diagnostics>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Diagnostics_DiagTime* Arena::CreateMaybeMessage<::gz::msgs::Diagnostics_DiagTime>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE Diagnostics_DiagTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Diagnostics.DiagTime) */ {
 public:
  Diagnostics_DiagTime();
  virtual ~Diagnostics_DiagTime();

  Diagnostics_DiagTime(const Diagnostics_DiagTime& from);

  inline Diagnostics_DiagTime& operator=(const Diagnostics_DiagTime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Diagnostics_DiagTime(Diagnostics_DiagTime&& from) noexcept
    : Diagnostics_DiagTime() {
    *this = ::std::move(from);
  }

  inline Diagnostics_DiagTime& operator=(Diagnostics_DiagTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Diagnostics_DiagTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Diagnostics_DiagTime* internal_default_instance() {
    return reinterpret_cast<const Diagnostics_DiagTime*>(
               &_Diagnostics_DiagTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Diagnostics_DiagTime* other);
  friend void swap(Diagnostics_DiagTime& a, Diagnostics_DiagTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Diagnostics_DiagTime* New() const final {
    return CreateMaybeMessage<Diagnostics_DiagTime>(NULL);
  }

  Diagnostics_DiagTime* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Diagnostics_DiagTime>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Diagnostics_DiagTime& from);
  void MergeFrom(const Diagnostics_DiagTime& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Diagnostics_DiagTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .gz.msgs.Time elapsed = 2;
  bool has_elapsed() const;
  void clear_elapsed();
  static const int kElapsedFieldNumber = 2;
  private:
  const ::gz::msgs::Time& _internal_elapsed() const;
  public:
  const ::gz::msgs::Time& elapsed() const;
  ::gz::msgs::Time* release_elapsed();
  ::gz::msgs::Time* mutable_elapsed();
  void set_allocated_elapsed(::gz::msgs::Time* elapsed);

  // .gz.msgs.Time wall = 3;
  bool has_wall() const;
  void clear_wall();
  static const int kWallFieldNumber = 3;
  private:
  const ::gz::msgs::Time& _internal_wall() const;
  public:
  const ::gz::msgs::Time& wall() const;
  ::gz::msgs::Time* release_wall();
  ::gz::msgs::Time* mutable_wall();
  void set_allocated_wall(::gz::msgs::Time* wall);

  // @@protoc_insertion_point(class_scope:gz.msgs.Diagnostics.DiagTime)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::gz::msgs::Time* elapsed_;
  ::gz::msgs::Time* wall_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fdiagnostics_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE Diagnostics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Diagnostics) */ {
 public:
  Diagnostics();
  virtual ~Diagnostics();

  Diagnostics(const Diagnostics& from);

  inline Diagnostics& operator=(const Diagnostics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Diagnostics(Diagnostics&& from) noexcept
    : Diagnostics() {
    *this = ::std::move(from);
  }

  inline Diagnostics& operator=(Diagnostics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Diagnostics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Diagnostics* internal_default_instance() {
    return reinterpret_cast<const Diagnostics*>(
               &_Diagnostics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Diagnostics* other);
  friend void swap(Diagnostics& a, Diagnostics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Diagnostics* New() const final {
    return CreateMaybeMessage<Diagnostics>(NULL);
  }

  Diagnostics* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Diagnostics>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Diagnostics& from);
  void MergeFrom(const Diagnostics& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Diagnostics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Diagnostics_DiagTime DiagTime;

  // accessors -------------------------------------------------------

  // repeated .gz.msgs.Diagnostics.DiagTime time = 2;
  int time_size() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::gz::msgs::Diagnostics_DiagTime* mutable_time(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Diagnostics_DiagTime >*
      mutable_time();
  const ::gz::msgs::Diagnostics_DiagTime& time(int index) const;
  ::gz::msgs::Diagnostics_DiagTime* add_time();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Diagnostics_DiagTime >&
      time() const;

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Time real_time = 3;
  bool has_real_time() const;
  void clear_real_time();
  static const int kRealTimeFieldNumber = 3;
  private:
  const ::gz::msgs::Time& _internal_real_time() const;
  public:
  const ::gz::msgs::Time& real_time() const;
  ::gz::msgs::Time* release_real_time();
  ::gz::msgs::Time* mutable_real_time();
  void set_allocated_real_time(::gz::msgs::Time* real_time);

  // .gz.msgs.Time sim_time = 4;
  bool has_sim_time() const;
  void clear_sim_time();
  static const int kSimTimeFieldNumber = 4;
  private:
  const ::gz::msgs::Time& _internal_sim_time() const;
  public:
  const ::gz::msgs::Time& sim_time() const;
  ::gz::msgs::Time* release_sim_time();
  ::gz::msgs::Time* mutable_sim_time();
  void set_allocated_sim_time(::gz::msgs::Time* sim_time);

  // double real_time_factor = 5;
  void clear_real_time_factor();
  static const int kRealTimeFactorFieldNumber = 5;
  double real_time_factor() const;
  void set_real_time_factor(double value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Diagnostics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Diagnostics_DiagTime > time_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Time* real_time_;
  ::gz::msgs::Time* sim_time_;
  double real_time_factor_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fdiagnostics_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Diagnostics_DiagTime

// string name = 1;
inline void Diagnostics_DiagTime::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Diagnostics_DiagTime::name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Diagnostics.DiagTime.name)
  return name_.GetNoArena();
}
inline void Diagnostics_DiagTime::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Diagnostics.DiagTime.name)
}
#if LANG_CXX11
inline void Diagnostics_DiagTime::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Diagnostics.DiagTime.name)
}
#endif
inline void Diagnostics_DiagTime::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Diagnostics.DiagTime.name)
}
inline void Diagnostics_DiagTime::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Diagnostics.DiagTime.name)
}
inline ::std::string* Diagnostics_DiagTime::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Diagnostics.DiagTime.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Diagnostics_DiagTime::release_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.Diagnostics.DiagTime.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Diagnostics_DiagTime::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Diagnostics.DiagTime.name)
}

// .gz.msgs.Time elapsed = 2;
inline bool Diagnostics_DiagTime::has_elapsed() const {
  return this != internal_default_instance() && elapsed_ != NULL;
}
inline const ::gz::msgs::Time& Diagnostics_DiagTime::_internal_elapsed() const {
  return *elapsed_;
}
inline const ::gz::msgs::Time& Diagnostics_DiagTime::elapsed() const {
  const ::gz::msgs::Time* p = elapsed_;
  // @@protoc_insertion_point(field_get:gz.msgs.Diagnostics.DiagTime.elapsed)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Time*>(
      &::gz::msgs::_Time_default_instance_);
}
inline ::gz::msgs::Time* Diagnostics_DiagTime::release_elapsed() {
  // @@protoc_insertion_point(field_release:gz.msgs.Diagnostics.DiagTime.elapsed)
  
  ::gz::msgs::Time* temp = elapsed_;
  elapsed_ = NULL;
  return temp;
}
inline ::gz::msgs::Time* Diagnostics_DiagTime::mutable_elapsed() {
  
  if (elapsed_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Time>(GetArenaNoVirtual());
    elapsed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Diagnostics.DiagTime.elapsed)
  return elapsed_;
}
inline void Diagnostics_DiagTime::set_allocated_elapsed(::gz::msgs::Time* elapsed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(elapsed_);
  }
  if (elapsed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      elapsed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, elapsed, submessage_arena);
    }
    
  } else {
    
  }
  elapsed_ = elapsed;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Diagnostics.DiagTime.elapsed)
}

// .gz.msgs.Time wall = 3;
inline bool Diagnostics_DiagTime::has_wall() const {
  return this != internal_default_instance() && wall_ != NULL;
}
inline const ::gz::msgs::Time& Diagnostics_DiagTime::_internal_wall() const {
  return *wall_;
}
inline const ::gz::msgs::Time& Diagnostics_DiagTime::wall() const {
  const ::gz::msgs::Time* p = wall_;
  // @@protoc_insertion_point(field_get:gz.msgs.Diagnostics.DiagTime.wall)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Time*>(
      &::gz::msgs::_Time_default_instance_);
}
inline ::gz::msgs::Time* Diagnostics_DiagTime::release_wall() {
  // @@protoc_insertion_point(field_release:gz.msgs.Diagnostics.DiagTime.wall)
  
  ::gz::msgs::Time* temp = wall_;
  wall_ = NULL;
  return temp;
}
inline ::gz::msgs::Time* Diagnostics_DiagTime::mutable_wall() {
  
  if (wall_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Time>(GetArenaNoVirtual());
    wall_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Diagnostics.DiagTime.wall)
  return wall_;
}
inline void Diagnostics_DiagTime::set_allocated_wall(::gz::msgs::Time* wall) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(wall_);
  }
  if (wall) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      wall = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, wall, submessage_arena);
    }
    
  } else {
    
  }
  wall_ = wall;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Diagnostics.DiagTime.wall)
}

// -------------------------------------------------------------------

// Diagnostics

// .gz.msgs.Header header = 1;
inline bool Diagnostics::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& Diagnostics::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& Diagnostics::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.Diagnostics.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* Diagnostics::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.Diagnostics.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* Diagnostics::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Diagnostics.header)
  return header_;
}
inline void Diagnostics::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Diagnostics.header)
}

// repeated .gz.msgs.Diagnostics.DiagTime time = 2;
inline int Diagnostics::time_size() const {
  return time_.size();
}
inline void Diagnostics::clear_time() {
  time_.Clear();
}
inline ::gz::msgs::Diagnostics_DiagTime* Diagnostics::mutable_time(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.Diagnostics.time)
  return time_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::Diagnostics_DiagTime >*
Diagnostics::mutable_time() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.Diagnostics.time)
  return &time_;
}
inline const ::gz::msgs::Diagnostics_DiagTime& Diagnostics::time(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.Diagnostics.time)
  return time_.Get(index);
}
inline ::gz::msgs::Diagnostics_DiagTime* Diagnostics::add_time() {
  // @@protoc_insertion_point(field_add:gz.msgs.Diagnostics.time)
  return time_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Diagnostics_DiagTime >&
Diagnostics::time() const {
  // @@protoc_insertion_point(field_list:gz.msgs.Diagnostics.time)
  return time_;
}

// .gz.msgs.Time real_time = 3;
inline bool Diagnostics::has_real_time() const {
  return this != internal_default_instance() && real_time_ != NULL;
}
inline const ::gz::msgs::Time& Diagnostics::_internal_real_time() const {
  return *real_time_;
}
inline const ::gz::msgs::Time& Diagnostics::real_time() const {
  const ::gz::msgs::Time* p = real_time_;
  // @@protoc_insertion_point(field_get:gz.msgs.Diagnostics.real_time)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Time*>(
      &::gz::msgs::_Time_default_instance_);
}
inline ::gz::msgs::Time* Diagnostics::release_real_time() {
  // @@protoc_insertion_point(field_release:gz.msgs.Diagnostics.real_time)
  
  ::gz::msgs::Time* temp = real_time_;
  real_time_ = NULL;
  return temp;
}
inline ::gz::msgs::Time* Diagnostics::mutable_real_time() {
  
  if (real_time_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Time>(GetArenaNoVirtual());
    real_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Diagnostics.real_time)
  return real_time_;
}
inline void Diagnostics::set_allocated_real_time(::gz::msgs::Time* real_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(real_time_);
  }
  if (real_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      real_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, real_time, submessage_arena);
    }
    
  } else {
    
  }
  real_time_ = real_time;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Diagnostics.real_time)
}

// .gz.msgs.Time sim_time = 4;
inline bool Diagnostics::has_sim_time() const {
  return this != internal_default_instance() && sim_time_ != NULL;
}
inline const ::gz::msgs::Time& Diagnostics::_internal_sim_time() const {
  return *sim_time_;
}
inline const ::gz::msgs::Time& Diagnostics::sim_time() const {
  const ::gz::msgs::Time* p = sim_time_;
  // @@protoc_insertion_point(field_get:gz.msgs.Diagnostics.sim_time)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Time*>(
      &::gz::msgs::_Time_default_instance_);
}
inline ::gz::msgs::Time* Diagnostics::release_sim_time() {
  // @@protoc_insertion_point(field_release:gz.msgs.Diagnostics.sim_time)
  
  ::gz::msgs::Time* temp = sim_time_;
  sim_time_ = NULL;
  return temp;
}
inline ::gz::msgs::Time* Diagnostics::mutable_sim_time() {
  
  if (sim_time_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Time>(GetArenaNoVirtual());
    sim_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Diagnostics.sim_time)
  return sim_time_;
}
inline void Diagnostics::set_allocated_sim_time(::gz::msgs::Time* sim_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sim_time_);
  }
  if (sim_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sim_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sim_time, submessage_arena);
    }
    
  } else {
    
  }
  sim_time_ = sim_time;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Diagnostics.sim_time)
}

// double real_time_factor = 5;
inline void Diagnostics::clear_real_time_factor() {
  real_time_factor_ = 0;
}
inline double Diagnostics::real_time_factor() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Diagnostics.real_time_factor)
  return real_time_factor_;
}
inline void Diagnostics::set_real_time_factor(double value) {
  
  real_time_factor_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Diagnostics.real_time_factor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fdiagnostics_2eproto
