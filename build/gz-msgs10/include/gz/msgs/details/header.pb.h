// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/header.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fheader_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fheader_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/time.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fheader_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace gz {
namespace msgs {
class Header;
class HeaderDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern HeaderDefaultTypeInternal _Header_default_instance_;
class Header_Map;
class Header_MapDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern Header_MapDefaultTypeInternal _Header_Map_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Header* Arena::CreateMaybeMessage<::gz::msgs::Header>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Header_Map* Arena::CreateMaybeMessage<::gz::msgs::Header_Map>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE Header_Map : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Header.Map) */ {
 public:
  Header_Map();
  virtual ~Header_Map();

  Header_Map(const Header_Map& from);

  inline Header_Map& operator=(const Header_Map& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header_Map(Header_Map&& from) noexcept
    : Header_Map() {
    *this = ::std::move(from);
  }

  inline Header_Map& operator=(Header_Map&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header_Map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header_Map* internal_default_instance() {
    return reinterpret_cast<const Header_Map*>(
               &_Header_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Header_Map* other);
  friend void swap(Header_Map& a, Header_Map& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header_Map* New() const final {
    return CreateMaybeMessage<Header_Map>(NULL);
  }

  Header_Map* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Header_Map>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Header_Map& from);
  void MergeFrom(const Header_Map& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header_Map* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string value = 2;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value(int index) const;
  ::std::string* mutable_value(int index);
  void set_value(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_value(int index, ::std::string&& value);
  #endif
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  ::std::string* add_value();
  void add_value(const ::std::string& value);
  #if LANG_CXX11
  void add_value(::std::string&& value);
  #endif
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:gz.msgs.Header.Map)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fheader_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(NULL);
  }

  Header* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Header_Map Map;

  // accessors -------------------------------------------------------

  // repeated .gz.msgs.Header.Map data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  ::gz::msgs::Header_Map* mutable_data(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Header_Map >*
      mutable_data();
  const ::gz::msgs::Header_Map& data(int index) const;
  ::gz::msgs::Header_Map* add_data();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Header_Map >&
      data() const;

  // .gz.msgs.Time stamp = 1;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 1;
  private:
  const ::gz::msgs::Time& _internal_stamp() const;
  public:
  const ::gz::msgs::Time& stamp() const;
  ::gz::msgs::Time* release_stamp();
  ::gz::msgs::Time* mutable_stamp();
  void set_allocated_stamp(::gz::msgs::Time* stamp);

  // @@protoc_insertion_point(class_scope:gz.msgs.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Header_Map > data_;
  ::gz::msgs::Time* stamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fheader_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header_Map

// string key = 1;
inline void Header_Map::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header_Map::key() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Header.Map.key)
  return key_.GetNoArena();
}
inline void Header_Map::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Header.Map.key)
}
#if LANG_CXX11
inline void Header_Map::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Header.Map.key)
}
#endif
inline void Header_Map::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Header.Map.key)
}
inline void Header_Map::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Header.Map.key)
}
inline ::std::string* Header_Map::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Header.Map.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header_Map::release_key() {
  // @@protoc_insertion_point(field_release:gz.msgs.Header.Map.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header_Map::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Header.Map.key)
}

// repeated string value = 2;
inline int Header_Map::value_size() const {
  return value_.size();
}
inline void Header_Map::clear_value() {
  value_.Clear();
}
inline const ::std::string& Header_Map::value(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.Header.Map.value)
  return value_.Get(index);
}
inline ::std::string* Header_Map::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.Header.Map.value)
  return value_.Mutable(index);
}
inline void Header_Map::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gz.msgs.Header.Map.value)
  value_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Header_Map::set_value(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gz.msgs.Header.Map.value)
  value_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Header_Map::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gz.msgs.Header.Map.value)
}
inline void Header_Map::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Header.Map.value)
}
inline ::std::string* Header_Map::add_value() {
  // @@protoc_insertion_point(field_add_mutable:gz.msgs.Header.Map.value)
  return value_.Add();
}
inline void Header_Map::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gz.msgs.Header.Map.value)
}
#if LANG_CXX11
inline void Header_Map::add_value(::std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gz.msgs.Header.Map.value)
}
#endif
inline void Header_Map::add_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gz.msgs.Header.Map.value)
}
inline void Header_Map::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gz.msgs.Header.Map.value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Header_Map::value() const {
  // @@protoc_insertion_point(field_list:gz.msgs.Header.Map.value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Header_Map::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.Header.Map.value)
  return &value_;
}

// -------------------------------------------------------------------

// Header

// .gz.msgs.Time stamp = 1;
inline bool Header::has_stamp() const {
  return this != internal_default_instance() && stamp_ != NULL;
}
inline const ::gz::msgs::Time& Header::_internal_stamp() const {
  return *stamp_;
}
inline const ::gz::msgs::Time& Header::stamp() const {
  const ::gz::msgs::Time* p = stamp_;
  // @@protoc_insertion_point(field_get:gz.msgs.Header.stamp)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Time*>(
      &::gz::msgs::_Time_default_instance_);
}
inline ::gz::msgs::Time* Header::release_stamp() {
  // @@protoc_insertion_point(field_release:gz.msgs.Header.stamp)
  
  ::gz::msgs::Time* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
inline ::gz::msgs::Time* Header::mutable_stamp() {
  
  if (stamp_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Time>(GetArenaNoVirtual());
    stamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Header.stamp)
  return stamp_;
}
inline void Header::set_allocated_stamp(::gz::msgs::Time* stamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stamp_);
  }
  if (stamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stamp, submessage_arena);
    }
    
  } else {
    
  }
  stamp_ = stamp;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Header.stamp)
}

// repeated .gz.msgs.Header.Map data = 2;
inline int Header::data_size() const {
  return data_.size();
}
inline void Header::clear_data() {
  data_.Clear();
}
inline ::gz::msgs::Header_Map* Header::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.Header.data)
  return data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::Header_Map >*
Header::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.Header.data)
  return &data_;
}
inline const ::gz::msgs::Header_Map& Header::data(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.Header.data)
  return data_.Get(index);
}
inline ::gz::msgs::Header_Map* Header::add_data() {
  // @@protoc_insertion_point(field_add:gz.msgs.Header.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Header_Map >&
Header::data() const {
  // @@protoc_insertion_point(field_list:gz.msgs.Header.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fheader_2eproto
