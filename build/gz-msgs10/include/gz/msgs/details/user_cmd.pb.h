// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/user_cmd.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fuser_5fcmd_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fuser_5fcmd_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/light.pb.h"
#include "gz/msgs/model.pb.h"
#include "gz/msgs/world_control.pb.h"
#include "gz/msgs/wrench.pb.h"
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fuser_5fcmd_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fuser_5fcmd_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fuser_5fcmd_2eproto
namespace gz {
namespace msgs {
class UserCmd;
class UserCmdDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern UserCmdDefaultTypeInternal _UserCmd_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::UserCmd* Arena::CreateMaybeMessage<::gz::msgs::UserCmd>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

enum UserCmd_Type {
  UserCmd_Type_MOVING = 0,
  UserCmd_Type_WORLD_CONTROL = 1,
  UserCmd_Type_WRENCH = 2,
  UserCmd_Type_SCALING = 3,
  UserCmd_Type_UserCmd_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UserCmd_Type_UserCmd_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool UserCmd_Type_IsValid(int value);
const UserCmd_Type UserCmd_Type_Type_MIN = UserCmd_Type_MOVING;
const UserCmd_Type UserCmd_Type_Type_MAX = UserCmd_Type_SCALING;
const int UserCmd_Type_Type_ARRAYSIZE = UserCmd_Type_Type_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* UserCmd_Type_descriptor();
inline const ::std::string& UserCmd_Type_Name(UserCmd_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserCmd_Type_descriptor(), value);
}
inline bool UserCmd_Type_Parse(
    const ::std::string& name, UserCmd_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserCmd_Type>(
    UserCmd_Type_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE UserCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.UserCmd) */ {
 public:
  UserCmd();
  virtual ~UserCmd();

  UserCmd(const UserCmd& from);

  inline UserCmd& operator=(const UserCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserCmd(UserCmd&& from) noexcept
    : UserCmd() {
    *this = ::std::move(from);
  }

  inline UserCmd& operator=(UserCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserCmd* internal_default_instance() {
    return reinterpret_cast<const UserCmd*>(
               &_UserCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UserCmd* other);
  friend void swap(UserCmd& a, UserCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserCmd* New() const final {
    return CreateMaybeMessage<UserCmd>(NULL);
  }

  UserCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserCmd& from);
  void MergeFrom(const UserCmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserCmd_Type Type;
  static const Type MOVING =
    UserCmd_Type_MOVING;
  static const Type WORLD_CONTROL =
    UserCmd_Type_WORLD_CONTROL;
  static const Type WRENCH =
    UserCmd_Type_WRENCH;
  static const Type SCALING =
    UserCmd_Type_SCALING;
  static inline bool Type_IsValid(int value) {
    return UserCmd_Type_IsValid(value);
  }
  static const Type Type_MIN =
    UserCmd_Type_Type_MIN;
  static const Type Type_MAX =
    UserCmd_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    UserCmd_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return UserCmd_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return UserCmd_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return UserCmd_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .gz.msgs.Model model = 5;
  int model_size() const;
  void clear_model();
  static const int kModelFieldNumber = 5;
  ::gz::msgs::Model* mutable_model(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Model >*
      mutable_model();
  const ::gz::msgs::Model& model(int index) const;
  ::gz::msgs::Model* add_model();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Model >&
      model() const;

  // repeated .gz.msgs.Light light = 6;
  int light_size() const;
  void clear_light();
  static const int kLightFieldNumber = 6;
  ::gz::msgs::Light* mutable_light(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Light >*
      mutable_light();
  const ::gz::msgs::Light& light(int index) const;
  ::gz::msgs::Light* add_light();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Light >&
      light() const;

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string entity_name = 7;
  void clear_entity_name();
  static const int kEntityNameFieldNumber = 7;
  const ::std::string& entity_name() const;
  void set_entity_name(const ::std::string& value);
  #if LANG_CXX11
  void set_entity_name(::std::string&& value);
  #endif
  void set_entity_name(const char* value);
  void set_entity_name(const char* value, size_t size);
  ::std::string* mutable_entity_name();
  ::std::string* release_entity_name();
  void set_allocated_entity_name(::std::string* entity_name);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.WorldControl world_control = 8;
  bool has_world_control() const;
  void clear_world_control();
  static const int kWorldControlFieldNumber = 8;
  private:
  const ::gz::msgs::WorldControl& _internal_world_control() const;
  public:
  const ::gz::msgs::WorldControl& world_control() const;
  ::gz::msgs::WorldControl* release_world_control();
  ::gz::msgs::WorldControl* mutable_world_control();
  void set_allocated_world_control(::gz::msgs::WorldControl* world_control);

  // .gz.msgs.Wrench wrench = 9;
  bool has_wrench() const;
  void clear_wrench();
  static const int kWrenchFieldNumber = 9;
  private:
  const ::gz::msgs::Wrench& _internal_wrench() const;
  public:
  const ::gz::msgs::Wrench& wrench() const;
  ::gz::msgs::Wrench* release_wrench();
  ::gz::msgs::Wrench* mutable_wrench();
  void set_allocated_wrench(::gz::msgs::Wrench* wrench);

  // uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // .gz.msgs.UserCmd.Type type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::gz::msgs::UserCmd_Type type() const;
  void set_type(::gz::msgs::UserCmd_Type value);

  // @@protoc_insertion_point(class_scope:gz.msgs.UserCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Model > model_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Light > light_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr entity_name_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::WorldControl* world_control_;
  ::gz::msgs::Wrench* wrench_;
  ::google::protobuf::uint32 id_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fuser_5fcmd_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserCmd

// .gz.msgs.Header header = 1;
inline bool UserCmd::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& UserCmd::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& UserCmd::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.UserCmd.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* UserCmd::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.UserCmd.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* UserCmd::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.UserCmd.header)
  return header_;
}
inline void UserCmd::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.UserCmd.header)
}

// uint32 id = 2;
inline void UserCmd::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 UserCmd::id() const {
  // @@protoc_insertion_point(field_get:gz.msgs.UserCmd.id)
  return id_;
}
inline void UserCmd::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.UserCmd.id)
}

// string description = 3;
inline void UserCmd::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserCmd::description() const {
  // @@protoc_insertion_point(field_get:gz.msgs.UserCmd.description)
  return description_.GetNoArena();
}
inline void UserCmd::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.UserCmd.description)
}
#if LANG_CXX11
inline void UserCmd::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.UserCmd.description)
}
#endif
inline void UserCmd::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.UserCmd.description)
}
inline void UserCmd::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.UserCmd.description)
}
inline ::std::string* UserCmd::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.UserCmd.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserCmd::release_description() {
  // @@protoc_insertion_point(field_release:gz.msgs.UserCmd.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserCmd::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.UserCmd.description)
}

// .gz.msgs.UserCmd.Type type = 4;
inline void UserCmd::clear_type() {
  type_ = 0;
}
inline ::gz::msgs::UserCmd_Type UserCmd::type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.UserCmd.type)
  return static_cast< ::gz::msgs::UserCmd_Type >(type_);
}
inline void UserCmd::set_type(::gz::msgs::UserCmd_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.UserCmd.type)
}

// repeated .gz.msgs.Model model = 5;
inline int UserCmd::model_size() const {
  return model_.size();
}
inline ::gz::msgs::Model* UserCmd::mutable_model(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.UserCmd.model)
  return model_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::Model >*
UserCmd::mutable_model() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.UserCmd.model)
  return &model_;
}
inline const ::gz::msgs::Model& UserCmd::model(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.UserCmd.model)
  return model_.Get(index);
}
inline ::gz::msgs::Model* UserCmd::add_model() {
  // @@protoc_insertion_point(field_add:gz.msgs.UserCmd.model)
  return model_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Model >&
UserCmd::model() const {
  // @@protoc_insertion_point(field_list:gz.msgs.UserCmd.model)
  return model_;
}

// repeated .gz.msgs.Light light = 6;
inline int UserCmd::light_size() const {
  return light_.size();
}
inline ::gz::msgs::Light* UserCmd::mutable_light(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.UserCmd.light)
  return light_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::Light >*
UserCmd::mutable_light() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.UserCmd.light)
  return &light_;
}
inline const ::gz::msgs::Light& UserCmd::light(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.UserCmd.light)
  return light_.Get(index);
}
inline ::gz::msgs::Light* UserCmd::add_light() {
  // @@protoc_insertion_point(field_add:gz.msgs.UserCmd.light)
  return light_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Light >&
UserCmd::light() const {
  // @@protoc_insertion_point(field_list:gz.msgs.UserCmd.light)
  return light_;
}

// string entity_name = 7;
inline void UserCmd::clear_entity_name() {
  entity_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserCmd::entity_name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.UserCmd.entity_name)
  return entity_name_.GetNoArena();
}
inline void UserCmd::set_entity_name(const ::std::string& value) {
  
  entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.UserCmd.entity_name)
}
#if LANG_CXX11
inline void UserCmd::set_entity_name(::std::string&& value) {
  
  entity_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.UserCmd.entity_name)
}
#endif
inline void UserCmd::set_entity_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.UserCmd.entity_name)
}
inline void UserCmd::set_entity_name(const char* value, size_t size) {
  
  entity_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.UserCmd.entity_name)
}
inline ::std::string* UserCmd::mutable_entity_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.UserCmd.entity_name)
  return entity_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserCmd::release_entity_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.UserCmd.entity_name)
  
  return entity_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserCmd::set_allocated_entity_name(::std::string* entity_name) {
  if (entity_name != NULL) {
    
  } else {
    
  }
  entity_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity_name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.UserCmd.entity_name)
}

// .gz.msgs.WorldControl world_control = 8;
inline bool UserCmd::has_world_control() const {
  return this != internal_default_instance() && world_control_ != NULL;
}
inline const ::gz::msgs::WorldControl& UserCmd::_internal_world_control() const {
  return *world_control_;
}
inline const ::gz::msgs::WorldControl& UserCmd::world_control() const {
  const ::gz::msgs::WorldControl* p = world_control_;
  // @@protoc_insertion_point(field_get:gz.msgs.UserCmd.world_control)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::WorldControl*>(
      &::gz::msgs::_WorldControl_default_instance_);
}
inline ::gz::msgs::WorldControl* UserCmd::release_world_control() {
  // @@protoc_insertion_point(field_release:gz.msgs.UserCmd.world_control)
  
  ::gz::msgs::WorldControl* temp = world_control_;
  world_control_ = NULL;
  return temp;
}
inline ::gz::msgs::WorldControl* UserCmd::mutable_world_control() {
  
  if (world_control_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::WorldControl>(GetArenaNoVirtual());
    world_control_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.UserCmd.world_control)
  return world_control_;
}
inline void UserCmd::set_allocated_world_control(::gz::msgs::WorldControl* world_control) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(world_control_);
  }
  if (world_control) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      world_control = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, world_control, submessage_arena);
    }
    
  } else {
    
  }
  world_control_ = world_control;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.UserCmd.world_control)
}

// .gz.msgs.Wrench wrench = 9;
inline bool UserCmd::has_wrench() const {
  return this != internal_default_instance() && wrench_ != NULL;
}
inline const ::gz::msgs::Wrench& UserCmd::_internal_wrench() const {
  return *wrench_;
}
inline const ::gz::msgs::Wrench& UserCmd::wrench() const {
  const ::gz::msgs::Wrench* p = wrench_;
  // @@protoc_insertion_point(field_get:gz.msgs.UserCmd.wrench)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Wrench*>(
      &::gz::msgs::_Wrench_default_instance_);
}
inline ::gz::msgs::Wrench* UserCmd::release_wrench() {
  // @@protoc_insertion_point(field_release:gz.msgs.UserCmd.wrench)
  
  ::gz::msgs::Wrench* temp = wrench_;
  wrench_ = NULL;
  return temp;
}
inline ::gz::msgs::Wrench* UserCmd::mutable_wrench() {
  
  if (wrench_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Wrench>(GetArenaNoVirtual());
    wrench_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.UserCmd.wrench)
  return wrench_;
}
inline void UserCmd::set_allocated_wrench(::gz::msgs::Wrench* wrench) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(wrench_);
  }
  if (wrench) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      wrench = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, wrench, submessage_arena);
    }
    
  } else {
    
  }
  wrench_ = wrench;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.UserCmd.wrench)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::msgs::UserCmd_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::UserCmd_Type>() {
  return ::gz::msgs::UserCmd_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fuser_5fcmd_2eproto
