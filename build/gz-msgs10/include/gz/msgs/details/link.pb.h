// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/link.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2flink_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2flink_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/inertial.pb.h"
#include "gz/msgs/collision.pb.h"
#include "gz/msgs/visual.pb.h"
#include "gz/msgs/light.pb.h"
#include "gz/msgs/sensor.pb.h"
#include "gz/msgs/particle_emitter.pb.h"
#include "gz/msgs/projector.pb.h"
#include "gz/msgs/pose.pb.h"
#include "gz/msgs/battery.pb.h"
#include "gz/msgs/density.pb.h"
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2flink_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2flink_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2flink_2eproto
namespace gz {
namespace msgs {
class Link;
class LinkDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern LinkDefaultTypeInternal _Link_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Link* Arena::CreateMaybeMessage<::gz::msgs::Link>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE Link : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Link) */ {
 public:
  Link();
  virtual ~Link();

  Link(const Link& from);

  inline Link& operator=(const Link& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Link(Link&& from) noexcept
    : Link() {
    *this = ::std::move(from);
  }

  inline Link& operator=(Link&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Link& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Link* internal_default_instance() {
    return reinterpret_cast<const Link*>(
               &_Link_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Link* other);
  friend void swap(Link& a, Link& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Link* New() const final {
    return CreateMaybeMessage<Link>(NULL);
  }

  Link* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Link>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Link& from);
  void MergeFrom(const Link& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Link* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gz.msgs.Visual visual = 11;
  int visual_size() const;
  void clear_visual();
  static const int kVisualFieldNumber = 11;
  ::gz::msgs::Visual* mutable_visual(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Visual >*
      mutable_visual();
  const ::gz::msgs::Visual& visual(int index) const;
  ::gz::msgs::Visual* add_visual();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Visual >&
      visual() const;

  // repeated .gz.msgs.Collision collision = 12;
  int collision_size() const;
  void clear_collision();
  static const int kCollisionFieldNumber = 12;
  ::gz::msgs::Collision* mutable_collision(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Collision >*
      mutable_collision();
  const ::gz::msgs::Collision& collision(int index) const;
  ::gz::msgs::Collision* add_collision();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Collision >&
      collision() const;

  // repeated .gz.msgs.Sensor sensor = 13;
  int sensor_size() const;
  void clear_sensor();
  static const int kSensorFieldNumber = 13;
  ::gz::msgs::Sensor* mutable_sensor(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Sensor >*
      mutable_sensor();
  const ::gz::msgs::Sensor& sensor(int index) const;
  ::gz::msgs::Sensor* add_sensor();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Sensor >&
      sensor() const;

  // repeated .gz.msgs.Projector projector = 14;
  int projector_size() const;
  void clear_projector();
  static const int kProjectorFieldNumber = 14;
  ::gz::msgs::Projector* mutable_projector(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Projector >*
      mutable_projector();
  const ::gz::msgs::Projector& projector(int index) const;
  ::gz::msgs::Projector* add_projector();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Projector >&
      projector() const;

  // repeated .gz.msgs.Battery battery = 16;
  int battery_size() const;
  void clear_battery();
  static const int kBatteryFieldNumber = 16;
  ::gz::msgs::Battery* mutable_battery(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Battery >*
      mutable_battery();
  const ::gz::msgs::Battery& battery(int index) const;
  ::gz::msgs::Battery* add_battery();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Battery >&
      battery() const;

  // repeated .gz.msgs.Light light = 17;
  int light_size() const;
  void clear_light();
  static const int kLightFieldNumber = 17;
  ::gz::msgs::Light* mutable_light(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Light >*
      mutable_light();
  const ::gz::msgs::Light& light(int index) const;
  ::gz::msgs::Light* add_light();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Light >&
      light() const;

  // repeated .gz.msgs.ParticleEmitter particle_emitter = 18;
  int particle_emitter_size() const;
  void clear_particle_emitter();
  static const int kParticleEmitterFieldNumber = 18;
  ::gz::msgs::ParticleEmitter* mutable_particle_emitter(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::ParticleEmitter >*
      mutable_particle_emitter();
  const ::gz::msgs::ParticleEmitter& particle_emitter(int index) const;
  ::gz::msgs::ParticleEmitter* add_particle_emitter();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::ParticleEmitter >&
      particle_emitter() const;

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Density density = 8;
  bool has_density() const;
  void clear_density();
  static const int kDensityFieldNumber = 8;
  private:
  const ::gz::msgs::Density& _internal_density() const;
  public:
  const ::gz::msgs::Density& density() const;
  ::gz::msgs::Density* release_density();
  ::gz::msgs::Density* mutable_density();
  void set_allocated_density(::gz::msgs::Density* density);

  // .gz.msgs.Inertial inertial = 9;
  bool has_inertial() const;
  void clear_inertial();
  static const int kInertialFieldNumber = 9;
  private:
  const ::gz::msgs::Inertial& _internal_inertial() const;
  public:
  const ::gz::msgs::Inertial& inertial() const;
  ::gz::msgs::Inertial* release_inertial();
  ::gz::msgs::Inertial* mutable_inertial();
  void set_allocated_inertial(::gz::msgs::Inertial* inertial);

  // .gz.msgs.Pose pose = 10;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 10;
  private:
  const ::gz::msgs::Pose& _internal_pose() const;
  public:
  const ::gz::msgs::Pose& pose() const;
  ::gz::msgs::Pose* release_pose();
  ::gz::msgs::Pose* mutable_pose();
  void set_allocated_pose(::gz::msgs::Pose* pose);

  // uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // bool self_collide = 4;
  void clear_self_collide();
  static const int kSelfCollideFieldNumber = 4;
  bool self_collide() const;
  void set_self_collide(bool value);

  // bool gravity = 5;
  void clear_gravity();
  static const int kGravityFieldNumber = 5;
  bool gravity() const;
  void set_gravity(bool value);

  // bool kinematic = 6;
  void clear_kinematic();
  static const int kKinematicFieldNumber = 6;
  bool kinematic() const;
  void set_kinematic(bool value);

  // bool enabled = 7;
  void clear_enabled();
  static const int kEnabledFieldNumber = 7;
  bool enabled() const;
  void set_enabled(bool value);

  // bool canonical = 15;
  void clear_canonical();
  static const int kCanonicalFieldNumber = 15;
  bool canonical() const;
  void set_canonical(bool value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Link)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Visual > visual_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Collision > collision_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Sensor > sensor_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Projector > projector_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Battery > battery_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Light > light_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::ParticleEmitter > particle_emitter_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Density* density_;
  ::gz::msgs::Inertial* inertial_;
  ::gz::msgs::Pose* pose_;
  ::google::protobuf::uint32 id_;
  bool self_collide_;
  bool gravity_;
  bool kinematic_;
  bool enabled_;
  bool canonical_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2flink_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Link

// .gz.msgs.Header header = 1;
inline bool Link::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& Link::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& Link::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.Link.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* Link::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.Link.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* Link::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Link.header)
  return header_;
}
inline void Link::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Link.header)
}

// uint32 id = 2;
inline void Link::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Link::id() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Link.id)
  return id_;
}
inline void Link::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Link.id)
}

// string name = 3;
inline void Link::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Link::name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Link.name)
  return name_.GetNoArena();
}
inline void Link::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Link.name)
}
#if LANG_CXX11
inline void Link::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Link.name)
}
#endif
inline void Link::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Link.name)
}
inline void Link::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Link.name)
}
inline ::std::string* Link::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Link.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Link::release_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.Link.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Link.name)
}

// bool self_collide = 4;
inline void Link::clear_self_collide() {
  self_collide_ = false;
}
inline bool Link::self_collide() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Link.self_collide)
  return self_collide_;
}
inline void Link::set_self_collide(bool value) {
  
  self_collide_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Link.self_collide)
}

// bool gravity = 5;
inline void Link::clear_gravity() {
  gravity_ = false;
}
inline bool Link::gravity() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Link.gravity)
  return gravity_;
}
inline void Link::set_gravity(bool value) {
  
  gravity_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Link.gravity)
}

// bool kinematic = 6;
inline void Link::clear_kinematic() {
  kinematic_ = false;
}
inline bool Link::kinematic() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Link.kinematic)
  return kinematic_;
}
inline void Link::set_kinematic(bool value) {
  
  kinematic_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Link.kinematic)
}

// bool enabled = 7;
inline void Link::clear_enabled() {
  enabled_ = false;
}
inline bool Link::enabled() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Link.enabled)
  return enabled_;
}
inline void Link::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Link.enabled)
}

// .gz.msgs.Density density = 8;
inline bool Link::has_density() const {
  return this != internal_default_instance() && density_ != NULL;
}
inline const ::gz::msgs::Density& Link::_internal_density() const {
  return *density_;
}
inline const ::gz::msgs::Density& Link::density() const {
  const ::gz::msgs::Density* p = density_;
  // @@protoc_insertion_point(field_get:gz.msgs.Link.density)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Density*>(
      &::gz::msgs::_Density_default_instance_);
}
inline ::gz::msgs::Density* Link::release_density() {
  // @@protoc_insertion_point(field_release:gz.msgs.Link.density)
  
  ::gz::msgs::Density* temp = density_;
  density_ = NULL;
  return temp;
}
inline ::gz::msgs::Density* Link::mutable_density() {
  
  if (density_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Density>(GetArenaNoVirtual());
    density_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Link.density)
  return density_;
}
inline void Link::set_allocated_density(::gz::msgs::Density* density) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(density_);
  }
  if (density) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      density = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, density, submessage_arena);
    }
    
  } else {
    
  }
  density_ = density;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Link.density)
}

// .gz.msgs.Inertial inertial = 9;
inline bool Link::has_inertial() const {
  return this != internal_default_instance() && inertial_ != NULL;
}
inline const ::gz::msgs::Inertial& Link::_internal_inertial() const {
  return *inertial_;
}
inline const ::gz::msgs::Inertial& Link::inertial() const {
  const ::gz::msgs::Inertial* p = inertial_;
  // @@protoc_insertion_point(field_get:gz.msgs.Link.inertial)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Inertial*>(
      &::gz::msgs::_Inertial_default_instance_);
}
inline ::gz::msgs::Inertial* Link::release_inertial() {
  // @@protoc_insertion_point(field_release:gz.msgs.Link.inertial)
  
  ::gz::msgs::Inertial* temp = inertial_;
  inertial_ = NULL;
  return temp;
}
inline ::gz::msgs::Inertial* Link::mutable_inertial() {
  
  if (inertial_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Inertial>(GetArenaNoVirtual());
    inertial_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Link.inertial)
  return inertial_;
}
inline void Link::set_allocated_inertial(::gz::msgs::Inertial* inertial) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(inertial_);
  }
  if (inertial) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inertial = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inertial, submessage_arena);
    }
    
  } else {
    
  }
  inertial_ = inertial;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Link.inertial)
}

// .gz.msgs.Pose pose = 10;
inline bool Link::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::gz::msgs::Pose& Link::_internal_pose() const {
  return *pose_;
}
inline const ::gz::msgs::Pose& Link::pose() const {
  const ::gz::msgs::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:gz.msgs.Link.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Pose*>(
      &::gz::msgs::_Pose_default_instance_);
}
inline ::gz::msgs::Pose* Link::release_pose() {
  // @@protoc_insertion_point(field_release:gz.msgs.Link.pose)
  
  ::gz::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::gz::msgs::Pose* Link::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Link.pose)
  return pose_;
}
inline void Link::set_allocated_pose(::gz::msgs::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Link.pose)
}

// repeated .gz.msgs.Visual visual = 11;
inline int Link::visual_size() const {
  return visual_.size();
}
inline ::gz::msgs::Visual* Link::mutable_visual(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.Link.visual)
  return visual_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::Visual >*
Link::mutable_visual() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.Link.visual)
  return &visual_;
}
inline const ::gz::msgs::Visual& Link::visual(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.Link.visual)
  return visual_.Get(index);
}
inline ::gz::msgs::Visual* Link::add_visual() {
  // @@protoc_insertion_point(field_add:gz.msgs.Link.visual)
  return visual_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Visual >&
Link::visual() const {
  // @@protoc_insertion_point(field_list:gz.msgs.Link.visual)
  return visual_;
}

// repeated .gz.msgs.Collision collision = 12;
inline int Link::collision_size() const {
  return collision_.size();
}
inline ::gz::msgs::Collision* Link::mutable_collision(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.Link.collision)
  return collision_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::Collision >*
Link::mutable_collision() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.Link.collision)
  return &collision_;
}
inline const ::gz::msgs::Collision& Link::collision(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.Link.collision)
  return collision_.Get(index);
}
inline ::gz::msgs::Collision* Link::add_collision() {
  // @@protoc_insertion_point(field_add:gz.msgs.Link.collision)
  return collision_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Collision >&
Link::collision() const {
  // @@protoc_insertion_point(field_list:gz.msgs.Link.collision)
  return collision_;
}

// repeated .gz.msgs.Sensor sensor = 13;
inline int Link::sensor_size() const {
  return sensor_.size();
}
inline ::gz::msgs::Sensor* Link::mutable_sensor(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.Link.sensor)
  return sensor_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::Sensor >*
Link::mutable_sensor() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.Link.sensor)
  return &sensor_;
}
inline const ::gz::msgs::Sensor& Link::sensor(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.Link.sensor)
  return sensor_.Get(index);
}
inline ::gz::msgs::Sensor* Link::add_sensor() {
  // @@protoc_insertion_point(field_add:gz.msgs.Link.sensor)
  return sensor_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Sensor >&
Link::sensor() const {
  // @@protoc_insertion_point(field_list:gz.msgs.Link.sensor)
  return sensor_;
}

// repeated .gz.msgs.Projector projector = 14;
inline int Link::projector_size() const {
  return projector_.size();
}
inline ::gz::msgs::Projector* Link::mutable_projector(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.Link.projector)
  return projector_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::Projector >*
Link::mutable_projector() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.Link.projector)
  return &projector_;
}
inline const ::gz::msgs::Projector& Link::projector(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.Link.projector)
  return projector_.Get(index);
}
inline ::gz::msgs::Projector* Link::add_projector() {
  // @@protoc_insertion_point(field_add:gz.msgs.Link.projector)
  return projector_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Projector >&
Link::projector() const {
  // @@protoc_insertion_point(field_list:gz.msgs.Link.projector)
  return projector_;
}

// bool canonical = 15;
inline void Link::clear_canonical() {
  canonical_ = false;
}
inline bool Link::canonical() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Link.canonical)
  return canonical_;
}
inline void Link::set_canonical(bool value) {
  
  canonical_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Link.canonical)
}

// repeated .gz.msgs.Battery battery = 16;
inline int Link::battery_size() const {
  return battery_.size();
}
inline ::gz::msgs::Battery* Link::mutable_battery(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.Link.battery)
  return battery_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::Battery >*
Link::mutable_battery() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.Link.battery)
  return &battery_;
}
inline const ::gz::msgs::Battery& Link::battery(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.Link.battery)
  return battery_.Get(index);
}
inline ::gz::msgs::Battery* Link::add_battery() {
  // @@protoc_insertion_point(field_add:gz.msgs.Link.battery)
  return battery_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Battery >&
Link::battery() const {
  // @@protoc_insertion_point(field_list:gz.msgs.Link.battery)
  return battery_;
}

// repeated .gz.msgs.Light light = 17;
inline int Link::light_size() const {
  return light_.size();
}
inline ::gz::msgs::Light* Link::mutable_light(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.Link.light)
  return light_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::Light >*
Link::mutable_light() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.Link.light)
  return &light_;
}
inline const ::gz::msgs::Light& Link::light(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.Link.light)
  return light_.Get(index);
}
inline ::gz::msgs::Light* Link::add_light() {
  // @@protoc_insertion_point(field_add:gz.msgs.Link.light)
  return light_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Light >&
Link::light() const {
  // @@protoc_insertion_point(field_list:gz.msgs.Link.light)
  return light_;
}

// repeated .gz.msgs.ParticleEmitter particle_emitter = 18;
inline int Link::particle_emitter_size() const {
  return particle_emitter_.size();
}
inline ::gz::msgs::ParticleEmitter* Link::mutable_particle_emitter(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.Link.particle_emitter)
  return particle_emitter_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::ParticleEmitter >*
Link::mutable_particle_emitter() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.Link.particle_emitter)
  return &particle_emitter_;
}
inline const ::gz::msgs::ParticleEmitter& Link::particle_emitter(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.Link.particle_emitter)
  return particle_emitter_.Get(index);
}
inline ::gz::msgs::ParticleEmitter* Link::add_particle_emitter() {
  // @@protoc_insertion_point(field_add:gz.msgs.Link.particle_emitter)
  return particle_emitter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::ParticleEmitter >&
Link::particle_emitter() const {
  // @@protoc_insertion_point(field_list:gz.msgs.Link.particle_emitter)
  return particle_emitter_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2flink_2eproto
