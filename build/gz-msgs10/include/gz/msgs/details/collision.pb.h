// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/collision.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fcollision_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fcollision_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/pose.pb.h"
#include "gz/msgs/geometry.pb.h"
#include "gz/msgs/surface.pb.h"
#include "gz/msgs/visual.pb.h"
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fcollision_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fcollision_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fcollision_2eproto
namespace gz {
namespace msgs {
class Collision;
class CollisionDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern CollisionDefaultTypeInternal _Collision_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Collision* Arena::CreateMaybeMessage<::gz::msgs::Collision>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE Collision : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Collision) */ {
 public:
  Collision();
  virtual ~Collision();

  Collision(const Collision& from);

  inline Collision& operator=(const Collision& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Collision(Collision&& from) noexcept
    : Collision() {
    *this = ::std::move(from);
  }

  inline Collision& operator=(Collision&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Collision& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Collision* internal_default_instance() {
    return reinterpret_cast<const Collision*>(
               &_Collision_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Collision* other);
  friend void swap(Collision& a, Collision& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Collision* New() const final {
    return CreateMaybeMessage<Collision>(NULL);
  }

  Collision* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Collision>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Collision& from);
  void MergeFrom(const Collision& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Collision* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gz.msgs.Visual visual = 9;
  int visual_size() const;
  void clear_visual();
  static const int kVisualFieldNumber = 9;
  ::gz::msgs::Visual* mutable_visual(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Visual >*
      mutable_visual();
  const ::gz::msgs::Visual& visual(int index) const;
  ::gz::msgs::Visual* add_visual();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Visual >&
      visual() const;

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Pose pose = 6;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 6;
  private:
  const ::gz::msgs::Pose& _internal_pose() const;
  public:
  const ::gz::msgs::Pose& pose() const;
  ::gz::msgs::Pose* release_pose();
  ::gz::msgs::Pose* mutable_pose();
  void set_allocated_pose(::gz::msgs::Pose* pose);

  // .gz.msgs.Geometry geometry = 7;
  bool has_geometry() const;
  void clear_geometry();
  static const int kGeometryFieldNumber = 7;
  private:
  const ::gz::msgs::Geometry& _internal_geometry() const;
  public:
  const ::gz::msgs::Geometry& geometry() const;
  ::gz::msgs::Geometry* release_geometry();
  ::gz::msgs::Geometry* mutable_geometry();
  void set_allocated_geometry(::gz::msgs::Geometry* geometry);

  // .gz.msgs.Surface surface = 8;
  bool has_surface() const;
  void clear_surface();
  static const int kSurfaceFieldNumber = 8;
  private:
  const ::gz::msgs::Surface& _internal_surface() const;
  public:
  const ::gz::msgs::Surface& surface() const;
  ::gz::msgs::Surface* release_surface();
  ::gz::msgs::Surface* mutable_surface();
  void set_allocated_surface(::gz::msgs::Surface* surface);

  // double laser_retro = 4;
  void clear_laser_retro();
  static const int kLaserRetroFieldNumber = 4;
  double laser_retro() const;
  void set_laser_retro(double value);

  // double max_contacts = 5;
  void clear_max_contacts();
  static const int kMaxContactsFieldNumber = 5;
  double max_contacts() const;
  void set_max_contacts(double value);

  // uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Collision)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Visual > visual_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Pose* pose_;
  ::gz::msgs::Geometry* geometry_;
  ::gz::msgs::Surface* surface_;
  double laser_retro_;
  double max_contacts_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fcollision_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Collision

// .gz.msgs.Header header = 1;
inline bool Collision::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& Collision::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& Collision::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.Collision.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* Collision::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.Collision.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* Collision::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Collision.header)
  return header_;
}
inline void Collision::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Collision.header)
}

// uint32 id = 2;
inline void Collision::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Collision::id() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Collision.id)
  return id_;
}
inline void Collision::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Collision.id)
}

// string name = 3;
inline void Collision::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Collision::name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Collision.name)
  return name_.GetNoArena();
}
inline void Collision::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Collision.name)
}
#if LANG_CXX11
inline void Collision::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Collision.name)
}
#endif
inline void Collision::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Collision.name)
}
inline void Collision::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Collision.name)
}
inline ::std::string* Collision::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Collision.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Collision::release_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.Collision.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Collision::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Collision.name)
}

// double laser_retro = 4;
inline void Collision::clear_laser_retro() {
  laser_retro_ = 0;
}
inline double Collision::laser_retro() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Collision.laser_retro)
  return laser_retro_;
}
inline void Collision::set_laser_retro(double value) {
  
  laser_retro_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Collision.laser_retro)
}

// double max_contacts = 5;
inline void Collision::clear_max_contacts() {
  max_contacts_ = 0;
}
inline double Collision::max_contacts() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Collision.max_contacts)
  return max_contacts_;
}
inline void Collision::set_max_contacts(double value) {
  
  max_contacts_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Collision.max_contacts)
}

// .gz.msgs.Pose pose = 6;
inline bool Collision::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::gz::msgs::Pose& Collision::_internal_pose() const {
  return *pose_;
}
inline const ::gz::msgs::Pose& Collision::pose() const {
  const ::gz::msgs::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:gz.msgs.Collision.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Pose*>(
      &::gz::msgs::_Pose_default_instance_);
}
inline ::gz::msgs::Pose* Collision::release_pose() {
  // @@protoc_insertion_point(field_release:gz.msgs.Collision.pose)
  
  ::gz::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::gz::msgs::Pose* Collision::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Collision.pose)
  return pose_;
}
inline void Collision::set_allocated_pose(::gz::msgs::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Collision.pose)
}

// .gz.msgs.Geometry geometry = 7;
inline bool Collision::has_geometry() const {
  return this != internal_default_instance() && geometry_ != NULL;
}
inline const ::gz::msgs::Geometry& Collision::_internal_geometry() const {
  return *geometry_;
}
inline const ::gz::msgs::Geometry& Collision::geometry() const {
  const ::gz::msgs::Geometry* p = geometry_;
  // @@protoc_insertion_point(field_get:gz.msgs.Collision.geometry)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Geometry*>(
      &::gz::msgs::_Geometry_default_instance_);
}
inline ::gz::msgs::Geometry* Collision::release_geometry() {
  // @@protoc_insertion_point(field_release:gz.msgs.Collision.geometry)
  
  ::gz::msgs::Geometry* temp = geometry_;
  geometry_ = NULL;
  return temp;
}
inline ::gz::msgs::Geometry* Collision::mutable_geometry() {
  
  if (geometry_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Geometry>(GetArenaNoVirtual());
    geometry_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Collision.geometry)
  return geometry_;
}
inline void Collision::set_allocated_geometry(::gz::msgs::Geometry* geometry) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(geometry_);
  }
  if (geometry) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      geometry = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geometry, submessage_arena);
    }
    
  } else {
    
  }
  geometry_ = geometry;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Collision.geometry)
}

// .gz.msgs.Surface surface = 8;
inline bool Collision::has_surface() const {
  return this != internal_default_instance() && surface_ != NULL;
}
inline const ::gz::msgs::Surface& Collision::_internal_surface() const {
  return *surface_;
}
inline const ::gz::msgs::Surface& Collision::surface() const {
  const ::gz::msgs::Surface* p = surface_;
  // @@protoc_insertion_point(field_get:gz.msgs.Collision.surface)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Surface*>(
      &::gz::msgs::_Surface_default_instance_);
}
inline ::gz::msgs::Surface* Collision::release_surface() {
  // @@protoc_insertion_point(field_release:gz.msgs.Collision.surface)
  
  ::gz::msgs::Surface* temp = surface_;
  surface_ = NULL;
  return temp;
}
inline ::gz::msgs::Surface* Collision::mutable_surface() {
  
  if (surface_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Surface>(GetArenaNoVirtual());
    surface_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Collision.surface)
  return surface_;
}
inline void Collision::set_allocated_surface(::gz::msgs::Surface* surface) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(surface_);
  }
  if (surface) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      surface = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, surface, submessage_arena);
    }
    
  } else {
    
  }
  surface_ = surface;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Collision.surface)
}

// repeated .gz.msgs.Visual visual = 9;
inline int Collision::visual_size() const {
  return visual_.size();
}
inline ::gz::msgs::Visual* Collision::mutable_visual(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.Collision.visual)
  return visual_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::Visual >*
Collision::mutable_visual() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.Collision.visual)
  return &visual_;
}
inline const ::gz::msgs::Visual& Collision::visual(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.Collision.visual)
  return visual_.Get(index);
}
inline ::gz::msgs::Visual* Collision::add_visual() {
  // @@protoc_insertion_point(field_add:gz.msgs.Collision.visual)
  return visual_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Visual >&
Collision::visual() const {
  // @@protoc_insertion_point(field_list:gz.msgs.Collision.visual)
  return visual_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fcollision_2eproto
