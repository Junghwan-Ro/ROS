// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/pid.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fpid_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fpid_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/double.pb.h"
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fpid_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fpid_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fpid_2eproto
namespace gz {
namespace msgs {
class PID;
class PIDDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern PIDDefaultTypeInternal _PID_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::PID* Arena::CreateMaybeMessage<::gz::msgs::PID>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE PID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.PID) */ {
 public:
  PID();
  virtual ~PID();

  PID(const PID& from);

  inline PID& operator=(const PID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PID(PID&& from) noexcept
    : PID() {
    *this = ::std::move(from);
  }

  inline PID& operator=(PID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PID* internal_default_instance() {
    return reinterpret_cast<const PID*>(
               &_PID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PID* other);
  friend void swap(PID& a, PID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PID* New() const final {
    return CreateMaybeMessage<PID>(NULL);
  }

  PID* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PID>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PID& from);
  void MergeFrom(const PID& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Double target_optional = 2;
  bool has_target_optional() const;
  void clear_target_optional();
  static const int kTargetOptionalFieldNumber = 2;
  private:
  const ::gz::msgs::Double& _internal_target_optional() const;
  public:
  const ::gz::msgs::Double& target_optional() const;
  ::gz::msgs::Double* release_target_optional();
  ::gz::msgs::Double* mutable_target_optional();
  void set_allocated_target_optional(::gz::msgs::Double* target_optional);

  // .gz.msgs.Double p_gain_optional = 3;
  bool has_p_gain_optional() const;
  void clear_p_gain_optional();
  static const int kPGainOptionalFieldNumber = 3;
  private:
  const ::gz::msgs::Double& _internal_p_gain_optional() const;
  public:
  const ::gz::msgs::Double& p_gain_optional() const;
  ::gz::msgs::Double* release_p_gain_optional();
  ::gz::msgs::Double* mutable_p_gain_optional();
  void set_allocated_p_gain_optional(::gz::msgs::Double* p_gain_optional);

  // .gz.msgs.Double i_gain_optional = 4;
  bool has_i_gain_optional() const;
  void clear_i_gain_optional();
  static const int kIGainOptionalFieldNumber = 4;
  private:
  const ::gz::msgs::Double& _internal_i_gain_optional() const;
  public:
  const ::gz::msgs::Double& i_gain_optional() const;
  ::gz::msgs::Double* release_i_gain_optional();
  ::gz::msgs::Double* mutable_i_gain_optional();
  void set_allocated_i_gain_optional(::gz::msgs::Double* i_gain_optional);

  // .gz.msgs.Double d_gain_optional = 5;
  bool has_d_gain_optional() const;
  void clear_d_gain_optional();
  static const int kDGainOptionalFieldNumber = 5;
  private:
  const ::gz::msgs::Double& _internal_d_gain_optional() const;
  public:
  const ::gz::msgs::Double& d_gain_optional() const;
  ::gz::msgs::Double* release_d_gain_optional();
  ::gz::msgs::Double* mutable_d_gain_optional();
  void set_allocated_d_gain_optional(::gz::msgs::Double* d_gain_optional);

  // .gz.msgs.Double i_max_optional = 6;
  bool has_i_max_optional() const;
  void clear_i_max_optional();
  static const int kIMaxOptionalFieldNumber = 6;
  private:
  const ::gz::msgs::Double& _internal_i_max_optional() const;
  public:
  const ::gz::msgs::Double& i_max_optional() const;
  ::gz::msgs::Double* release_i_max_optional();
  ::gz::msgs::Double* mutable_i_max_optional();
  void set_allocated_i_max_optional(::gz::msgs::Double* i_max_optional);

  // .gz.msgs.Double i_min_optional = 7;
  bool has_i_min_optional() const;
  void clear_i_min_optional();
  static const int kIMinOptionalFieldNumber = 7;
  private:
  const ::gz::msgs::Double& _internal_i_min_optional() const;
  public:
  const ::gz::msgs::Double& i_min_optional() const;
  ::gz::msgs::Double* release_i_min_optional();
  ::gz::msgs::Double* mutable_i_min_optional();
  void set_allocated_i_min_optional(::gz::msgs::Double* i_min_optional);

  // .gz.msgs.Double limit_optional = 8;
  bool has_limit_optional() const;
  void clear_limit_optional();
  static const int kLimitOptionalFieldNumber = 8;
  private:
  const ::gz::msgs::Double& _internal_limit_optional() const;
  public:
  const ::gz::msgs::Double& limit_optional() const;
  ::gz::msgs::Double* release_limit_optional();
  ::gz::msgs::Double* mutable_limit_optional();
  void set_allocated_limit_optional(::gz::msgs::Double* limit_optional);

  // @@protoc_insertion_point(class_scope:gz.msgs.PID)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Double* target_optional_;
  ::gz::msgs::Double* p_gain_optional_;
  ::gz::msgs::Double* i_gain_optional_;
  ::gz::msgs::Double* d_gain_optional_;
  ::gz::msgs::Double* i_max_optional_;
  ::gz::msgs::Double* i_min_optional_;
  ::gz::msgs::Double* limit_optional_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fpid_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PID

// .gz.msgs.Header header = 1;
inline bool PID::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& PID::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& PID::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.PID.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* PID::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.PID.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* PID::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.PID.header)
  return header_;
}
inline void PID::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.PID.header)
}

// .gz.msgs.Double target_optional = 2;
inline bool PID::has_target_optional() const {
  return this != internal_default_instance() && target_optional_ != NULL;
}
inline const ::gz::msgs::Double& PID::_internal_target_optional() const {
  return *target_optional_;
}
inline const ::gz::msgs::Double& PID::target_optional() const {
  const ::gz::msgs::Double* p = target_optional_;
  // @@protoc_insertion_point(field_get:gz.msgs.PID.target_optional)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Double*>(
      &::gz::msgs::_Double_default_instance_);
}
inline ::gz::msgs::Double* PID::release_target_optional() {
  // @@protoc_insertion_point(field_release:gz.msgs.PID.target_optional)
  
  ::gz::msgs::Double* temp = target_optional_;
  target_optional_ = NULL;
  return temp;
}
inline ::gz::msgs::Double* PID::mutable_target_optional() {
  
  if (target_optional_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Double>(GetArenaNoVirtual());
    target_optional_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.PID.target_optional)
  return target_optional_;
}
inline void PID::set_allocated_target_optional(::gz::msgs::Double* target_optional) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(target_optional_);
  }
  if (target_optional) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target_optional = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_optional, submessage_arena);
    }
    
  } else {
    
  }
  target_optional_ = target_optional;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.PID.target_optional)
}

// .gz.msgs.Double p_gain_optional = 3;
inline bool PID::has_p_gain_optional() const {
  return this != internal_default_instance() && p_gain_optional_ != NULL;
}
inline const ::gz::msgs::Double& PID::_internal_p_gain_optional() const {
  return *p_gain_optional_;
}
inline const ::gz::msgs::Double& PID::p_gain_optional() const {
  const ::gz::msgs::Double* p = p_gain_optional_;
  // @@protoc_insertion_point(field_get:gz.msgs.PID.p_gain_optional)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Double*>(
      &::gz::msgs::_Double_default_instance_);
}
inline ::gz::msgs::Double* PID::release_p_gain_optional() {
  // @@protoc_insertion_point(field_release:gz.msgs.PID.p_gain_optional)
  
  ::gz::msgs::Double* temp = p_gain_optional_;
  p_gain_optional_ = NULL;
  return temp;
}
inline ::gz::msgs::Double* PID::mutable_p_gain_optional() {
  
  if (p_gain_optional_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Double>(GetArenaNoVirtual());
    p_gain_optional_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.PID.p_gain_optional)
  return p_gain_optional_;
}
inline void PID::set_allocated_p_gain_optional(::gz::msgs::Double* p_gain_optional) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(p_gain_optional_);
  }
  if (p_gain_optional) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      p_gain_optional = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p_gain_optional, submessage_arena);
    }
    
  } else {
    
  }
  p_gain_optional_ = p_gain_optional;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.PID.p_gain_optional)
}

// .gz.msgs.Double i_gain_optional = 4;
inline bool PID::has_i_gain_optional() const {
  return this != internal_default_instance() && i_gain_optional_ != NULL;
}
inline const ::gz::msgs::Double& PID::_internal_i_gain_optional() const {
  return *i_gain_optional_;
}
inline const ::gz::msgs::Double& PID::i_gain_optional() const {
  const ::gz::msgs::Double* p = i_gain_optional_;
  // @@protoc_insertion_point(field_get:gz.msgs.PID.i_gain_optional)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Double*>(
      &::gz::msgs::_Double_default_instance_);
}
inline ::gz::msgs::Double* PID::release_i_gain_optional() {
  // @@protoc_insertion_point(field_release:gz.msgs.PID.i_gain_optional)
  
  ::gz::msgs::Double* temp = i_gain_optional_;
  i_gain_optional_ = NULL;
  return temp;
}
inline ::gz::msgs::Double* PID::mutable_i_gain_optional() {
  
  if (i_gain_optional_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Double>(GetArenaNoVirtual());
    i_gain_optional_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.PID.i_gain_optional)
  return i_gain_optional_;
}
inline void PID::set_allocated_i_gain_optional(::gz::msgs::Double* i_gain_optional) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(i_gain_optional_);
  }
  if (i_gain_optional) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      i_gain_optional = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, i_gain_optional, submessage_arena);
    }
    
  } else {
    
  }
  i_gain_optional_ = i_gain_optional;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.PID.i_gain_optional)
}

// .gz.msgs.Double d_gain_optional = 5;
inline bool PID::has_d_gain_optional() const {
  return this != internal_default_instance() && d_gain_optional_ != NULL;
}
inline const ::gz::msgs::Double& PID::_internal_d_gain_optional() const {
  return *d_gain_optional_;
}
inline const ::gz::msgs::Double& PID::d_gain_optional() const {
  const ::gz::msgs::Double* p = d_gain_optional_;
  // @@protoc_insertion_point(field_get:gz.msgs.PID.d_gain_optional)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Double*>(
      &::gz::msgs::_Double_default_instance_);
}
inline ::gz::msgs::Double* PID::release_d_gain_optional() {
  // @@protoc_insertion_point(field_release:gz.msgs.PID.d_gain_optional)
  
  ::gz::msgs::Double* temp = d_gain_optional_;
  d_gain_optional_ = NULL;
  return temp;
}
inline ::gz::msgs::Double* PID::mutable_d_gain_optional() {
  
  if (d_gain_optional_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Double>(GetArenaNoVirtual());
    d_gain_optional_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.PID.d_gain_optional)
  return d_gain_optional_;
}
inline void PID::set_allocated_d_gain_optional(::gz::msgs::Double* d_gain_optional) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(d_gain_optional_);
  }
  if (d_gain_optional) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      d_gain_optional = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, d_gain_optional, submessage_arena);
    }
    
  } else {
    
  }
  d_gain_optional_ = d_gain_optional;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.PID.d_gain_optional)
}

// .gz.msgs.Double i_max_optional = 6;
inline bool PID::has_i_max_optional() const {
  return this != internal_default_instance() && i_max_optional_ != NULL;
}
inline const ::gz::msgs::Double& PID::_internal_i_max_optional() const {
  return *i_max_optional_;
}
inline const ::gz::msgs::Double& PID::i_max_optional() const {
  const ::gz::msgs::Double* p = i_max_optional_;
  // @@protoc_insertion_point(field_get:gz.msgs.PID.i_max_optional)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Double*>(
      &::gz::msgs::_Double_default_instance_);
}
inline ::gz::msgs::Double* PID::release_i_max_optional() {
  // @@protoc_insertion_point(field_release:gz.msgs.PID.i_max_optional)
  
  ::gz::msgs::Double* temp = i_max_optional_;
  i_max_optional_ = NULL;
  return temp;
}
inline ::gz::msgs::Double* PID::mutable_i_max_optional() {
  
  if (i_max_optional_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Double>(GetArenaNoVirtual());
    i_max_optional_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.PID.i_max_optional)
  return i_max_optional_;
}
inline void PID::set_allocated_i_max_optional(::gz::msgs::Double* i_max_optional) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(i_max_optional_);
  }
  if (i_max_optional) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      i_max_optional = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, i_max_optional, submessage_arena);
    }
    
  } else {
    
  }
  i_max_optional_ = i_max_optional;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.PID.i_max_optional)
}

// .gz.msgs.Double i_min_optional = 7;
inline bool PID::has_i_min_optional() const {
  return this != internal_default_instance() && i_min_optional_ != NULL;
}
inline const ::gz::msgs::Double& PID::_internal_i_min_optional() const {
  return *i_min_optional_;
}
inline const ::gz::msgs::Double& PID::i_min_optional() const {
  const ::gz::msgs::Double* p = i_min_optional_;
  // @@protoc_insertion_point(field_get:gz.msgs.PID.i_min_optional)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Double*>(
      &::gz::msgs::_Double_default_instance_);
}
inline ::gz::msgs::Double* PID::release_i_min_optional() {
  // @@protoc_insertion_point(field_release:gz.msgs.PID.i_min_optional)
  
  ::gz::msgs::Double* temp = i_min_optional_;
  i_min_optional_ = NULL;
  return temp;
}
inline ::gz::msgs::Double* PID::mutable_i_min_optional() {
  
  if (i_min_optional_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Double>(GetArenaNoVirtual());
    i_min_optional_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.PID.i_min_optional)
  return i_min_optional_;
}
inline void PID::set_allocated_i_min_optional(::gz::msgs::Double* i_min_optional) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(i_min_optional_);
  }
  if (i_min_optional) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      i_min_optional = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, i_min_optional, submessage_arena);
    }
    
  } else {
    
  }
  i_min_optional_ = i_min_optional;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.PID.i_min_optional)
}

// .gz.msgs.Double limit_optional = 8;
inline bool PID::has_limit_optional() const {
  return this != internal_default_instance() && limit_optional_ != NULL;
}
inline const ::gz::msgs::Double& PID::_internal_limit_optional() const {
  return *limit_optional_;
}
inline const ::gz::msgs::Double& PID::limit_optional() const {
  const ::gz::msgs::Double* p = limit_optional_;
  // @@protoc_insertion_point(field_get:gz.msgs.PID.limit_optional)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Double*>(
      &::gz::msgs::_Double_default_instance_);
}
inline ::gz::msgs::Double* PID::release_limit_optional() {
  // @@protoc_insertion_point(field_release:gz.msgs.PID.limit_optional)
  
  ::gz::msgs::Double* temp = limit_optional_;
  limit_optional_ = NULL;
  return temp;
}
inline ::gz::msgs::Double* PID::mutable_limit_optional() {
  
  if (limit_optional_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Double>(GetArenaNoVirtual());
    limit_optional_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.PID.limit_optional)
  return limit_optional_;
}
inline void PID::set_allocated_limit_optional(::gz::msgs::Double* limit_optional) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(limit_optional_);
  }
  if (limit_optional) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      limit_optional = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, limit_optional, submessage_arena);
    }
    
  } else {
    
  }
  limit_optional_ = limit_optional;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.PID.limit_optional)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fpid_2eproto
