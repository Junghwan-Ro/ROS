// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/camera_lens.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fcamera_5flens_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fcamera_5flens_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fcamera_5flens_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fcamera_5flens_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fcamera_5flens_2eproto
namespace gz {
namespace msgs {
class CameraLens;
class CameraLensDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern CameraLensDefaultTypeInternal _CameraLens_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::CameraLens* Arena::CreateMaybeMessage<::gz::msgs::CameraLens>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE CameraLens : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.CameraLens) */ {
 public:
  CameraLens();
  virtual ~CameraLens();

  CameraLens(const CameraLens& from);

  inline CameraLens& operator=(const CameraLens& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraLens(CameraLens&& from) noexcept
    : CameraLens() {
    *this = ::std::move(from);
  }

  inline CameraLens& operator=(CameraLens&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraLens& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraLens* internal_default_instance() {
    return reinterpret_cast<const CameraLens*>(
               &_CameraLens_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CameraLens* other);
  friend void swap(CameraLens& a, CameraLens& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraLens* New() const final {
    return CreateMaybeMessage<CameraLens>(NULL);
  }

  CameraLens* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraLens>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraLens& from);
  void MergeFrom(const CameraLens& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraLens* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string fun = 7;
  void clear_fun();
  static const int kFunFieldNumber = 7;
  const ::std::string& fun() const;
  void set_fun(const ::std::string& value);
  #if LANG_CXX11
  void set_fun(::std::string&& value);
  #endif
  void set_fun(const char* value);
  void set_fun(const char* value, size_t size);
  ::std::string* mutable_fun();
  ::std::string* release_fun();
  void set_allocated_fun(::std::string* fun);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // double c1 = 3;
  void clear_c1();
  static const int kC1FieldNumber = 3;
  double c1() const;
  void set_c1(double value);

  // double c2 = 4;
  void clear_c2();
  static const int kC2FieldNumber = 4;
  double c2() const;
  void set_c2(double value);

  // double c3 = 5;
  void clear_c3();
  static const int kC3FieldNumber = 5;
  double c3() const;
  void set_c3(double value);

  // double f = 6;
  void clear_f();
  static const int kFFieldNumber = 6;
  double f() const;
  void set_f(double value);

  // double cutoff_angle = 9;
  void clear_cutoff_angle();
  static const int kCutoffAngleFieldNumber = 9;
  double cutoff_angle() const;
  void set_cutoff_angle(double value);

  // bool scale_to_hfov = 8;
  void clear_scale_to_hfov();
  static const int kScaleToHfovFieldNumber = 8;
  bool scale_to_hfov() const;
  void set_scale_to_hfov(bool value);

  // int32 env_texture_size = 11;
  void clear_env_texture_size();
  static const int kEnvTextureSizeFieldNumber = 11;
  ::google::protobuf::int32 env_texture_size() const;
  void set_env_texture_size(::google::protobuf::int32 value);

  // double hfov = 10;
  void clear_hfov();
  static const int kHfovFieldNumber = 10;
  double hfov() const;
  void set_hfov(double value);

  // @@protoc_insertion_point(class_scope:gz.msgs.CameraLens)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr fun_;
  ::gz::msgs::Header* header_;
  double c1_;
  double c2_;
  double c3_;
  double f_;
  double cutoff_angle_;
  bool scale_to_hfov_;
  ::google::protobuf::int32 env_texture_size_;
  double hfov_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fcamera_5flens_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraLens

// .gz.msgs.Header header = 1;
inline bool CameraLens::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& CameraLens::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& CameraLens::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.CameraLens.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* CameraLens::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.CameraLens.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* CameraLens::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.CameraLens.header)
  return header_;
}
inline void CameraLens::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.CameraLens.header)
}

// string type = 2;
inline void CameraLens::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CameraLens::type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraLens.type)
  return type_.GetNoArena();
}
inline void CameraLens::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.CameraLens.type)
}
#if LANG_CXX11
inline void CameraLens::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.CameraLens.type)
}
#endif
inline void CameraLens::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.CameraLens.type)
}
inline void CameraLens::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.CameraLens.type)
}
inline ::std::string* CameraLens::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.CameraLens.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraLens::release_type() {
  // @@protoc_insertion_point(field_release:gz.msgs.CameraLens.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraLens::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.CameraLens.type)
}

// double c1 = 3;
inline void CameraLens::clear_c1() {
  c1_ = 0;
}
inline double CameraLens::c1() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraLens.c1)
  return c1_;
}
inline void CameraLens::set_c1(double value) {
  
  c1_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraLens.c1)
}

// double c2 = 4;
inline void CameraLens::clear_c2() {
  c2_ = 0;
}
inline double CameraLens::c2() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraLens.c2)
  return c2_;
}
inline void CameraLens::set_c2(double value) {
  
  c2_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraLens.c2)
}

// double c3 = 5;
inline void CameraLens::clear_c3() {
  c3_ = 0;
}
inline double CameraLens::c3() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraLens.c3)
  return c3_;
}
inline void CameraLens::set_c3(double value) {
  
  c3_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraLens.c3)
}

// double f = 6;
inline void CameraLens::clear_f() {
  f_ = 0;
}
inline double CameraLens::f() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraLens.f)
  return f_;
}
inline void CameraLens::set_f(double value) {
  
  f_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraLens.f)
}

// string fun = 7;
inline void CameraLens::clear_fun() {
  fun_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CameraLens::fun() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraLens.fun)
  return fun_.GetNoArena();
}
inline void CameraLens::set_fun(const ::std::string& value) {
  
  fun_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.CameraLens.fun)
}
#if LANG_CXX11
inline void CameraLens::set_fun(::std::string&& value) {
  
  fun_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.CameraLens.fun)
}
#endif
inline void CameraLens::set_fun(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fun_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.CameraLens.fun)
}
inline void CameraLens::set_fun(const char* value, size_t size) {
  
  fun_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.CameraLens.fun)
}
inline ::std::string* CameraLens::mutable_fun() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.CameraLens.fun)
  return fun_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraLens::release_fun() {
  // @@protoc_insertion_point(field_release:gz.msgs.CameraLens.fun)
  
  return fun_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraLens::set_allocated_fun(::std::string* fun) {
  if (fun != NULL) {
    
  } else {
    
  }
  fun_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fun);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.CameraLens.fun)
}

// bool scale_to_hfov = 8;
inline void CameraLens::clear_scale_to_hfov() {
  scale_to_hfov_ = false;
}
inline bool CameraLens::scale_to_hfov() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraLens.scale_to_hfov)
  return scale_to_hfov_;
}
inline void CameraLens::set_scale_to_hfov(bool value) {
  
  scale_to_hfov_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraLens.scale_to_hfov)
}

// double cutoff_angle = 9;
inline void CameraLens::clear_cutoff_angle() {
  cutoff_angle_ = 0;
}
inline double CameraLens::cutoff_angle() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraLens.cutoff_angle)
  return cutoff_angle_;
}
inline void CameraLens::set_cutoff_angle(double value) {
  
  cutoff_angle_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraLens.cutoff_angle)
}

// double hfov = 10;
inline void CameraLens::clear_hfov() {
  hfov_ = 0;
}
inline double CameraLens::hfov() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraLens.hfov)
  return hfov_;
}
inline void CameraLens::set_hfov(double value) {
  
  hfov_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraLens.hfov)
}

// int32 env_texture_size = 11;
inline void CameraLens::clear_env_texture_size() {
  env_texture_size_ = 0;
}
inline ::google::protobuf::int32 CameraLens::env_texture_size() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraLens.env_texture_size)
  return env_texture_size_;
}
inline void CameraLens::set_env_texture_size(::google::protobuf::int32 value) {
  
  env_texture_size_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraLens.env_texture_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fcamera_5flens_2eproto
