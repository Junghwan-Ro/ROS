// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/camera_info.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fcamera_5finfo_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fcamera_5finfo_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto
namespace gz {
namespace msgs {
class CameraInfo;
class CameraInfoDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern CameraInfoDefaultTypeInternal _CameraInfo_default_instance_;
class CameraInfo_Distortion;
class CameraInfo_DistortionDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern CameraInfo_DistortionDefaultTypeInternal _CameraInfo_Distortion_default_instance_;
class CameraInfo_Intrinsics;
class CameraInfo_IntrinsicsDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern CameraInfo_IntrinsicsDefaultTypeInternal _CameraInfo_Intrinsics_default_instance_;
class CameraInfo_Projection;
class CameraInfo_ProjectionDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern CameraInfo_ProjectionDefaultTypeInternal _CameraInfo_Projection_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::CameraInfo* Arena::CreateMaybeMessage<::gz::msgs::CameraInfo>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::CameraInfo_Distortion* Arena::CreateMaybeMessage<::gz::msgs::CameraInfo_Distortion>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::CameraInfo_Intrinsics* Arena::CreateMaybeMessage<::gz::msgs::CameraInfo_Intrinsics>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::CameraInfo_Projection* Arena::CreateMaybeMessage<::gz::msgs::CameraInfo_Projection>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

enum CameraInfo_Distortion_DistortionModelType {
  CameraInfo_Distortion_DistortionModelType_PLUMB_BOB = 0,
  CameraInfo_Distortion_DistortionModelType_RATIONAL_POLYNOMIAL = 1,
  CameraInfo_Distortion_DistortionModelType_EQUIDISTANT = 2,
  CameraInfo_Distortion_DistortionModelType_CameraInfo_Distortion_DistortionModelType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CameraInfo_Distortion_DistortionModelType_CameraInfo_Distortion_DistortionModelType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool CameraInfo_Distortion_DistortionModelType_IsValid(int value);
const CameraInfo_Distortion_DistortionModelType CameraInfo_Distortion_DistortionModelType_DistortionModelType_MIN = CameraInfo_Distortion_DistortionModelType_PLUMB_BOB;
const CameraInfo_Distortion_DistortionModelType CameraInfo_Distortion_DistortionModelType_DistortionModelType_MAX = CameraInfo_Distortion_DistortionModelType_EQUIDISTANT;
const int CameraInfo_Distortion_DistortionModelType_DistortionModelType_ARRAYSIZE = CameraInfo_Distortion_DistortionModelType_DistortionModelType_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* CameraInfo_Distortion_DistortionModelType_descriptor();
inline const ::std::string& CameraInfo_Distortion_DistortionModelType_Name(CameraInfo_Distortion_DistortionModelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraInfo_Distortion_DistortionModelType_descriptor(), value);
}
inline bool CameraInfo_Distortion_DistortionModelType_Parse(
    const ::std::string& name, CameraInfo_Distortion_DistortionModelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraInfo_Distortion_DistortionModelType>(
    CameraInfo_Distortion_DistortionModelType_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE CameraInfo_Distortion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.CameraInfo.Distortion) */ {
 public:
  CameraInfo_Distortion();
  virtual ~CameraInfo_Distortion();

  CameraInfo_Distortion(const CameraInfo_Distortion& from);

  inline CameraInfo_Distortion& operator=(const CameraInfo_Distortion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraInfo_Distortion(CameraInfo_Distortion&& from) noexcept
    : CameraInfo_Distortion() {
    *this = ::std::move(from);
  }

  inline CameraInfo_Distortion& operator=(CameraInfo_Distortion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraInfo_Distortion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraInfo_Distortion* internal_default_instance() {
    return reinterpret_cast<const CameraInfo_Distortion*>(
               &_CameraInfo_Distortion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CameraInfo_Distortion* other);
  friend void swap(CameraInfo_Distortion& a, CameraInfo_Distortion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraInfo_Distortion* New() const final {
    return CreateMaybeMessage<CameraInfo_Distortion>(NULL);
  }

  CameraInfo_Distortion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraInfo_Distortion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraInfo_Distortion& from);
  void MergeFrom(const CameraInfo_Distortion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraInfo_Distortion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CameraInfo_Distortion_DistortionModelType DistortionModelType;
  static const DistortionModelType PLUMB_BOB =
    CameraInfo_Distortion_DistortionModelType_PLUMB_BOB;
  static const DistortionModelType RATIONAL_POLYNOMIAL =
    CameraInfo_Distortion_DistortionModelType_RATIONAL_POLYNOMIAL;
  static const DistortionModelType EQUIDISTANT =
    CameraInfo_Distortion_DistortionModelType_EQUIDISTANT;
  static inline bool DistortionModelType_IsValid(int value) {
    return CameraInfo_Distortion_DistortionModelType_IsValid(value);
  }
  static const DistortionModelType DistortionModelType_MIN =
    CameraInfo_Distortion_DistortionModelType_DistortionModelType_MIN;
  static const DistortionModelType DistortionModelType_MAX =
    CameraInfo_Distortion_DistortionModelType_DistortionModelType_MAX;
  static const int DistortionModelType_ARRAYSIZE =
    CameraInfo_Distortion_DistortionModelType_DistortionModelType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DistortionModelType_descriptor() {
    return CameraInfo_Distortion_DistortionModelType_descriptor();
  }
  static inline const ::std::string& DistortionModelType_Name(DistortionModelType value) {
    return CameraInfo_Distortion_DistortionModelType_Name(value);
  }
  static inline bool DistortionModelType_Parse(const ::std::string& name,
      DistortionModelType* value) {
    return CameraInfo_Distortion_DistortionModelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated double k = 2;
  int k_size() const;
  void clear_k();
  static const int kKFieldNumber = 2;
  double k(int index) const;
  void set_k(int index, double value);
  void add_k(double value);
  const ::google::protobuf::RepeatedField< double >&
      k() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_k();

  // .gz.msgs.CameraInfo.Distortion.DistortionModelType model = 1;
  void clear_model();
  static const int kModelFieldNumber = 1;
  ::gz::msgs::CameraInfo_Distortion_DistortionModelType model() const;
  void set_model(::gz::msgs::CameraInfo_Distortion_DistortionModelType value);

  // @@protoc_insertion_point(class_scope:gz.msgs.CameraInfo.Distortion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > k_;
  mutable int _k_cached_byte_size_;
  int model_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE CameraInfo_Intrinsics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.CameraInfo.Intrinsics) */ {
 public:
  CameraInfo_Intrinsics();
  virtual ~CameraInfo_Intrinsics();

  CameraInfo_Intrinsics(const CameraInfo_Intrinsics& from);

  inline CameraInfo_Intrinsics& operator=(const CameraInfo_Intrinsics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraInfo_Intrinsics(CameraInfo_Intrinsics&& from) noexcept
    : CameraInfo_Intrinsics() {
    *this = ::std::move(from);
  }

  inline CameraInfo_Intrinsics& operator=(CameraInfo_Intrinsics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraInfo_Intrinsics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraInfo_Intrinsics* internal_default_instance() {
    return reinterpret_cast<const CameraInfo_Intrinsics*>(
               &_CameraInfo_Intrinsics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CameraInfo_Intrinsics* other);
  friend void swap(CameraInfo_Intrinsics& a, CameraInfo_Intrinsics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraInfo_Intrinsics* New() const final {
    return CreateMaybeMessage<CameraInfo_Intrinsics>(NULL);
  }

  CameraInfo_Intrinsics* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraInfo_Intrinsics>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraInfo_Intrinsics& from);
  void MergeFrom(const CameraInfo_Intrinsics& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraInfo_Intrinsics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double k = 1;
  int k_size() const;
  void clear_k();
  static const int kKFieldNumber = 1;
  double k(int index) const;
  void set_k(int index, double value);
  void add_k(double value);
  const ::google::protobuf::RepeatedField< double >&
      k() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_k();

  // @@protoc_insertion_point(class_scope:gz.msgs.CameraInfo.Intrinsics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > k_;
  mutable int _k_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE CameraInfo_Projection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.CameraInfo.Projection) */ {
 public:
  CameraInfo_Projection();
  virtual ~CameraInfo_Projection();

  CameraInfo_Projection(const CameraInfo_Projection& from);

  inline CameraInfo_Projection& operator=(const CameraInfo_Projection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraInfo_Projection(CameraInfo_Projection&& from) noexcept
    : CameraInfo_Projection() {
    *this = ::std::move(from);
  }

  inline CameraInfo_Projection& operator=(CameraInfo_Projection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraInfo_Projection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraInfo_Projection* internal_default_instance() {
    return reinterpret_cast<const CameraInfo_Projection*>(
               &_CameraInfo_Projection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CameraInfo_Projection* other);
  friend void swap(CameraInfo_Projection& a, CameraInfo_Projection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraInfo_Projection* New() const final {
    return CreateMaybeMessage<CameraInfo_Projection>(NULL);
  }

  CameraInfo_Projection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraInfo_Projection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraInfo_Projection& from);
  void MergeFrom(const CameraInfo_Projection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraInfo_Projection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double p = 1;
  int p_size() const;
  void clear_p();
  static const int kPFieldNumber = 1;
  double p(int index) const;
  void set_p(int index, double value);
  void add_p(double value);
  const ::google::protobuf::RepeatedField< double >&
      p() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_p();

  // @@protoc_insertion_point(class_scope:gz.msgs.CameraInfo.Projection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > p_;
  mutable int _p_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE CameraInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.CameraInfo) */ {
 public:
  CameraInfo();
  virtual ~CameraInfo();

  CameraInfo(const CameraInfo& from);

  inline CameraInfo& operator=(const CameraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraInfo(CameraInfo&& from) noexcept
    : CameraInfo() {
    *this = ::std::move(from);
  }

  inline CameraInfo& operator=(CameraInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraInfo* internal_default_instance() {
    return reinterpret_cast<const CameraInfo*>(
               &_CameraInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CameraInfo* other);
  friend void swap(CameraInfo& a, CameraInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraInfo* New() const final {
    return CreateMaybeMessage<CameraInfo>(NULL);
  }

  CameraInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraInfo& from);
  void MergeFrom(const CameraInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CameraInfo_Distortion Distortion;
  typedef CameraInfo_Intrinsics Intrinsics;
  typedef CameraInfo_Projection Projection;

  // accessors -------------------------------------------------------

  // repeated double rectification_matrix = 7 [packed = true];
  int rectification_matrix_size() const;
  void clear_rectification_matrix();
  static const int kRectificationMatrixFieldNumber = 7;
  double rectification_matrix(int index) const;
  void set_rectification_matrix(int index, double value);
  void add_rectification_matrix(double value);
  const ::google::protobuf::RepeatedField< double >&
      rectification_matrix() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_rectification_matrix();

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.CameraInfo.Distortion distortion = 4;
  bool has_distortion() const;
  void clear_distortion();
  static const int kDistortionFieldNumber = 4;
  private:
  const ::gz::msgs::CameraInfo_Distortion& _internal_distortion() const;
  public:
  const ::gz::msgs::CameraInfo_Distortion& distortion() const;
  ::gz::msgs::CameraInfo_Distortion* release_distortion();
  ::gz::msgs::CameraInfo_Distortion* mutable_distortion();
  void set_allocated_distortion(::gz::msgs::CameraInfo_Distortion* distortion);

  // .gz.msgs.CameraInfo.Intrinsics intrinsics = 5;
  bool has_intrinsics() const;
  void clear_intrinsics();
  static const int kIntrinsicsFieldNumber = 5;
  private:
  const ::gz::msgs::CameraInfo_Intrinsics& _internal_intrinsics() const;
  public:
  const ::gz::msgs::CameraInfo_Intrinsics& intrinsics() const;
  ::gz::msgs::CameraInfo_Intrinsics* release_intrinsics();
  ::gz::msgs::CameraInfo_Intrinsics* mutable_intrinsics();
  void set_allocated_intrinsics(::gz::msgs::CameraInfo_Intrinsics* intrinsics);

  // .gz.msgs.CameraInfo.Projection projection = 6;
  bool has_projection() const;
  void clear_projection();
  static const int kProjectionFieldNumber = 6;
  private:
  const ::gz::msgs::CameraInfo_Projection& _internal_projection() const;
  public:
  const ::gz::msgs::CameraInfo_Projection& projection() const;
  ::gz::msgs::CameraInfo_Projection* release_projection();
  ::gz::msgs::CameraInfo_Projection* mutable_projection();
  void set_allocated_projection(::gz::msgs::CameraInfo_Projection* projection);

  // uint32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gz.msgs.CameraInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > rectification_matrix_;
  mutable int _rectification_matrix_cached_byte_size_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::CameraInfo_Distortion* distortion_;
  ::gz::msgs::CameraInfo_Intrinsics* intrinsics_;
  ::gz::msgs::CameraInfo_Projection* projection_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fcamera_5finfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraInfo_Distortion

// .gz.msgs.CameraInfo.Distortion.DistortionModelType model = 1;
inline void CameraInfo_Distortion::clear_model() {
  model_ = 0;
}
inline ::gz::msgs::CameraInfo_Distortion_DistortionModelType CameraInfo_Distortion::model() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraInfo.Distortion.model)
  return static_cast< ::gz::msgs::CameraInfo_Distortion_DistortionModelType >(model_);
}
inline void CameraInfo_Distortion::set_model(::gz::msgs::CameraInfo_Distortion_DistortionModelType value) {
  
  model_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraInfo.Distortion.model)
}

// repeated double k = 2;
inline int CameraInfo_Distortion::k_size() const {
  return k_.size();
}
inline void CameraInfo_Distortion::clear_k() {
  k_.Clear();
}
inline double CameraInfo_Distortion::k(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraInfo.Distortion.k)
  return k_.Get(index);
}
inline void CameraInfo_Distortion::set_k(int index, double value) {
  k_.Set(index, value);
  // @@protoc_insertion_point(field_set:gz.msgs.CameraInfo.Distortion.k)
}
inline void CameraInfo_Distortion::add_k(double value) {
  k_.Add(value);
  // @@protoc_insertion_point(field_add:gz.msgs.CameraInfo.Distortion.k)
}
inline const ::google::protobuf::RepeatedField< double >&
CameraInfo_Distortion::k() const {
  // @@protoc_insertion_point(field_list:gz.msgs.CameraInfo.Distortion.k)
  return k_;
}
inline ::google::protobuf::RepeatedField< double >*
CameraInfo_Distortion::mutable_k() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.CameraInfo.Distortion.k)
  return &k_;
}

// -------------------------------------------------------------------

// CameraInfo_Intrinsics

// repeated double k = 1;
inline int CameraInfo_Intrinsics::k_size() const {
  return k_.size();
}
inline void CameraInfo_Intrinsics::clear_k() {
  k_.Clear();
}
inline double CameraInfo_Intrinsics::k(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraInfo.Intrinsics.k)
  return k_.Get(index);
}
inline void CameraInfo_Intrinsics::set_k(int index, double value) {
  k_.Set(index, value);
  // @@protoc_insertion_point(field_set:gz.msgs.CameraInfo.Intrinsics.k)
}
inline void CameraInfo_Intrinsics::add_k(double value) {
  k_.Add(value);
  // @@protoc_insertion_point(field_add:gz.msgs.CameraInfo.Intrinsics.k)
}
inline const ::google::protobuf::RepeatedField< double >&
CameraInfo_Intrinsics::k() const {
  // @@protoc_insertion_point(field_list:gz.msgs.CameraInfo.Intrinsics.k)
  return k_;
}
inline ::google::protobuf::RepeatedField< double >*
CameraInfo_Intrinsics::mutable_k() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.CameraInfo.Intrinsics.k)
  return &k_;
}

// -------------------------------------------------------------------

// CameraInfo_Projection

// repeated double p = 1;
inline int CameraInfo_Projection::p_size() const {
  return p_.size();
}
inline void CameraInfo_Projection::clear_p() {
  p_.Clear();
}
inline double CameraInfo_Projection::p(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraInfo.Projection.p)
  return p_.Get(index);
}
inline void CameraInfo_Projection::set_p(int index, double value) {
  p_.Set(index, value);
  // @@protoc_insertion_point(field_set:gz.msgs.CameraInfo.Projection.p)
}
inline void CameraInfo_Projection::add_p(double value) {
  p_.Add(value);
  // @@protoc_insertion_point(field_add:gz.msgs.CameraInfo.Projection.p)
}
inline const ::google::protobuf::RepeatedField< double >&
CameraInfo_Projection::p() const {
  // @@protoc_insertion_point(field_list:gz.msgs.CameraInfo.Projection.p)
  return p_;
}
inline ::google::protobuf::RepeatedField< double >*
CameraInfo_Projection::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.CameraInfo.Projection.p)
  return &p_;
}

// -------------------------------------------------------------------

// CameraInfo

// .gz.msgs.Header header = 1;
inline bool CameraInfo::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& CameraInfo::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& CameraInfo::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.CameraInfo.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* CameraInfo::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.CameraInfo.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* CameraInfo::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.CameraInfo.header)
  return header_;
}
inline void CameraInfo::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.CameraInfo.header)
}

// uint32 width = 2;
inline void CameraInfo::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 CameraInfo::width() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraInfo.width)
  return width_;
}
inline void CameraInfo::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraInfo.width)
}

// uint32 height = 3;
inline void CameraInfo::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 CameraInfo::height() const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraInfo.height)
  return height_;
}
inline void CameraInfo::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.CameraInfo.height)
}

// .gz.msgs.CameraInfo.Distortion distortion = 4;
inline bool CameraInfo::has_distortion() const {
  return this != internal_default_instance() && distortion_ != NULL;
}
inline void CameraInfo::clear_distortion() {
  if (GetArenaNoVirtual() == NULL && distortion_ != NULL) {
    delete distortion_;
  }
  distortion_ = NULL;
}
inline const ::gz::msgs::CameraInfo_Distortion& CameraInfo::_internal_distortion() const {
  return *distortion_;
}
inline const ::gz::msgs::CameraInfo_Distortion& CameraInfo::distortion() const {
  const ::gz::msgs::CameraInfo_Distortion* p = distortion_;
  // @@protoc_insertion_point(field_get:gz.msgs.CameraInfo.distortion)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::CameraInfo_Distortion*>(
      &::gz::msgs::_CameraInfo_Distortion_default_instance_);
}
inline ::gz::msgs::CameraInfo_Distortion* CameraInfo::release_distortion() {
  // @@protoc_insertion_point(field_release:gz.msgs.CameraInfo.distortion)
  
  ::gz::msgs::CameraInfo_Distortion* temp = distortion_;
  distortion_ = NULL;
  return temp;
}
inline ::gz::msgs::CameraInfo_Distortion* CameraInfo::mutable_distortion() {
  
  if (distortion_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::CameraInfo_Distortion>(GetArenaNoVirtual());
    distortion_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.CameraInfo.distortion)
  return distortion_;
}
inline void CameraInfo::set_allocated_distortion(::gz::msgs::CameraInfo_Distortion* distortion) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete distortion_;
  }
  if (distortion) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      distortion = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, distortion, submessage_arena);
    }
    
  } else {
    
  }
  distortion_ = distortion;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.CameraInfo.distortion)
}

// .gz.msgs.CameraInfo.Intrinsics intrinsics = 5;
inline bool CameraInfo::has_intrinsics() const {
  return this != internal_default_instance() && intrinsics_ != NULL;
}
inline void CameraInfo::clear_intrinsics() {
  if (GetArenaNoVirtual() == NULL && intrinsics_ != NULL) {
    delete intrinsics_;
  }
  intrinsics_ = NULL;
}
inline const ::gz::msgs::CameraInfo_Intrinsics& CameraInfo::_internal_intrinsics() const {
  return *intrinsics_;
}
inline const ::gz::msgs::CameraInfo_Intrinsics& CameraInfo::intrinsics() const {
  const ::gz::msgs::CameraInfo_Intrinsics* p = intrinsics_;
  // @@protoc_insertion_point(field_get:gz.msgs.CameraInfo.intrinsics)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::CameraInfo_Intrinsics*>(
      &::gz::msgs::_CameraInfo_Intrinsics_default_instance_);
}
inline ::gz::msgs::CameraInfo_Intrinsics* CameraInfo::release_intrinsics() {
  // @@protoc_insertion_point(field_release:gz.msgs.CameraInfo.intrinsics)
  
  ::gz::msgs::CameraInfo_Intrinsics* temp = intrinsics_;
  intrinsics_ = NULL;
  return temp;
}
inline ::gz::msgs::CameraInfo_Intrinsics* CameraInfo::mutable_intrinsics() {
  
  if (intrinsics_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::CameraInfo_Intrinsics>(GetArenaNoVirtual());
    intrinsics_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.CameraInfo.intrinsics)
  return intrinsics_;
}
inline void CameraInfo::set_allocated_intrinsics(::gz::msgs::CameraInfo_Intrinsics* intrinsics) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete intrinsics_;
  }
  if (intrinsics) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      intrinsics = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, intrinsics, submessage_arena);
    }
    
  } else {
    
  }
  intrinsics_ = intrinsics;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.CameraInfo.intrinsics)
}

// .gz.msgs.CameraInfo.Projection projection = 6;
inline bool CameraInfo::has_projection() const {
  return this != internal_default_instance() && projection_ != NULL;
}
inline void CameraInfo::clear_projection() {
  if (GetArenaNoVirtual() == NULL && projection_ != NULL) {
    delete projection_;
  }
  projection_ = NULL;
}
inline const ::gz::msgs::CameraInfo_Projection& CameraInfo::_internal_projection() const {
  return *projection_;
}
inline const ::gz::msgs::CameraInfo_Projection& CameraInfo::projection() const {
  const ::gz::msgs::CameraInfo_Projection* p = projection_;
  // @@protoc_insertion_point(field_get:gz.msgs.CameraInfo.projection)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::CameraInfo_Projection*>(
      &::gz::msgs::_CameraInfo_Projection_default_instance_);
}
inline ::gz::msgs::CameraInfo_Projection* CameraInfo::release_projection() {
  // @@protoc_insertion_point(field_release:gz.msgs.CameraInfo.projection)
  
  ::gz::msgs::CameraInfo_Projection* temp = projection_;
  projection_ = NULL;
  return temp;
}
inline ::gz::msgs::CameraInfo_Projection* CameraInfo::mutable_projection() {
  
  if (projection_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::CameraInfo_Projection>(GetArenaNoVirtual());
    projection_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.CameraInfo.projection)
  return projection_;
}
inline void CameraInfo::set_allocated_projection(::gz::msgs::CameraInfo_Projection* projection) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete projection_;
  }
  if (projection) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      projection = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, projection, submessage_arena);
    }
    
  } else {
    
  }
  projection_ = projection;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.CameraInfo.projection)
}

// repeated double rectification_matrix = 7 [packed = true];
inline int CameraInfo::rectification_matrix_size() const {
  return rectification_matrix_.size();
}
inline void CameraInfo::clear_rectification_matrix() {
  rectification_matrix_.Clear();
}
inline double CameraInfo::rectification_matrix(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.CameraInfo.rectification_matrix)
  return rectification_matrix_.Get(index);
}
inline void CameraInfo::set_rectification_matrix(int index, double value) {
  rectification_matrix_.Set(index, value);
  // @@protoc_insertion_point(field_set:gz.msgs.CameraInfo.rectification_matrix)
}
inline void CameraInfo::add_rectification_matrix(double value) {
  rectification_matrix_.Add(value);
  // @@protoc_insertion_point(field_add:gz.msgs.CameraInfo.rectification_matrix)
}
inline const ::google::protobuf::RepeatedField< double >&
CameraInfo::rectification_matrix() const {
  // @@protoc_insertion_point(field_list:gz.msgs.CameraInfo.rectification_matrix)
  return rectification_matrix_;
}
inline ::google::protobuf::RepeatedField< double >*
CameraInfo::mutable_rectification_matrix() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.CameraInfo.rectification_matrix)
  return &rectification_matrix_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::msgs::CameraInfo_Distortion_DistortionModelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::CameraInfo_Distortion_DistortionModelType>() {
  return ::gz::msgs::CameraInfo_Distortion_DistortionModelType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fcamera_5finfo_2eproto
