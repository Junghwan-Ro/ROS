// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/pointcloud_packed.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fpointcloud_5fpacked_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fpointcloud_5fpacked_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fpointcloud_5fpacked_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fpointcloud_5fpacked_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fpointcloud_5fpacked_2eproto
namespace gz {
namespace msgs {
class PointCloudPacked;
class PointCloudPackedDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern PointCloudPackedDefaultTypeInternal _PointCloudPacked_default_instance_;
class PointCloudPacked_Field;
class PointCloudPacked_FieldDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern PointCloudPacked_FieldDefaultTypeInternal _PointCloudPacked_Field_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::PointCloudPacked* Arena::CreateMaybeMessage<::gz::msgs::PointCloudPacked>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::PointCloudPacked_Field* Arena::CreateMaybeMessage<::gz::msgs::PointCloudPacked_Field>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

enum PointCloudPacked_Field_DataType {
  PointCloudPacked_Field_DataType_INT8 = 0,
  PointCloudPacked_Field_DataType_UINT8 = 1,
  PointCloudPacked_Field_DataType_INT16 = 2,
  PointCloudPacked_Field_DataType_UINT16 = 3,
  PointCloudPacked_Field_DataType_INT32 = 4,
  PointCloudPacked_Field_DataType_UINT32 = 5,
  PointCloudPacked_Field_DataType_FLOAT32 = 6,
  PointCloudPacked_Field_DataType_FLOAT64 = 7,
  PointCloudPacked_Field_DataType_PointCloudPacked_Field_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PointCloudPacked_Field_DataType_PointCloudPacked_Field_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool PointCloudPacked_Field_DataType_IsValid(int value);
const PointCloudPacked_Field_DataType PointCloudPacked_Field_DataType_DataType_MIN = PointCloudPacked_Field_DataType_INT8;
const PointCloudPacked_Field_DataType PointCloudPacked_Field_DataType_DataType_MAX = PointCloudPacked_Field_DataType_FLOAT64;
const int PointCloudPacked_Field_DataType_DataType_ARRAYSIZE = PointCloudPacked_Field_DataType_DataType_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* PointCloudPacked_Field_DataType_descriptor();
inline const ::std::string& PointCloudPacked_Field_DataType_Name(PointCloudPacked_Field_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PointCloudPacked_Field_DataType_descriptor(), value);
}
inline bool PointCloudPacked_Field_DataType_Parse(
    const ::std::string& name, PointCloudPacked_Field_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PointCloudPacked_Field_DataType>(
    PointCloudPacked_Field_DataType_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE PointCloudPacked_Field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.PointCloudPacked.Field) */ {
 public:
  PointCloudPacked_Field();
  virtual ~PointCloudPacked_Field();

  PointCloudPacked_Field(const PointCloudPacked_Field& from);

  inline PointCloudPacked_Field& operator=(const PointCloudPacked_Field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PointCloudPacked_Field(PointCloudPacked_Field&& from) noexcept
    : PointCloudPacked_Field() {
    *this = ::std::move(from);
  }

  inline PointCloudPacked_Field& operator=(PointCloudPacked_Field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PointCloudPacked_Field& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointCloudPacked_Field* internal_default_instance() {
    return reinterpret_cast<const PointCloudPacked_Field*>(
               &_PointCloudPacked_Field_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PointCloudPacked_Field* other);
  friend void swap(PointCloudPacked_Field& a, PointCloudPacked_Field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PointCloudPacked_Field* New() const final {
    return CreateMaybeMessage<PointCloudPacked_Field>(NULL);
  }

  PointCloudPacked_Field* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PointCloudPacked_Field>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PointCloudPacked_Field& from);
  void MergeFrom(const PointCloudPacked_Field& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloudPacked_Field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PointCloudPacked_Field_DataType DataType;
  static const DataType INT8 =
    PointCloudPacked_Field_DataType_INT8;
  static const DataType UINT8 =
    PointCloudPacked_Field_DataType_UINT8;
  static const DataType INT16 =
    PointCloudPacked_Field_DataType_INT16;
  static const DataType UINT16 =
    PointCloudPacked_Field_DataType_UINT16;
  static const DataType INT32 =
    PointCloudPacked_Field_DataType_INT32;
  static const DataType UINT32 =
    PointCloudPacked_Field_DataType_UINT32;
  static const DataType FLOAT32 =
    PointCloudPacked_Field_DataType_FLOAT32;
  static const DataType FLOAT64 =
    PointCloudPacked_Field_DataType_FLOAT64;
  static inline bool DataType_IsValid(int value) {
    return PointCloudPacked_Field_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    PointCloudPacked_Field_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    PointCloudPacked_Field_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    PointCloudPacked_Field_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return PointCloudPacked_Field_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return PointCloudPacked_Field_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return PointCloudPacked_Field_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 offset = 2;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // .gz.msgs.PointCloudPacked.Field.DataType datatype = 3;
  void clear_datatype();
  static const int kDatatypeFieldNumber = 3;
  ::gz::msgs::PointCloudPacked_Field_DataType datatype() const;
  void set_datatype(::gz::msgs::PointCloudPacked_Field_DataType value);

  // uint32 count = 4;
  void clear_count();
  static const int kCountFieldNumber = 4;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gz.msgs.PointCloudPacked.Field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 offset_;
  int datatype_;
  ::google::protobuf::uint32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fpointcloud_5fpacked_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE PointCloudPacked : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.PointCloudPacked) */ {
 public:
  PointCloudPacked();
  virtual ~PointCloudPacked();

  PointCloudPacked(const PointCloudPacked& from);

  inline PointCloudPacked& operator=(const PointCloudPacked& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PointCloudPacked(PointCloudPacked&& from) noexcept
    : PointCloudPacked() {
    *this = ::std::move(from);
  }

  inline PointCloudPacked& operator=(PointCloudPacked&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PointCloudPacked& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointCloudPacked* internal_default_instance() {
    return reinterpret_cast<const PointCloudPacked*>(
               &_PointCloudPacked_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PointCloudPacked* other);
  friend void swap(PointCloudPacked& a, PointCloudPacked& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PointCloudPacked* New() const final {
    return CreateMaybeMessage<PointCloudPacked>(NULL);
  }

  PointCloudPacked* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PointCloudPacked>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PointCloudPacked& from);
  void MergeFrom(const PointCloudPacked& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloudPacked* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PointCloudPacked_Field Field;

  // accessors -------------------------------------------------------

  // repeated .gz.msgs.PointCloudPacked.Field field = 2;
  int field_size() const;
  void clear_field();
  static const int kFieldFieldNumber = 2;
  ::gz::msgs::PointCloudPacked_Field* mutable_field(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::PointCloudPacked_Field >*
      mutable_field();
  const ::gz::msgs::PointCloudPacked_Field& field(int index) const;
  ::gz::msgs::PointCloudPacked_Field* add_field();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::PointCloudPacked_Field >&
      field() const;

  // bytes data = 8;
  void clear_data();
  static const int kDataFieldNumber = 8;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // uint32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // uint32 width = 4;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 point_step = 6;
  void clear_point_step();
  static const int kPointStepFieldNumber = 6;
  ::google::protobuf::uint32 point_step() const;
  void set_point_step(::google::protobuf::uint32 value);

  // uint32 row_step = 7;
  void clear_row_step();
  static const int kRowStepFieldNumber = 7;
  ::google::protobuf::uint32 row_step() const;
  void set_row_step(::google::protobuf::uint32 value);

  // bool is_bigendian = 5;
  void clear_is_bigendian();
  static const int kIsBigendianFieldNumber = 5;
  bool is_bigendian() const;
  void set_is_bigendian(bool value);

  // bool is_dense = 9;
  void clear_is_dense();
  static const int kIsDenseFieldNumber = 9;
  bool is_dense() const;
  void set_is_dense(bool value);

  // @@protoc_insertion_point(class_scope:gz.msgs.PointCloudPacked)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::PointCloudPacked_Field > field_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::gz::msgs::Header* header_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 point_step_;
  ::google::protobuf::uint32 row_step_;
  bool is_bigendian_;
  bool is_dense_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fpointcloud_5fpacked_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PointCloudPacked_Field

// string name = 1;
inline void PointCloudPacked_Field::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PointCloudPacked_Field::name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.PointCloudPacked.Field.name)
  return name_.GetNoArena();
}
inline void PointCloudPacked_Field::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.PointCloudPacked.Field.name)
}
#if LANG_CXX11
inline void PointCloudPacked_Field::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.PointCloudPacked.Field.name)
}
#endif
inline void PointCloudPacked_Field::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.PointCloudPacked.Field.name)
}
inline void PointCloudPacked_Field::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.PointCloudPacked.Field.name)
}
inline ::std::string* PointCloudPacked_Field::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.PointCloudPacked.Field.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PointCloudPacked_Field::release_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.PointCloudPacked.Field.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PointCloudPacked_Field::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.PointCloudPacked.Field.name)
}

// uint32 offset = 2;
inline void PointCloudPacked_Field::clear_offset() {
  offset_ = 0u;
}
inline ::google::protobuf::uint32 PointCloudPacked_Field::offset() const {
  // @@protoc_insertion_point(field_get:gz.msgs.PointCloudPacked.Field.offset)
  return offset_;
}
inline void PointCloudPacked_Field::set_offset(::google::protobuf::uint32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.PointCloudPacked.Field.offset)
}

// .gz.msgs.PointCloudPacked.Field.DataType datatype = 3;
inline void PointCloudPacked_Field::clear_datatype() {
  datatype_ = 0;
}
inline ::gz::msgs::PointCloudPacked_Field_DataType PointCloudPacked_Field::datatype() const {
  // @@protoc_insertion_point(field_get:gz.msgs.PointCloudPacked.Field.datatype)
  return static_cast< ::gz::msgs::PointCloudPacked_Field_DataType >(datatype_);
}
inline void PointCloudPacked_Field::set_datatype(::gz::msgs::PointCloudPacked_Field_DataType value) {
  
  datatype_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.PointCloudPacked.Field.datatype)
}

// uint32 count = 4;
inline void PointCloudPacked_Field::clear_count() {
  count_ = 0u;
}
inline ::google::protobuf::uint32 PointCloudPacked_Field::count() const {
  // @@protoc_insertion_point(field_get:gz.msgs.PointCloudPacked.Field.count)
  return count_;
}
inline void PointCloudPacked_Field::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.PointCloudPacked.Field.count)
}

// -------------------------------------------------------------------

// PointCloudPacked

// .gz.msgs.Header header = 1;
inline bool PointCloudPacked::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& PointCloudPacked::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& PointCloudPacked::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.PointCloudPacked.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* PointCloudPacked::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.PointCloudPacked.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* PointCloudPacked::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.PointCloudPacked.header)
  return header_;
}
inline void PointCloudPacked::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.PointCloudPacked.header)
}

// repeated .gz.msgs.PointCloudPacked.Field field = 2;
inline int PointCloudPacked::field_size() const {
  return field_.size();
}
inline void PointCloudPacked::clear_field() {
  field_.Clear();
}
inline ::gz::msgs::PointCloudPacked_Field* PointCloudPacked::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.PointCloudPacked.field)
  return field_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::PointCloudPacked_Field >*
PointCloudPacked::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.PointCloudPacked.field)
  return &field_;
}
inline const ::gz::msgs::PointCloudPacked_Field& PointCloudPacked::field(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.PointCloudPacked.field)
  return field_.Get(index);
}
inline ::gz::msgs::PointCloudPacked_Field* PointCloudPacked::add_field() {
  // @@protoc_insertion_point(field_add:gz.msgs.PointCloudPacked.field)
  return field_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::PointCloudPacked_Field >&
PointCloudPacked::field() const {
  // @@protoc_insertion_point(field_list:gz.msgs.PointCloudPacked.field)
  return field_;
}

// uint32 height = 3;
inline void PointCloudPacked::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 PointCloudPacked::height() const {
  // @@protoc_insertion_point(field_get:gz.msgs.PointCloudPacked.height)
  return height_;
}
inline void PointCloudPacked::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.PointCloudPacked.height)
}

// uint32 width = 4;
inline void PointCloudPacked::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 PointCloudPacked::width() const {
  // @@protoc_insertion_point(field_get:gz.msgs.PointCloudPacked.width)
  return width_;
}
inline void PointCloudPacked::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.PointCloudPacked.width)
}

// bool is_bigendian = 5;
inline void PointCloudPacked::clear_is_bigendian() {
  is_bigendian_ = false;
}
inline bool PointCloudPacked::is_bigendian() const {
  // @@protoc_insertion_point(field_get:gz.msgs.PointCloudPacked.is_bigendian)
  return is_bigendian_;
}
inline void PointCloudPacked::set_is_bigendian(bool value) {
  
  is_bigendian_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.PointCloudPacked.is_bigendian)
}

// uint32 point_step = 6;
inline void PointCloudPacked::clear_point_step() {
  point_step_ = 0u;
}
inline ::google::protobuf::uint32 PointCloudPacked::point_step() const {
  // @@protoc_insertion_point(field_get:gz.msgs.PointCloudPacked.point_step)
  return point_step_;
}
inline void PointCloudPacked::set_point_step(::google::protobuf::uint32 value) {
  
  point_step_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.PointCloudPacked.point_step)
}

// uint32 row_step = 7;
inline void PointCloudPacked::clear_row_step() {
  row_step_ = 0u;
}
inline ::google::protobuf::uint32 PointCloudPacked::row_step() const {
  // @@protoc_insertion_point(field_get:gz.msgs.PointCloudPacked.row_step)
  return row_step_;
}
inline void PointCloudPacked::set_row_step(::google::protobuf::uint32 value) {
  
  row_step_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.PointCloudPacked.row_step)
}

// bytes data = 8;
inline void PointCloudPacked::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PointCloudPacked::data() const {
  // @@protoc_insertion_point(field_get:gz.msgs.PointCloudPacked.data)
  return data_.GetNoArena();
}
inline void PointCloudPacked::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.PointCloudPacked.data)
}
#if LANG_CXX11
inline void PointCloudPacked::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.PointCloudPacked.data)
}
#endif
inline void PointCloudPacked::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.PointCloudPacked.data)
}
inline void PointCloudPacked::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.PointCloudPacked.data)
}
inline ::std::string* PointCloudPacked::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.PointCloudPacked.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PointCloudPacked::release_data() {
  // @@protoc_insertion_point(field_release:gz.msgs.PointCloudPacked.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PointCloudPacked::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.PointCloudPacked.data)
}

// bool is_dense = 9;
inline void PointCloudPacked::clear_is_dense() {
  is_dense_ = false;
}
inline bool PointCloudPacked::is_dense() const {
  // @@protoc_insertion_point(field_get:gz.msgs.PointCloudPacked.is_dense)
  return is_dense_;
}
inline void PointCloudPacked::set_is_dense(bool value) {
  
  is_dense_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.PointCloudPacked.is_dense)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::msgs::PointCloudPacked_Field_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::PointCloudPacked_Field_DataType>() {
  return ::gz::msgs::PointCloudPacked_Field_DataType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fpointcloud_5fpacked_2eproto
