// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/light.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2flight_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2flight_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/header.pb.h"
#include "gz/msgs/pose.pb.h"
#include "gz/msgs/vector3d.pb.h"
#include "gz/msgs/color.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2flight_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2flight_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2flight_2eproto
namespace gz {
namespace msgs {
class Light;
class LightDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern LightDefaultTypeInternal _Light_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Light* Arena::CreateMaybeMessage<::gz::msgs::Light>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

enum Light_LightType {
  Light_LightType_POINT = 0,
  Light_LightType_SPOT = 1,
  Light_LightType_DIRECTIONAL = 2,
  Light_LightType_Light_LightType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Light_LightType_Light_LightType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool Light_LightType_IsValid(int value);
const Light_LightType Light_LightType_LightType_MIN = Light_LightType_POINT;
const Light_LightType Light_LightType_LightType_MAX = Light_LightType_DIRECTIONAL;
const int Light_LightType_LightType_ARRAYSIZE = Light_LightType_LightType_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* Light_LightType_descriptor();
inline const ::std::string& Light_LightType_Name(Light_LightType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Light_LightType_descriptor(), value);
}
inline bool Light_LightType_Parse(
    const ::std::string& name, Light_LightType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Light_LightType>(
    Light_LightType_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE Light : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Light) */ {
 public:
  Light();
  virtual ~Light();

  Light(const Light& from);

  inline Light& operator=(const Light& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Light(Light&& from) noexcept
    : Light() {
    *this = ::std::move(from);
  }

  inline Light& operator=(Light&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Light& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Light* internal_default_instance() {
    return reinterpret_cast<const Light*>(
               &_Light_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Light* other);
  friend void swap(Light& a, Light& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Light* New() const final {
    return CreateMaybeMessage<Light>(NULL);
  }

  Light* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Light>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Light& from);
  void MergeFrom(const Light& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Light* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Light_LightType LightType;
  static const LightType POINT =
    Light_LightType_POINT;
  static const LightType SPOT =
    Light_LightType_SPOT;
  static const LightType DIRECTIONAL =
    Light_LightType_DIRECTIONAL;
  static inline bool LightType_IsValid(int value) {
    return Light_LightType_IsValid(value);
  }
  static const LightType LightType_MIN =
    Light_LightType_LightType_MIN;
  static const LightType LightType_MAX =
    Light_LightType_LightType_MAX;
  static const int LightType_ARRAYSIZE =
    Light_LightType_LightType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LightType_descriptor() {
    return Light_LightType_descriptor();
  }
  static inline const ::std::string& LightType_Name(LightType value) {
    return Light_LightType_Name(value);
  }
  static inline bool LightType_Parse(const ::std::string& name,
      LightType* value) {
    return Light_LightType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Pose pose = 4;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 4;
  private:
  const ::gz::msgs::Pose& _internal_pose() const;
  public:
  const ::gz::msgs::Pose& pose() const;
  ::gz::msgs::Pose* release_pose();
  ::gz::msgs::Pose* mutable_pose();
  void set_allocated_pose(::gz::msgs::Pose* pose);

  // .gz.msgs.Color diffuse = 5;
  bool has_diffuse() const;
  void clear_diffuse();
  static const int kDiffuseFieldNumber = 5;
  private:
  const ::gz::msgs::Color& _internal_diffuse() const;
  public:
  const ::gz::msgs::Color& diffuse() const;
  ::gz::msgs::Color* release_diffuse();
  ::gz::msgs::Color* mutable_diffuse();
  void set_allocated_diffuse(::gz::msgs::Color* diffuse);

  // .gz.msgs.Color specular = 6;
  bool has_specular() const;
  void clear_specular();
  static const int kSpecularFieldNumber = 6;
  private:
  const ::gz::msgs::Color& _internal_specular() const;
  public:
  const ::gz::msgs::Color& specular() const;
  ::gz::msgs::Color* release_specular();
  ::gz::msgs::Color* mutable_specular();
  void set_allocated_specular(::gz::msgs::Color* specular);

  // .gz.msgs.Vector3d direction = 10;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 10;
  private:
  const ::gz::msgs::Vector3d& _internal_direction() const;
  public:
  const ::gz::msgs::Vector3d& direction() const;
  ::gz::msgs::Vector3d* release_direction();
  ::gz::msgs::Vector3d* mutable_direction();
  void set_allocated_direction(::gz::msgs::Vector3d* direction);

  // .gz.msgs.Light.LightType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::gz::msgs::Light_LightType type() const;
  void set_type(::gz::msgs::Light_LightType value);

  // float attenuation_constant = 7;
  void clear_attenuation_constant();
  static const int kAttenuationConstantFieldNumber = 7;
  float attenuation_constant() const;
  void set_attenuation_constant(float value);

  // float attenuation_linear = 8;
  void clear_attenuation_linear();
  static const int kAttenuationLinearFieldNumber = 8;
  float attenuation_linear() const;
  void set_attenuation_linear(float value);

  // float attenuation_quadratic = 9;
  void clear_attenuation_quadratic();
  static const int kAttenuationQuadraticFieldNumber = 9;
  float attenuation_quadratic() const;
  void set_attenuation_quadratic(float value);

  // float range = 11;
  void clear_range();
  static const int kRangeFieldNumber = 11;
  float range() const;
  void set_range(float value);

  // float spot_inner_angle = 13;
  void clear_spot_inner_angle();
  static const int kSpotInnerAngleFieldNumber = 13;
  float spot_inner_angle() const;
  void set_spot_inner_angle(float value);

  // float spot_outer_angle = 14;
  void clear_spot_outer_angle();
  static const int kSpotOuterAngleFieldNumber = 14;
  float spot_outer_angle() const;
  void set_spot_outer_angle(float value);

  // float spot_falloff = 15;
  void clear_spot_falloff();
  static const int kSpotFalloffFieldNumber = 15;
  float spot_falloff() const;
  void set_spot_falloff(float value);

  // uint32 id = 16;
  void clear_id();
  static const int kIdFieldNumber = 16;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 parent_id = 17;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 17;
  ::google::protobuf::uint32 parent_id() const;
  void set_parent_id(::google::protobuf::uint32 value);

  // bool cast_shadows = 12;
  void clear_cast_shadows();
  static const int kCastShadowsFieldNumber = 12;
  bool cast_shadows() const;
  void set_cast_shadows(bool value);

  // bool is_light_off = 19;
  void clear_is_light_off();
  static const int kIsLightOffFieldNumber = 19;
  bool is_light_off() const;
  void set_is_light_off(bool value);

  // bool visualize_visual = 20;
  void clear_visualize_visual();
  static const int kVisualizeVisualFieldNumber = 20;
  bool visualize_visual() const;
  void set_visualize_visual(bool value);

  // float intensity = 18;
  void clear_intensity();
  static const int kIntensityFieldNumber = 18;
  float intensity() const;
  void set_intensity(float value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Light)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Pose* pose_;
  ::gz::msgs::Color* diffuse_;
  ::gz::msgs::Color* specular_;
  ::gz::msgs::Vector3d* direction_;
  int type_;
  float attenuation_constant_;
  float attenuation_linear_;
  float attenuation_quadratic_;
  float range_;
  float spot_inner_angle_;
  float spot_outer_angle_;
  float spot_falloff_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 parent_id_;
  bool cast_shadows_;
  bool is_light_off_;
  bool visualize_visual_;
  float intensity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2flight_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Light

// .gz.msgs.Header header = 1;
inline bool Light::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& Light::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& Light::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.Light.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* Light::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.Light.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* Light::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Light.header)
  return header_;
}
inline void Light::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Light.header)
}

// string name = 2;
inline void Light::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Light::name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Light.name)
  return name_.GetNoArena();
}
inline void Light::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Light.name)
}
#if LANG_CXX11
inline void Light::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Light.name)
}
#endif
inline void Light::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Light.name)
}
inline void Light::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Light.name)
}
inline ::std::string* Light::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Light.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Light::release_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.Light.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Light::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Light.name)
}

// .gz.msgs.Light.LightType type = 3;
inline void Light::clear_type() {
  type_ = 0;
}
inline ::gz::msgs::Light_LightType Light::type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Light.type)
  return static_cast< ::gz::msgs::Light_LightType >(type_);
}
inline void Light::set_type(::gz::msgs::Light_LightType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Light.type)
}

// .gz.msgs.Pose pose = 4;
inline bool Light::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::gz::msgs::Pose& Light::_internal_pose() const {
  return *pose_;
}
inline const ::gz::msgs::Pose& Light::pose() const {
  const ::gz::msgs::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:gz.msgs.Light.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Pose*>(
      &::gz::msgs::_Pose_default_instance_);
}
inline ::gz::msgs::Pose* Light::release_pose() {
  // @@protoc_insertion_point(field_release:gz.msgs.Light.pose)
  
  ::gz::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::gz::msgs::Pose* Light::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Light.pose)
  return pose_;
}
inline void Light::set_allocated_pose(::gz::msgs::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Light.pose)
}

// .gz.msgs.Color diffuse = 5;
inline bool Light::has_diffuse() const {
  return this != internal_default_instance() && diffuse_ != NULL;
}
inline const ::gz::msgs::Color& Light::_internal_diffuse() const {
  return *diffuse_;
}
inline const ::gz::msgs::Color& Light::diffuse() const {
  const ::gz::msgs::Color* p = diffuse_;
  // @@protoc_insertion_point(field_get:gz.msgs.Light.diffuse)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Color*>(
      &::gz::msgs::_Color_default_instance_);
}
inline ::gz::msgs::Color* Light::release_diffuse() {
  // @@protoc_insertion_point(field_release:gz.msgs.Light.diffuse)
  
  ::gz::msgs::Color* temp = diffuse_;
  diffuse_ = NULL;
  return temp;
}
inline ::gz::msgs::Color* Light::mutable_diffuse() {
  
  if (diffuse_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Color>(GetArenaNoVirtual());
    diffuse_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Light.diffuse)
  return diffuse_;
}
inline void Light::set_allocated_diffuse(::gz::msgs::Color* diffuse) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(diffuse_);
  }
  if (diffuse) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      diffuse = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, diffuse, submessage_arena);
    }
    
  } else {
    
  }
  diffuse_ = diffuse;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Light.diffuse)
}

// .gz.msgs.Color specular = 6;
inline bool Light::has_specular() const {
  return this != internal_default_instance() && specular_ != NULL;
}
inline const ::gz::msgs::Color& Light::_internal_specular() const {
  return *specular_;
}
inline const ::gz::msgs::Color& Light::specular() const {
  const ::gz::msgs::Color* p = specular_;
  // @@protoc_insertion_point(field_get:gz.msgs.Light.specular)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Color*>(
      &::gz::msgs::_Color_default_instance_);
}
inline ::gz::msgs::Color* Light::release_specular() {
  // @@protoc_insertion_point(field_release:gz.msgs.Light.specular)
  
  ::gz::msgs::Color* temp = specular_;
  specular_ = NULL;
  return temp;
}
inline ::gz::msgs::Color* Light::mutable_specular() {
  
  if (specular_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Color>(GetArenaNoVirtual());
    specular_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Light.specular)
  return specular_;
}
inline void Light::set_allocated_specular(::gz::msgs::Color* specular) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(specular_);
  }
  if (specular) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      specular = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, specular, submessage_arena);
    }
    
  } else {
    
  }
  specular_ = specular;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Light.specular)
}

// float attenuation_constant = 7;
inline void Light::clear_attenuation_constant() {
  attenuation_constant_ = 0;
}
inline float Light::attenuation_constant() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Light.attenuation_constant)
  return attenuation_constant_;
}
inline void Light::set_attenuation_constant(float value) {
  
  attenuation_constant_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Light.attenuation_constant)
}

// float attenuation_linear = 8;
inline void Light::clear_attenuation_linear() {
  attenuation_linear_ = 0;
}
inline float Light::attenuation_linear() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Light.attenuation_linear)
  return attenuation_linear_;
}
inline void Light::set_attenuation_linear(float value) {
  
  attenuation_linear_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Light.attenuation_linear)
}

// float attenuation_quadratic = 9;
inline void Light::clear_attenuation_quadratic() {
  attenuation_quadratic_ = 0;
}
inline float Light::attenuation_quadratic() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Light.attenuation_quadratic)
  return attenuation_quadratic_;
}
inline void Light::set_attenuation_quadratic(float value) {
  
  attenuation_quadratic_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Light.attenuation_quadratic)
}

// .gz.msgs.Vector3d direction = 10;
inline bool Light::has_direction() const {
  return this != internal_default_instance() && direction_ != NULL;
}
inline const ::gz::msgs::Vector3d& Light::_internal_direction() const {
  return *direction_;
}
inline const ::gz::msgs::Vector3d& Light::direction() const {
  const ::gz::msgs::Vector3d* p = direction_;
  // @@protoc_insertion_point(field_get:gz.msgs.Light.direction)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Vector3d*>(
      &::gz::msgs::_Vector3d_default_instance_);
}
inline ::gz::msgs::Vector3d* Light::release_direction() {
  // @@protoc_insertion_point(field_release:gz.msgs.Light.direction)
  
  ::gz::msgs::Vector3d* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline ::gz::msgs::Vector3d* Light::mutable_direction() {
  
  if (direction_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Vector3d>(GetArenaNoVirtual());
    direction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Light.direction)
  return direction_;
}
inline void Light::set_allocated_direction(::gz::msgs::Vector3d* direction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(direction_);
  }
  if (direction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      direction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Light.direction)
}

// float range = 11;
inline void Light::clear_range() {
  range_ = 0;
}
inline float Light::range() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Light.range)
  return range_;
}
inline void Light::set_range(float value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Light.range)
}

// bool cast_shadows = 12;
inline void Light::clear_cast_shadows() {
  cast_shadows_ = false;
}
inline bool Light::cast_shadows() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Light.cast_shadows)
  return cast_shadows_;
}
inline void Light::set_cast_shadows(bool value) {
  
  cast_shadows_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Light.cast_shadows)
}

// float spot_inner_angle = 13;
inline void Light::clear_spot_inner_angle() {
  spot_inner_angle_ = 0;
}
inline float Light::spot_inner_angle() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Light.spot_inner_angle)
  return spot_inner_angle_;
}
inline void Light::set_spot_inner_angle(float value) {
  
  spot_inner_angle_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Light.spot_inner_angle)
}

// float spot_outer_angle = 14;
inline void Light::clear_spot_outer_angle() {
  spot_outer_angle_ = 0;
}
inline float Light::spot_outer_angle() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Light.spot_outer_angle)
  return spot_outer_angle_;
}
inline void Light::set_spot_outer_angle(float value) {
  
  spot_outer_angle_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Light.spot_outer_angle)
}

// float spot_falloff = 15;
inline void Light::clear_spot_falloff() {
  spot_falloff_ = 0;
}
inline float Light::spot_falloff() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Light.spot_falloff)
  return spot_falloff_;
}
inline void Light::set_spot_falloff(float value) {
  
  spot_falloff_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Light.spot_falloff)
}

// uint32 id = 16;
inline void Light::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Light::id() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Light.id)
  return id_;
}
inline void Light::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Light.id)
}

// uint32 parent_id = 17;
inline void Light::clear_parent_id() {
  parent_id_ = 0u;
}
inline ::google::protobuf::uint32 Light::parent_id() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Light.parent_id)
  return parent_id_;
}
inline void Light::set_parent_id(::google::protobuf::uint32 value) {
  
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Light.parent_id)
}

// float intensity = 18;
inline void Light::clear_intensity() {
  intensity_ = 0;
}
inline float Light::intensity() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Light.intensity)
  return intensity_;
}
inline void Light::set_intensity(float value) {
  
  intensity_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Light.intensity)
}

// bool is_light_off = 19;
inline void Light::clear_is_light_off() {
  is_light_off_ = false;
}
inline bool Light::is_light_off() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Light.is_light_off)
  return is_light_off_;
}
inline void Light::set_is_light_off(bool value) {
  
  is_light_off_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Light.is_light_off)
}

// bool visualize_visual = 20;
inline void Light::clear_visualize_visual() {
  visualize_visual_ = false;
}
inline bool Light::visualize_visual() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Light.visualize_visual)
  return visualize_visual_;
}
inline void Light::set_visualize_visual(bool value) {
  
  visualize_visual_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Light.visualize_visual)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::msgs::Light_LightType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::Light_LightType>() {
  return ::gz::msgs::Light_LightType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2flight_2eproto
