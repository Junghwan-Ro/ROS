// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/scene.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fscene_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fscene_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/color.pb.h"
#include "gz/msgs/fog.pb.h"
#include "gz/msgs/sky.pb.h"
#include "gz/msgs/light.pb.h"
#include "gz/msgs/joint.pb.h"
#include "gz/msgs/material.pb.h"
#include "gz/msgs/model.pb.h"
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fscene_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fscene_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fscene_2eproto
namespace gz {
namespace msgs {
class Scene;
class SceneDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern SceneDefaultTypeInternal _Scene_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Scene* Arena::CreateMaybeMessage<::gz::msgs::Scene>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE Scene : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Scene) */ {
 public:
  Scene();
  virtual ~Scene();

  Scene(const Scene& from);

  inline Scene& operator=(const Scene& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Scene(Scene&& from) noexcept
    : Scene() {
    *this = ::std::move(from);
  }

  inline Scene& operator=(Scene&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Scene& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scene* internal_default_instance() {
    return reinterpret_cast<const Scene*>(
               &_Scene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Scene* other);
  friend void swap(Scene& a, Scene& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Scene* New() const final {
    return CreateMaybeMessage<Scene>(NULL);
  }

  Scene* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Scene>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Scene& from);
  void MergeFrom(const Scene& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gz.msgs.Model model = 9;
  int model_size() const;
  void clear_model();
  static const int kModelFieldNumber = 9;
  ::gz::msgs::Model* mutable_model(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Model >*
      mutable_model();
  const ::gz::msgs::Model& model(int index) const;
  ::gz::msgs::Model* add_model();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Model >&
      model() const;

  // repeated .gz.msgs.Light light = 10;
  int light_size() const;
  void clear_light();
  static const int kLightFieldNumber = 10;
  ::gz::msgs::Light* mutable_light(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Light >*
      mutable_light();
  const ::gz::msgs::Light& light(int index) const;
  ::gz::msgs::Light* add_light();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Light >&
      light() const;

  // repeated .gz.msgs.Joint joint = 11;
  int joint_size() const;
  void clear_joint();
  static const int kJointFieldNumber = 11;
  ::gz::msgs::Joint* mutable_joint(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Joint >*
      mutable_joint();
  const ::gz::msgs::Joint& joint(int index) const;
  ::gz::msgs::Joint* add_joint();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Joint >&
      joint() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Color ambient = 3;
  bool has_ambient() const;
  void clear_ambient();
  static const int kAmbientFieldNumber = 3;
  private:
  const ::gz::msgs::Color& _internal_ambient() const;
  public:
  const ::gz::msgs::Color& ambient() const;
  ::gz::msgs::Color* release_ambient();
  ::gz::msgs::Color* mutable_ambient();
  void set_allocated_ambient(::gz::msgs::Color* ambient);

  // .gz.msgs.Color background = 4;
  bool has_background() const;
  void clear_background();
  static const int kBackgroundFieldNumber = 4;
  private:
  const ::gz::msgs::Color& _internal_background() const;
  public:
  const ::gz::msgs::Color& background() const;
  ::gz::msgs::Color* release_background();
  ::gz::msgs::Color* mutable_background();
  void set_allocated_background(::gz::msgs::Color* background);

  // .gz.msgs.Sky sky = 5;
  bool has_sky() const;
  void clear_sky();
  static const int kSkyFieldNumber = 5;
  private:
  const ::gz::msgs::Sky& _internal_sky() const;
  public:
  const ::gz::msgs::Sky& sky() const;
  ::gz::msgs::Sky* release_sky();
  ::gz::msgs::Sky* mutable_sky();
  void set_allocated_sky(::gz::msgs::Sky* sky);

  // .gz.msgs.Fog fog = 7;
  bool has_fog() const;
  void clear_fog();
  static const int kFogFieldNumber = 7;
  private:
  const ::gz::msgs::Fog& _internal_fog() const;
  public:
  const ::gz::msgs::Fog& fog() const;
  ::gz::msgs::Fog* release_fog();
  ::gz::msgs::Fog* mutable_fog();
  void set_allocated_fog(::gz::msgs::Fog* fog);

  // .gz.msgs.Material.Script shadow_caster_material_script = 13;
  bool has_shadow_caster_material_script() const;
  void clear_shadow_caster_material_script();
  static const int kShadowCasterMaterialScriptFieldNumber = 13;
  private:
  const ::gz::msgs::Material_Script& _internal_shadow_caster_material_script() const;
  public:
  const ::gz::msgs::Material_Script& shadow_caster_material_script() const;
  ::gz::msgs::Material_Script* release_shadow_caster_material_script();
  ::gz::msgs::Material_Script* mutable_shadow_caster_material_script();
  void set_allocated_shadow_caster_material_script(::gz::msgs::Material_Script* shadow_caster_material_script);

  // bool shadows = 6;
  void clear_shadows();
  static const int kShadowsFieldNumber = 6;
  bool shadows() const;
  void set_shadows(bool value);

  // bool grid = 8;
  void clear_grid();
  static const int kGridFieldNumber = 8;
  bool grid() const;
  void set_grid(bool value);

  // bool origin_visual = 12;
  void clear_origin_visual();
  static const int kOriginVisualFieldNumber = 12;
  bool origin_visual() const;
  void set_origin_visual(bool value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Scene)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Model > model_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Light > light_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Joint > joint_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Color* ambient_;
  ::gz::msgs::Color* background_;
  ::gz::msgs::Sky* sky_;
  ::gz::msgs::Fog* fog_;
  ::gz::msgs::Material_Script* shadow_caster_material_script_;
  bool shadows_;
  bool grid_;
  bool origin_visual_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fscene_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Scene

// .gz.msgs.Header header = 1;
inline bool Scene::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& Scene::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& Scene::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.Scene.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* Scene::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.Scene.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* Scene::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Scene.header)
  return header_;
}
inline void Scene::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Scene.header)
}

// string name = 2;
inline void Scene::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Scene::name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Scene.name)
  return name_.GetNoArena();
}
inline void Scene::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Scene.name)
}
#if LANG_CXX11
inline void Scene::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Scene.name)
}
#endif
inline void Scene::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Scene.name)
}
inline void Scene::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Scene.name)
}
inline ::std::string* Scene::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Scene.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Scene::release_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.Scene.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Scene::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Scene.name)
}

// .gz.msgs.Color ambient = 3;
inline bool Scene::has_ambient() const {
  return this != internal_default_instance() && ambient_ != NULL;
}
inline const ::gz::msgs::Color& Scene::_internal_ambient() const {
  return *ambient_;
}
inline const ::gz::msgs::Color& Scene::ambient() const {
  const ::gz::msgs::Color* p = ambient_;
  // @@protoc_insertion_point(field_get:gz.msgs.Scene.ambient)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Color*>(
      &::gz::msgs::_Color_default_instance_);
}
inline ::gz::msgs::Color* Scene::release_ambient() {
  // @@protoc_insertion_point(field_release:gz.msgs.Scene.ambient)
  
  ::gz::msgs::Color* temp = ambient_;
  ambient_ = NULL;
  return temp;
}
inline ::gz::msgs::Color* Scene::mutable_ambient() {
  
  if (ambient_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Color>(GetArenaNoVirtual());
    ambient_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Scene.ambient)
  return ambient_;
}
inline void Scene::set_allocated_ambient(::gz::msgs::Color* ambient) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ambient_);
  }
  if (ambient) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ambient = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ambient, submessage_arena);
    }
    
  } else {
    
  }
  ambient_ = ambient;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Scene.ambient)
}

// .gz.msgs.Color background = 4;
inline bool Scene::has_background() const {
  return this != internal_default_instance() && background_ != NULL;
}
inline const ::gz::msgs::Color& Scene::_internal_background() const {
  return *background_;
}
inline const ::gz::msgs::Color& Scene::background() const {
  const ::gz::msgs::Color* p = background_;
  // @@protoc_insertion_point(field_get:gz.msgs.Scene.background)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Color*>(
      &::gz::msgs::_Color_default_instance_);
}
inline ::gz::msgs::Color* Scene::release_background() {
  // @@protoc_insertion_point(field_release:gz.msgs.Scene.background)
  
  ::gz::msgs::Color* temp = background_;
  background_ = NULL;
  return temp;
}
inline ::gz::msgs::Color* Scene::mutable_background() {
  
  if (background_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Color>(GetArenaNoVirtual());
    background_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Scene.background)
  return background_;
}
inline void Scene::set_allocated_background(::gz::msgs::Color* background) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(background_);
  }
  if (background) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      background = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, background, submessage_arena);
    }
    
  } else {
    
  }
  background_ = background;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Scene.background)
}

// .gz.msgs.Sky sky = 5;
inline bool Scene::has_sky() const {
  return this != internal_default_instance() && sky_ != NULL;
}
inline const ::gz::msgs::Sky& Scene::_internal_sky() const {
  return *sky_;
}
inline const ::gz::msgs::Sky& Scene::sky() const {
  const ::gz::msgs::Sky* p = sky_;
  // @@protoc_insertion_point(field_get:gz.msgs.Scene.sky)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Sky*>(
      &::gz::msgs::_Sky_default_instance_);
}
inline ::gz::msgs::Sky* Scene::release_sky() {
  // @@protoc_insertion_point(field_release:gz.msgs.Scene.sky)
  
  ::gz::msgs::Sky* temp = sky_;
  sky_ = NULL;
  return temp;
}
inline ::gz::msgs::Sky* Scene::mutable_sky() {
  
  if (sky_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Sky>(GetArenaNoVirtual());
    sky_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Scene.sky)
  return sky_;
}
inline void Scene::set_allocated_sky(::gz::msgs::Sky* sky) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sky_);
  }
  if (sky) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sky = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sky, submessage_arena);
    }
    
  } else {
    
  }
  sky_ = sky;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Scene.sky)
}

// bool shadows = 6;
inline void Scene::clear_shadows() {
  shadows_ = false;
}
inline bool Scene::shadows() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Scene.shadows)
  return shadows_;
}
inline void Scene::set_shadows(bool value) {
  
  shadows_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Scene.shadows)
}

// .gz.msgs.Fog fog = 7;
inline bool Scene::has_fog() const {
  return this != internal_default_instance() && fog_ != NULL;
}
inline const ::gz::msgs::Fog& Scene::_internal_fog() const {
  return *fog_;
}
inline const ::gz::msgs::Fog& Scene::fog() const {
  const ::gz::msgs::Fog* p = fog_;
  // @@protoc_insertion_point(field_get:gz.msgs.Scene.fog)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Fog*>(
      &::gz::msgs::_Fog_default_instance_);
}
inline ::gz::msgs::Fog* Scene::release_fog() {
  // @@protoc_insertion_point(field_release:gz.msgs.Scene.fog)
  
  ::gz::msgs::Fog* temp = fog_;
  fog_ = NULL;
  return temp;
}
inline ::gz::msgs::Fog* Scene::mutable_fog() {
  
  if (fog_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Fog>(GetArenaNoVirtual());
    fog_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Scene.fog)
  return fog_;
}
inline void Scene::set_allocated_fog(::gz::msgs::Fog* fog) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(fog_);
  }
  if (fog) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fog = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fog, submessage_arena);
    }
    
  } else {
    
  }
  fog_ = fog;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Scene.fog)
}

// bool grid = 8;
inline void Scene::clear_grid() {
  grid_ = false;
}
inline bool Scene::grid() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Scene.grid)
  return grid_;
}
inline void Scene::set_grid(bool value) {
  
  grid_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Scene.grid)
}

// repeated .gz.msgs.Model model = 9;
inline int Scene::model_size() const {
  return model_.size();
}
inline ::gz::msgs::Model* Scene::mutable_model(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.Scene.model)
  return model_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::Model >*
Scene::mutable_model() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.Scene.model)
  return &model_;
}
inline const ::gz::msgs::Model& Scene::model(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.Scene.model)
  return model_.Get(index);
}
inline ::gz::msgs::Model* Scene::add_model() {
  // @@protoc_insertion_point(field_add:gz.msgs.Scene.model)
  return model_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Model >&
Scene::model() const {
  // @@protoc_insertion_point(field_list:gz.msgs.Scene.model)
  return model_;
}

// repeated .gz.msgs.Light light = 10;
inline int Scene::light_size() const {
  return light_.size();
}
inline ::gz::msgs::Light* Scene::mutable_light(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.Scene.light)
  return light_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::Light >*
Scene::mutable_light() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.Scene.light)
  return &light_;
}
inline const ::gz::msgs::Light& Scene::light(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.Scene.light)
  return light_.Get(index);
}
inline ::gz::msgs::Light* Scene::add_light() {
  // @@protoc_insertion_point(field_add:gz.msgs.Scene.light)
  return light_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Light >&
Scene::light() const {
  // @@protoc_insertion_point(field_list:gz.msgs.Scene.light)
  return light_;
}

// repeated .gz.msgs.Joint joint = 11;
inline int Scene::joint_size() const {
  return joint_.size();
}
inline ::gz::msgs::Joint* Scene::mutable_joint(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.Scene.joint)
  return joint_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::Joint >*
Scene::mutable_joint() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.Scene.joint)
  return &joint_;
}
inline const ::gz::msgs::Joint& Scene::joint(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.Scene.joint)
  return joint_.Get(index);
}
inline ::gz::msgs::Joint* Scene::add_joint() {
  // @@protoc_insertion_point(field_add:gz.msgs.Scene.joint)
  return joint_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Joint >&
Scene::joint() const {
  // @@protoc_insertion_point(field_list:gz.msgs.Scene.joint)
  return joint_;
}

// bool origin_visual = 12;
inline void Scene::clear_origin_visual() {
  origin_visual_ = false;
}
inline bool Scene::origin_visual() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Scene.origin_visual)
  return origin_visual_;
}
inline void Scene::set_origin_visual(bool value) {
  
  origin_visual_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Scene.origin_visual)
}

// .gz.msgs.Material.Script shadow_caster_material_script = 13;
inline bool Scene::has_shadow_caster_material_script() const {
  return this != internal_default_instance() && shadow_caster_material_script_ != NULL;
}
inline const ::gz::msgs::Material_Script& Scene::_internal_shadow_caster_material_script() const {
  return *shadow_caster_material_script_;
}
inline const ::gz::msgs::Material_Script& Scene::shadow_caster_material_script() const {
  const ::gz::msgs::Material_Script* p = shadow_caster_material_script_;
  // @@protoc_insertion_point(field_get:gz.msgs.Scene.shadow_caster_material_script)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Material_Script*>(
      &::gz::msgs::_Material_Script_default_instance_);
}
inline ::gz::msgs::Material_Script* Scene::release_shadow_caster_material_script() {
  // @@protoc_insertion_point(field_release:gz.msgs.Scene.shadow_caster_material_script)
  
  ::gz::msgs::Material_Script* temp = shadow_caster_material_script_;
  shadow_caster_material_script_ = NULL;
  return temp;
}
inline ::gz::msgs::Material_Script* Scene::mutable_shadow_caster_material_script() {
  
  if (shadow_caster_material_script_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Material_Script>(GetArenaNoVirtual());
    shadow_caster_material_script_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Scene.shadow_caster_material_script)
  return shadow_caster_material_script_;
}
inline void Scene::set_allocated_shadow_caster_material_script(::gz::msgs::Material_Script* shadow_caster_material_script) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(shadow_caster_material_script_);
  }
  if (shadow_caster_material_script) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shadow_caster_material_script = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shadow_caster_material_script, submessage_arena);
    }
    
  } else {
    
  }
  shadow_caster_material_script_ = shadow_caster_material_script;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Scene.shadow_caster_material_script)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fscene_2eproto
