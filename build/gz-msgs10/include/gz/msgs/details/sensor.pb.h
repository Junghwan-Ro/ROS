// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/sensor.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fsensor_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fsensor_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/altimeter_sensor.pb.h"
#include "gz/msgs/camerasensor.pb.h"
#include "gz/msgs/contactsensor.pb.h"
#include "gz/msgs/air_pressure_sensor.pb.h"
#include "gz/msgs/gps_sensor.pb.h"
#include "gz/msgs/header.pb.h"
#include "gz/msgs/imu_sensor.pb.h"
#include "gz/msgs/lidar_sensor.pb.h"
#include "gz/msgs/logical_camera_sensor.pb.h"
#include "gz/msgs/magnetometer_sensor.pb.h"
#include "gz/msgs/pose.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fsensor_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fsensor_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fsensor_2eproto
namespace gz {
namespace msgs {
class Sensor;
class SensorDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern SensorDefaultTypeInternal _Sensor_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Sensor* Arena::CreateMaybeMessage<::gz::msgs::Sensor>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE Sensor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Sensor) */ {
 public:
  Sensor();
  virtual ~Sensor();

  Sensor(const Sensor& from);

  inline Sensor& operator=(const Sensor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Sensor(Sensor&& from) noexcept
    : Sensor() {
    *this = ::std::move(from);
  }

  inline Sensor& operator=(Sensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Sensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sensor* internal_default_instance() {
    return reinterpret_cast<const Sensor*>(
               &_Sensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Sensor* other);
  friend void swap(Sensor& a, Sensor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Sensor* New() const final {
    return CreateMaybeMessage<Sensor>(NULL);
  }

  Sensor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Sensor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Sensor& from);
  void MergeFrom(const Sensor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sensor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string parent = 4;
  void clear_parent();
  static const int kParentFieldNumber = 4;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string type = 6;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string topic = 13;
  void clear_topic();
  static const int kTopicFieldNumber = 13;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Pose pose = 9;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 9;
  private:
  const ::gz::msgs::Pose& _internal_pose() const;
  public:
  const ::gz::msgs::Pose& pose() const;
  ::gz::msgs::Pose* release_pose();
  ::gz::msgs::Pose* mutable_pose();
  void set_allocated_pose(::gz::msgs::Pose* pose);

  // .gz.msgs.CameraSensor camera = 10;
  bool has_camera() const;
  void clear_camera();
  static const int kCameraFieldNumber = 10;
  private:
  const ::gz::msgs::CameraSensor& _internal_camera() const;
  public:
  const ::gz::msgs::CameraSensor& camera() const;
  ::gz::msgs::CameraSensor* release_camera();
  ::gz::msgs::CameraSensor* mutable_camera();
  void set_allocated_camera(::gz::msgs::CameraSensor* camera);

  // .gz.msgs.ContactSensor contact = 11;
  bool has_contact() const;
  void clear_contact();
  static const int kContactFieldNumber = 11;
  private:
  const ::gz::msgs::ContactSensor& _internal_contact() const;
  public:
  const ::gz::msgs::ContactSensor& contact() const;
  ::gz::msgs::ContactSensor* release_contact();
  ::gz::msgs::ContactSensor* mutable_contact();
  void set_allocated_contact(::gz::msgs::ContactSensor* contact);

  // .gz.msgs.LogicalCameraSensor logical_camera = 14;
  bool has_logical_camera() const;
  void clear_logical_camera();
  static const int kLogicalCameraFieldNumber = 14;
  private:
  const ::gz::msgs::LogicalCameraSensor& _internal_logical_camera() const;
  public:
  const ::gz::msgs::LogicalCameraSensor& logical_camera() const;
  ::gz::msgs::LogicalCameraSensor* release_logical_camera();
  ::gz::msgs::LogicalCameraSensor* mutable_logical_camera();
  void set_allocated_logical_camera(::gz::msgs::LogicalCameraSensor* logical_camera);

  // .gz.msgs.GPSSensor gps = 15;
  bool has_gps() const;
  void clear_gps();
  static const int kGpsFieldNumber = 15;
  private:
  const ::gz::msgs::GPSSensor& _internal_gps() const;
  public:
  const ::gz::msgs::GPSSensor& gps() const;
  ::gz::msgs::GPSSensor* release_gps();
  ::gz::msgs::GPSSensor* mutable_gps();
  void set_allocated_gps(::gz::msgs::GPSSensor* gps);

  // .gz.msgs.IMUSensor imu = 16;
  bool has_imu() const;
  void clear_imu();
  static const int kImuFieldNumber = 16;
  private:
  const ::gz::msgs::IMUSensor& _internal_imu() const;
  public:
  const ::gz::msgs::IMUSensor& imu() const;
  ::gz::msgs::IMUSensor* release_imu();
  ::gz::msgs::IMUSensor* mutable_imu();
  void set_allocated_imu(::gz::msgs::IMUSensor* imu);

  // .gz.msgs.MagnetometerSensor magnetometer = 17;
  bool has_magnetometer() const;
  void clear_magnetometer();
  static const int kMagnetometerFieldNumber = 17;
  private:
  const ::gz::msgs::MagnetometerSensor& _internal_magnetometer() const;
  public:
  const ::gz::msgs::MagnetometerSensor& magnetometer() const;
  ::gz::msgs::MagnetometerSensor* release_magnetometer();
  ::gz::msgs::MagnetometerSensor* mutable_magnetometer();
  void set_allocated_magnetometer(::gz::msgs::MagnetometerSensor* magnetometer);

  // .gz.msgs.AltimeterSensor altimeter = 18;
  bool has_altimeter() const;
  void clear_altimeter();
  static const int kAltimeterFieldNumber = 18;
  private:
  const ::gz::msgs::AltimeterSensor& _internal_altimeter() const;
  public:
  const ::gz::msgs::AltimeterSensor& altimeter() const;
  ::gz::msgs::AltimeterSensor* release_altimeter();
  ::gz::msgs::AltimeterSensor* mutable_altimeter();
  void set_allocated_altimeter(::gz::msgs::AltimeterSensor* altimeter);

  // .gz.msgs.AirPressureSensor air_pressure = 19;
  bool has_air_pressure() const;
  void clear_air_pressure();
  static const int kAirPressureFieldNumber = 19;
  private:
  const ::gz::msgs::AirPressureSensor& _internal_air_pressure() const;
  public:
  const ::gz::msgs::AirPressureSensor& air_pressure() const;
  ::gz::msgs::AirPressureSensor* release_air_pressure();
  ::gz::msgs::AirPressureSensor* mutable_air_pressure();
  void set_allocated_air_pressure(::gz::msgs::AirPressureSensor* air_pressure);

  // .gz.msgs.LidarSensor lidar = 20;
  bool has_lidar() const;
  void clear_lidar();
  static const int kLidarFieldNumber = 20;
  private:
  const ::gz::msgs::LidarSensor& _internal_lidar() const;
  public:
  const ::gz::msgs::LidarSensor& lidar() const;
  ::gz::msgs::LidarSensor* release_lidar();
  ::gz::msgs::LidarSensor* mutable_lidar();
  void set_allocated_lidar(::gz::msgs::LidarSensor* lidar);

  // uint32 id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 parent_id = 5;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 5;
  ::google::protobuf::uint32 parent_id() const;
  void set_parent_id(::google::protobuf::uint32 value);

  // double update_rate = 8;
  void clear_update_rate();
  static const int kUpdateRateFieldNumber = 8;
  double update_rate() const;
  void set_update_rate(double value);

  // bool always_on = 7;
  void clear_always_on();
  static const int kAlwaysOnFieldNumber = 7;
  bool always_on() const;
  void set_always_on(bool value);

  // bool visualize = 12;
  void clear_visualize();
  static const int kVisualizeFieldNumber = 12;
  bool visualize() const;
  void set_visualize(bool value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Sensor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Pose* pose_;
  ::gz::msgs::CameraSensor* camera_;
  ::gz::msgs::ContactSensor* contact_;
  ::gz::msgs::LogicalCameraSensor* logical_camera_;
  ::gz::msgs::GPSSensor* gps_;
  ::gz::msgs::IMUSensor* imu_;
  ::gz::msgs::MagnetometerSensor* magnetometer_;
  ::gz::msgs::AltimeterSensor* altimeter_;
  ::gz::msgs::AirPressureSensor* air_pressure_;
  ::gz::msgs::LidarSensor* lidar_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 parent_id_;
  double update_rate_;
  bool always_on_;
  bool visualize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fsensor_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sensor

// .gz.msgs.Header header = 1;
inline bool Sensor::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& Sensor::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& Sensor::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.Sensor.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* Sensor::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.Sensor.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* Sensor::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Sensor.header)
  return header_;
}
inline void Sensor::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Sensor.header)
}

// string name = 2;
inline void Sensor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Sensor::name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Sensor.name)
  return name_.GetNoArena();
}
inline void Sensor::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Sensor.name)
}
#if LANG_CXX11
inline void Sensor::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Sensor.name)
}
#endif
inline void Sensor::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Sensor.name)
}
inline void Sensor::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Sensor.name)
}
inline ::std::string* Sensor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Sensor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sensor::release_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.Sensor.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sensor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Sensor.name)
}

// uint32 id = 3;
inline void Sensor::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Sensor::id() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Sensor.id)
  return id_;
}
inline void Sensor::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Sensor.id)
}

// string parent = 4;
inline void Sensor::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Sensor::parent() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Sensor.parent)
  return parent_.GetNoArena();
}
inline void Sensor::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Sensor.parent)
}
#if LANG_CXX11
inline void Sensor::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Sensor.parent)
}
#endif
inline void Sensor::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Sensor.parent)
}
inline void Sensor::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Sensor.parent)
}
inline ::std::string* Sensor::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Sensor.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sensor::release_parent() {
  // @@protoc_insertion_point(field_release:gz.msgs.Sensor.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sensor::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Sensor.parent)
}

// uint32 parent_id = 5;
inline void Sensor::clear_parent_id() {
  parent_id_ = 0u;
}
inline ::google::protobuf::uint32 Sensor::parent_id() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Sensor.parent_id)
  return parent_id_;
}
inline void Sensor::set_parent_id(::google::protobuf::uint32 value) {
  
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Sensor.parent_id)
}

// string type = 6;
inline void Sensor::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Sensor::type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Sensor.type)
  return type_.GetNoArena();
}
inline void Sensor::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Sensor.type)
}
#if LANG_CXX11
inline void Sensor::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Sensor.type)
}
#endif
inline void Sensor::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Sensor.type)
}
inline void Sensor::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Sensor.type)
}
inline ::std::string* Sensor::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Sensor.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sensor::release_type() {
  // @@protoc_insertion_point(field_release:gz.msgs.Sensor.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sensor::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Sensor.type)
}

// bool always_on = 7;
inline void Sensor::clear_always_on() {
  always_on_ = false;
}
inline bool Sensor::always_on() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Sensor.always_on)
  return always_on_;
}
inline void Sensor::set_always_on(bool value) {
  
  always_on_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Sensor.always_on)
}

// double update_rate = 8;
inline void Sensor::clear_update_rate() {
  update_rate_ = 0;
}
inline double Sensor::update_rate() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Sensor.update_rate)
  return update_rate_;
}
inline void Sensor::set_update_rate(double value) {
  
  update_rate_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Sensor.update_rate)
}

// .gz.msgs.Pose pose = 9;
inline bool Sensor::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::gz::msgs::Pose& Sensor::_internal_pose() const {
  return *pose_;
}
inline const ::gz::msgs::Pose& Sensor::pose() const {
  const ::gz::msgs::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:gz.msgs.Sensor.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Pose*>(
      &::gz::msgs::_Pose_default_instance_);
}
inline ::gz::msgs::Pose* Sensor::release_pose() {
  // @@protoc_insertion_point(field_release:gz.msgs.Sensor.pose)
  
  ::gz::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::gz::msgs::Pose* Sensor::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Sensor.pose)
  return pose_;
}
inline void Sensor::set_allocated_pose(::gz::msgs::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Sensor.pose)
}

// .gz.msgs.CameraSensor camera = 10;
inline bool Sensor::has_camera() const {
  return this != internal_default_instance() && camera_ != NULL;
}
inline const ::gz::msgs::CameraSensor& Sensor::_internal_camera() const {
  return *camera_;
}
inline const ::gz::msgs::CameraSensor& Sensor::camera() const {
  const ::gz::msgs::CameraSensor* p = camera_;
  // @@protoc_insertion_point(field_get:gz.msgs.Sensor.camera)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::CameraSensor*>(
      &::gz::msgs::_CameraSensor_default_instance_);
}
inline ::gz::msgs::CameraSensor* Sensor::release_camera() {
  // @@protoc_insertion_point(field_release:gz.msgs.Sensor.camera)
  
  ::gz::msgs::CameraSensor* temp = camera_;
  camera_ = NULL;
  return temp;
}
inline ::gz::msgs::CameraSensor* Sensor::mutable_camera() {
  
  if (camera_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::CameraSensor>(GetArenaNoVirtual());
    camera_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Sensor.camera)
  return camera_;
}
inline void Sensor::set_allocated_camera(::gz::msgs::CameraSensor* camera) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(camera_);
  }
  if (camera) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      camera = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }
    
  } else {
    
  }
  camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Sensor.camera)
}

// .gz.msgs.ContactSensor contact = 11;
inline bool Sensor::has_contact() const {
  return this != internal_default_instance() && contact_ != NULL;
}
inline const ::gz::msgs::ContactSensor& Sensor::_internal_contact() const {
  return *contact_;
}
inline const ::gz::msgs::ContactSensor& Sensor::contact() const {
  const ::gz::msgs::ContactSensor* p = contact_;
  // @@protoc_insertion_point(field_get:gz.msgs.Sensor.contact)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::ContactSensor*>(
      &::gz::msgs::_ContactSensor_default_instance_);
}
inline ::gz::msgs::ContactSensor* Sensor::release_contact() {
  // @@protoc_insertion_point(field_release:gz.msgs.Sensor.contact)
  
  ::gz::msgs::ContactSensor* temp = contact_;
  contact_ = NULL;
  return temp;
}
inline ::gz::msgs::ContactSensor* Sensor::mutable_contact() {
  
  if (contact_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::ContactSensor>(GetArenaNoVirtual());
    contact_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Sensor.contact)
  return contact_;
}
inline void Sensor::set_allocated_contact(::gz::msgs::ContactSensor* contact) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(contact_);
  }
  if (contact) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      contact = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, contact, submessage_arena);
    }
    
  } else {
    
  }
  contact_ = contact;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Sensor.contact)
}

// bool visualize = 12;
inline void Sensor::clear_visualize() {
  visualize_ = false;
}
inline bool Sensor::visualize() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Sensor.visualize)
  return visualize_;
}
inline void Sensor::set_visualize(bool value) {
  
  visualize_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Sensor.visualize)
}

// string topic = 13;
inline void Sensor::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Sensor::topic() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Sensor.topic)
  return topic_.GetNoArena();
}
inline void Sensor::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Sensor.topic)
}
#if LANG_CXX11
inline void Sensor::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Sensor.topic)
}
#endif
inline void Sensor::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Sensor.topic)
}
inline void Sensor::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Sensor.topic)
}
inline ::std::string* Sensor::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Sensor.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sensor::release_topic() {
  // @@protoc_insertion_point(field_release:gz.msgs.Sensor.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sensor::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Sensor.topic)
}

// .gz.msgs.LogicalCameraSensor logical_camera = 14;
inline bool Sensor::has_logical_camera() const {
  return this != internal_default_instance() && logical_camera_ != NULL;
}
inline const ::gz::msgs::LogicalCameraSensor& Sensor::_internal_logical_camera() const {
  return *logical_camera_;
}
inline const ::gz::msgs::LogicalCameraSensor& Sensor::logical_camera() const {
  const ::gz::msgs::LogicalCameraSensor* p = logical_camera_;
  // @@protoc_insertion_point(field_get:gz.msgs.Sensor.logical_camera)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::LogicalCameraSensor*>(
      &::gz::msgs::_LogicalCameraSensor_default_instance_);
}
inline ::gz::msgs::LogicalCameraSensor* Sensor::release_logical_camera() {
  // @@protoc_insertion_point(field_release:gz.msgs.Sensor.logical_camera)
  
  ::gz::msgs::LogicalCameraSensor* temp = logical_camera_;
  logical_camera_ = NULL;
  return temp;
}
inline ::gz::msgs::LogicalCameraSensor* Sensor::mutable_logical_camera() {
  
  if (logical_camera_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::LogicalCameraSensor>(GetArenaNoVirtual());
    logical_camera_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Sensor.logical_camera)
  return logical_camera_;
}
inline void Sensor::set_allocated_logical_camera(::gz::msgs::LogicalCameraSensor* logical_camera) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(logical_camera_);
  }
  if (logical_camera) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      logical_camera = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, logical_camera, submessage_arena);
    }
    
  } else {
    
  }
  logical_camera_ = logical_camera;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Sensor.logical_camera)
}

// .gz.msgs.GPSSensor gps = 15;
inline bool Sensor::has_gps() const {
  return this != internal_default_instance() && gps_ != NULL;
}
inline const ::gz::msgs::GPSSensor& Sensor::_internal_gps() const {
  return *gps_;
}
inline const ::gz::msgs::GPSSensor& Sensor::gps() const {
  const ::gz::msgs::GPSSensor* p = gps_;
  // @@protoc_insertion_point(field_get:gz.msgs.Sensor.gps)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::GPSSensor*>(
      &::gz::msgs::_GPSSensor_default_instance_);
}
inline ::gz::msgs::GPSSensor* Sensor::release_gps() {
  // @@protoc_insertion_point(field_release:gz.msgs.Sensor.gps)
  
  ::gz::msgs::GPSSensor* temp = gps_;
  gps_ = NULL;
  return temp;
}
inline ::gz::msgs::GPSSensor* Sensor::mutable_gps() {
  
  if (gps_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::GPSSensor>(GetArenaNoVirtual());
    gps_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Sensor.gps)
  return gps_;
}
inline void Sensor::set_allocated_gps(::gz::msgs::GPSSensor* gps) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(gps_);
  }
  if (gps) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gps = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gps, submessage_arena);
    }
    
  } else {
    
  }
  gps_ = gps;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Sensor.gps)
}

// .gz.msgs.IMUSensor imu = 16;
inline bool Sensor::has_imu() const {
  return this != internal_default_instance() && imu_ != NULL;
}
inline const ::gz::msgs::IMUSensor& Sensor::_internal_imu() const {
  return *imu_;
}
inline const ::gz::msgs::IMUSensor& Sensor::imu() const {
  const ::gz::msgs::IMUSensor* p = imu_;
  // @@protoc_insertion_point(field_get:gz.msgs.Sensor.imu)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::IMUSensor*>(
      &::gz::msgs::_IMUSensor_default_instance_);
}
inline ::gz::msgs::IMUSensor* Sensor::release_imu() {
  // @@protoc_insertion_point(field_release:gz.msgs.Sensor.imu)
  
  ::gz::msgs::IMUSensor* temp = imu_;
  imu_ = NULL;
  return temp;
}
inline ::gz::msgs::IMUSensor* Sensor::mutable_imu() {
  
  if (imu_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::IMUSensor>(GetArenaNoVirtual());
    imu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Sensor.imu)
  return imu_;
}
inline void Sensor::set_allocated_imu(::gz::msgs::IMUSensor* imu) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(imu_);
  }
  if (imu) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      imu = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, imu, submessage_arena);
    }
    
  } else {
    
  }
  imu_ = imu;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Sensor.imu)
}

// .gz.msgs.MagnetometerSensor magnetometer = 17;
inline bool Sensor::has_magnetometer() const {
  return this != internal_default_instance() && magnetometer_ != NULL;
}
inline const ::gz::msgs::MagnetometerSensor& Sensor::_internal_magnetometer() const {
  return *magnetometer_;
}
inline const ::gz::msgs::MagnetometerSensor& Sensor::magnetometer() const {
  const ::gz::msgs::MagnetometerSensor* p = magnetometer_;
  // @@protoc_insertion_point(field_get:gz.msgs.Sensor.magnetometer)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::MagnetometerSensor*>(
      &::gz::msgs::_MagnetometerSensor_default_instance_);
}
inline ::gz::msgs::MagnetometerSensor* Sensor::release_magnetometer() {
  // @@protoc_insertion_point(field_release:gz.msgs.Sensor.magnetometer)
  
  ::gz::msgs::MagnetometerSensor* temp = magnetometer_;
  magnetometer_ = NULL;
  return temp;
}
inline ::gz::msgs::MagnetometerSensor* Sensor::mutable_magnetometer() {
  
  if (magnetometer_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::MagnetometerSensor>(GetArenaNoVirtual());
    magnetometer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Sensor.magnetometer)
  return magnetometer_;
}
inline void Sensor::set_allocated_magnetometer(::gz::msgs::MagnetometerSensor* magnetometer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(magnetometer_);
  }
  if (magnetometer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      magnetometer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, magnetometer, submessage_arena);
    }
    
  } else {
    
  }
  magnetometer_ = magnetometer;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Sensor.magnetometer)
}

// .gz.msgs.AltimeterSensor altimeter = 18;
inline bool Sensor::has_altimeter() const {
  return this != internal_default_instance() && altimeter_ != NULL;
}
inline const ::gz::msgs::AltimeterSensor& Sensor::_internal_altimeter() const {
  return *altimeter_;
}
inline const ::gz::msgs::AltimeterSensor& Sensor::altimeter() const {
  const ::gz::msgs::AltimeterSensor* p = altimeter_;
  // @@protoc_insertion_point(field_get:gz.msgs.Sensor.altimeter)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::AltimeterSensor*>(
      &::gz::msgs::_AltimeterSensor_default_instance_);
}
inline ::gz::msgs::AltimeterSensor* Sensor::release_altimeter() {
  // @@protoc_insertion_point(field_release:gz.msgs.Sensor.altimeter)
  
  ::gz::msgs::AltimeterSensor* temp = altimeter_;
  altimeter_ = NULL;
  return temp;
}
inline ::gz::msgs::AltimeterSensor* Sensor::mutable_altimeter() {
  
  if (altimeter_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::AltimeterSensor>(GetArenaNoVirtual());
    altimeter_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Sensor.altimeter)
  return altimeter_;
}
inline void Sensor::set_allocated_altimeter(::gz::msgs::AltimeterSensor* altimeter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(altimeter_);
  }
  if (altimeter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      altimeter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, altimeter, submessage_arena);
    }
    
  } else {
    
  }
  altimeter_ = altimeter;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Sensor.altimeter)
}

// .gz.msgs.AirPressureSensor air_pressure = 19;
inline bool Sensor::has_air_pressure() const {
  return this != internal_default_instance() && air_pressure_ != NULL;
}
inline const ::gz::msgs::AirPressureSensor& Sensor::_internal_air_pressure() const {
  return *air_pressure_;
}
inline const ::gz::msgs::AirPressureSensor& Sensor::air_pressure() const {
  const ::gz::msgs::AirPressureSensor* p = air_pressure_;
  // @@protoc_insertion_point(field_get:gz.msgs.Sensor.air_pressure)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::AirPressureSensor*>(
      &::gz::msgs::_AirPressureSensor_default_instance_);
}
inline ::gz::msgs::AirPressureSensor* Sensor::release_air_pressure() {
  // @@protoc_insertion_point(field_release:gz.msgs.Sensor.air_pressure)
  
  ::gz::msgs::AirPressureSensor* temp = air_pressure_;
  air_pressure_ = NULL;
  return temp;
}
inline ::gz::msgs::AirPressureSensor* Sensor::mutable_air_pressure() {
  
  if (air_pressure_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::AirPressureSensor>(GetArenaNoVirtual());
    air_pressure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Sensor.air_pressure)
  return air_pressure_;
}
inline void Sensor::set_allocated_air_pressure(::gz::msgs::AirPressureSensor* air_pressure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(air_pressure_);
  }
  if (air_pressure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      air_pressure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, air_pressure, submessage_arena);
    }
    
  } else {
    
  }
  air_pressure_ = air_pressure;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Sensor.air_pressure)
}

// .gz.msgs.LidarSensor lidar = 20;
inline bool Sensor::has_lidar() const {
  return this != internal_default_instance() && lidar_ != NULL;
}
inline const ::gz::msgs::LidarSensor& Sensor::_internal_lidar() const {
  return *lidar_;
}
inline const ::gz::msgs::LidarSensor& Sensor::lidar() const {
  const ::gz::msgs::LidarSensor* p = lidar_;
  // @@protoc_insertion_point(field_get:gz.msgs.Sensor.lidar)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::LidarSensor*>(
      &::gz::msgs::_LidarSensor_default_instance_);
}
inline ::gz::msgs::LidarSensor* Sensor::release_lidar() {
  // @@protoc_insertion_point(field_release:gz.msgs.Sensor.lidar)
  
  ::gz::msgs::LidarSensor* temp = lidar_;
  lidar_ = NULL;
  return temp;
}
inline ::gz::msgs::LidarSensor* Sensor::mutable_lidar() {
  
  if (lidar_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::LidarSensor>(GetArenaNoVirtual());
    lidar_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Sensor.lidar)
  return lidar_;
}
inline void Sensor::set_allocated_lidar(::gz::msgs::LidarSensor* lidar) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lidar_);
  }
  if (lidar) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lidar = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lidar, submessage_arena);
    }
    
  } else {
    
  }
  lidar_ = lidar;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Sensor.lidar)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fsensor_2eproto
