// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/entity_factory.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fentity_5ffactory_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fentity_5ffactory_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/header.pb.h"
#include "gz/msgs/light.pb.h"
#include "gz/msgs/model.pb.h"
#include "gz/msgs/pose.pb.h"
#include "gz/msgs/spherical_coordinates.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fentity_5ffactory_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fentity_5ffactory_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fentity_5ffactory_2eproto
namespace gz {
namespace msgs {
class EntityFactory;
class EntityFactoryDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern EntityFactoryDefaultTypeInternal _EntityFactory_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::EntityFactory* Arena::CreateMaybeMessage<::gz::msgs::EntityFactory>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE EntityFactory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.EntityFactory) */ {
 public:
  EntityFactory();
  virtual ~EntityFactory();

  EntityFactory(const EntityFactory& from);

  inline EntityFactory& operator=(const EntityFactory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntityFactory(EntityFactory&& from) noexcept
    : EntityFactory() {
    *this = ::std::move(from);
  }

  inline EntityFactory& operator=(EntityFactory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityFactory& default_instance();

  enum FromCase {
    kSdf = 2,
    kSdfFilename = 3,
    kModel = 4,
    kLight = 5,
    kCloneName = 6,
    FROM_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityFactory* internal_default_instance() {
    return reinterpret_cast<const EntityFactory*>(
               &_EntityFactory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EntityFactory* other);
  friend void swap(EntityFactory& a, EntityFactory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityFactory* New() const final {
    return CreateMaybeMessage<EntityFactory>(NULL);
  }

  EntityFactory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EntityFactory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EntityFactory& from);
  void MergeFrom(const EntityFactory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityFactory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 8;
  void clear_name();
  static const int kNameFieldNumber = 8;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string relative_to = 10;
  void clear_relative_to();
  static const int kRelativeToFieldNumber = 10;
  const ::std::string& relative_to() const;
  void set_relative_to(const ::std::string& value);
  #if LANG_CXX11
  void set_relative_to(::std::string&& value);
  #endif
  void set_relative_to(const char* value);
  void set_relative_to(const char* value, size_t size);
  ::std::string* mutable_relative_to();
  ::std::string* release_relative_to();
  void set_allocated_relative_to(::std::string* relative_to);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // .gz.msgs.Pose pose = 7;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 7;
  private:
  const ::gz::msgs::Pose& _internal_pose() const;
  public:
  const ::gz::msgs::Pose& pose() const;
  ::gz::msgs::Pose* release_pose();
  ::gz::msgs::Pose* mutable_pose();
  void set_allocated_pose(::gz::msgs::Pose* pose);

  // .gz.msgs.SphericalCoordinates spherical_coordinates = 11;
  bool has_spherical_coordinates() const;
  void clear_spherical_coordinates();
  static const int kSphericalCoordinatesFieldNumber = 11;
  private:
  const ::gz::msgs::SphericalCoordinates& _internal_spherical_coordinates() const;
  public:
  const ::gz::msgs::SphericalCoordinates& spherical_coordinates() const;
  ::gz::msgs::SphericalCoordinates* release_spherical_coordinates();
  ::gz::msgs::SphericalCoordinates* mutable_spherical_coordinates();
  void set_allocated_spherical_coordinates(::gz::msgs::SphericalCoordinates* spherical_coordinates);

  // bool allow_renaming = 9;
  void clear_allow_renaming();
  static const int kAllowRenamingFieldNumber = 9;
  bool allow_renaming() const;
  void set_allow_renaming(bool value);

  // string sdf = 2;
  private:
  bool has_sdf() const;
  public:
  void clear_sdf();
  static const int kSdfFieldNumber = 2;
  const ::std::string& sdf() const;
  void set_sdf(const ::std::string& value);
  #if LANG_CXX11
  void set_sdf(::std::string&& value);
  #endif
  void set_sdf(const char* value);
  void set_sdf(const char* value, size_t size);
  ::std::string* mutable_sdf();
  ::std::string* release_sdf();
  void set_allocated_sdf(::std::string* sdf);

  // string sdf_filename = 3;
  private:
  bool has_sdf_filename() const;
  public:
  void clear_sdf_filename();
  static const int kSdfFilenameFieldNumber = 3;
  const ::std::string& sdf_filename() const;
  void set_sdf_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_sdf_filename(::std::string&& value);
  #endif
  void set_sdf_filename(const char* value);
  void set_sdf_filename(const char* value, size_t size);
  ::std::string* mutable_sdf_filename();
  ::std::string* release_sdf_filename();
  void set_allocated_sdf_filename(::std::string* sdf_filename);

  // .gz.msgs.Model model = 4;
  bool has_model() const;
  void clear_model();
  static const int kModelFieldNumber = 4;
  private:
  const ::gz::msgs::Model& _internal_model() const;
  public:
  const ::gz::msgs::Model& model() const;
  ::gz::msgs::Model* release_model();
  ::gz::msgs::Model* mutable_model();
  void set_allocated_model(::gz::msgs::Model* model);

  // .gz.msgs.Light light = 5;
  bool has_light() const;
  void clear_light();
  static const int kLightFieldNumber = 5;
  private:
  const ::gz::msgs::Light& _internal_light() const;
  public:
  const ::gz::msgs::Light& light() const;
  ::gz::msgs::Light* release_light();
  ::gz::msgs::Light* mutable_light();
  void set_allocated_light(::gz::msgs::Light* light);

  // string clone_name = 6;
  private:
  bool has_clone_name() const;
  public:
  void clear_clone_name();
  static const int kCloneNameFieldNumber = 6;
  const ::std::string& clone_name() const;
  void set_clone_name(const ::std::string& value);
  #if LANG_CXX11
  void set_clone_name(::std::string&& value);
  #endif
  void set_clone_name(const char* value);
  void set_clone_name(const char* value, size_t size);
  ::std::string* mutable_clone_name();
  ::std::string* release_clone_name();
  void set_allocated_clone_name(::std::string* clone_name);

  void clear_from();
  FromCase from_case() const;
  // @@protoc_insertion_point(class_scope:gz.msgs.EntityFactory)
 private:
  void set_has_sdf();
  void set_has_sdf_filename();
  void set_has_model();
  void set_has_light();
  void set_has_clone_name();

  inline bool has_from() const;
  inline void clear_has_from();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr relative_to_;
  ::gz::msgs::Header* header_;
  ::gz::msgs::Pose* pose_;
  ::gz::msgs::SphericalCoordinates* spherical_coordinates_;
  bool allow_renaming_;
  union FromUnion {
    FromUnion() {}
    ::google::protobuf::internal::ArenaStringPtr sdf_;
    ::google::protobuf::internal::ArenaStringPtr sdf_filename_;
    ::gz::msgs::Model* model_;
    ::gz::msgs::Light* light_;
    ::google::protobuf::internal::ArenaStringPtr clone_name_;
  } from_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_gz_2fmsgs_2fentity_5ffactory_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EntityFactory

// .gz.msgs.Header header = 1;
inline bool EntityFactory::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& EntityFactory::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& EntityFactory::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.EntityFactory.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* EntityFactory::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.EntityFactory.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* EntityFactory::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.EntityFactory.header)
  return header_;
}
inline void EntityFactory::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.EntityFactory.header)
}

// string sdf = 2;
inline bool EntityFactory::has_sdf() const {
  return from_case() == kSdf;
}
inline void EntityFactory::set_has_sdf() {
  _oneof_case_[0] = kSdf;
}
inline void EntityFactory::clear_sdf() {
  if (has_sdf()) {
    from_.sdf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_from();
  }
}
inline const ::std::string& EntityFactory::sdf() const {
  // @@protoc_insertion_point(field_get:gz.msgs.EntityFactory.sdf)
  if (has_sdf()) {
    return from_.sdf_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void EntityFactory::set_sdf(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gz.msgs.EntityFactory.sdf)
  if (!has_sdf()) {
    clear_from();
    set_has_sdf();
    from_.sdf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  from_.sdf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.EntityFactory.sdf)
}
#if LANG_CXX11
inline void EntityFactory::set_sdf(::std::string&& value) {
  // @@protoc_insertion_point(field_set:gz.msgs.EntityFactory.sdf)
  if (!has_sdf()) {
    clear_from();
    set_has_sdf();
    from_.sdf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  from_.sdf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.EntityFactory.sdf)
}
#endif
inline void EntityFactory::set_sdf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_sdf()) {
    clear_from();
    set_has_sdf();
    from_.sdf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  from_.sdf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.EntityFactory.sdf)
}
inline void EntityFactory::set_sdf(const char* value, size_t size) {
  if (!has_sdf()) {
    clear_from();
    set_has_sdf();
    from_.sdf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  from_.sdf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.EntityFactory.sdf)
}
inline ::std::string* EntityFactory::mutable_sdf() {
  if (!has_sdf()) {
    clear_from();
    set_has_sdf();
    from_.sdf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.EntityFactory.sdf)
  return from_.sdf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityFactory::release_sdf() {
  // @@protoc_insertion_point(field_release:gz.msgs.EntityFactory.sdf)
  if (has_sdf()) {
    clear_has_from();
    return from_.sdf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void EntityFactory::set_allocated_sdf(::std::string* sdf) {
  if (!has_sdf()) {
    from_.sdf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_from();
  if (sdf != NULL) {
    set_has_sdf();
    from_.sdf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdf);
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.EntityFactory.sdf)
}

// string sdf_filename = 3;
inline bool EntityFactory::has_sdf_filename() const {
  return from_case() == kSdfFilename;
}
inline void EntityFactory::set_has_sdf_filename() {
  _oneof_case_[0] = kSdfFilename;
}
inline void EntityFactory::clear_sdf_filename() {
  if (has_sdf_filename()) {
    from_.sdf_filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_from();
  }
}
inline const ::std::string& EntityFactory::sdf_filename() const {
  // @@protoc_insertion_point(field_get:gz.msgs.EntityFactory.sdf_filename)
  if (has_sdf_filename()) {
    return from_.sdf_filename_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void EntityFactory::set_sdf_filename(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gz.msgs.EntityFactory.sdf_filename)
  if (!has_sdf_filename()) {
    clear_from();
    set_has_sdf_filename();
    from_.sdf_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  from_.sdf_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.EntityFactory.sdf_filename)
}
#if LANG_CXX11
inline void EntityFactory::set_sdf_filename(::std::string&& value) {
  // @@protoc_insertion_point(field_set:gz.msgs.EntityFactory.sdf_filename)
  if (!has_sdf_filename()) {
    clear_from();
    set_has_sdf_filename();
    from_.sdf_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  from_.sdf_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.EntityFactory.sdf_filename)
}
#endif
inline void EntityFactory::set_sdf_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_sdf_filename()) {
    clear_from();
    set_has_sdf_filename();
    from_.sdf_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  from_.sdf_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.EntityFactory.sdf_filename)
}
inline void EntityFactory::set_sdf_filename(const char* value, size_t size) {
  if (!has_sdf_filename()) {
    clear_from();
    set_has_sdf_filename();
    from_.sdf_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  from_.sdf_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.EntityFactory.sdf_filename)
}
inline ::std::string* EntityFactory::mutable_sdf_filename() {
  if (!has_sdf_filename()) {
    clear_from();
    set_has_sdf_filename();
    from_.sdf_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.EntityFactory.sdf_filename)
  return from_.sdf_filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityFactory::release_sdf_filename() {
  // @@protoc_insertion_point(field_release:gz.msgs.EntityFactory.sdf_filename)
  if (has_sdf_filename()) {
    clear_has_from();
    return from_.sdf_filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void EntityFactory::set_allocated_sdf_filename(::std::string* sdf_filename) {
  if (!has_sdf_filename()) {
    from_.sdf_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_from();
  if (sdf_filename != NULL) {
    set_has_sdf_filename();
    from_.sdf_filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdf_filename);
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.EntityFactory.sdf_filename)
}

// .gz.msgs.Model model = 4;
inline bool EntityFactory::has_model() const {
  return from_case() == kModel;
}
inline void EntityFactory::set_has_model() {
  _oneof_case_[0] = kModel;
}
inline const ::gz::msgs::Model& EntityFactory::_internal_model() const {
  return *from_.model_;
}
inline ::gz::msgs::Model* EntityFactory::release_model() {
  // @@protoc_insertion_point(field_release:gz.msgs.EntityFactory.model)
  if (has_model()) {
    clear_has_from();
      ::gz::msgs::Model* temp = from_.model_;
    from_.model_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gz::msgs::Model& EntityFactory::model() const {
  // @@protoc_insertion_point(field_get:gz.msgs.EntityFactory.model)
  return has_model()
      ? *from_.model_
      : *reinterpret_cast< ::gz::msgs::Model*>(&::gz::msgs::_Model_default_instance_);
}
inline ::gz::msgs::Model* EntityFactory::mutable_model() {
  if (!has_model()) {
    clear_from();
    set_has_model();
    from_.model_ = CreateMaybeMessage< ::gz::msgs::Model >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.EntityFactory.model)
  return from_.model_;
}

// .gz.msgs.Light light = 5;
inline bool EntityFactory::has_light() const {
  return from_case() == kLight;
}
inline void EntityFactory::set_has_light() {
  _oneof_case_[0] = kLight;
}
inline const ::gz::msgs::Light& EntityFactory::_internal_light() const {
  return *from_.light_;
}
inline ::gz::msgs::Light* EntityFactory::release_light() {
  // @@protoc_insertion_point(field_release:gz.msgs.EntityFactory.light)
  if (has_light()) {
    clear_has_from();
      ::gz::msgs::Light* temp = from_.light_;
    from_.light_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gz::msgs::Light& EntityFactory::light() const {
  // @@protoc_insertion_point(field_get:gz.msgs.EntityFactory.light)
  return has_light()
      ? *from_.light_
      : *reinterpret_cast< ::gz::msgs::Light*>(&::gz::msgs::_Light_default_instance_);
}
inline ::gz::msgs::Light* EntityFactory::mutable_light() {
  if (!has_light()) {
    clear_from();
    set_has_light();
    from_.light_ = CreateMaybeMessage< ::gz::msgs::Light >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.EntityFactory.light)
  return from_.light_;
}

// string clone_name = 6;
inline bool EntityFactory::has_clone_name() const {
  return from_case() == kCloneName;
}
inline void EntityFactory::set_has_clone_name() {
  _oneof_case_[0] = kCloneName;
}
inline void EntityFactory::clear_clone_name() {
  if (has_clone_name()) {
    from_.clone_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_from();
  }
}
inline const ::std::string& EntityFactory::clone_name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.EntityFactory.clone_name)
  if (has_clone_name()) {
    return from_.clone_name_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void EntityFactory::set_clone_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gz.msgs.EntityFactory.clone_name)
  if (!has_clone_name()) {
    clear_from();
    set_has_clone_name();
    from_.clone_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  from_.clone_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.EntityFactory.clone_name)
}
#if LANG_CXX11
inline void EntityFactory::set_clone_name(::std::string&& value) {
  // @@protoc_insertion_point(field_set:gz.msgs.EntityFactory.clone_name)
  if (!has_clone_name()) {
    clear_from();
    set_has_clone_name();
    from_.clone_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  from_.clone_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.EntityFactory.clone_name)
}
#endif
inline void EntityFactory::set_clone_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_clone_name()) {
    clear_from();
    set_has_clone_name();
    from_.clone_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  from_.clone_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.EntityFactory.clone_name)
}
inline void EntityFactory::set_clone_name(const char* value, size_t size) {
  if (!has_clone_name()) {
    clear_from();
    set_has_clone_name();
    from_.clone_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  from_.clone_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.EntityFactory.clone_name)
}
inline ::std::string* EntityFactory::mutable_clone_name() {
  if (!has_clone_name()) {
    clear_from();
    set_has_clone_name();
    from_.clone_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.EntityFactory.clone_name)
  return from_.clone_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityFactory::release_clone_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.EntityFactory.clone_name)
  if (has_clone_name()) {
    clear_has_from();
    return from_.clone_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void EntityFactory::set_allocated_clone_name(::std::string* clone_name) {
  if (!has_clone_name()) {
    from_.clone_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_from();
  if (clone_name != NULL) {
    set_has_clone_name();
    from_.clone_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clone_name);
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.EntityFactory.clone_name)
}

// .gz.msgs.Pose pose = 7;
inline bool EntityFactory::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::gz::msgs::Pose& EntityFactory::_internal_pose() const {
  return *pose_;
}
inline const ::gz::msgs::Pose& EntityFactory::pose() const {
  const ::gz::msgs::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:gz.msgs.EntityFactory.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Pose*>(
      &::gz::msgs::_Pose_default_instance_);
}
inline ::gz::msgs::Pose* EntityFactory::release_pose() {
  // @@protoc_insertion_point(field_release:gz.msgs.EntityFactory.pose)
  
  ::gz::msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::gz::msgs::Pose* EntityFactory::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.EntityFactory.pose)
  return pose_;
}
inline void EntityFactory::set_allocated_pose(::gz::msgs::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.EntityFactory.pose)
}

// string name = 8;
inline void EntityFactory::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntityFactory::name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.EntityFactory.name)
  return name_.GetNoArena();
}
inline void EntityFactory::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.EntityFactory.name)
}
#if LANG_CXX11
inline void EntityFactory::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.EntityFactory.name)
}
#endif
inline void EntityFactory::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.EntityFactory.name)
}
inline void EntityFactory::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.EntityFactory.name)
}
inline ::std::string* EntityFactory::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.EntityFactory.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityFactory::release_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.EntityFactory.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityFactory::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.EntityFactory.name)
}

// bool allow_renaming = 9;
inline void EntityFactory::clear_allow_renaming() {
  allow_renaming_ = false;
}
inline bool EntityFactory::allow_renaming() const {
  // @@protoc_insertion_point(field_get:gz.msgs.EntityFactory.allow_renaming)
  return allow_renaming_;
}
inline void EntityFactory::set_allow_renaming(bool value) {
  
  allow_renaming_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.EntityFactory.allow_renaming)
}

// string relative_to = 10;
inline void EntityFactory::clear_relative_to() {
  relative_to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntityFactory::relative_to() const {
  // @@protoc_insertion_point(field_get:gz.msgs.EntityFactory.relative_to)
  return relative_to_.GetNoArena();
}
inline void EntityFactory::set_relative_to(const ::std::string& value) {
  
  relative_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.EntityFactory.relative_to)
}
#if LANG_CXX11
inline void EntityFactory::set_relative_to(::std::string&& value) {
  
  relative_to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.EntityFactory.relative_to)
}
#endif
inline void EntityFactory::set_relative_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  relative_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.EntityFactory.relative_to)
}
inline void EntityFactory::set_relative_to(const char* value, size_t size) {
  
  relative_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.EntityFactory.relative_to)
}
inline ::std::string* EntityFactory::mutable_relative_to() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.EntityFactory.relative_to)
  return relative_to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntityFactory::release_relative_to() {
  // @@protoc_insertion_point(field_release:gz.msgs.EntityFactory.relative_to)
  
  return relative_to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntityFactory::set_allocated_relative_to(::std::string* relative_to) {
  if (relative_to != NULL) {
    
  } else {
    
  }
  relative_to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), relative_to);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.EntityFactory.relative_to)
}

// .gz.msgs.SphericalCoordinates spherical_coordinates = 11;
inline bool EntityFactory::has_spherical_coordinates() const {
  return this != internal_default_instance() && spherical_coordinates_ != NULL;
}
inline const ::gz::msgs::SphericalCoordinates& EntityFactory::_internal_spherical_coordinates() const {
  return *spherical_coordinates_;
}
inline const ::gz::msgs::SphericalCoordinates& EntityFactory::spherical_coordinates() const {
  const ::gz::msgs::SphericalCoordinates* p = spherical_coordinates_;
  // @@protoc_insertion_point(field_get:gz.msgs.EntityFactory.spherical_coordinates)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::SphericalCoordinates*>(
      &::gz::msgs::_SphericalCoordinates_default_instance_);
}
inline ::gz::msgs::SphericalCoordinates* EntityFactory::release_spherical_coordinates() {
  // @@protoc_insertion_point(field_release:gz.msgs.EntityFactory.spherical_coordinates)
  
  ::gz::msgs::SphericalCoordinates* temp = spherical_coordinates_;
  spherical_coordinates_ = NULL;
  return temp;
}
inline ::gz::msgs::SphericalCoordinates* EntityFactory::mutable_spherical_coordinates() {
  
  if (spherical_coordinates_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::SphericalCoordinates>(GetArenaNoVirtual());
    spherical_coordinates_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.EntityFactory.spherical_coordinates)
  return spherical_coordinates_;
}
inline void EntityFactory::set_allocated_spherical_coordinates(::gz::msgs::SphericalCoordinates* spherical_coordinates) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(spherical_coordinates_);
  }
  if (spherical_coordinates) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      spherical_coordinates = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spherical_coordinates, submessage_arena);
    }
    
  } else {
    
  }
  spherical_coordinates_ = spherical_coordinates;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.EntityFactory.spherical_coordinates)
}

inline bool EntityFactory::has_from() const {
  return from_case() != FROM_NOT_SET;
}
inline void EntityFactory::clear_has_from() {
  _oneof_case_[0] = FROM_NOT_SET;
}
inline EntityFactory::FromCase EntityFactory::from_case() const {
  return EntityFactory::FromCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fentity_5ffactory_2eproto
