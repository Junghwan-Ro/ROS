// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/rest_response.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2frest_5fresponse_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2frest_5fresponse_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2frest_5fresponse_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2frest_5fresponse_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2frest_5fresponse_2eproto
namespace gz {
namespace msgs {
class RestResponse;
class RestResponseDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern RestResponseDefaultTypeInternal _RestResponse_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::RestResponse* Arena::CreateMaybeMessage<::gz::msgs::RestResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

enum RestResponse_Type {
  RestResponse_Type_SUCCESS = 0,
  RestResponse_Type_ERR = 1,
  RestResponse_Type_LOGIN = 2,
  RestResponse_Type_LOGOUT = 3,
  RestResponse_Type_RestResponse_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RestResponse_Type_RestResponse_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool RestResponse_Type_IsValid(int value);
const RestResponse_Type RestResponse_Type_Type_MIN = RestResponse_Type_SUCCESS;
const RestResponse_Type RestResponse_Type_Type_MAX = RestResponse_Type_LOGOUT;
const int RestResponse_Type_Type_ARRAYSIZE = RestResponse_Type_Type_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* RestResponse_Type_descriptor();
inline const ::std::string& RestResponse_Type_Name(RestResponse_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    RestResponse_Type_descriptor(), value);
}
inline bool RestResponse_Type_Parse(
    const ::std::string& name, RestResponse_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RestResponse_Type>(
    RestResponse_Type_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE RestResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.RestResponse) */ {
 public:
  RestResponse();
  virtual ~RestResponse();

  RestResponse(const RestResponse& from);

  inline RestResponse& operator=(const RestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RestResponse(RestResponse&& from) noexcept
    : RestResponse() {
    *this = ::std::move(from);
  }

  inline RestResponse& operator=(RestResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RestResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestResponse* internal_default_instance() {
    return reinterpret_cast<const RestResponse*>(
               &_RestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RestResponse* other);
  friend void swap(RestResponse& a, RestResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RestResponse* New() const final {
    return CreateMaybeMessage<RestResponse>(NULL);
  }

  RestResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RestResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RestResponse& from);
  void MergeFrom(const RestResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RestResponse_Type Type;
  static const Type SUCCESS =
    RestResponse_Type_SUCCESS;
  static const Type ERR =
    RestResponse_Type_ERR;
  static const Type LOGIN =
    RestResponse_Type_LOGIN;
  static const Type LOGOUT =
    RestResponse_Type_LOGOUT;
  static inline bool Type_IsValid(int value) {
    return RestResponse_Type_IsValid(value);
  }
  static const Type Type_MIN =
    RestResponse_Type_Type_MIN;
  static const Type Type_MAX =
    RestResponse_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    RestResponse_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return RestResponse_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return RestResponse_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return RestResponse_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string msg = 4;
  void clear_msg();
  static const int kMsgFieldNumber = 4;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // .gz.msgs.RestResponse.Type type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::gz::msgs::RestResponse_Type type() const;
  void set_type(::gz::msgs::RestResponse_Type value);

  // @@protoc_insertion_point(class_scope:gz.msgs.RestResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::gz::msgs::Header* header_;
  ::google::protobuf::uint32 id_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2frest_5fresponse_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RestResponse

// .gz.msgs.Header header = 1;
inline bool RestResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& RestResponse::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& RestResponse::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.RestResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* RestResponse::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.RestResponse.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* RestResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.RestResponse.header)
  return header_;
}
inline void RestResponse::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.RestResponse.header)
}

// uint32 id = 2;
inline void RestResponse::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 RestResponse::id() const {
  // @@protoc_insertion_point(field_get:gz.msgs.RestResponse.id)
  return id_;
}
inline void RestResponse::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.RestResponse.id)
}

// .gz.msgs.RestResponse.Type type = 3;
inline void RestResponse::clear_type() {
  type_ = 0;
}
inline ::gz::msgs::RestResponse_Type RestResponse::type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.RestResponse.type)
  return static_cast< ::gz::msgs::RestResponse_Type >(type_);
}
inline void RestResponse::set_type(::gz::msgs::RestResponse_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.RestResponse.type)
}

// string msg = 4;
inline void RestResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RestResponse::msg() const {
  // @@protoc_insertion_point(field_get:gz.msgs.RestResponse.msg)
  return msg_.GetNoArena();
}
inline void RestResponse::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.RestResponse.msg)
}
#if LANG_CXX11
inline void RestResponse::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.RestResponse.msg)
}
#endif
inline void RestResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.RestResponse.msg)
}
inline void RestResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.RestResponse.msg)
}
inline ::std::string* RestResponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.RestResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RestResponse::release_msg() {
  // @@protoc_insertion_point(field_release:gz.msgs.RestResponse.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RestResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.RestResponse.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::msgs::RestResponse_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::RestResponse_Type>() {
  return ::gz::msgs::RestResponse_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2frest_5fresponse_2eproto
