// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/lens.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2flens_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2flens_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2flens_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2flens_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2flens_2eproto
namespace gz {
namespace msgs {
class Lens;
class LensDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern LensDefaultTypeInternal _Lens_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Lens* Arena::CreateMaybeMessage<::gz::msgs::Lens>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

enum Lens_Type {
  Lens_Type_TYPE_NOT_SPECIFIED = 0,
  Lens_Type_GNOMONICAL = 1,
  Lens_Type_STEREOGRAPHIC = 2,
  Lens_Type_EQUIDISTANT = 3,
  Lens_Type_EQUISOLID_ANGLE = 4,
  Lens_Type_ORTHOGRAPHIC = 5,
  Lens_Type_CUSTOM = 6,
  Lens_Type_Lens_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Lens_Type_Lens_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool Lens_Type_IsValid(int value);
const Lens_Type Lens_Type_Type_MIN = Lens_Type_TYPE_NOT_SPECIFIED;
const Lens_Type Lens_Type_Type_MAX = Lens_Type_CUSTOM;
const int Lens_Type_Type_ARRAYSIZE = Lens_Type_Type_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* Lens_Type_descriptor();
inline const ::std::string& Lens_Type_Name(Lens_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Lens_Type_descriptor(), value);
}
inline bool Lens_Type_Parse(
    const ::std::string& name, Lens_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Lens_Type>(
    Lens_Type_descriptor(), name, value);
}
enum Lens_FunctionType {
  Lens_FunctionType_FUNCTION_NOT_SPECIFIED = 0,
  Lens_FunctionType_SIN = 1,
  Lens_FunctionType_TAN = 2,
  Lens_FunctionType_ID = 3,
  Lens_FunctionType_Lens_FunctionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Lens_FunctionType_Lens_FunctionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool Lens_FunctionType_IsValid(int value);
const Lens_FunctionType Lens_FunctionType_FunctionType_MIN = Lens_FunctionType_FUNCTION_NOT_SPECIFIED;
const Lens_FunctionType Lens_FunctionType_FunctionType_MAX = Lens_FunctionType_ID;
const int Lens_FunctionType_FunctionType_ARRAYSIZE = Lens_FunctionType_FunctionType_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* Lens_FunctionType_descriptor();
inline const ::std::string& Lens_FunctionType_Name(Lens_FunctionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Lens_FunctionType_descriptor(), value);
}
inline bool Lens_FunctionType_Parse(
    const ::std::string& name, Lens_FunctionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Lens_FunctionType>(
    Lens_FunctionType_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE Lens : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Lens) */ {
 public:
  Lens();
  virtual ~Lens();

  Lens(const Lens& from);

  inline Lens& operator=(const Lens& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lens(Lens&& from) noexcept
    : Lens() {
    *this = ::std::move(from);
  }

  inline Lens& operator=(Lens&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lens& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lens* internal_default_instance() {
    return reinterpret_cast<const Lens*>(
               &_Lens_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Lens* other);
  friend void swap(Lens& a, Lens& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lens* New() const final {
    return CreateMaybeMessage<Lens>(NULL);
  }

  Lens* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Lens>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Lens& from);
  void MergeFrom(const Lens& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lens* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Lens_Type Type;
  static const Type TYPE_NOT_SPECIFIED =
    Lens_Type_TYPE_NOT_SPECIFIED;
  static const Type GNOMONICAL =
    Lens_Type_GNOMONICAL;
  static const Type STEREOGRAPHIC =
    Lens_Type_STEREOGRAPHIC;
  static const Type EQUIDISTANT =
    Lens_Type_EQUIDISTANT;
  static const Type EQUISOLID_ANGLE =
    Lens_Type_EQUISOLID_ANGLE;
  static const Type ORTHOGRAPHIC =
    Lens_Type_ORTHOGRAPHIC;
  static const Type CUSTOM =
    Lens_Type_CUSTOM;
  static inline bool Type_IsValid(int value) {
    return Lens_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Lens_Type_Type_MIN;
  static const Type Type_MAX =
    Lens_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Lens_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Lens_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Lens_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Lens_Type_Parse(name, value);
  }

  typedef Lens_FunctionType FunctionType;
  static const FunctionType FUNCTION_NOT_SPECIFIED =
    Lens_FunctionType_FUNCTION_NOT_SPECIFIED;
  static const FunctionType SIN =
    Lens_FunctionType_SIN;
  static const FunctionType TAN =
    Lens_FunctionType_TAN;
  static const FunctionType ID =
    Lens_FunctionType_ID;
  static inline bool FunctionType_IsValid(int value) {
    return Lens_FunctionType_IsValid(value);
  }
  static const FunctionType FunctionType_MIN =
    Lens_FunctionType_FunctionType_MIN;
  static const FunctionType FunctionType_MAX =
    Lens_FunctionType_FunctionType_MAX;
  static const int FunctionType_ARRAYSIZE =
    Lens_FunctionType_FunctionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FunctionType_descriptor() {
    return Lens_FunctionType_descriptor();
  }
  static inline const ::std::string& FunctionType_Name(FunctionType value) {
    return Lens_FunctionType_Name(value);
  }
  static inline bool FunctionType_Parse(const ::std::string& name,
      FunctionType* value) {
    return Lens_FunctionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .gz.msgs.Lens.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gz::msgs::Lens_Type type() const;
  void set_type(::gz::msgs::Lens_Type value);

  // bool scale_to_hfov = 2;
  void clear_scale_to_hfov();
  static const int kScaleToHfovFieldNumber = 2;
  bool scale_to_hfov() const;
  void set_scale_to_hfov(bool value);

  // double c1 = 3;
  void clear_c1();
  static const int kC1FieldNumber = 3;
  double c1() const;
  void set_c1(double value);

  // double c2 = 4;
  void clear_c2();
  static const int kC2FieldNumber = 4;
  double c2() const;
  void set_c2(double value);

  // double c3 = 5;
  void clear_c3();
  static const int kC3FieldNumber = 5;
  double c3() const;
  void set_c3(double value);

  // double focal_length = 6;
  void clear_focal_length();
  static const int kFocalLengthFieldNumber = 6;
  double focal_length() const;
  void set_focal_length(double value);

  // double cutoff_angle = 8;
  void clear_cutoff_angle();
  static const int kCutoffAngleFieldNumber = 8;
  double cutoff_angle() const;
  void set_cutoff_angle(double value);

  // .gz.msgs.Lens.FunctionType function_type = 7;
  void clear_function_type();
  static const int kFunctionTypeFieldNumber = 7;
  ::gz::msgs::Lens_FunctionType function_type() const;
  void set_function_type(::gz::msgs::Lens_FunctionType value);

  // int32 environment_texture_size = 9;
  void clear_environment_texture_size();
  static const int kEnvironmentTextureSizeFieldNumber = 9;
  ::google::protobuf::int32 environment_texture_size() const;
  void set_environment_texture_size(::google::protobuf::int32 value);

  // double intrinsics_fx = 10;
  void clear_intrinsics_fx();
  static const int kIntrinsicsFxFieldNumber = 10;
  double intrinsics_fx() const;
  void set_intrinsics_fx(double value);

  // double intrinsics_fy = 11;
  void clear_intrinsics_fy();
  static const int kIntrinsicsFyFieldNumber = 11;
  double intrinsics_fy() const;
  void set_intrinsics_fy(double value);

  // double intrinsics_cx = 12;
  void clear_intrinsics_cx();
  static const int kIntrinsicsCxFieldNumber = 12;
  double intrinsics_cx() const;
  void set_intrinsics_cx(double value);

  // double intrinsics_cy = 13;
  void clear_intrinsics_cy();
  static const int kIntrinsicsCyFieldNumber = 13;
  double intrinsics_cy() const;
  void set_intrinsics_cy(double value);

  // double intrinsics_skew = 14;
  void clear_intrinsics_skew();
  static const int kIntrinsicsSkewFieldNumber = 14;
  double intrinsics_skew() const;
  void set_intrinsics_skew(double value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Lens)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  bool scale_to_hfov_;
  double c1_;
  double c2_;
  double c3_;
  double focal_length_;
  double cutoff_angle_;
  int function_type_;
  ::google::protobuf::int32 environment_texture_size_;
  double intrinsics_fx_;
  double intrinsics_fy_;
  double intrinsics_cx_;
  double intrinsics_cy_;
  double intrinsics_skew_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2flens_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Lens

// .gz.msgs.Lens.Type type = 1;
inline void Lens::clear_type() {
  type_ = 0;
}
inline ::gz::msgs::Lens_Type Lens::type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Lens.type)
  return static_cast< ::gz::msgs::Lens_Type >(type_);
}
inline void Lens::set_type(::gz::msgs::Lens_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Lens.type)
}

// bool scale_to_hfov = 2;
inline void Lens::clear_scale_to_hfov() {
  scale_to_hfov_ = false;
}
inline bool Lens::scale_to_hfov() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Lens.scale_to_hfov)
  return scale_to_hfov_;
}
inline void Lens::set_scale_to_hfov(bool value) {
  
  scale_to_hfov_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Lens.scale_to_hfov)
}

// double c1 = 3;
inline void Lens::clear_c1() {
  c1_ = 0;
}
inline double Lens::c1() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Lens.c1)
  return c1_;
}
inline void Lens::set_c1(double value) {
  
  c1_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Lens.c1)
}

// double c2 = 4;
inline void Lens::clear_c2() {
  c2_ = 0;
}
inline double Lens::c2() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Lens.c2)
  return c2_;
}
inline void Lens::set_c2(double value) {
  
  c2_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Lens.c2)
}

// double c3 = 5;
inline void Lens::clear_c3() {
  c3_ = 0;
}
inline double Lens::c3() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Lens.c3)
  return c3_;
}
inline void Lens::set_c3(double value) {
  
  c3_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Lens.c3)
}

// double focal_length = 6;
inline void Lens::clear_focal_length() {
  focal_length_ = 0;
}
inline double Lens::focal_length() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Lens.focal_length)
  return focal_length_;
}
inline void Lens::set_focal_length(double value) {
  
  focal_length_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Lens.focal_length)
}

// .gz.msgs.Lens.FunctionType function_type = 7;
inline void Lens::clear_function_type() {
  function_type_ = 0;
}
inline ::gz::msgs::Lens_FunctionType Lens::function_type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Lens.function_type)
  return static_cast< ::gz::msgs::Lens_FunctionType >(function_type_);
}
inline void Lens::set_function_type(::gz::msgs::Lens_FunctionType value) {
  
  function_type_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Lens.function_type)
}

// double cutoff_angle = 8;
inline void Lens::clear_cutoff_angle() {
  cutoff_angle_ = 0;
}
inline double Lens::cutoff_angle() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Lens.cutoff_angle)
  return cutoff_angle_;
}
inline void Lens::set_cutoff_angle(double value) {
  
  cutoff_angle_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Lens.cutoff_angle)
}

// int32 environment_texture_size = 9;
inline void Lens::clear_environment_texture_size() {
  environment_texture_size_ = 0;
}
inline ::google::protobuf::int32 Lens::environment_texture_size() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Lens.environment_texture_size)
  return environment_texture_size_;
}
inline void Lens::set_environment_texture_size(::google::protobuf::int32 value) {
  
  environment_texture_size_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Lens.environment_texture_size)
}

// double intrinsics_fx = 10;
inline void Lens::clear_intrinsics_fx() {
  intrinsics_fx_ = 0;
}
inline double Lens::intrinsics_fx() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Lens.intrinsics_fx)
  return intrinsics_fx_;
}
inline void Lens::set_intrinsics_fx(double value) {
  
  intrinsics_fx_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Lens.intrinsics_fx)
}

// double intrinsics_fy = 11;
inline void Lens::clear_intrinsics_fy() {
  intrinsics_fy_ = 0;
}
inline double Lens::intrinsics_fy() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Lens.intrinsics_fy)
  return intrinsics_fy_;
}
inline void Lens::set_intrinsics_fy(double value) {
  
  intrinsics_fy_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Lens.intrinsics_fy)
}

// double intrinsics_cx = 12;
inline void Lens::clear_intrinsics_cx() {
  intrinsics_cx_ = 0;
}
inline double Lens::intrinsics_cx() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Lens.intrinsics_cx)
  return intrinsics_cx_;
}
inline void Lens::set_intrinsics_cx(double value) {
  
  intrinsics_cx_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Lens.intrinsics_cx)
}

// double intrinsics_cy = 13;
inline void Lens::clear_intrinsics_cy() {
  intrinsics_cy_ = 0;
}
inline double Lens::intrinsics_cy() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Lens.intrinsics_cy)
  return intrinsics_cy_;
}
inline void Lens::set_intrinsics_cy(double value) {
  
  intrinsics_cy_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Lens.intrinsics_cy)
}

// double intrinsics_skew = 14;
inline void Lens::clear_intrinsics_skew() {
  intrinsics_skew_ = 0;
}
inline double Lens::intrinsics_skew() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Lens.intrinsics_skew)
  return intrinsics_skew_;
}
inline void Lens::set_intrinsics_skew(double value) {
  
  intrinsics_skew_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Lens.intrinsics_skew)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::msgs::Lens_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::Lens_Type>() {
  return ::gz::msgs::Lens_Type_descriptor();
}
template <> struct is_proto_enum< ::gz::msgs::Lens_FunctionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::Lens_FunctionType>() {
  return ::gz::msgs::Lens_FunctionType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2flens_2eproto
