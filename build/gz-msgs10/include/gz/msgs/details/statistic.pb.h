// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/statistic.proto

#ifndef PROTOBUF_INCLUDED_gz_2fmsgs_2fstatistic_2eproto
#define PROTOBUF_INCLUDED_gz_2fmsgs_2fstatistic_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gz/msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fstatistic_2eproto IGNITION_MSGS_VISIBLE

namespace protobuf_gz_2fmsgs_2fstatistic_2eproto {
// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void IGNITION_MSGS_VISIBLE AddDescriptors();
}  // namespace protobuf_gz_2fmsgs_2fstatistic_2eproto
namespace gz {
namespace msgs {
class Metric;
class MetricDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern MetricDefaultTypeInternal _Metric_default_instance_;
class Statistic;
class StatisticDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern StatisticDefaultTypeInternal _Statistic_default_instance_;
class StatisticsGroup;
class StatisticsGroupDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern StatisticsGroupDefaultTypeInternal _StatisticsGroup_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Metric* Arena::CreateMaybeMessage<::gz::msgs::Metric>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::Statistic* Arena::CreateMaybeMessage<::gz::msgs::Statistic>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::gz::msgs::StatisticsGroup* Arena::CreateMaybeMessage<::gz::msgs::StatisticsGroup>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz {
namespace msgs {

enum Statistic_DataType {
  Statistic_DataType_UNINITIALIZED = 0,
  Statistic_DataType_AVERAGE = 1,
  Statistic_DataType_MINIMUM = 2,
  Statistic_DataType_MAXIMUM = 3,
  Statistic_DataType_VARIANCE = 4,
  Statistic_DataType_STDDEV = 5,
  Statistic_DataType_SAMPLE_COUNT = 6,
  Statistic_DataType_ROOT_MEAN_SQUARE = 7,
  Statistic_DataType_MAX_ABS_VALUE = 8,
  Statistic_DataType_Statistic_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Statistic_DataType_Statistic_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
IGNITION_MSGS_VISIBLE bool Statistic_DataType_IsValid(int value);
const Statistic_DataType Statistic_DataType_DataType_MIN = Statistic_DataType_UNINITIALIZED;
const Statistic_DataType Statistic_DataType_DataType_MAX = Statistic_DataType_MAX_ABS_VALUE;
const int Statistic_DataType_DataType_ARRAYSIZE = Statistic_DataType_DataType_MAX + 1;

IGNITION_MSGS_VISIBLE const ::google::protobuf::EnumDescriptor* Statistic_DataType_descriptor();
inline const ::std::string& Statistic_DataType_Name(Statistic_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Statistic_DataType_descriptor(), value);
}
inline bool Statistic_DataType_Parse(
    const ::std::string& name, Statistic_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Statistic_DataType>(
    Statistic_DataType_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE Statistic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Statistic) */ {
 public:
  Statistic();
  virtual ~Statistic();

  Statistic(const Statistic& from);

  inline Statistic& operator=(const Statistic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Statistic(Statistic&& from) noexcept
    : Statistic() {
    *this = ::std::move(from);
  }

  inline Statistic& operator=(Statistic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Statistic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Statistic* internal_default_instance() {
    return reinterpret_cast<const Statistic*>(
               &_Statistic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Statistic* other);
  friend void swap(Statistic& a, Statistic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Statistic* New() const final {
    return CreateMaybeMessage<Statistic>(NULL);
  }

  Statistic* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Statistic>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Statistic& from);
  void MergeFrom(const Statistic& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Statistic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Statistic_DataType DataType;
  static const DataType UNINITIALIZED =
    Statistic_DataType_UNINITIALIZED;
  static const DataType AVERAGE =
    Statistic_DataType_AVERAGE;
  static const DataType MINIMUM =
    Statistic_DataType_MINIMUM;
  static const DataType MAXIMUM =
    Statistic_DataType_MAXIMUM;
  static const DataType VARIANCE =
    Statistic_DataType_VARIANCE;
  static const DataType STDDEV =
    Statistic_DataType_STDDEV;
  static const DataType SAMPLE_COUNT =
    Statistic_DataType_SAMPLE_COUNT;
  static const DataType ROOT_MEAN_SQUARE =
    Statistic_DataType_ROOT_MEAN_SQUARE;
  static const DataType MAX_ABS_VALUE =
    Statistic_DataType_MAX_ABS_VALUE;
  static inline bool DataType_IsValid(int value) {
    return Statistic_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    Statistic_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    Statistic_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    Statistic_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return Statistic_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return Statistic_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return Statistic_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // double value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  double value() const;
  void set_value(double value);

  // .gz.msgs.Statistic.DataType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::gz::msgs::Statistic_DataType type() const;
  void set_type(::gz::msgs::Statistic_DataType value);

  // @@protoc_insertion_point(class_scope:gz.msgs.Statistic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::gz::msgs::Header* header_;
  double value_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fstatistic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE StatisticsGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.StatisticsGroup) */ {
 public:
  StatisticsGroup();
  virtual ~StatisticsGroup();

  StatisticsGroup(const StatisticsGroup& from);

  inline StatisticsGroup& operator=(const StatisticsGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatisticsGroup(StatisticsGroup&& from) noexcept
    : StatisticsGroup() {
    *this = ::std::move(from);
  }

  inline StatisticsGroup& operator=(StatisticsGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatisticsGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatisticsGroup* internal_default_instance() {
    return reinterpret_cast<const StatisticsGroup*>(
               &_StatisticsGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(StatisticsGroup* other);
  friend void swap(StatisticsGroup& a, StatisticsGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatisticsGroup* New() const final {
    return CreateMaybeMessage<StatisticsGroup>(NULL);
  }

  StatisticsGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StatisticsGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StatisticsGroup& from);
  void MergeFrom(const StatisticsGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticsGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gz.msgs.Statistic statistics = 3;
  int statistics_size() const;
  void clear_statistics();
  static const int kStatisticsFieldNumber = 3;
  ::gz::msgs::Statistic* mutable_statistics(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Statistic >*
      mutable_statistics();
  const ::gz::msgs::Statistic& statistics(int index) const;
  ::gz::msgs::Statistic* add_statistics();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Statistic >&
      statistics() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // @@protoc_insertion_point(class_scope:gz.msgs.StatisticsGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Statistic > statistics_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::gz::msgs::Header* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fstatistic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE Metric : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz.msgs.Metric) */ {
 public:
  Metric();
  virtual ~Metric();

  Metric(const Metric& from);

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Metric(Metric&& from) noexcept
    : Metric() {
    *this = ::std::move(from);
  }

  inline Metric& operator=(Metric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Metric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
               &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Metric* other);
  friend void swap(Metric& a, Metric& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Metric* New() const final {
    return CreateMaybeMessage<Metric>(NULL);
  }

  Metric* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Metric>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Metric& from);
  void MergeFrom(const Metric& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metric* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gz.msgs.StatisticsGroup statistics_groups = 3;
  int statistics_groups_size() const;
  void clear_statistics_groups();
  static const int kStatisticsGroupsFieldNumber = 3;
  ::gz::msgs::StatisticsGroup* mutable_statistics_groups(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::StatisticsGroup >*
      mutable_statistics_groups();
  const ::gz::msgs::StatisticsGroup& statistics_groups(int index) const;
  ::gz::msgs::StatisticsGroup* add_statistics_groups();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::StatisticsGroup >&
      statistics_groups() const;

  // repeated .gz.msgs.Statistic statistics = 4;
  int statistics_size() const;
  void clear_statistics();
  static const int kStatisticsFieldNumber = 4;
  ::gz::msgs::Statistic* mutable_statistics(int index);
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Statistic >*
      mutable_statistics();
  const ::gz::msgs::Statistic& statistics(int index) const;
  ::gz::msgs::Statistic* add_statistics();
  const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Statistic >&
      statistics() const;

  // string unit = 2;
  void clear_unit();
  static const int kUnitFieldNumber = 2;
  const ::std::string& unit() const;
  void set_unit(const ::std::string& value);
  #if LANG_CXX11
  void set_unit(::std::string&& value);
  #endif
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  ::std::string* mutable_unit();
  ::std::string* release_unit();
  void set_allocated_unit(::std::string* unit);

  // .gz.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz::msgs::Header& _internal_header() const;
  public:
  const ::gz::msgs::Header& header() const;
  ::gz::msgs::Header* release_header();
  ::gz::msgs::Header* mutable_header();
  void set_allocated_header(::gz::msgs::Header* header);

  // @@protoc_insertion_point(class_scope:gz.msgs.Metric)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::StatisticsGroup > statistics_groups_;
  ::google::protobuf::RepeatedPtrField< ::gz::msgs::Statistic > statistics_;
  ::google::protobuf::internal::ArenaStringPtr unit_;
  ::gz::msgs::Header* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gz_2fmsgs_2fstatistic_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Statistic

// .gz.msgs.Header header = 1;
inline bool Statistic::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& Statistic::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& Statistic::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.Statistic.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* Statistic::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.Statistic.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* Statistic::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Statistic.header)
  return header_;
}
inline void Statistic::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Statistic.header)
}

// .gz.msgs.Statistic.DataType type = 2;
inline void Statistic::clear_type() {
  type_ = 0;
}
inline ::gz::msgs::Statistic_DataType Statistic::type() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Statistic.type)
  return static_cast< ::gz::msgs::Statistic_DataType >(type_);
}
inline void Statistic::set_type(::gz::msgs::Statistic_DataType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Statistic.type)
}

// string name = 3;
inline void Statistic::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Statistic::name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Statistic.name)
  return name_.GetNoArena();
}
inline void Statistic::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Statistic.name)
}
#if LANG_CXX11
inline void Statistic::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Statistic.name)
}
#endif
inline void Statistic::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Statistic.name)
}
inline void Statistic::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Statistic.name)
}
inline ::std::string* Statistic::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Statistic.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Statistic::release_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.Statistic.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Statistic::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Statistic.name)
}

// double value = 4;
inline void Statistic::clear_value() {
  value_ = 0;
}
inline double Statistic::value() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Statistic.value)
  return value_;
}
inline void Statistic::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:gz.msgs.Statistic.value)
}

// -------------------------------------------------------------------

// StatisticsGroup

// .gz.msgs.Header header = 1;
inline bool StatisticsGroup::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& StatisticsGroup::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& StatisticsGroup::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.StatisticsGroup.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* StatisticsGroup::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.StatisticsGroup.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* StatisticsGroup::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.StatisticsGroup.header)
  return header_;
}
inline void StatisticsGroup::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.StatisticsGroup.header)
}

// string name = 2;
inline void StatisticsGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatisticsGroup::name() const {
  // @@protoc_insertion_point(field_get:gz.msgs.StatisticsGroup.name)
  return name_.GetNoArena();
}
inline void StatisticsGroup::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.StatisticsGroup.name)
}
#if LANG_CXX11
inline void StatisticsGroup::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.StatisticsGroup.name)
}
#endif
inline void StatisticsGroup::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.StatisticsGroup.name)
}
inline void StatisticsGroup::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.StatisticsGroup.name)
}
inline ::std::string* StatisticsGroup::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.StatisticsGroup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatisticsGroup::release_name() {
  // @@protoc_insertion_point(field_release:gz.msgs.StatisticsGroup.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatisticsGroup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.StatisticsGroup.name)
}

// repeated .gz.msgs.Statistic statistics = 3;
inline int StatisticsGroup::statistics_size() const {
  return statistics_.size();
}
inline void StatisticsGroup::clear_statistics() {
  statistics_.Clear();
}
inline ::gz::msgs::Statistic* StatisticsGroup::mutable_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.StatisticsGroup.statistics)
  return statistics_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::Statistic >*
StatisticsGroup::mutable_statistics() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.StatisticsGroup.statistics)
  return &statistics_;
}
inline const ::gz::msgs::Statistic& StatisticsGroup::statistics(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.StatisticsGroup.statistics)
  return statistics_.Get(index);
}
inline ::gz::msgs::Statistic* StatisticsGroup::add_statistics() {
  // @@protoc_insertion_point(field_add:gz.msgs.StatisticsGroup.statistics)
  return statistics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Statistic >&
StatisticsGroup::statistics() const {
  // @@protoc_insertion_point(field_list:gz.msgs.StatisticsGroup.statistics)
  return statistics_;
}

// -------------------------------------------------------------------

// Metric

// .gz.msgs.Header header = 1;
inline bool Metric::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::gz::msgs::Header& Metric::_internal_header() const {
  return *header_;
}
inline const ::gz::msgs::Header& Metric::header() const {
  const ::gz::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz.msgs.Metric.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz::msgs::Header*>(
      &::gz::msgs::_Header_default_instance_);
}
inline ::gz::msgs::Header* Metric::release_header() {
  // @@protoc_insertion_point(field_release:gz.msgs.Metric.header)
  
  ::gz::msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz::msgs::Header* Metric::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz.msgs.Metric.header)
  return header_;
}
inline void Metric::set_allocated_header(::gz::msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Metric.header)
}

// string unit = 2;
inline void Metric::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Metric::unit() const {
  // @@protoc_insertion_point(field_get:gz.msgs.Metric.unit)
  return unit_.GetNoArena();
}
inline void Metric::set_unit(const ::std::string& value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gz.msgs.Metric.unit)
}
#if LANG_CXX11
inline void Metric::set_unit(::std::string&& value) {
  
  unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gz.msgs.Metric.unit)
}
#endif
inline void Metric::set_unit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gz.msgs.Metric.unit)
}
inline void Metric::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gz.msgs.Metric.unit)
}
inline ::std::string* Metric::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:gz.msgs.Metric.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metric::release_unit() {
  // @@protoc_insertion_point(field_release:gz.msgs.Metric.unit)
  
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metric::set_allocated_unit(::std::string* unit) {
  if (unit != NULL) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Metric.unit)
}

// repeated .gz.msgs.StatisticsGroup statistics_groups = 3;
inline int Metric::statistics_groups_size() const {
  return statistics_groups_.size();
}
inline void Metric::clear_statistics_groups() {
  statistics_groups_.Clear();
}
inline ::gz::msgs::StatisticsGroup* Metric::mutable_statistics_groups(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.Metric.statistics_groups)
  return statistics_groups_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::StatisticsGroup >*
Metric::mutable_statistics_groups() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.Metric.statistics_groups)
  return &statistics_groups_;
}
inline const ::gz::msgs::StatisticsGroup& Metric::statistics_groups(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.Metric.statistics_groups)
  return statistics_groups_.Get(index);
}
inline ::gz::msgs::StatisticsGroup* Metric::add_statistics_groups() {
  // @@protoc_insertion_point(field_add:gz.msgs.Metric.statistics_groups)
  return statistics_groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::StatisticsGroup >&
Metric::statistics_groups() const {
  // @@protoc_insertion_point(field_list:gz.msgs.Metric.statistics_groups)
  return statistics_groups_;
}

// repeated .gz.msgs.Statistic statistics = 4;
inline int Metric::statistics_size() const {
  return statistics_.size();
}
inline void Metric::clear_statistics() {
  statistics_.Clear();
}
inline ::gz::msgs::Statistic* Metric::mutable_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:gz.msgs.Metric.statistics)
  return statistics_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gz::msgs::Statistic >*
Metric::mutable_statistics() {
  // @@protoc_insertion_point(field_mutable_list:gz.msgs.Metric.statistics)
  return &statistics_;
}
inline const ::gz::msgs::Statistic& Metric::statistics(int index) const {
  // @@protoc_insertion_point(field_get:gz.msgs.Metric.statistics)
  return statistics_.Get(index);
}
inline ::gz::msgs::Statistic* Metric::add_statistics() {
  // @@protoc_insertion_point(field_add:gz.msgs.Metric.statistics)
  return statistics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gz::msgs::Statistic >&
Metric::statistics() const {
  // @@protoc_insertion_point(field_list:gz.msgs.Metric.statistics)
  return statistics_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gz

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz::msgs::Statistic_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz::msgs::Statistic_DataType>() {
  return ::gz::msgs::Statistic_DataType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gz_2fmsgs_2fstatistic_2eproto
