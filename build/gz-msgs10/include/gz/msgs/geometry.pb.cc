// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/geometry.proto

#include "gz/msgs/geometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.Geometry", Geometry)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fboxgeom_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fboxgeom_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_BoxGeom;
}  // namespace protobuf_gz_2fmsgs_2fboxgeom_2eproto
namespace protobuf_gz_2fmsgs_2fcapsulegeom_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fcapsulegeom_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CapsuleGeom;
}  // namespace protobuf_gz_2fmsgs_2fcapsulegeom_2eproto
namespace protobuf_gz_2fmsgs_2fconegeom_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fconegeom_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ConeGeom;
}  // namespace protobuf_gz_2fmsgs_2fconegeom_2eproto
namespace protobuf_gz_2fmsgs_2fcylindergeom_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fcylindergeom_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CylinderGeom;
}  // namespace protobuf_gz_2fmsgs_2fcylindergeom_2eproto
namespace protobuf_gz_2fmsgs_2fellipsoidgeom_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fellipsoidgeom_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_EllipsoidGeom;
}  // namespace protobuf_gz_2fmsgs_2fellipsoidgeom_2eproto
namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace protobuf_gz_2fmsgs_2fheightmapgeom_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheightmapgeom_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_HeightmapGeom;
}  // namespace protobuf_gz_2fmsgs_2fheightmapgeom_2eproto
namespace protobuf_gz_2fmsgs_2fimagegeom_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fimagegeom_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ImageGeom;
}  // namespace protobuf_gz_2fmsgs_2fimagegeom_2eproto
namespace protobuf_gz_2fmsgs_2fmeshgeom_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fmeshgeom_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MeshGeom;
}  // namespace protobuf_gz_2fmsgs_2fmeshgeom_2eproto
namespace protobuf_gz_2fmsgs_2fplanegeom_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fplanegeom_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_PlaneGeom;
}  // namespace protobuf_gz_2fmsgs_2fplanegeom_2eproto
namespace protobuf_gz_2fmsgs_2fpolylinegeom_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fpolylinegeom_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Polyline;
}  // namespace protobuf_gz_2fmsgs_2fpolylinegeom_2eproto
namespace protobuf_gz_2fmsgs_2fspheregeom_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fspheregeom_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SphereGeom;
}  // namespace protobuf_gz_2fmsgs_2fspheregeom_2eproto
namespace protobuf_gz_2fmsgs_2fvector3d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fvector3d_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Vector3d;
}  // namespace protobuf_gz_2fmsgs_2fvector3d_2eproto
namespace gz {
namespace msgs {
class GeometryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Geometry>
      _instance;
} _Geometry_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fgeometry_2eproto {
static void InitDefaultsGeometry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Geometry_default_instance_;
    new (ptr) ::gz::msgs::Geometry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Geometry::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<13> scc_info_Geometry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 13, InitDefaultsGeometry}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2fboxgeom_2eproto::scc_info_BoxGeom.base,
      &protobuf_gz_2fmsgs_2fcylindergeom_2eproto::scc_info_CylinderGeom.base,
      &protobuf_gz_2fmsgs_2fplanegeom_2eproto::scc_info_PlaneGeom.base,
      &protobuf_gz_2fmsgs_2fspheregeom_2eproto::scc_info_SphereGeom.base,
      &protobuf_gz_2fmsgs_2fimagegeom_2eproto::scc_info_ImageGeom.base,
      &protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::scc_info_HeightmapGeom.base,
      &protobuf_gz_2fmsgs_2fmeshgeom_2eproto::scc_info_MeshGeom.base,
      &protobuf_gz_2fmsgs_2fconegeom_2eproto::scc_info_ConeGeom.base,
      &protobuf_gz_2fmsgs_2fcapsulegeom_2eproto::scc_info_CapsuleGeom.base,
      &protobuf_gz_2fmsgs_2fellipsoidgeom_2eproto::scc_info_EllipsoidGeom.base,
      &protobuf_gz_2fmsgs_2fvector3d_2eproto::scc_info_Vector3d.base,
      &protobuf_gz_2fmsgs_2fpolylinegeom_2eproto::scc_info_Polyline.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Geometry.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Geometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Geometry, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Geometry, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Geometry, box_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Geometry, cylinder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Geometry, plane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Geometry, sphere_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Geometry, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Geometry, heightmap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Geometry, mesh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Geometry, cone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Geometry, capsule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Geometry, ellipsoid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Geometry, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Geometry, polyline_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::Geometry)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Geometry_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/geometry.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026gz/msgs/geometry.proto\022\007gz.msgs\032\025gz/ms"
      "gs/boxgeom.proto\032\031gz/msgs/capsulegeom.pr"
      "oto\032\026gz/msgs/conegeom.proto\032\032gz/msgs/cyl"
      "indergeom.proto\032\033gz/msgs/ellipsoidgeom.p"
      "roto\032\024gz/msgs/header.proto\032\033gz/msgs/heig"
      "htmapgeom.proto\032\027gz/msgs/imagegeom.proto"
      "\032\026gz/msgs/meshgeom.proto\032\027gz/msgs/planeg"
      "eom.proto\032\032gz/msgs/polylinegeom.proto\032\030g"
      "z/msgs/spheregeom.proto\032\026gz/msgs/vector3"
      "d.proto\"\334\005\n\010Geometry\022\037\n\006header\030\001 \001(\0132\017.g"
      "z.msgs.Header\022$\n\004type\030\002 \001(\0162\026.gz.msgs.Ge"
      "ometry.Type\022\035\n\003box\030\003 \001(\0132\020.gz.msgs.BoxGe"
      "om\022\'\n\010cylinder\030\004 \001(\0132\025.gz.msgs.CylinderG"
      "eom\022!\n\005plane\030\005 \001(\0132\022.gz.msgs.PlaneGeom\022#"
      "\n\006sphere\030\006 \001(\0132\023.gz.msgs.SphereGeom\022!\n\005i"
      "mage\030\007 \001(\0132\022.gz.msgs.ImageGeom\022)\n\theight"
      "map\030\010 \001(\0132\026.gz.msgs.HeightmapGeom\022\037\n\004mes"
      "h\030\t \001(\0132\021.gz.msgs.MeshGeom\022\037\n\004cone\030\n \001(\013"
      "2\021.gz.msgs.ConeGeom\022%\n\007capsule\030\r \001(\0132\024.g"
      "z.msgs.CapsuleGeom\022)\n\tellipsoid\030\016 \001(\0132\026."
      "gz.msgs.EllipsoidGeom\022!\n\006points\030\013 \003(\0132\021."
      "gz.msgs.Vector3d\022#\n\010polyline\030\014 \003(\0132\021.gz."
      "msgs.Polyline\"\316\001\n\004Type\022\007\n\003BOX\020\000\022\014\n\010CYLIN"
      "DER\020\001\022\n\n\006SPHERE\020\002\022\t\n\005PLANE\020\003\022\t\n\005IMAGE\020\004\022"
      "\r\n\tHEIGHTMAP\020\005\022\010\n\004MESH\020\006\022\020\n\014TRIANGLE_FAN"
      "\020\007\022\016\n\nLINE_STRIP\020\010\022\014\n\010POLYLINE\020\t\022\010\n\004CONE"
      "\020\n\022\t\n\005EMPTY\020\013\022\t\n\005ARROW\020\014\022\010\n\004AXIS\020\r\022\013\n\007CA"
      "PSULE\020\016\022\r\n\tELLIPSOID\020\017B\035\n\013com.gz.msgsB\016G"
      "eometryProtosb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1141);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/geometry.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fboxgeom_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fcapsulegeom_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fconegeom_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fcylindergeom_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fellipsoidgeom_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fheightmapgeom_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fimagegeom_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fmeshgeom_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fplanegeom_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fpolylinegeom_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fspheregeom_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fvector3d_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fgeometry_2eproto
namespace gz {
namespace msgs {
const ::google::protobuf::EnumDescriptor* Geometry_Type_descriptor() {
  protobuf_gz_2fmsgs_2fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gz_2fmsgs_2fgeometry_2eproto::file_level_enum_descriptors[0];
}
bool Geometry_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Geometry_Type Geometry::BOX;
const Geometry_Type Geometry::CYLINDER;
const Geometry_Type Geometry::SPHERE;
const Geometry_Type Geometry::PLANE;
const Geometry_Type Geometry::IMAGE;
const Geometry_Type Geometry::HEIGHTMAP;
const Geometry_Type Geometry::MESH;
const Geometry_Type Geometry::TRIANGLE_FAN;
const Geometry_Type Geometry::LINE_STRIP;
const Geometry_Type Geometry::POLYLINE;
const Geometry_Type Geometry::CONE;
const Geometry_Type Geometry::EMPTY;
const Geometry_Type Geometry::ARROW;
const Geometry_Type Geometry::AXIS;
const Geometry_Type Geometry::CAPSULE;
const Geometry_Type Geometry::ELLIPSOID;
const Geometry_Type Geometry::Type_MIN;
const Geometry_Type Geometry::Type_MAX;
const int Geometry::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Geometry::InitAsDefaultInstance() {
  ::gz::msgs::_Geometry_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_Geometry_default_instance_._instance.get_mutable()->box_ = const_cast< ::gz::msgs::BoxGeom*>(
      ::gz::msgs::BoxGeom::internal_default_instance());
  ::gz::msgs::_Geometry_default_instance_._instance.get_mutable()->cylinder_ = const_cast< ::gz::msgs::CylinderGeom*>(
      ::gz::msgs::CylinderGeom::internal_default_instance());
  ::gz::msgs::_Geometry_default_instance_._instance.get_mutable()->plane_ = const_cast< ::gz::msgs::PlaneGeom*>(
      ::gz::msgs::PlaneGeom::internal_default_instance());
  ::gz::msgs::_Geometry_default_instance_._instance.get_mutable()->sphere_ = const_cast< ::gz::msgs::SphereGeom*>(
      ::gz::msgs::SphereGeom::internal_default_instance());
  ::gz::msgs::_Geometry_default_instance_._instance.get_mutable()->image_ = const_cast< ::gz::msgs::ImageGeom*>(
      ::gz::msgs::ImageGeom::internal_default_instance());
  ::gz::msgs::_Geometry_default_instance_._instance.get_mutable()->heightmap_ = const_cast< ::gz::msgs::HeightmapGeom*>(
      ::gz::msgs::HeightmapGeom::internal_default_instance());
  ::gz::msgs::_Geometry_default_instance_._instance.get_mutable()->mesh_ = const_cast< ::gz::msgs::MeshGeom*>(
      ::gz::msgs::MeshGeom::internal_default_instance());
  ::gz::msgs::_Geometry_default_instance_._instance.get_mutable()->cone_ = const_cast< ::gz::msgs::ConeGeom*>(
      ::gz::msgs::ConeGeom::internal_default_instance());
  ::gz::msgs::_Geometry_default_instance_._instance.get_mutable()->capsule_ = const_cast< ::gz::msgs::CapsuleGeom*>(
      ::gz::msgs::CapsuleGeom::internal_default_instance());
  ::gz::msgs::_Geometry_default_instance_._instance.get_mutable()->ellipsoid_ = const_cast< ::gz::msgs::EllipsoidGeom*>(
      ::gz::msgs::EllipsoidGeom::internal_default_instance());
}
void Geometry::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void Geometry::clear_box() {
  if (GetArenaNoVirtual() == NULL && box_ != NULL) {
    delete box_;
  }
  box_ = NULL;
}
void Geometry::clear_cylinder() {
  if (GetArenaNoVirtual() == NULL && cylinder_ != NULL) {
    delete cylinder_;
  }
  cylinder_ = NULL;
}
void Geometry::clear_plane() {
  if (GetArenaNoVirtual() == NULL && plane_ != NULL) {
    delete plane_;
  }
  plane_ = NULL;
}
void Geometry::clear_sphere() {
  if (GetArenaNoVirtual() == NULL && sphere_ != NULL) {
    delete sphere_;
  }
  sphere_ = NULL;
}
void Geometry::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
}
void Geometry::clear_heightmap() {
  if (GetArenaNoVirtual() == NULL && heightmap_ != NULL) {
    delete heightmap_;
  }
  heightmap_ = NULL;
}
void Geometry::clear_mesh() {
  if (GetArenaNoVirtual() == NULL && mesh_ != NULL) {
    delete mesh_;
  }
  mesh_ = NULL;
}
void Geometry::clear_cone() {
  if (GetArenaNoVirtual() == NULL && cone_ != NULL) {
    delete cone_;
  }
  cone_ = NULL;
}
void Geometry::clear_capsule() {
  if (GetArenaNoVirtual() == NULL && capsule_ != NULL) {
    delete capsule_;
  }
  capsule_ = NULL;
}
void Geometry::clear_ellipsoid() {
  if (GetArenaNoVirtual() == NULL && ellipsoid_ != NULL) {
    delete ellipsoid_;
  }
  ellipsoid_ = NULL;
}
void Geometry::clear_points() {
  points_.Clear();
}
void Geometry::clear_polyline() {
  polyline_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Geometry::kHeaderFieldNumber;
const int Geometry::kTypeFieldNumber;
const int Geometry::kBoxFieldNumber;
const int Geometry::kCylinderFieldNumber;
const int Geometry::kPlaneFieldNumber;
const int Geometry::kSphereFieldNumber;
const int Geometry::kImageFieldNumber;
const int Geometry::kHeightmapFieldNumber;
const int Geometry::kMeshFieldNumber;
const int Geometry::kConeFieldNumber;
const int Geometry::kCapsuleFieldNumber;
const int Geometry::kEllipsoidFieldNumber;
const int Geometry::kPointsFieldNumber;
const int Geometry::kPolylineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Geometry::Geometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fgeometry_2eproto::scc_info_Geometry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Geometry)
}
Geometry::Geometry(const Geometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_),
      polyline_(from.polyline_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_box()) {
    box_ = new ::gz::msgs::BoxGeom(*from.box_);
  } else {
    box_ = NULL;
  }
  if (from.has_cylinder()) {
    cylinder_ = new ::gz::msgs::CylinderGeom(*from.cylinder_);
  } else {
    cylinder_ = NULL;
  }
  if (from.has_plane()) {
    plane_ = new ::gz::msgs::PlaneGeom(*from.plane_);
  } else {
    plane_ = NULL;
  }
  if (from.has_sphere()) {
    sphere_ = new ::gz::msgs::SphereGeom(*from.sphere_);
  } else {
    sphere_ = NULL;
  }
  if (from.has_image()) {
    image_ = new ::gz::msgs::ImageGeom(*from.image_);
  } else {
    image_ = NULL;
  }
  if (from.has_heightmap()) {
    heightmap_ = new ::gz::msgs::HeightmapGeom(*from.heightmap_);
  } else {
    heightmap_ = NULL;
  }
  if (from.has_mesh()) {
    mesh_ = new ::gz::msgs::MeshGeom(*from.mesh_);
  } else {
    mesh_ = NULL;
  }
  if (from.has_cone()) {
    cone_ = new ::gz::msgs::ConeGeom(*from.cone_);
  } else {
    cone_ = NULL;
  }
  if (from.has_capsule()) {
    capsule_ = new ::gz::msgs::CapsuleGeom(*from.capsule_);
  } else {
    capsule_ = NULL;
  }
  if (from.has_ellipsoid()) {
    ellipsoid_ = new ::gz::msgs::EllipsoidGeom(*from.ellipsoid_);
  } else {
    ellipsoid_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Geometry)
}

void Geometry::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(type_));
}

Geometry::~Geometry() {
  // @@protoc_insertion_point(destructor:gz.msgs.Geometry)
  SharedDtor();
}

void Geometry::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete box_;
  if (this != internal_default_instance()) delete cylinder_;
  if (this != internal_default_instance()) delete plane_;
  if (this != internal_default_instance()) delete sphere_;
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete heightmap_;
  if (this != internal_default_instance()) delete mesh_;
  if (this != internal_default_instance()) delete cone_;
  if (this != internal_default_instance()) delete capsule_;
  if (this != internal_default_instance()) delete ellipsoid_;
}

void Geometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Geometry::descriptor() {
  ::protobuf_gz_2fmsgs_2fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fgeometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Geometry& Geometry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fgeometry_2eproto::scc_info_Geometry.base);
  return *internal_default_instance();
}


void Geometry::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Geometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  polyline_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && box_ != NULL) {
    delete box_;
  }
  box_ = NULL;
  if (GetArenaNoVirtual() == NULL && cylinder_ != NULL) {
    delete cylinder_;
  }
  cylinder_ = NULL;
  if (GetArenaNoVirtual() == NULL && plane_ != NULL) {
    delete plane_;
  }
  plane_ = NULL;
  if (GetArenaNoVirtual() == NULL && sphere_ != NULL) {
    delete sphere_;
  }
  sphere_ = NULL;
  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
  if (GetArenaNoVirtual() == NULL && heightmap_ != NULL) {
    delete heightmap_;
  }
  heightmap_ = NULL;
  if (GetArenaNoVirtual() == NULL && mesh_ != NULL) {
    delete mesh_;
  }
  mesh_ = NULL;
  if (GetArenaNoVirtual() == NULL && cone_ != NULL) {
    delete cone_;
  }
  cone_ = NULL;
  if (GetArenaNoVirtual() == NULL && capsule_ != NULL) {
    delete capsule_;
  }
  capsule_ = NULL;
  if (GetArenaNoVirtual() == NULL && ellipsoid_ != NULL) {
    delete ellipsoid_;
  }
  ellipsoid_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Geometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Geometry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Geometry.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gz::msgs::Geometry_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.BoxGeom box = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.CylinderGeom cylinder = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cylinder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.PlaneGeom plane = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_plane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.SphereGeom sphere = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sphere()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.ImageGeom image = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.HeightmapGeom heightmap = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heightmap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.MeshGeom mesh = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mesh()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.ConeGeom cone = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.Vector3d points = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.Polyline polyline = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_polyline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.CapsuleGeom capsule = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_capsule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.EllipsoidGeom ellipsoid = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ellipsoid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Geometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Geometry)
  return false;
#undef DO_
}

void Geometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Geometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .gz.msgs.Geometry.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .gz.msgs.BoxGeom box = 3;
  if (this->has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_box(), output);
  }

  // .gz.msgs.CylinderGeom cylinder = 4;
  if (this->has_cylinder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_cylinder(), output);
  }

  // .gz.msgs.PlaneGeom plane = 5;
  if (this->has_plane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_plane(), output);
  }

  // .gz.msgs.SphereGeom sphere = 6;
  if (this->has_sphere()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_sphere(), output);
  }

  // .gz.msgs.ImageGeom image = 7;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_image(), output);
  }

  // .gz.msgs.HeightmapGeom heightmap = 8;
  if (this->has_heightmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_heightmap(), output);
  }

  // .gz.msgs.MeshGeom mesh = 9;
  if (this->has_mesh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_mesh(), output);
  }

  // .gz.msgs.ConeGeom cone = 10;
  if (this->has_cone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_cone(), output);
  }

  // repeated .gz.msgs.Vector3d points = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->points(static_cast<int>(i)),
      output);
  }

  // repeated .gz.msgs.Polyline polyline = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polyline_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->polyline(static_cast<int>(i)),
      output);
  }

  // .gz.msgs.CapsuleGeom capsule = 13;
  if (this->has_capsule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_capsule(), output);
  }

  // .gz.msgs.EllipsoidGeom ellipsoid = 14;
  if (this->has_ellipsoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_ellipsoid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Geometry)
}

::google::protobuf::uint8* Geometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Geometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .gz.msgs.Geometry.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .gz.msgs.BoxGeom box = 3;
  if (this->has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_box(), deterministic, target);
  }

  // .gz.msgs.CylinderGeom cylinder = 4;
  if (this->has_cylinder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_cylinder(), deterministic, target);
  }

  // .gz.msgs.PlaneGeom plane = 5;
  if (this->has_plane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_plane(), deterministic, target);
  }

  // .gz.msgs.SphereGeom sphere = 6;
  if (this->has_sphere()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_sphere(), deterministic, target);
  }

  // .gz.msgs.ImageGeom image = 7;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_image(), deterministic, target);
  }

  // .gz.msgs.HeightmapGeom heightmap = 8;
  if (this->has_heightmap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_heightmap(), deterministic, target);
  }

  // .gz.msgs.MeshGeom mesh = 9;
  if (this->has_mesh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_mesh(), deterministic, target);
  }

  // .gz.msgs.ConeGeom cone = 10;
  if (this->has_cone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_cone(), deterministic, target);
  }

  // repeated .gz.msgs.Vector3d points = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->points(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gz.msgs.Polyline polyline = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polyline_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->polyline(static_cast<int>(i)), deterministic, target);
  }

  // .gz.msgs.CapsuleGeom capsule = 13;
  if (this->has_capsule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_capsule(), deterministic, target);
  }

  // .gz.msgs.EllipsoidGeom ellipsoid = 14;
  if (this->has_ellipsoid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_ellipsoid(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Geometry)
  return target;
}

size_t Geometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Geometry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gz.msgs.Vector3d points = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  // repeated .gz.msgs.Polyline polyline = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->polyline_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->polyline(static_cast<int>(i)));
    }
  }

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.BoxGeom box = 3;
  if (this->has_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *box_);
  }

  // .gz.msgs.CylinderGeom cylinder = 4;
  if (this->has_cylinder()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cylinder_);
  }

  // .gz.msgs.PlaneGeom plane = 5;
  if (this->has_plane()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *plane_);
  }

  // .gz.msgs.SphereGeom sphere = 6;
  if (this->has_sphere()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sphere_);
  }

  // .gz.msgs.ImageGeom image = 7;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // .gz.msgs.HeightmapGeom heightmap = 8;
  if (this->has_heightmap()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *heightmap_);
  }

  // .gz.msgs.MeshGeom mesh = 9;
  if (this->has_mesh()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mesh_);
  }

  // .gz.msgs.ConeGeom cone = 10;
  if (this->has_cone()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cone_);
  }

  // .gz.msgs.CapsuleGeom capsule = 13;
  if (this->has_capsule()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *capsule_);
  }

  // .gz.msgs.EllipsoidGeom ellipsoid = 14;
  if (this->has_ellipsoid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ellipsoid_);
  }

  // .gz.msgs.Geometry.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Geometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Geometry)
  GOOGLE_DCHECK_NE(&from, this);
  const Geometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Geometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Geometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Geometry)
    MergeFrom(*source);
  }
}

void Geometry::MergeFrom(const Geometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Geometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  polyline_.MergeFrom(from.polyline_);
  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_box()) {
    mutable_box()->::gz::msgs::BoxGeom::MergeFrom(from.box());
  }
  if (from.has_cylinder()) {
    mutable_cylinder()->::gz::msgs::CylinderGeom::MergeFrom(from.cylinder());
  }
  if (from.has_plane()) {
    mutable_plane()->::gz::msgs::PlaneGeom::MergeFrom(from.plane());
  }
  if (from.has_sphere()) {
    mutable_sphere()->::gz::msgs::SphereGeom::MergeFrom(from.sphere());
  }
  if (from.has_image()) {
    mutable_image()->::gz::msgs::ImageGeom::MergeFrom(from.image());
  }
  if (from.has_heightmap()) {
    mutable_heightmap()->::gz::msgs::HeightmapGeom::MergeFrom(from.heightmap());
  }
  if (from.has_mesh()) {
    mutable_mesh()->::gz::msgs::MeshGeom::MergeFrom(from.mesh());
  }
  if (from.has_cone()) {
    mutable_cone()->::gz::msgs::ConeGeom::MergeFrom(from.cone());
  }
  if (from.has_capsule()) {
    mutable_capsule()->::gz::msgs::CapsuleGeom::MergeFrom(from.capsule());
  }
  if (from.has_ellipsoid()) {
    mutable_ellipsoid()->::gz::msgs::EllipsoidGeom::MergeFrom(from.ellipsoid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Geometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Geometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geometry::CopyFrom(const Geometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Geometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geometry::IsInitialized() const {
  return true;
}

void Geometry::Swap(Geometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Geometry::InternalSwap(Geometry* other) {
  using std::swap;
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  CastToBase(&polyline_)->InternalSwap(CastToBase(&other->polyline_));
  swap(header_, other->header_);
  swap(box_, other->box_);
  swap(cylinder_, other->cylinder_);
  swap(plane_, other->plane_);
  swap(sphere_, other->sphere_);
  swap(image_, other->image_);
  swap(heightmap_, other->heightmap_);
  swap(mesh_, other->mesh_);
  swap(cone_, other->cone_);
  swap(capsule_, other->capsule_);
  swap(ellipsoid_, other->ellipsoid_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Geometry::GetMetadata() const {
  protobuf_gz_2fmsgs_2fgeometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fgeometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Geometry* Arena::CreateMaybeMessage< ::gz::msgs::Geometry >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Geometry >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
