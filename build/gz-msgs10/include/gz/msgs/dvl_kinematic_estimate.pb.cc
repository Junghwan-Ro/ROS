// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/dvl_kinematic_estimate.proto

#include "gz/msgs/dvl_kinematic_estimate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.DVLKinematicEstimate", DVLKinematicEstimate)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fvector3d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fvector3d_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Vector3d;
}  // namespace protobuf_gz_2fmsgs_2fvector3d_2eproto
namespace gz {
namespace msgs {
class DVLKinematicEstimateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DVLKinematicEstimate>
      _instance;
} _DVLKinematicEstimate_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto {
static void InitDefaultsDVLKinematicEstimate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_DVLKinematicEstimate_default_instance_;
    new (ptr) ::gz::msgs::DVLKinematicEstimate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::DVLKinematicEstimate::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<1> scc_info_DVLKinematicEstimate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDVLKinematicEstimate}, {
      &protobuf_gz_2fmsgs_2fvector3d_2eproto::scc_info_Vector3d.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_DVLKinematicEstimate.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::DVLKinematicEstimate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::DVLKinematicEstimate, reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::DVLKinematicEstimate, mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::DVLKinematicEstimate, covariance_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::DVLKinematicEstimate)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_DVLKinematicEstimate_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/dvl_kinematic_estimate.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n$gz/msgs/dvl_kinematic_estimate.proto\022\007"
      "gz.msgs\032\026gz/msgs/vector3d.proto\"\354\001\n\024DVLK"
      "inematicEstimate\022>\n\treference\030\001 \001(\0162+.gz"
      ".msgs.DVLKinematicEstimate.ReferenceType"
      "\022\037\n\004mean\030\002 \001(\0132\021.gz.msgs.Vector3d\022\022\n\ncov"
      "ariance\030\003 \003(\001\"_\n\rReferenceType\022\035\n\031DVL_RE"
      "FERENCE_UNSPECIFIED\020\000\022\027\n\023DVL_REFERENCE_E"
      "ARTH\020\001\022\026\n\022DVL_REFERENCE_SHIP\020\002B)\n\013com.gz"
      ".msgsB\032DVLKinematicEstimateProtosb\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 361);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/dvl_kinematic_estimate.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fvector3d_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto
namespace gz {
namespace msgs {
const ::google::protobuf::EnumDescriptor* DVLKinematicEstimate_ReferenceType_descriptor() {
  protobuf_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto::file_level_enum_descriptors[0];
}
bool DVLKinematicEstimate_ReferenceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DVLKinematicEstimate_ReferenceType DVLKinematicEstimate::DVL_REFERENCE_UNSPECIFIED;
const DVLKinematicEstimate_ReferenceType DVLKinematicEstimate::DVL_REFERENCE_EARTH;
const DVLKinematicEstimate_ReferenceType DVLKinematicEstimate::DVL_REFERENCE_SHIP;
const DVLKinematicEstimate_ReferenceType DVLKinematicEstimate::ReferenceType_MIN;
const DVLKinematicEstimate_ReferenceType DVLKinematicEstimate::ReferenceType_MAX;
const int DVLKinematicEstimate::ReferenceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void DVLKinematicEstimate::InitAsDefaultInstance() {
  ::gz::msgs::_DVLKinematicEstimate_default_instance_._instance.get_mutable()->mean_ = const_cast< ::gz::msgs::Vector3d*>(
      ::gz::msgs::Vector3d::internal_default_instance());
}
void DVLKinematicEstimate::clear_mean() {
  if (GetArenaNoVirtual() == NULL && mean_ != NULL) {
    delete mean_;
  }
  mean_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DVLKinematicEstimate::kReferenceFieldNumber;
const int DVLKinematicEstimate::kMeanFieldNumber;
const int DVLKinematicEstimate::kCovarianceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DVLKinematicEstimate::DVLKinematicEstimate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto::scc_info_DVLKinematicEstimate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.DVLKinematicEstimate)
}
DVLKinematicEstimate::DVLKinematicEstimate(const DVLKinematicEstimate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      covariance_(from.covariance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mean()) {
    mean_ = new ::gz::msgs::Vector3d(*from.mean_);
  } else {
    mean_ = NULL;
  }
  reference_ = from.reference_;
  // @@protoc_insertion_point(copy_constructor:gz.msgs.DVLKinematicEstimate)
}

void DVLKinematicEstimate::SharedCtor() {
  ::memset(&mean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reference_) -
      reinterpret_cast<char*>(&mean_)) + sizeof(reference_));
}

DVLKinematicEstimate::~DVLKinematicEstimate() {
  // @@protoc_insertion_point(destructor:gz.msgs.DVLKinematicEstimate)
  SharedDtor();
}

void DVLKinematicEstimate::SharedDtor() {
  if (this != internal_default_instance()) delete mean_;
}

void DVLKinematicEstimate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DVLKinematicEstimate::descriptor() {
  ::protobuf_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DVLKinematicEstimate& DVLKinematicEstimate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto::scc_info_DVLKinematicEstimate.base);
  return *internal_default_instance();
}


void DVLKinematicEstimate::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.DVLKinematicEstimate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  covariance_.Clear();
  if (GetArenaNoVirtual() == NULL && mean_ != NULL) {
    delete mean_;
  }
  mean_ = NULL;
  reference_ = 0;
  _internal_metadata_.Clear();
}

bool DVLKinematicEstimate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.DVLKinematicEstimate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.DVLKinematicEstimate.ReferenceType reference = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reference(static_cast< ::gz::msgs::DVLKinematicEstimate_ReferenceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Vector3d mean = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mean()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double covariance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_covariance())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.DVLKinematicEstimate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.DVLKinematicEstimate)
  return false;
#undef DO_
}

void DVLKinematicEstimate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.DVLKinematicEstimate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.DVLKinematicEstimate.ReferenceType reference = 1;
  if (this->reference() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reference(), output);
  }

  // .gz.msgs.Vector3d mean = 2;
  if (this->has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_mean(), output);
  }

  // repeated double covariance = 3;
  if (this->covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _covariance_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->covariance().data(), this->covariance_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.DVLKinematicEstimate)
}

::google::protobuf::uint8* DVLKinematicEstimate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.DVLKinematicEstimate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.DVLKinematicEstimate.ReferenceType reference = 1;
  if (this->reference() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reference(), target);
  }

  // .gz.msgs.Vector3d mean = 2;
  if (this->has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_mean(), deterministic, target);
  }

  // repeated double covariance = 3;
  if (this->covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _covariance_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->covariance_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.DVLKinematicEstimate)
  return target;
}

size_t DVLKinematicEstimate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.DVLKinematicEstimate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double covariance = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->covariance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _covariance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .gz.msgs.Vector3d mean = 2;
  if (this->has_mean()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mean_);
  }

  // .gz.msgs.DVLKinematicEstimate.ReferenceType reference = 1;
  if (this->reference() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reference());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DVLKinematicEstimate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.DVLKinematicEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  const DVLKinematicEstimate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DVLKinematicEstimate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.DVLKinematicEstimate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.DVLKinematicEstimate)
    MergeFrom(*source);
  }
}

void DVLKinematicEstimate::MergeFrom(const DVLKinematicEstimate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.DVLKinematicEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  covariance_.MergeFrom(from.covariance_);
  if (from.has_mean()) {
    mutable_mean()->::gz::msgs::Vector3d::MergeFrom(from.mean());
  }
  if (from.reference() != 0) {
    set_reference(from.reference());
  }
}

void DVLKinematicEstimate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.DVLKinematicEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DVLKinematicEstimate::CopyFrom(const DVLKinematicEstimate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.DVLKinematicEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DVLKinematicEstimate::IsInitialized() const {
  return true;
}

void DVLKinematicEstimate::Swap(DVLKinematicEstimate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DVLKinematicEstimate::InternalSwap(DVLKinematicEstimate* other) {
  using std::swap;
  covariance_.InternalSwap(&other->covariance_);
  swap(mean_, other->mean_);
  swap(reference_, other->reference_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DVLKinematicEstimate::GetMetadata() const {
  protobuf_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::DVLKinematicEstimate* Arena::CreateMaybeMessage< ::gz::msgs::DVLKinematicEstimate >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::DVLKinematicEstimate >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
