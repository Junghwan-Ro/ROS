// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/sonar.proto

#include "gz/msgs/sonar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.Sonar", Sonar)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace protobuf_gz_2fmsgs_2fpose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fpose_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Pose;
}  // namespace protobuf_gz_2fmsgs_2fpose_2eproto
namespace protobuf_gz_2fmsgs_2fvector3d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fvector3d_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Vector3d;
}  // namespace protobuf_gz_2fmsgs_2fvector3d_2eproto
namespace gz {
namespace msgs {
class SonarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sonar>
      _instance;
} _Sonar_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fsonar_2eproto {
static void InitDefaultsSonar() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Sonar_default_instance_;
    new (ptr) ::gz::msgs::Sonar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Sonar::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<3> scc_info_Sonar =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSonar}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2fpose_2eproto::scc_info_Pose.base,
      &protobuf_gz_2fmsgs_2fvector3d_2eproto::scc_info_Vector3d.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Sonar.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sonar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sonar, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sonar, frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sonar, world_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sonar, range_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sonar, range_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sonar, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sonar, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sonar, geometry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Sonar, contact_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::Sonar)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Sonar_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/sonar.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023gz/msgs/sonar.proto\022\007gz.msgs\032\022gz/msgs/"
      "pose.proto\032\026gz/msgs/vector3d.proto\032\024gz/m"
      "sgs/header.proto\"\325\001\n\005Sonar\022\037\n\006header\030\001 \001"
      "(\0132\017.gz.msgs.Header\022\r\n\005frame\030\002 \001(\t\022!\n\nwo"
      "rld_pose\030\003 \001(\0132\r.gz.msgs.Pose\022\021\n\trange_m"
      "in\030\004 \001(\001\022\021\n\trange_max\030\005 \001(\001\022\016\n\006radius\030\006 "
      "\001(\001\022\r\n\005range\030\007 \001(\001\022\020\n\010geometry\030\010 \001(\t\022\"\n\007"
      "contact\030\t \001(\0132\021.gz.msgs.Vector3dB\032\n\013com."
      "gz.msgsB\013SonarProtosb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 348);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/sonar.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fpose_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fvector3d_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fsonar_2eproto
namespace gz {
namespace msgs {

// ===================================================================

void Sonar::InitAsDefaultInstance() {
  ::gz::msgs::_Sonar_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_Sonar_default_instance_._instance.get_mutable()->world_pose_ = const_cast< ::gz::msgs::Pose*>(
      ::gz::msgs::Pose::internal_default_instance());
  ::gz::msgs::_Sonar_default_instance_._instance.get_mutable()->contact_ = const_cast< ::gz::msgs::Vector3d*>(
      ::gz::msgs::Vector3d::internal_default_instance());
}
void Sonar::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void Sonar::clear_world_pose() {
  if (GetArenaNoVirtual() == NULL && world_pose_ != NULL) {
    delete world_pose_;
  }
  world_pose_ = NULL;
}
void Sonar::clear_contact() {
  if (GetArenaNoVirtual() == NULL && contact_ != NULL) {
    delete contact_;
  }
  contact_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sonar::kHeaderFieldNumber;
const int Sonar::kFrameFieldNumber;
const int Sonar::kWorldPoseFieldNumber;
const int Sonar::kRangeMinFieldNumber;
const int Sonar::kRangeMaxFieldNumber;
const int Sonar::kRadiusFieldNumber;
const int Sonar::kRangeFieldNumber;
const int Sonar::kGeometryFieldNumber;
const int Sonar::kContactFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sonar::Sonar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fsonar_2eproto::scc_info_Sonar.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Sonar)
}
Sonar::Sonar(const Sonar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.frame().size() > 0) {
    frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_);
  }
  geometry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.geometry().size() > 0) {
    geometry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geometry_);
  }
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_world_pose()) {
    world_pose_ = new ::gz::msgs::Pose(*from.world_pose_);
  } else {
    world_pose_ = NULL;
  }
  if (from.has_contact()) {
    contact_ = new ::gz::msgs::Vector3d(*from.contact_);
  } else {
    contact_ = NULL;
  }
  ::memcpy(&range_min_, &from.range_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_) -
    reinterpret_cast<char*>(&range_min_)) + sizeof(range_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Sonar)
}

void Sonar::SharedCtor() {
  frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geometry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_) -
      reinterpret_cast<char*>(&header_)) + sizeof(range_));
}

Sonar::~Sonar() {
  // @@protoc_insertion_point(destructor:gz.msgs.Sonar)
  SharedDtor();
}

void Sonar::SharedDtor() {
  frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geometry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete world_pose_;
  if (this != internal_default_instance()) delete contact_;
}

void Sonar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sonar::descriptor() {
  ::protobuf_gz_2fmsgs_2fsonar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fsonar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sonar& Sonar::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fsonar_2eproto::scc_info_Sonar.base);
  return *internal_default_instance();
}


void Sonar::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Sonar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geometry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && world_pose_ != NULL) {
    delete world_pose_;
  }
  world_pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && contact_ != NULL) {
    delete contact_;
  }
  contact_ = NULL;
  ::memset(&range_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_) -
      reinterpret_cast<char*>(&range_min_)) + sizeof(range_));
  _internal_metadata_.Clear();
}

bool Sonar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Sonar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string frame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->frame().data(), static_cast<int>(this->frame().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Sonar.frame"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Pose world_pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_world_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double range_min = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double range_max = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double radius = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double range = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string geometry = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geometry()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->geometry().data(), static_cast<int>(this->geometry().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Sonar.geometry"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Vector3d contact = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_contact()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Sonar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Sonar)
  return false;
#undef DO_
}

void Sonar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Sonar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // string frame = 2;
  if (this->frame().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame().data(), static_cast<int>(this->frame().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Sonar.frame");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->frame(), output);
  }

  // .gz.msgs.Pose world_pose = 3;
  if (this->has_world_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_world_pose(), output);
  }

  // double range_min = 4;
  if (this->range_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->range_min(), output);
  }

  // double range_max = 5;
  if (this->range_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->range_max(), output);
  }

  // double radius = 6;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->radius(), output);
  }

  // double range = 7;
  if (this->range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->range(), output);
  }

  // string geometry = 8;
  if (this->geometry().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geometry().data(), static_cast<int>(this->geometry().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Sonar.geometry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->geometry(), output);
  }

  // .gz.msgs.Vector3d contact = 9;
  if (this->has_contact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_contact(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Sonar)
}

::google::protobuf::uint8* Sonar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Sonar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // string frame = 2;
  if (this->frame().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame().data(), static_cast<int>(this->frame().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Sonar.frame");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->frame(), target);
  }

  // .gz.msgs.Pose world_pose = 3;
  if (this->has_world_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_world_pose(), deterministic, target);
  }

  // double range_min = 4;
  if (this->range_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->range_min(), target);
  }

  // double range_max = 5;
  if (this->range_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->range_max(), target);
  }

  // double radius = 6;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->radius(), target);
  }

  // double range = 7;
  if (this->range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->range(), target);
  }

  // string geometry = 8;
  if (this->geometry().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->geometry().data(), static_cast<int>(this->geometry().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Sonar.geometry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->geometry(), target);
  }

  // .gz.msgs.Vector3d contact = 9;
  if (this->has_contact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_contact(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Sonar)
  return target;
}

size_t Sonar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Sonar)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string frame = 2;
  if (this->frame().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame());
  }

  // string geometry = 8;
  if (this->geometry().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->geometry());
  }

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.Pose world_pose = 3;
  if (this->has_world_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *world_pose_);
  }

  // .gz.msgs.Vector3d contact = 9;
  if (this->has_contact()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *contact_);
  }

  // double range_min = 4;
  if (this->range_min() != 0) {
    total_size += 1 + 8;
  }

  // double range_max = 5;
  if (this->range_max() != 0) {
    total_size += 1 + 8;
  }

  // double radius = 6;
  if (this->radius() != 0) {
    total_size += 1 + 8;
  }

  // double range = 7;
  if (this->range() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sonar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Sonar)
  GOOGLE_DCHECK_NE(&from, this);
  const Sonar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sonar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Sonar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Sonar)
    MergeFrom(*source);
  }
}

void Sonar::MergeFrom(const Sonar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Sonar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame().size() > 0) {

    frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_);
  }
  if (from.geometry().size() > 0) {

    geometry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geometry_);
  }
  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_world_pose()) {
    mutable_world_pose()->::gz::msgs::Pose::MergeFrom(from.world_pose());
  }
  if (from.has_contact()) {
    mutable_contact()->::gz::msgs::Vector3d::MergeFrom(from.contact());
  }
  if (from.range_min() != 0) {
    set_range_min(from.range_min());
  }
  if (from.range_max() != 0) {
    set_range_max(from.range_max());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.range() != 0) {
    set_range(from.range());
  }
}

void Sonar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Sonar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sonar::CopyFrom(const Sonar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Sonar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sonar::IsInitialized() const {
  return true;
}

void Sonar::Swap(Sonar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sonar::InternalSwap(Sonar* other) {
  using std::swap;
  frame_.Swap(&other->frame_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  geometry_.Swap(&other->geometry_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(world_pose_, other->world_pose_);
  swap(contact_, other->contact_);
  swap(range_min_, other->range_min_);
  swap(range_max_, other->range_max_);
  swap(radius_, other->radius_);
  swap(range_, other->range_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sonar::GetMetadata() const {
  protobuf_gz_2fmsgs_2fsonar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fsonar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Sonar* Arena::CreateMaybeMessage< ::gz::msgs::Sonar >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Sonar >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
