// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/dvl_beam_state.proto

#include "gz/msgs/dvl_beam_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.DVLBeamState", DVLBeamState)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DVLKinematicEstimate;
}  // namespace protobuf_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto
namespace protobuf_gz_2fmsgs_2fdvl_5frange_5festimate_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fdvl_5frange_5festimate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DVLRangeEstimate;
}  // namespace protobuf_gz_2fmsgs_2fdvl_5frange_5festimate_2eproto
namespace gz {
namespace msgs {
class DVLBeamStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DVLBeamState>
      _instance;
} _DVLBeamState_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fdvl_5fbeam_5fstate_2eproto {
static void InitDefaultsDVLBeamState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_DVLBeamState_default_instance_;
    new (ptr) ::gz::msgs::DVLBeamState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::DVLBeamState::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<2> scc_info_DVLBeamState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDVLBeamState}, {
      &protobuf_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto::scc_info_DVLKinematicEstimate.base,
      &protobuf_gz_2fmsgs_2fdvl_5frange_5festimate_2eproto::scc_info_DVLRangeEstimate.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_DVLBeamState.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::DVLBeamState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::DVLBeamState, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::DVLBeamState, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::DVLBeamState, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::DVLBeamState, rssi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::DVLBeamState, nsd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::DVLBeamState, locked_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::DVLBeamState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_DVLBeamState_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/dvl_beam_state.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\034gz/msgs/dvl_beam_state.proto\022\007gz.msgs\032"
      "$gz/msgs/dvl_kinematic_estimate.proto\032 g"
      "z/msgs/dvl_range_estimate.proto\"\240\001\n\014DVLB"
      "eamState\022\n\n\002id\030\001 \001(\005\022/\n\010velocity\030\002 \001(\0132\035"
      ".gz.msgs.DVLKinematicEstimate\022(\n\005range\030\003"
      " \001(\0132\031.gz.msgs.DVLRangeEstimate\022\014\n\004rssi\030"
      "\004 \001(\001\022\013\n\003nsd\030\005 \001(\001\022\016\n\006locked\030\006 \001(\010B!\n\013co"
      "m.gz.msgsB\022DVLBeamStateProtosb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 317);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/dvl_beam_state.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fdvl_5fkinematic_5festimate_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fdvl_5frange_5festimate_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fdvl_5fbeam_5fstate_2eproto
namespace gz {
namespace msgs {

// ===================================================================

void DVLBeamState::InitAsDefaultInstance() {
  ::gz::msgs::_DVLBeamState_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::gz::msgs::DVLKinematicEstimate*>(
      ::gz::msgs::DVLKinematicEstimate::internal_default_instance());
  ::gz::msgs::_DVLBeamState_default_instance_._instance.get_mutable()->range_ = const_cast< ::gz::msgs::DVLRangeEstimate*>(
      ::gz::msgs::DVLRangeEstimate::internal_default_instance());
}
void DVLBeamState::clear_velocity() {
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
}
void DVLBeamState::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DVLBeamState::kIdFieldNumber;
const int DVLBeamState::kVelocityFieldNumber;
const int DVLBeamState::kRangeFieldNumber;
const int DVLBeamState::kRssiFieldNumber;
const int DVLBeamState::kNsdFieldNumber;
const int DVLBeamState::kLockedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DVLBeamState::DVLBeamState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fdvl_5fbeam_5fstate_2eproto::scc_info_DVLBeamState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.DVLBeamState)
}
DVLBeamState::DVLBeamState(const DVLBeamState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_velocity()) {
    velocity_ = new ::gz::msgs::DVLKinematicEstimate(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_range()) {
    range_ = new ::gz::msgs::DVLRangeEstimate(*from.range_);
  } else {
    range_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&nsd_) -
    reinterpret_cast<char*>(&id_)) + sizeof(nsd_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.DVLBeamState)
}

void DVLBeamState::SharedCtor() {
  ::memset(&velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nsd_) -
      reinterpret_cast<char*>(&velocity_)) + sizeof(nsd_));
}

DVLBeamState::~DVLBeamState() {
  // @@protoc_insertion_point(destructor:gz.msgs.DVLBeamState)
  SharedDtor();
}

void DVLBeamState::SharedDtor() {
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete range_;
}

void DVLBeamState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DVLBeamState::descriptor() {
  ::protobuf_gz_2fmsgs_2fdvl_5fbeam_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdvl_5fbeam_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DVLBeamState& DVLBeamState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fdvl_5fbeam_5fstate_2eproto::scc_info_DVLBeamState.base);
  return *internal_default_instance();
}


void DVLBeamState::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.DVLBeamState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && range_ != NULL) {
    delete range_;
  }
  range_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nsd_) -
      reinterpret_cast<char*>(&id_)) + sizeof(nsd_));
  _internal_metadata_.Clear();
}

bool DVLBeamState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.DVLBeamState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.DVLKinematicEstimate velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.DVLRangeEstimate range = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rssi = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rssi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double nsd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nsd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool locked = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.DVLBeamState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.DVLBeamState)
  return false;
#undef DO_
}

void DVLBeamState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.DVLBeamState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // .gz.msgs.DVLKinematicEstimate velocity = 2;
  if (this->has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_velocity(), output);
  }

  // .gz.msgs.DVLRangeEstimate range = 3;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_range(), output);
  }

  // double rssi = 4;
  if (this->rssi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rssi(), output);
  }

  // double nsd = 5;
  if (this->nsd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->nsd(), output);
  }

  // bool locked = 6;
  if (this->locked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->locked(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.DVLBeamState)
}

::google::protobuf::uint8* DVLBeamState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.DVLBeamState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // .gz.msgs.DVLKinematicEstimate velocity = 2;
  if (this->has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_velocity(), deterministic, target);
  }

  // .gz.msgs.DVLRangeEstimate range = 3;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_range(), deterministic, target);
  }

  // double rssi = 4;
  if (this->rssi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rssi(), target);
  }

  // double nsd = 5;
  if (this->nsd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->nsd(), target);
  }

  // bool locked = 6;
  if (this->locked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->locked(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.DVLBeamState)
  return target;
}

size_t DVLBeamState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.DVLBeamState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gz.msgs.DVLKinematicEstimate velocity = 2;
  if (this->has_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .gz.msgs.DVLRangeEstimate range = 3;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *range_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // bool locked = 6;
  if (this->locked() != 0) {
    total_size += 1 + 1;
  }

  // double rssi = 4;
  if (this->rssi() != 0) {
    total_size += 1 + 8;
  }

  // double nsd = 5;
  if (this->nsd() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DVLBeamState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.DVLBeamState)
  GOOGLE_DCHECK_NE(&from, this);
  const DVLBeamState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DVLBeamState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.DVLBeamState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.DVLBeamState)
    MergeFrom(*source);
  }
}

void DVLBeamState::MergeFrom(const DVLBeamState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.DVLBeamState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_velocity()) {
    mutable_velocity()->::gz::msgs::DVLKinematicEstimate::MergeFrom(from.velocity());
  }
  if (from.has_range()) {
    mutable_range()->::gz::msgs::DVLRangeEstimate::MergeFrom(from.range());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.locked() != 0) {
    set_locked(from.locked());
  }
  if (from.rssi() != 0) {
    set_rssi(from.rssi());
  }
  if (from.nsd() != 0) {
    set_nsd(from.nsd());
  }
}

void DVLBeamState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.DVLBeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DVLBeamState::CopyFrom(const DVLBeamState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.DVLBeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DVLBeamState::IsInitialized() const {
  return true;
}

void DVLBeamState::Swap(DVLBeamState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DVLBeamState::InternalSwap(DVLBeamState* other) {
  using std::swap;
  swap(velocity_, other->velocity_);
  swap(range_, other->range_);
  swap(id_, other->id_);
  swap(locked_, other->locked_);
  swap(rssi_, other->rssi_);
  swap(nsd_, other->nsd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DVLBeamState::GetMetadata() const {
  protobuf_gz_2fmsgs_2fdvl_5fbeam_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdvl_5fbeam_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::DVLBeamState* Arena::CreateMaybeMessage< ::gz::msgs::DVLBeamState >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::DVLBeamState >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
