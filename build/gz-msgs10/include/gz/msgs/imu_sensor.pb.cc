// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/imu_sensor.proto

#include "gz/msgs/imu_sensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.IMUSensor", IMUSensor)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IMUSensor_AngularVelocity;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IMUSensor_LinearAcceleration;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IMUSensor_OrientationReferenceFrame;
}  // namespace protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto
namespace protobuf_gz_2fmsgs_2fsensor_5fnoise_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fsensor_5fnoise_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SensorNoise;
}  // namespace protobuf_gz_2fmsgs_2fsensor_5fnoise_2eproto
namespace protobuf_gz_2fmsgs_2fvector3d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fvector3d_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Vector3d;
}  // namespace protobuf_gz_2fmsgs_2fvector3d_2eproto
namespace gz {
namespace msgs {
class IMUSensor_AngularVelocityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMUSensor_AngularVelocity>
      _instance;
} _IMUSensor_AngularVelocity_default_instance_;
class IMUSensor_LinearAccelerationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMUSensor_LinearAcceleration>
      _instance;
} _IMUSensor_LinearAcceleration_default_instance_;
class IMUSensor_OrientationReferenceFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMUSensor_OrientationReferenceFrame>
      _instance;
} _IMUSensor_OrientationReferenceFrame_default_instance_;
class IMUSensorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMUSensor>
      _instance;
} _IMUSensor_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto {
static void InitDefaultsIMUSensor_AngularVelocity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_IMUSensor_AngularVelocity_default_instance_;
    new (ptr) ::gz::msgs::IMUSensor_AngularVelocity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::IMUSensor_AngularVelocity::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<1> scc_info_IMUSensor_AngularVelocity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIMUSensor_AngularVelocity}, {
      &protobuf_gz_2fmsgs_2fsensor_5fnoise_2eproto::scc_info_SensorNoise.base,}};

static void InitDefaultsIMUSensor_LinearAcceleration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_IMUSensor_LinearAcceleration_default_instance_;
    new (ptr) ::gz::msgs::IMUSensor_LinearAcceleration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::IMUSensor_LinearAcceleration::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<1> scc_info_IMUSensor_LinearAcceleration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIMUSensor_LinearAcceleration}, {
      &protobuf_gz_2fmsgs_2fsensor_5fnoise_2eproto::scc_info_SensorNoise.base,}};

static void InitDefaultsIMUSensor_OrientationReferenceFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_IMUSensor_OrientationReferenceFrame_default_instance_;
    new (ptr) ::gz::msgs::IMUSensor_OrientationReferenceFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::IMUSensor_OrientationReferenceFrame::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<1> scc_info_IMUSensor_OrientationReferenceFrame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIMUSensor_OrientationReferenceFrame}, {
      &protobuf_gz_2fmsgs_2fvector3d_2eproto::scc_info_Vector3d.base,}};

static void InitDefaultsIMUSensor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_IMUSensor_default_instance_;
    new (ptr) ::gz::msgs::IMUSensor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::IMUSensor::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<4> scc_info_IMUSensor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsIMUSensor}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::scc_info_IMUSensor_AngularVelocity.base,
      &protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::scc_info_IMUSensor_LinearAcceleration.base,
      &protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::scc_info_IMUSensor_OrientationReferenceFrame.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_IMUSensor_AngularVelocity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IMUSensor_LinearAcceleration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IMUSensor_OrientationReferenceFrame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IMUSensor.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::IMUSensor_AngularVelocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::IMUSensor_AngularVelocity, x_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::IMUSensor_AngularVelocity, y_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::IMUSensor_AngularVelocity, z_noise_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::IMUSensor_LinearAcceleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::IMUSensor_LinearAcceleration, x_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::IMUSensor_LinearAcceleration, y_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::IMUSensor_LinearAcceleration, z_noise_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::IMUSensor_OrientationReferenceFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::IMUSensor_OrientationReferenceFrame, localization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::IMUSensor_OrientationReferenceFrame, custom_rpy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::IMUSensor_OrientationReferenceFrame, custom_rpy_parent_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::IMUSensor_OrientationReferenceFrame, gravity_dir_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::IMUSensor_OrientationReferenceFrame, gravity_dir_x_parent_frame_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::IMUSensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::IMUSensor, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::IMUSensor, angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::IMUSensor, linear_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::IMUSensor, orientation_ref_frame_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::IMUSensor_AngularVelocity)},
  { 8, -1, sizeof(::gz::msgs::IMUSensor_LinearAcceleration)},
  { 16, -1, sizeof(::gz::msgs::IMUSensor_OrientationReferenceFrame)},
  { 26, -1, sizeof(::gz::msgs::IMUSensor)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_IMUSensor_AngularVelocity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_IMUSensor_LinearAcceleration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_IMUSensor_OrientationReferenceFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_IMUSensor_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/imu_sensor.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030gz/msgs/imu_sensor.proto\022\007gz.msgs\032\032gz/"
      "msgs/sensor_noise.proto\032\024gz/msgs/header."
      "proto\032\026gz/msgs/vector3d.proto\"\332\005\n\tIMUSen"
      "sor\022\037\n\006header\030\001 \001(\0132\017.gz.msgs.Header\022<\n\020"
      "angular_velocity\030\002 \001(\0132\".gz.msgs.IMUSens"
      "or.AngularVelocity\022B\n\023linear_acceleratio"
      "n\030\003 \001(\0132%.gz.msgs.IMUSensor.LinearAccele"
      "ration\022K\n\025orientation_ref_frame\030\004 \001(\0132,."
      "gz.msgs.IMUSensor.OrientationReferenceFr"
      "ame\032\206\001\n\017AngularVelocity\022%\n\007x_noise\030\001 \001(\013"
      "2\024.gz.msgs.SensorNoise\022%\n\007y_noise\030\002 \001(\0132"
      "\024.gz.msgs.SensorNoise\022%\n\007z_noise\030\003 \001(\0132\024"
      ".gz.msgs.SensorNoise\032\211\001\n\022LinearAccelerat"
      "ion\022%\n\007x_noise\030\001 \001(\0132\024.gz.msgs.SensorNoi"
      "se\022%\n\007y_noise\030\002 \001(\0132\024.gz.msgs.SensorNois"
      "e\022%\n\007z_noise\030\003 \001(\0132\024.gz.msgs.SensorNoise"
      "\032\307\001\n\031OrientationReferenceFrame\022\024\n\014locali"
      "zation\030\001 \001(\t\022%\n\ncustom_rpy\030\002 \001(\0132\021.gz.ms"
      "gs.Vector3d\022\037\n\027custom_rpy_parent_frame\030\003"
      " \001(\t\022(\n\rgravity_dir_x\030\004 \001(\0132\021.gz.msgs.Ve"
      "ctor3d\022\"\n\032gravity_dir_x_parent_frame\030\005 \001"
      "(\tB\036\n\013com.gz.msgsB\017IMUSensorProtosb\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 882);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/imu_sensor.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fsensor_5fnoise_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fvector3d_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto
namespace gz {
namespace msgs {

// ===================================================================

void IMUSensor_AngularVelocity::InitAsDefaultInstance() {
  ::gz::msgs::_IMUSensor_AngularVelocity_default_instance_._instance.get_mutable()->x_noise_ = const_cast< ::gz::msgs::SensorNoise*>(
      ::gz::msgs::SensorNoise::internal_default_instance());
  ::gz::msgs::_IMUSensor_AngularVelocity_default_instance_._instance.get_mutable()->y_noise_ = const_cast< ::gz::msgs::SensorNoise*>(
      ::gz::msgs::SensorNoise::internal_default_instance());
  ::gz::msgs::_IMUSensor_AngularVelocity_default_instance_._instance.get_mutable()->z_noise_ = const_cast< ::gz::msgs::SensorNoise*>(
      ::gz::msgs::SensorNoise::internal_default_instance());
}
void IMUSensor_AngularVelocity::clear_x_noise() {
  if (GetArenaNoVirtual() == NULL && x_noise_ != NULL) {
    delete x_noise_;
  }
  x_noise_ = NULL;
}
void IMUSensor_AngularVelocity::clear_y_noise() {
  if (GetArenaNoVirtual() == NULL && y_noise_ != NULL) {
    delete y_noise_;
  }
  y_noise_ = NULL;
}
void IMUSensor_AngularVelocity::clear_z_noise() {
  if (GetArenaNoVirtual() == NULL && z_noise_ != NULL) {
    delete z_noise_;
  }
  z_noise_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUSensor_AngularVelocity::kXNoiseFieldNumber;
const int IMUSensor_AngularVelocity::kYNoiseFieldNumber;
const int IMUSensor_AngularVelocity::kZNoiseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUSensor_AngularVelocity::IMUSensor_AngularVelocity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::scc_info_IMUSensor_AngularVelocity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.IMUSensor.AngularVelocity)
}
IMUSensor_AngularVelocity::IMUSensor_AngularVelocity(const IMUSensor_AngularVelocity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_x_noise()) {
    x_noise_ = new ::gz::msgs::SensorNoise(*from.x_noise_);
  } else {
    x_noise_ = NULL;
  }
  if (from.has_y_noise()) {
    y_noise_ = new ::gz::msgs::SensorNoise(*from.y_noise_);
  } else {
    y_noise_ = NULL;
  }
  if (from.has_z_noise()) {
    z_noise_ = new ::gz::msgs::SensorNoise(*from.z_noise_);
  } else {
    z_noise_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.IMUSensor.AngularVelocity)
}

void IMUSensor_AngularVelocity::SharedCtor() {
  ::memset(&x_noise_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_noise_) -
      reinterpret_cast<char*>(&x_noise_)) + sizeof(z_noise_));
}

IMUSensor_AngularVelocity::~IMUSensor_AngularVelocity() {
  // @@protoc_insertion_point(destructor:gz.msgs.IMUSensor.AngularVelocity)
  SharedDtor();
}

void IMUSensor_AngularVelocity::SharedDtor() {
  if (this != internal_default_instance()) delete x_noise_;
  if (this != internal_default_instance()) delete y_noise_;
  if (this != internal_default_instance()) delete z_noise_;
}

void IMUSensor_AngularVelocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IMUSensor_AngularVelocity::descriptor() {
  ::protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMUSensor_AngularVelocity& IMUSensor_AngularVelocity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::scc_info_IMUSensor_AngularVelocity.base);
  return *internal_default_instance();
}


void IMUSensor_AngularVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.IMUSensor.AngularVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && x_noise_ != NULL) {
    delete x_noise_;
  }
  x_noise_ = NULL;
  if (GetArenaNoVirtual() == NULL && y_noise_ != NULL) {
    delete y_noise_;
  }
  y_noise_ = NULL;
  if (GetArenaNoVirtual() == NULL && z_noise_ != NULL) {
    delete z_noise_;
  }
  z_noise_ = NULL;
  _internal_metadata_.Clear();
}

bool IMUSensor_AngularVelocity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.IMUSensor.AngularVelocity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.SensorNoise x_noise = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_x_noise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.SensorNoise y_noise = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_y_noise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.SensorNoise z_noise = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_z_noise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.IMUSensor.AngularVelocity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.IMUSensor.AngularVelocity)
  return false;
#undef DO_
}

void IMUSensor_AngularVelocity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.IMUSensor.AngularVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.SensorNoise x_noise = 1;
  if (this->has_x_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_x_noise(), output);
  }

  // .gz.msgs.SensorNoise y_noise = 2;
  if (this->has_y_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_y_noise(), output);
  }

  // .gz.msgs.SensorNoise z_noise = 3;
  if (this->has_z_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_z_noise(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.IMUSensor.AngularVelocity)
}

::google::protobuf::uint8* IMUSensor_AngularVelocity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.IMUSensor.AngularVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.SensorNoise x_noise = 1;
  if (this->has_x_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_x_noise(), deterministic, target);
  }

  // .gz.msgs.SensorNoise y_noise = 2;
  if (this->has_y_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_y_noise(), deterministic, target);
  }

  // .gz.msgs.SensorNoise z_noise = 3;
  if (this->has_z_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_z_noise(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.IMUSensor.AngularVelocity)
  return target;
}

size_t IMUSensor_AngularVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.IMUSensor.AngularVelocity)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gz.msgs.SensorNoise x_noise = 1;
  if (this->has_x_noise()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *x_noise_);
  }

  // .gz.msgs.SensorNoise y_noise = 2;
  if (this->has_y_noise()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *y_noise_);
  }

  // .gz.msgs.SensorNoise z_noise = 3;
  if (this->has_z_noise()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *z_noise_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUSensor_AngularVelocity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.IMUSensor.AngularVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  const IMUSensor_AngularVelocity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMUSensor_AngularVelocity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.IMUSensor.AngularVelocity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.IMUSensor.AngularVelocity)
    MergeFrom(*source);
  }
}

void IMUSensor_AngularVelocity::MergeFrom(const IMUSensor_AngularVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.IMUSensor.AngularVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_x_noise()) {
    mutable_x_noise()->::gz::msgs::SensorNoise::MergeFrom(from.x_noise());
  }
  if (from.has_y_noise()) {
    mutable_y_noise()->::gz::msgs::SensorNoise::MergeFrom(from.y_noise());
  }
  if (from.has_z_noise()) {
    mutable_z_noise()->::gz::msgs::SensorNoise::MergeFrom(from.z_noise());
  }
}

void IMUSensor_AngularVelocity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.IMUSensor.AngularVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUSensor_AngularVelocity::CopyFrom(const IMUSensor_AngularVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.IMUSensor.AngularVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUSensor_AngularVelocity::IsInitialized() const {
  return true;
}

void IMUSensor_AngularVelocity::Swap(IMUSensor_AngularVelocity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUSensor_AngularVelocity::InternalSwap(IMUSensor_AngularVelocity* other) {
  using std::swap;
  swap(x_noise_, other->x_noise_);
  swap(y_noise_, other->y_noise_);
  swap(z_noise_, other->z_noise_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IMUSensor_AngularVelocity::GetMetadata() const {
  protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMUSensor_LinearAcceleration::InitAsDefaultInstance() {
  ::gz::msgs::_IMUSensor_LinearAcceleration_default_instance_._instance.get_mutable()->x_noise_ = const_cast< ::gz::msgs::SensorNoise*>(
      ::gz::msgs::SensorNoise::internal_default_instance());
  ::gz::msgs::_IMUSensor_LinearAcceleration_default_instance_._instance.get_mutable()->y_noise_ = const_cast< ::gz::msgs::SensorNoise*>(
      ::gz::msgs::SensorNoise::internal_default_instance());
  ::gz::msgs::_IMUSensor_LinearAcceleration_default_instance_._instance.get_mutable()->z_noise_ = const_cast< ::gz::msgs::SensorNoise*>(
      ::gz::msgs::SensorNoise::internal_default_instance());
}
void IMUSensor_LinearAcceleration::clear_x_noise() {
  if (GetArenaNoVirtual() == NULL && x_noise_ != NULL) {
    delete x_noise_;
  }
  x_noise_ = NULL;
}
void IMUSensor_LinearAcceleration::clear_y_noise() {
  if (GetArenaNoVirtual() == NULL && y_noise_ != NULL) {
    delete y_noise_;
  }
  y_noise_ = NULL;
}
void IMUSensor_LinearAcceleration::clear_z_noise() {
  if (GetArenaNoVirtual() == NULL && z_noise_ != NULL) {
    delete z_noise_;
  }
  z_noise_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUSensor_LinearAcceleration::kXNoiseFieldNumber;
const int IMUSensor_LinearAcceleration::kYNoiseFieldNumber;
const int IMUSensor_LinearAcceleration::kZNoiseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUSensor_LinearAcceleration::IMUSensor_LinearAcceleration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::scc_info_IMUSensor_LinearAcceleration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.IMUSensor.LinearAcceleration)
}
IMUSensor_LinearAcceleration::IMUSensor_LinearAcceleration(const IMUSensor_LinearAcceleration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_x_noise()) {
    x_noise_ = new ::gz::msgs::SensorNoise(*from.x_noise_);
  } else {
    x_noise_ = NULL;
  }
  if (from.has_y_noise()) {
    y_noise_ = new ::gz::msgs::SensorNoise(*from.y_noise_);
  } else {
    y_noise_ = NULL;
  }
  if (from.has_z_noise()) {
    z_noise_ = new ::gz::msgs::SensorNoise(*from.z_noise_);
  } else {
    z_noise_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.IMUSensor.LinearAcceleration)
}

void IMUSensor_LinearAcceleration::SharedCtor() {
  ::memset(&x_noise_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_noise_) -
      reinterpret_cast<char*>(&x_noise_)) + sizeof(z_noise_));
}

IMUSensor_LinearAcceleration::~IMUSensor_LinearAcceleration() {
  // @@protoc_insertion_point(destructor:gz.msgs.IMUSensor.LinearAcceleration)
  SharedDtor();
}

void IMUSensor_LinearAcceleration::SharedDtor() {
  if (this != internal_default_instance()) delete x_noise_;
  if (this != internal_default_instance()) delete y_noise_;
  if (this != internal_default_instance()) delete z_noise_;
}

void IMUSensor_LinearAcceleration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IMUSensor_LinearAcceleration::descriptor() {
  ::protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMUSensor_LinearAcceleration& IMUSensor_LinearAcceleration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::scc_info_IMUSensor_LinearAcceleration.base);
  return *internal_default_instance();
}


void IMUSensor_LinearAcceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.IMUSensor.LinearAcceleration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && x_noise_ != NULL) {
    delete x_noise_;
  }
  x_noise_ = NULL;
  if (GetArenaNoVirtual() == NULL && y_noise_ != NULL) {
    delete y_noise_;
  }
  y_noise_ = NULL;
  if (GetArenaNoVirtual() == NULL && z_noise_ != NULL) {
    delete z_noise_;
  }
  z_noise_ = NULL;
  _internal_metadata_.Clear();
}

bool IMUSensor_LinearAcceleration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.IMUSensor.LinearAcceleration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.SensorNoise x_noise = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_x_noise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.SensorNoise y_noise = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_y_noise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.SensorNoise z_noise = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_z_noise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.IMUSensor.LinearAcceleration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.IMUSensor.LinearAcceleration)
  return false;
#undef DO_
}

void IMUSensor_LinearAcceleration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.IMUSensor.LinearAcceleration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.SensorNoise x_noise = 1;
  if (this->has_x_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_x_noise(), output);
  }

  // .gz.msgs.SensorNoise y_noise = 2;
  if (this->has_y_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_y_noise(), output);
  }

  // .gz.msgs.SensorNoise z_noise = 3;
  if (this->has_z_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_z_noise(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.IMUSensor.LinearAcceleration)
}

::google::protobuf::uint8* IMUSensor_LinearAcceleration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.IMUSensor.LinearAcceleration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.SensorNoise x_noise = 1;
  if (this->has_x_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_x_noise(), deterministic, target);
  }

  // .gz.msgs.SensorNoise y_noise = 2;
  if (this->has_y_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_y_noise(), deterministic, target);
  }

  // .gz.msgs.SensorNoise z_noise = 3;
  if (this->has_z_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_z_noise(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.IMUSensor.LinearAcceleration)
  return target;
}

size_t IMUSensor_LinearAcceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.IMUSensor.LinearAcceleration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gz.msgs.SensorNoise x_noise = 1;
  if (this->has_x_noise()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *x_noise_);
  }

  // .gz.msgs.SensorNoise y_noise = 2;
  if (this->has_y_noise()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *y_noise_);
  }

  // .gz.msgs.SensorNoise z_noise = 3;
  if (this->has_z_noise()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *z_noise_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUSensor_LinearAcceleration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.IMUSensor.LinearAcceleration)
  GOOGLE_DCHECK_NE(&from, this);
  const IMUSensor_LinearAcceleration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMUSensor_LinearAcceleration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.IMUSensor.LinearAcceleration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.IMUSensor.LinearAcceleration)
    MergeFrom(*source);
  }
}

void IMUSensor_LinearAcceleration::MergeFrom(const IMUSensor_LinearAcceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.IMUSensor.LinearAcceleration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_x_noise()) {
    mutable_x_noise()->::gz::msgs::SensorNoise::MergeFrom(from.x_noise());
  }
  if (from.has_y_noise()) {
    mutable_y_noise()->::gz::msgs::SensorNoise::MergeFrom(from.y_noise());
  }
  if (from.has_z_noise()) {
    mutable_z_noise()->::gz::msgs::SensorNoise::MergeFrom(from.z_noise());
  }
}

void IMUSensor_LinearAcceleration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.IMUSensor.LinearAcceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUSensor_LinearAcceleration::CopyFrom(const IMUSensor_LinearAcceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.IMUSensor.LinearAcceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUSensor_LinearAcceleration::IsInitialized() const {
  return true;
}

void IMUSensor_LinearAcceleration::Swap(IMUSensor_LinearAcceleration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUSensor_LinearAcceleration::InternalSwap(IMUSensor_LinearAcceleration* other) {
  using std::swap;
  swap(x_noise_, other->x_noise_);
  swap(y_noise_, other->y_noise_);
  swap(z_noise_, other->z_noise_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IMUSensor_LinearAcceleration::GetMetadata() const {
  protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMUSensor_OrientationReferenceFrame::InitAsDefaultInstance() {
  ::gz::msgs::_IMUSensor_OrientationReferenceFrame_default_instance_._instance.get_mutable()->custom_rpy_ = const_cast< ::gz::msgs::Vector3d*>(
      ::gz::msgs::Vector3d::internal_default_instance());
  ::gz::msgs::_IMUSensor_OrientationReferenceFrame_default_instance_._instance.get_mutable()->gravity_dir_x_ = const_cast< ::gz::msgs::Vector3d*>(
      ::gz::msgs::Vector3d::internal_default_instance());
}
void IMUSensor_OrientationReferenceFrame::clear_custom_rpy() {
  if (GetArenaNoVirtual() == NULL && custom_rpy_ != NULL) {
    delete custom_rpy_;
  }
  custom_rpy_ = NULL;
}
void IMUSensor_OrientationReferenceFrame::clear_gravity_dir_x() {
  if (GetArenaNoVirtual() == NULL && gravity_dir_x_ != NULL) {
    delete gravity_dir_x_;
  }
  gravity_dir_x_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUSensor_OrientationReferenceFrame::kLocalizationFieldNumber;
const int IMUSensor_OrientationReferenceFrame::kCustomRpyFieldNumber;
const int IMUSensor_OrientationReferenceFrame::kCustomRpyParentFrameFieldNumber;
const int IMUSensor_OrientationReferenceFrame::kGravityDirXFieldNumber;
const int IMUSensor_OrientationReferenceFrame::kGravityDirXParentFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUSensor_OrientationReferenceFrame::IMUSensor_OrientationReferenceFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::scc_info_IMUSensor_OrientationReferenceFrame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.IMUSensor.OrientationReferenceFrame)
}
IMUSensor_OrientationReferenceFrame::IMUSensor_OrientationReferenceFrame(const IMUSensor_OrientationReferenceFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  localization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.localization().size() > 0) {
    localization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localization_);
  }
  custom_rpy_parent_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.custom_rpy_parent_frame().size() > 0) {
    custom_rpy_parent_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_rpy_parent_frame_);
  }
  gravity_dir_x_parent_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gravity_dir_x_parent_frame().size() > 0) {
    gravity_dir_x_parent_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gravity_dir_x_parent_frame_);
  }
  if (from.has_custom_rpy()) {
    custom_rpy_ = new ::gz::msgs::Vector3d(*from.custom_rpy_);
  } else {
    custom_rpy_ = NULL;
  }
  if (from.has_gravity_dir_x()) {
    gravity_dir_x_ = new ::gz::msgs::Vector3d(*from.gravity_dir_x_);
  } else {
    gravity_dir_x_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.IMUSensor.OrientationReferenceFrame)
}

void IMUSensor_OrientationReferenceFrame::SharedCtor() {
  localization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_rpy_parent_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gravity_dir_x_parent_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&custom_rpy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gravity_dir_x_) -
      reinterpret_cast<char*>(&custom_rpy_)) + sizeof(gravity_dir_x_));
}

IMUSensor_OrientationReferenceFrame::~IMUSensor_OrientationReferenceFrame() {
  // @@protoc_insertion_point(destructor:gz.msgs.IMUSensor.OrientationReferenceFrame)
  SharedDtor();
}

void IMUSensor_OrientationReferenceFrame::SharedDtor() {
  localization_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_rpy_parent_frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gravity_dir_x_parent_frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete custom_rpy_;
  if (this != internal_default_instance()) delete gravity_dir_x_;
}

void IMUSensor_OrientationReferenceFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IMUSensor_OrientationReferenceFrame::descriptor() {
  ::protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMUSensor_OrientationReferenceFrame& IMUSensor_OrientationReferenceFrame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::scc_info_IMUSensor_OrientationReferenceFrame.base);
  return *internal_default_instance();
}


void IMUSensor_OrientationReferenceFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.IMUSensor.OrientationReferenceFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  localization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_rpy_parent_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gravity_dir_x_parent_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && custom_rpy_ != NULL) {
    delete custom_rpy_;
  }
  custom_rpy_ = NULL;
  if (GetArenaNoVirtual() == NULL && gravity_dir_x_ != NULL) {
    delete gravity_dir_x_;
  }
  gravity_dir_x_ = NULL;
  _internal_metadata_.Clear();
}

bool IMUSensor_OrientationReferenceFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.IMUSensor.OrientationReferenceFrame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string localization = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localization()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->localization().data(), static_cast<int>(this->localization().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.IMUSensor.OrientationReferenceFrame.localization"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Vector3d custom_rpy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_rpy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string custom_rpy_parent_frame = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_rpy_parent_frame()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->custom_rpy_parent_frame().data(), static_cast<int>(this->custom_rpy_parent_frame().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.IMUSensor.OrientationReferenceFrame.custom_rpy_parent_frame"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Vector3d gravity_dir_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gravity_dir_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gravity_dir_x_parent_frame = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gravity_dir_x_parent_frame()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gravity_dir_x_parent_frame().data(), static_cast<int>(this->gravity_dir_x_parent_frame().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.IMUSensor.OrientationReferenceFrame.gravity_dir_x_parent_frame"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.IMUSensor.OrientationReferenceFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.IMUSensor.OrientationReferenceFrame)
  return false;
#undef DO_
}

void IMUSensor_OrientationReferenceFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.IMUSensor.OrientationReferenceFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string localization = 1;
  if (this->localization().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->localization().data(), static_cast<int>(this->localization().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.IMUSensor.OrientationReferenceFrame.localization");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->localization(), output);
  }

  // .gz.msgs.Vector3d custom_rpy = 2;
  if (this->has_custom_rpy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_custom_rpy(), output);
  }

  // string custom_rpy_parent_frame = 3;
  if (this->custom_rpy_parent_frame().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_rpy_parent_frame().data(), static_cast<int>(this->custom_rpy_parent_frame().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.IMUSensor.OrientationReferenceFrame.custom_rpy_parent_frame");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->custom_rpy_parent_frame(), output);
  }

  // .gz.msgs.Vector3d gravity_dir_x = 4;
  if (this->has_gravity_dir_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_gravity_dir_x(), output);
  }

  // string gravity_dir_x_parent_frame = 5;
  if (this->gravity_dir_x_parent_frame().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gravity_dir_x_parent_frame().data(), static_cast<int>(this->gravity_dir_x_parent_frame().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.IMUSensor.OrientationReferenceFrame.gravity_dir_x_parent_frame");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->gravity_dir_x_parent_frame(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.IMUSensor.OrientationReferenceFrame)
}

::google::protobuf::uint8* IMUSensor_OrientationReferenceFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.IMUSensor.OrientationReferenceFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string localization = 1;
  if (this->localization().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->localization().data(), static_cast<int>(this->localization().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.IMUSensor.OrientationReferenceFrame.localization");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->localization(), target);
  }

  // .gz.msgs.Vector3d custom_rpy = 2;
  if (this->has_custom_rpy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_custom_rpy(), deterministic, target);
  }

  // string custom_rpy_parent_frame = 3;
  if (this->custom_rpy_parent_frame().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_rpy_parent_frame().data(), static_cast<int>(this->custom_rpy_parent_frame().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.IMUSensor.OrientationReferenceFrame.custom_rpy_parent_frame");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->custom_rpy_parent_frame(), target);
  }

  // .gz.msgs.Vector3d gravity_dir_x = 4;
  if (this->has_gravity_dir_x()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_gravity_dir_x(), deterministic, target);
  }

  // string gravity_dir_x_parent_frame = 5;
  if (this->gravity_dir_x_parent_frame().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gravity_dir_x_parent_frame().data(), static_cast<int>(this->gravity_dir_x_parent_frame().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.IMUSensor.OrientationReferenceFrame.gravity_dir_x_parent_frame");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->gravity_dir_x_parent_frame(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.IMUSensor.OrientationReferenceFrame)
  return target;
}

size_t IMUSensor_OrientationReferenceFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.IMUSensor.OrientationReferenceFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string localization = 1;
  if (this->localization().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->localization());
  }

  // string custom_rpy_parent_frame = 3;
  if (this->custom_rpy_parent_frame().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->custom_rpy_parent_frame());
  }

  // string gravity_dir_x_parent_frame = 5;
  if (this->gravity_dir_x_parent_frame().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gravity_dir_x_parent_frame());
  }

  // .gz.msgs.Vector3d custom_rpy = 2;
  if (this->has_custom_rpy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *custom_rpy_);
  }

  // .gz.msgs.Vector3d gravity_dir_x = 4;
  if (this->has_gravity_dir_x()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gravity_dir_x_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUSensor_OrientationReferenceFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.IMUSensor.OrientationReferenceFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const IMUSensor_OrientationReferenceFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMUSensor_OrientationReferenceFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.IMUSensor.OrientationReferenceFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.IMUSensor.OrientationReferenceFrame)
    MergeFrom(*source);
  }
}

void IMUSensor_OrientationReferenceFrame::MergeFrom(const IMUSensor_OrientationReferenceFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.IMUSensor.OrientationReferenceFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.localization().size() > 0) {

    localization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localization_);
  }
  if (from.custom_rpy_parent_frame().size() > 0) {

    custom_rpy_parent_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_rpy_parent_frame_);
  }
  if (from.gravity_dir_x_parent_frame().size() > 0) {

    gravity_dir_x_parent_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gravity_dir_x_parent_frame_);
  }
  if (from.has_custom_rpy()) {
    mutable_custom_rpy()->::gz::msgs::Vector3d::MergeFrom(from.custom_rpy());
  }
  if (from.has_gravity_dir_x()) {
    mutable_gravity_dir_x()->::gz::msgs::Vector3d::MergeFrom(from.gravity_dir_x());
  }
}

void IMUSensor_OrientationReferenceFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.IMUSensor.OrientationReferenceFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUSensor_OrientationReferenceFrame::CopyFrom(const IMUSensor_OrientationReferenceFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.IMUSensor.OrientationReferenceFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUSensor_OrientationReferenceFrame::IsInitialized() const {
  return true;
}

void IMUSensor_OrientationReferenceFrame::Swap(IMUSensor_OrientationReferenceFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUSensor_OrientationReferenceFrame::InternalSwap(IMUSensor_OrientationReferenceFrame* other) {
  using std::swap;
  localization_.Swap(&other->localization_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  custom_rpy_parent_frame_.Swap(&other->custom_rpy_parent_frame_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gravity_dir_x_parent_frame_.Swap(&other->gravity_dir_x_parent_frame_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(custom_rpy_, other->custom_rpy_);
  swap(gravity_dir_x_, other->gravity_dir_x_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IMUSensor_OrientationReferenceFrame::GetMetadata() const {
  protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMUSensor::InitAsDefaultInstance() {
  ::gz::msgs::_IMUSensor_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_IMUSensor_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::gz::msgs::IMUSensor_AngularVelocity*>(
      ::gz::msgs::IMUSensor_AngularVelocity::internal_default_instance());
  ::gz::msgs::_IMUSensor_default_instance_._instance.get_mutable()->linear_acceleration_ = const_cast< ::gz::msgs::IMUSensor_LinearAcceleration*>(
      ::gz::msgs::IMUSensor_LinearAcceleration::internal_default_instance());
  ::gz::msgs::_IMUSensor_default_instance_._instance.get_mutable()->orientation_ref_frame_ = const_cast< ::gz::msgs::IMUSensor_OrientationReferenceFrame*>(
      ::gz::msgs::IMUSensor_OrientationReferenceFrame::internal_default_instance());
}
void IMUSensor::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUSensor::kHeaderFieldNumber;
const int IMUSensor::kAngularVelocityFieldNumber;
const int IMUSensor::kLinearAccelerationFieldNumber;
const int IMUSensor::kOrientationRefFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUSensor::IMUSensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::scc_info_IMUSensor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.IMUSensor)
}
IMUSensor::IMUSensor(const IMUSensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::gz::msgs::IMUSensor_AngularVelocity(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  if (from.has_linear_acceleration()) {
    linear_acceleration_ = new ::gz::msgs::IMUSensor_LinearAcceleration(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = NULL;
  }
  if (from.has_orientation_ref_frame()) {
    orientation_ref_frame_ = new ::gz::msgs::IMUSensor_OrientationReferenceFrame(*from.orientation_ref_frame_);
  } else {
    orientation_ref_frame_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.IMUSensor)
}

void IMUSensor::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_ref_frame_) -
      reinterpret_cast<char*>(&header_)) + sizeof(orientation_ref_frame_));
}

IMUSensor::~IMUSensor() {
  // @@protoc_insertion_point(destructor:gz.msgs.IMUSensor)
  SharedDtor();
}

void IMUSensor::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete angular_velocity_;
  if (this != internal_default_instance()) delete linear_acceleration_;
  if (this != internal_default_instance()) delete orientation_ref_frame_;
}

void IMUSensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IMUSensor::descriptor() {
  ::protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMUSensor& IMUSensor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::scc_info_IMUSensor.base);
  return *internal_default_instance();
}


void IMUSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.IMUSensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) {
    delete angular_velocity_;
  }
  angular_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && linear_acceleration_ != NULL) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_ref_frame_ != NULL) {
    delete orientation_ref_frame_;
  }
  orientation_ref_frame_ = NULL;
  _internal_metadata_.Clear();
}

bool IMUSensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.IMUSensor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.IMUSensor.AngularVelocity angular_velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.IMUSensor.LinearAcceleration linear_acceleration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.IMUSensor.OrientationReferenceFrame orientation_ref_frame = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation_ref_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.IMUSensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.IMUSensor)
  return false;
#undef DO_
}

void IMUSensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.IMUSensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .gz.msgs.IMUSensor.AngularVelocity angular_velocity = 2;
  if (this->has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_angular_velocity(), output);
  }

  // .gz.msgs.IMUSensor.LinearAcceleration linear_acceleration = 3;
  if (this->has_linear_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_linear_acceleration(), output);
  }

  // .gz.msgs.IMUSensor.OrientationReferenceFrame orientation_ref_frame = 4;
  if (this->has_orientation_ref_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_orientation_ref_frame(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.IMUSensor)
}

::google::protobuf::uint8* IMUSensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.IMUSensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .gz.msgs.IMUSensor.AngularVelocity angular_velocity = 2;
  if (this->has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_angular_velocity(), deterministic, target);
  }

  // .gz.msgs.IMUSensor.LinearAcceleration linear_acceleration = 3;
  if (this->has_linear_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_linear_acceleration(), deterministic, target);
  }

  // .gz.msgs.IMUSensor.OrientationReferenceFrame orientation_ref_frame = 4;
  if (this->has_orientation_ref_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_orientation_ref_frame(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.IMUSensor)
  return target;
}

size_t IMUSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.IMUSensor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.IMUSensor.AngularVelocity angular_velocity = 2;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angular_velocity_);
  }

  // .gz.msgs.IMUSensor.LinearAcceleration linear_acceleration = 3;
  if (this->has_linear_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linear_acceleration_);
  }

  // .gz.msgs.IMUSensor.OrientationReferenceFrame orientation_ref_frame = 4;
  if (this->has_orientation_ref_frame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *orientation_ref_frame_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUSensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.IMUSensor)
  GOOGLE_DCHECK_NE(&from, this);
  const IMUSensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMUSensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.IMUSensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.IMUSensor)
    MergeFrom(*source);
  }
}

void IMUSensor::MergeFrom(const IMUSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.IMUSensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_angular_velocity()) {
    mutable_angular_velocity()->::gz::msgs::IMUSensor_AngularVelocity::MergeFrom(from.angular_velocity());
  }
  if (from.has_linear_acceleration()) {
    mutable_linear_acceleration()->::gz::msgs::IMUSensor_LinearAcceleration::MergeFrom(from.linear_acceleration());
  }
  if (from.has_orientation_ref_frame()) {
    mutable_orientation_ref_frame()->::gz::msgs::IMUSensor_OrientationReferenceFrame::MergeFrom(from.orientation_ref_frame());
  }
}

void IMUSensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.IMUSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUSensor::CopyFrom(const IMUSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.IMUSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUSensor::IsInitialized() const {
  return true;
}

void IMUSensor::Swap(IMUSensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUSensor::InternalSwap(IMUSensor* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(linear_acceleration_, other->linear_acceleration_);
  swap(orientation_ref_frame_, other->orientation_ref_frame_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IMUSensor::GetMetadata() const {
  protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fimu_5fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::IMUSensor_AngularVelocity* Arena::CreateMaybeMessage< ::gz::msgs::IMUSensor_AngularVelocity >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::IMUSensor_AngularVelocity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::IMUSensor_LinearAcceleration* Arena::CreateMaybeMessage< ::gz::msgs::IMUSensor_LinearAcceleration >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::IMUSensor_LinearAcceleration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::IMUSensor_OrientationReferenceFrame* Arena::CreateMaybeMessage< ::gz::msgs::IMUSensor_OrientationReferenceFrame >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::IMUSensor_OrientationReferenceFrame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::IMUSensor* Arena::CreateMaybeMessage< ::gz::msgs::IMUSensor >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::IMUSensor >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
