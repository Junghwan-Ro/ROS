// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/diagnostics.proto

#include "gz/msgs/diagnostics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.Diagnostics", Diagnostics)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fdiagnostics_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fdiagnostics_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Diagnostics_DiagTime;
}  // namespace protobuf_gz_2fmsgs_2fdiagnostics_2eproto
namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace protobuf_gz_2fmsgs_2ftime_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2ftime_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Time;
}  // namespace protobuf_gz_2fmsgs_2ftime_2eproto
namespace gz {
namespace msgs {
class Diagnostics_DiagTimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Diagnostics_DiagTime>
      _instance;
} _Diagnostics_DiagTime_default_instance_;
class DiagnosticsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Diagnostics>
      _instance;
} _Diagnostics_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fdiagnostics_2eproto {
static void InitDefaultsDiagnostics_DiagTime() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Diagnostics_DiagTime_default_instance_;
    new (ptr) ::gz::msgs::Diagnostics_DiagTime();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Diagnostics_DiagTime::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<1> scc_info_Diagnostics_DiagTime =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDiagnostics_DiagTime}, {
      &protobuf_gz_2fmsgs_2ftime_2eproto::scc_info_Time.base,}};

static void InitDefaultsDiagnostics() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Diagnostics_default_instance_;
    new (ptr) ::gz::msgs::Diagnostics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Diagnostics::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<3> scc_info_Diagnostics =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsDiagnostics}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2fdiagnostics_2eproto::scc_info_Diagnostics_DiagTime.base,
      &protobuf_gz_2fmsgs_2ftime_2eproto::scc_info_Time.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Diagnostics_DiagTime.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Diagnostics.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Diagnostics_DiagTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Diagnostics_DiagTime, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Diagnostics_DiagTime, elapsed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Diagnostics_DiagTime, wall_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Diagnostics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Diagnostics, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Diagnostics, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Diagnostics, real_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Diagnostics, sim_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Diagnostics, real_time_factor_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::Diagnostics_DiagTime)},
  { 8, -1, sizeof(::gz::msgs::Diagnostics)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Diagnostics_DiagTime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Diagnostics_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/diagnostics.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031gz/msgs/diagnostics.proto\022\007gz.msgs\032\022gz"
      "/msgs/time.proto\032\024gz/msgs/header.proto\"\217"
      "\002\n\013Diagnostics\022\037\n\006header\030\001 \001(\0132\017.gz.msgs"
      ".Header\022+\n\004time\030\002 \003(\0132\035.gz.msgs.Diagnost"
      "ics.DiagTime\022 \n\treal_time\030\003 \001(\0132\r.gz.msg"
      "s.Time\022\037\n\010sim_time\030\004 \001(\0132\r.gz.msgs.Time\022"
      "\030\n\020real_time_factor\030\005 \001(\001\032U\n\010DiagTime\022\014\n"
      "\004name\030\001 \001(\t\022\036\n\007elapsed\030\002 \001(\0132\r.gz.msgs.T"
      "ime\022\033\n\004wall\030\003 \001(\0132\r.gz.msgs.TimeB \n\013com."
      "gz.msgsB\021DiagnosticsProtosb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 394);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/diagnostics.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2ftime_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fdiagnostics_2eproto
namespace gz {
namespace msgs {

// ===================================================================

void Diagnostics_DiagTime::InitAsDefaultInstance() {
  ::gz::msgs::_Diagnostics_DiagTime_default_instance_._instance.get_mutable()->elapsed_ = const_cast< ::gz::msgs::Time*>(
      ::gz::msgs::Time::internal_default_instance());
  ::gz::msgs::_Diagnostics_DiagTime_default_instance_._instance.get_mutable()->wall_ = const_cast< ::gz::msgs::Time*>(
      ::gz::msgs::Time::internal_default_instance());
}
void Diagnostics_DiagTime::clear_elapsed() {
  if (GetArenaNoVirtual() == NULL && elapsed_ != NULL) {
    delete elapsed_;
  }
  elapsed_ = NULL;
}
void Diagnostics_DiagTime::clear_wall() {
  if (GetArenaNoVirtual() == NULL && wall_ != NULL) {
    delete wall_;
  }
  wall_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Diagnostics_DiagTime::kNameFieldNumber;
const int Diagnostics_DiagTime::kElapsedFieldNumber;
const int Diagnostics_DiagTime::kWallFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Diagnostics_DiagTime::Diagnostics_DiagTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fdiagnostics_2eproto::scc_info_Diagnostics_DiagTime.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Diagnostics.DiagTime)
}
Diagnostics_DiagTime::Diagnostics_DiagTime(const Diagnostics_DiagTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_elapsed()) {
    elapsed_ = new ::gz::msgs::Time(*from.elapsed_);
  } else {
    elapsed_ = NULL;
  }
  if (from.has_wall()) {
    wall_ = new ::gz::msgs::Time(*from.wall_);
  } else {
    wall_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Diagnostics.DiagTime)
}

void Diagnostics_DiagTime::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&elapsed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wall_) -
      reinterpret_cast<char*>(&elapsed_)) + sizeof(wall_));
}

Diagnostics_DiagTime::~Diagnostics_DiagTime() {
  // @@protoc_insertion_point(destructor:gz.msgs.Diagnostics.DiagTime)
  SharedDtor();
}

void Diagnostics_DiagTime::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete elapsed_;
  if (this != internal_default_instance()) delete wall_;
}

void Diagnostics_DiagTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Diagnostics_DiagTime::descriptor() {
  ::protobuf_gz_2fmsgs_2fdiagnostics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdiagnostics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Diagnostics_DiagTime& Diagnostics_DiagTime::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fdiagnostics_2eproto::scc_info_Diagnostics_DiagTime.base);
  return *internal_default_instance();
}


void Diagnostics_DiagTime::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Diagnostics.DiagTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && elapsed_ != NULL) {
    delete elapsed_;
  }
  elapsed_ = NULL;
  if (GetArenaNoVirtual() == NULL && wall_ != NULL) {
    delete wall_;
  }
  wall_ = NULL;
  _internal_metadata_.Clear();
}

bool Diagnostics_DiagTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Diagnostics.DiagTime)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Diagnostics.DiagTime.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Time elapsed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_elapsed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Time wall = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wall()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Diagnostics.DiagTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Diagnostics.DiagTime)
  return false;
#undef DO_
}

void Diagnostics_DiagTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Diagnostics.DiagTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Diagnostics.DiagTime.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .gz.msgs.Time elapsed = 2;
  if (this->has_elapsed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_elapsed(), output);
  }

  // .gz.msgs.Time wall = 3;
  if (this->has_wall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_wall(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Diagnostics.DiagTime)
}

::google::protobuf::uint8* Diagnostics_DiagTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Diagnostics.DiagTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Diagnostics.DiagTime.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .gz.msgs.Time elapsed = 2;
  if (this->has_elapsed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_elapsed(), deterministic, target);
  }

  // .gz.msgs.Time wall = 3;
  if (this->has_wall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_wall(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Diagnostics.DiagTime)
  return target;
}

size_t Diagnostics_DiagTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Diagnostics.DiagTime)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .gz.msgs.Time elapsed = 2;
  if (this->has_elapsed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *elapsed_);
  }

  // .gz.msgs.Time wall = 3;
  if (this->has_wall()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *wall_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Diagnostics_DiagTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Diagnostics.DiagTime)
  GOOGLE_DCHECK_NE(&from, this);
  const Diagnostics_DiagTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Diagnostics_DiagTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Diagnostics.DiagTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Diagnostics.DiagTime)
    MergeFrom(*source);
  }
}

void Diagnostics_DiagTime::MergeFrom(const Diagnostics_DiagTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Diagnostics.DiagTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_elapsed()) {
    mutable_elapsed()->::gz::msgs::Time::MergeFrom(from.elapsed());
  }
  if (from.has_wall()) {
    mutable_wall()->::gz::msgs::Time::MergeFrom(from.wall());
  }
}

void Diagnostics_DiagTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Diagnostics.DiagTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Diagnostics_DiagTime::CopyFrom(const Diagnostics_DiagTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Diagnostics.DiagTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diagnostics_DiagTime::IsInitialized() const {
  return true;
}

void Diagnostics_DiagTime::Swap(Diagnostics_DiagTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Diagnostics_DiagTime::InternalSwap(Diagnostics_DiagTime* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(elapsed_, other->elapsed_);
  swap(wall_, other->wall_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Diagnostics_DiagTime::GetMetadata() const {
  protobuf_gz_2fmsgs_2fdiagnostics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdiagnostics_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Diagnostics::InitAsDefaultInstance() {
  ::gz::msgs::_Diagnostics_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_Diagnostics_default_instance_._instance.get_mutable()->real_time_ = const_cast< ::gz::msgs::Time*>(
      ::gz::msgs::Time::internal_default_instance());
  ::gz::msgs::_Diagnostics_default_instance_._instance.get_mutable()->sim_time_ = const_cast< ::gz::msgs::Time*>(
      ::gz::msgs::Time::internal_default_instance());
}
void Diagnostics::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void Diagnostics::clear_real_time() {
  if (GetArenaNoVirtual() == NULL && real_time_ != NULL) {
    delete real_time_;
  }
  real_time_ = NULL;
}
void Diagnostics::clear_sim_time() {
  if (GetArenaNoVirtual() == NULL && sim_time_ != NULL) {
    delete sim_time_;
  }
  sim_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Diagnostics::kHeaderFieldNumber;
const int Diagnostics::kTimeFieldNumber;
const int Diagnostics::kRealTimeFieldNumber;
const int Diagnostics::kSimTimeFieldNumber;
const int Diagnostics::kRealTimeFactorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Diagnostics::Diagnostics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fdiagnostics_2eproto::scc_info_Diagnostics.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Diagnostics)
}
Diagnostics::Diagnostics(const Diagnostics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      time_(from.time_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_real_time()) {
    real_time_ = new ::gz::msgs::Time(*from.real_time_);
  } else {
    real_time_ = NULL;
  }
  if (from.has_sim_time()) {
    sim_time_ = new ::gz::msgs::Time(*from.sim_time_);
  } else {
    sim_time_ = NULL;
  }
  real_time_factor_ = from.real_time_factor_;
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Diagnostics)
}

void Diagnostics::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&real_time_factor_) -
      reinterpret_cast<char*>(&header_)) + sizeof(real_time_factor_));
}

Diagnostics::~Diagnostics() {
  // @@protoc_insertion_point(destructor:gz.msgs.Diagnostics)
  SharedDtor();
}

void Diagnostics::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete real_time_;
  if (this != internal_default_instance()) delete sim_time_;
}

void Diagnostics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Diagnostics::descriptor() {
  ::protobuf_gz_2fmsgs_2fdiagnostics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdiagnostics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Diagnostics& Diagnostics::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fdiagnostics_2eproto::scc_info_Diagnostics.base);
  return *internal_default_instance();
}


void Diagnostics::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Diagnostics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && real_time_ != NULL) {
    delete real_time_;
  }
  real_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && sim_time_ != NULL) {
    delete sim_time_;
  }
  sim_time_ = NULL;
  real_time_factor_ = 0;
  _internal_metadata_.Clear();
}

bool Diagnostics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Diagnostics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gz.msgs.Diagnostics.DiagTime time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Time real_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_real_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Time sim_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sim_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double real_time_factor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &real_time_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Diagnostics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Diagnostics)
  return false;
#undef DO_
}

void Diagnostics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Diagnostics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // repeated .gz.msgs.Diagnostics.DiagTime time = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->time_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->time(static_cast<int>(i)),
      output);
  }

  // .gz.msgs.Time real_time = 3;
  if (this->has_real_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_real_time(), output);
  }

  // .gz.msgs.Time sim_time = 4;
  if (this->has_sim_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_sim_time(), output);
  }

  // double real_time_factor = 5;
  if (this->real_time_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->real_time_factor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Diagnostics)
}

::google::protobuf::uint8* Diagnostics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Diagnostics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // repeated .gz.msgs.Diagnostics.DiagTime time = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->time_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->time(static_cast<int>(i)), deterministic, target);
  }

  // .gz.msgs.Time real_time = 3;
  if (this->has_real_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_real_time(), deterministic, target);
  }

  // .gz.msgs.Time sim_time = 4;
  if (this->has_sim_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_sim_time(), deterministic, target);
  }

  // double real_time_factor = 5;
  if (this->real_time_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->real_time_factor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Diagnostics)
  return target;
}

size_t Diagnostics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Diagnostics)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gz.msgs.Diagnostics.DiagTime time = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->time_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->time(static_cast<int>(i)));
    }
  }

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.Time real_time = 3;
  if (this->has_real_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *real_time_);
  }

  // .gz.msgs.Time sim_time = 4;
  if (this->has_sim_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sim_time_);
  }

  // double real_time_factor = 5;
  if (this->real_time_factor() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Diagnostics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Diagnostics)
  GOOGLE_DCHECK_NE(&from, this);
  const Diagnostics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Diagnostics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Diagnostics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Diagnostics)
    MergeFrom(*source);
  }
}

void Diagnostics::MergeFrom(const Diagnostics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Diagnostics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  time_.MergeFrom(from.time_);
  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_real_time()) {
    mutable_real_time()->::gz::msgs::Time::MergeFrom(from.real_time());
  }
  if (from.has_sim_time()) {
    mutable_sim_time()->::gz::msgs::Time::MergeFrom(from.sim_time());
  }
  if (from.real_time_factor() != 0) {
    set_real_time_factor(from.real_time_factor());
  }
}

void Diagnostics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Diagnostics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Diagnostics::CopyFrom(const Diagnostics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Diagnostics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diagnostics::IsInitialized() const {
  return true;
}

void Diagnostics::Swap(Diagnostics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Diagnostics::InternalSwap(Diagnostics* other) {
  using std::swap;
  CastToBase(&time_)->InternalSwap(CastToBase(&other->time_));
  swap(header_, other->header_);
  swap(real_time_, other->real_time_);
  swap(sim_time_, other->sim_time_);
  swap(real_time_factor_, other->real_time_factor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Diagnostics::GetMetadata() const {
  protobuf_gz_2fmsgs_2fdiagnostics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdiagnostics_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Diagnostics_DiagTime* Arena::CreateMaybeMessage< ::gz::msgs::Diagnostics_DiagTime >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Diagnostics_DiagTime >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Diagnostics* Arena::CreateMaybeMessage< ::gz::msgs::Diagnostics >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Diagnostics >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
