// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/discovery.proto

#include "gz/msgs/discovery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.Discovery", Discovery)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fdiscovery_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fdiscovery_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Discovery_Flags;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fdiscovery_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Discovery_Publisher_MessagePublisher;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fdiscovery_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Discovery_Publisher_ServicePublisher;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fdiscovery_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Discovery_Subscriber;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fdiscovery_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Discovery_Publisher;
}  // namespace protobuf_gz_2fmsgs_2fdiscovery_2eproto
namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace gz {
namespace msgs {
class Discovery_FlagsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Discovery_Flags>
      _instance;
} _Discovery_Flags_default_instance_;
class Discovery_SubscriberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Discovery_Subscriber>
      _instance;
} _Discovery_Subscriber_default_instance_;
class Discovery_Publisher_MessagePublisherDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Discovery_Publisher_MessagePublisher>
      _instance;
} _Discovery_Publisher_MessagePublisher_default_instance_;
class Discovery_Publisher_ServicePublisherDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Discovery_Publisher_ServicePublisher>
      _instance;
} _Discovery_Publisher_ServicePublisher_default_instance_;
class Discovery_PublisherDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Discovery_Publisher>
      _instance;
  const ::gz::msgs::Discovery_Publisher_MessagePublisher* msg_pub_;
  const ::gz::msgs::Discovery_Publisher_ServicePublisher* srv_pub_;
} _Discovery_Publisher_default_instance_;
class DiscoveryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Discovery>
      _instance;
  const ::gz::msgs::Discovery_Subscriber* sub_;
  const ::gz::msgs::Discovery_Publisher* pub_;
} _Discovery_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fdiscovery_2eproto {
static void InitDefaultsDiscovery_Flags() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Discovery_Flags_default_instance_;
    new (ptr) ::gz::msgs::Discovery_Flags();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Discovery_Flags::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<0> scc_info_Discovery_Flags =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiscovery_Flags}, {}};

static void InitDefaultsDiscovery_Subscriber() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Discovery_Subscriber_default_instance_;
    new (ptr) ::gz::msgs::Discovery_Subscriber();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Discovery_Subscriber::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<0> scc_info_Discovery_Subscriber =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiscovery_Subscriber}, {}};

static void InitDefaultsDiscovery_Publisher_MessagePublisher() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Discovery_Publisher_MessagePublisher_default_instance_;
    new (ptr) ::gz::msgs::Discovery_Publisher_MessagePublisher();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Discovery_Publisher_MessagePublisher::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<0> scc_info_Discovery_Publisher_MessagePublisher =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiscovery_Publisher_MessagePublisher}, {}};

static void InitDefaultsDiscovery_Publisher_ServicePublisher() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Discovery_Publisher_ServicePublisher_default_instance_;
    new (ptr) ::gz::msgs::Discovery_Publisher_ServicePublisher();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Discovery_Publisher_ServicePublisher::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<0> scc_info_Discovery_Publisher_ServicePublisher =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiscovery_Publisher_ServicePublisher}, {}};

static void InitDefaultsDiscovery_Publisher() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Discovery_Publisher_default_instance_;
    new (ptr) ::gz::msgs::Discovery_Publisher();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Discovery_Publisher::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<2> scc_info_Discovery_Publisher =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDiscovery_Publisher}, {
      &protobuf_gz_2fmsgs_2fdiscovery_2eproto::scc_info_Discovery_Publisher_MessagePublisher.base,
      &protobuf_gz_2fmsgs_2fdiscovery_2eproto::scc_info_Discovery_Publisher_ServicePublisher.base,}};

static void InitDefaultsDiscovery() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Discovery_default_instance_;
    new (ptr) ::gz::msgs::Discovery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Discovery::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<4> scc_info_Discovery =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsDiscovery}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2fdiscovery_2eproto::scc_info_Discovery_Flags.base,
      &protobuf_gz_2fmsgs_2fdiscovery_2eproto::scc_info_Discovery_Subscriber.base,
      &protobuf_gz_2fmsgs_2fdiscovery_2eproto::scc_info_Discovery_Publisher.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Discovery_Flags.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Discovery_Subscriber.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Discovery_Publisher_MessagePublisher.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Discovery_Publisher_ServicePublisher.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Discovery_Publisher.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Discovery.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Flags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Flags, relay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Flags, no_relay_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Subscriber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Subscriber, topic_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Publisher_MessagePublisher, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Publisher_MessagePublisher, ctrl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Publisher_MessagePublisher, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Publisher_MessagePublisher, throttled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Publisher_MessagePublisher, msgs_per_sec_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Publisher_ServicePublisher, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Publisher_ServicePublisher, socket_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Publisher_ServicePublisher, request_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Publisher_ServicePublisher, response_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Publisher, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Publisher, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Publisher, topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Publisher, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Publisher, process_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Publisher, node_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Publisher, scope_),
  offsetof(::gz::msgs::Discovery_PublisherDefaultTypeInternal, msg_pub_),
  offsetof(::gz::msgs::Discovery_PublisherDefaultTypeInternal, srv_pub_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery_Publisher, pub_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery, process_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery, flags_),
  offsetof(::gz::msgs::DiscoveryDefaultTypeInternal, sub_),
  offsetof(::gz::msgs::DiscoveryDefaultTypeInternal, pub_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Discovery, disc_contents_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::Discovery_Flags)},
  { 7, -1, sizeof(::gz::msgs::Discovery_Subscriber)},
  { 13, -1, sizeof(::gz::msgs::Discovery_Publisher_MessagePublisher)},
  { 22, -1, sizeof(::gz::msgs::Discovery_Publisher_ServicePublisher)},
  { 30, -1, sizeof(::gz::msgs::Discovery_Publisher)},
  { 43, -1, sizeof(::gz::msgs::Discovery)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Discovery_Flags_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Discovery_Subscriber_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Discovery_Publisher_MessagePublisher_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Discovery_Publisher_ServicePublisher_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Discovery_Publisher_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Discovery_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/discovery.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027gz/msgs/discovery.proto\022\007gz.msgs\032\024gz/m"
      "sgs/header.proto\"\377\007\n\tDiscovery\022\037\n\006header"
      "\030\001 \001(\0132\017.gz.msgs.Header\022\017\n\007version\030\002 \001(\r"
      "\022\024\n\014process_uuid\030\003 \001(\t\022%\n\004type\030\004 \001(\0162\027.g"
      "z.msgs.Discovery.Type\022\'\n\005flags\030\005 \001(\0132\030.g"
      "z.msgs.Discovery.Flags\022,\n\003sub\030\006 \001(\0132\035.gz"
      ".msgs.Discovery.SubscriberH\000\022+\n\003pub\030\007 \001("
      "\0132\034.gz.msgs.Discovery.PublisherH\000\032(\n\005Fla"
      "gs\022\r\n\005relay\030\001 \001(\010\022\020\n\010no_relay\030\002 \001(\010\032\033\n\nS"
      "ubscriber\022\r\n\005topic\030\001 \001(\t\032\361\003\n\tPublisher\022\r"
      "\n\005topic\030\001 \001(\t\022\017\n\007address\030\002 \001(\t\022\024\n\014proces"
      "s_uuid\030\003 \001(\t\022\021\n\tnode_uuid\030\004 \001(\t\0221\n\005scope"
      "\030\005 \001(\0162\".gz.msgs.Discovery.Publisher.Sco"
      "pe\022@\n\007msg_pub\030\006 \001(\0132-.gz.msgs.Discovery."
      "Publisher.MessagePublisherH\000\022@\n\007srv_pub\030"
      "\007 \001(\0132-.gz.msgs.Discovery.Publisher.Serv"
      "icePublisherH\000\032[\n\020MessagePublisher\022\014\n\004ct"
      "rl\030\001 \001(\t\022\020\n\010msg_type\030\002 \001(\t\022\021\n\tthrottled\030"
      "\003 \001(\010\022\024\n\014msgs_per_sec\030\004 \001(\004\032R\n\020ServicePu"
      "blisher\022\021\n\tsocket_id\030\001 \001(\t\022\024\n\014request_ty"
      "pe\030\002 \001(\t\022\025\n\rresponse_type\030\003 \001(\t\"\'\n\005Scope"
      "\022\013\n\007PROCESS\020\000\022\010\n\004HOST\020\001\022\007\n\003ALL\020\002B\n\n\010pub_"
      "type\"\262\001\n\004Type\022\021\n\rUNINITIALIZED\020\000\022\r\n\tADVE"
      "RTISE\020\001\022\r\n\tSUBSCRIBE\020\002\022\017\n\013UNADVERTISE\020\003\022"
      "\r\n\tHEARTBEAT\020\004\022\007\n\003BYE\020\005\022\022\n\016NEW_CONNECTIO"
      "N\020\006\022\022\n\016END_CONNECTION\020\007\022\023\n\017SUBSCRIBERS_R"
      "EQ\020\010\022\023\n\017SUBSCRIBERS_REP\020\tB\017\n\rdisc_conten"
      "tsB\036\n\013com.gz.msgsB\017DiscoveryProtosb\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1122);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/discovery.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fdiscovery_2eproto
namespace gz {
namespace msgs {
const ::google::protobuf::EnumDescriptor* Discovery_Publisher_Scope_descriptor() {
  protobuf_gz_2fmsgs_2fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gz_2fmsgs_2fdiscovery_2eproto::file_level_enum_descriptors[0];
}
bool Discovery_Publisher_Scope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Discovery_Publisher_Scope Discovery_Publisher::PROCESS;
const Discovery_Publisher_Scope Discovery_Publisher::HOST;
const Discovery_Publisher_Scope Discovery_Publisher::ALL;
const Discovery_Publisher_Scope Discovery_Publisher::Scope_MIN;
const Discovery_Publisher_Scope Discovery_Publisher::Scope_MAX;
const int Discovery_Publisher::Scope_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Discovery_Type_descriptor() {
  protobuf_gz_2fmsgs_2fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gz_2fmsgs_2fdiscovery_2eproto::file_level_enum_descriptors[1];
}
bool Discovery_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Discovery_Type Discovery::UNINITIALIZED;
const Discovery_Type Discovery::ADVERTISE;
const Discovery_Type Discovery::SUBSCRIBE;
const Discovery_Type Discovery::UNADVERTISE;
const Discovery_Type Discovery::HEARTBEAT;
const Discovery_Type Discovery::BYE;
const Discovery_Type Discovery::NEW_CONNECTION;
const Discovery_Type Discovery::END_CONNECTION;
const Discovery_Type Discovery::SUBSCRIBERS_REQ;
const Discovery_Type Discovery::SUBSCRIBERS_REP;
const Discovery_Type Discovery::Type_MIN;
const Discovery_Type Discovery::Type_MAX;
const int Discovery::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Discovery_Flags::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Discovery_Flags::kRelayFieldNumber;
const int Discovery_Flags::kNoRelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Discovery_Flags::Discovery_Flags()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fdiscovery_2eproto::scc_info_Discovery_Flags.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Discovery.Flags)
}
Discovery_Flags::Discovery_Flags(const Discovery_Flags& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&relay_, &from.relay_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_relay_) -
    reinterpret_cast<char*>(&relay_)) + sizeof(no_relay_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Discovery.Flags)
}

void Discovery_Flags::SharedCtor() {
  ::memset(&relay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_relay_) -
      reinterpret_cast<char*>(&relay_)) + sizeof(no_relay_));
}

Discovery_Flags::~Discovery_Flags() {
  // @@protoc_insertion_point(destructor:gz.msgs.Discovery.Flags)
  SharedDtor();
}

void Discovery_Flags::SharedDtor() {
}

void Discovery_Flags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Discovery_Flags::descriptor() {
  ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Discovery_Flags& Discovery_Flags::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fdiscovery_2eproto::scc_info_Discovery_Flags.base);
  return *internal_default_instance();
}


void Discovery_Flags::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Discovery.Flags)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&relay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_relay_) -
      reinterpret_cast<char*>(&relay_)) + sizeof(no_relay_));
  _internal_metadata_.Clear();
}

bool Discovery_Flags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Discovery.Flags)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool relay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &relay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool no_relay = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_relay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Discovery.Flags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Discovery.Flags)
  return false;
#undef DO_
}

void Discovery_Flags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Discovery.Flags)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool relay = 1;
  if (this->relay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->relay(), output);
  }

  // bool no_relay = 2;
  if (this->no_relay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->no_relay(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Discovery.Flags)
}

::google::protobuf::uint8* Discovery_Flags::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Discovery.Flags)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool relay = 1;
  if (this->relay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->relay(), target);
  }

  // bool no_relay = 2;
  if (this->no_relay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->no_relay(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Discovery.Flags)
  return target;
}

size_t Discovery_Flags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Discovery.Flags)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool relay = 1;
  if (this->relay() != 0) {
    total_size += 1 + 1;
  }

  // bool no_relay = 2;
  if (this->no_relay() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Discovery_Flags::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Discovery.Flags)
  GOOGLE_DCHECK_NE(&from, this);
  const Discovery_Flags* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Discovery_Flags>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Discovery.Flags)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Discovery.Flags)
    MergeFrom(*source);
  }
}

void Discovery_Flags::MergeFrom(const Discovery_Flags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Discovery.Flags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.relay() != 0) {
    set_relay(from.relay());
  }
  if (from.no_relay() != 0) {
    set_no_relay(from.no_relay());
  }
}

void Discovery_Flags::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Discovery.Flags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Discovery_Flags::CopyFrom(const Discovery_Flags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Discovery.Flags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Discovery_Flags::IsInitialized() const {
  return true;
}

void Discovery_Flags::Swap(Discovery_Flags* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Discovery_Flags::InternalSwap(Discovery_Flags* other) {
  using std::swap;
  swap(relay_, other->relay_);
  swap(no_relay_, other->no_relay_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Discovery_Flags::GetMetadata() const {
  protobuf_gz_2fmsgs_2fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Discovery_Subscriber::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Discovery_Subscriber::kTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Discovery_Subscriber::Discovery_Subscriber()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fdiscovery_2eproto::scc_info_Discovery_Subscriber.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Discovery.Subscriber)
}
Discovery_Subscriber::Discovery_Subscriber(const Discovery_Subscriber& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Discovery.Subscriber)
}

void Discovery_Subscriber::SharedCtor() {
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Discovery_Subscriber::~Discovery_Subscriber() {
  // @@protoc_insertion_point(destructor:gz.msgs.Discovery.Subscriber)
  SharedDtor();
}

void Discovery_Subscriber::SharedDtor() {
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Discovery_Subscriber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Discovery_Subscriber::descriptor() {
  ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Discovery_Subscriber& Discovery_Subscriber::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fdiscovery_2eproto::scc_info_Discovery_Subscriber.base);
  return *internal_default_instance();
}


void Discovery_Subscriber::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Discovery.Subscriber)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Discovery_Subscriber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Discovery.Subscriber)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string topic = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Discovery.Subscriber.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Discovery.Subscriber)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Discovery.Subscriber)
  return false;
#undef DO_
}

void Discovery_Subscriber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Discovery.Subscriber)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.Subscriber.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Discovery.Subscriber)
}

::google::protobuf::uint8* Discovery_Subscriber::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Discovery.Subscriber)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.Subscriber.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Discovery.Subscriber)
  return target;
}

size_t Discovery_Subscriber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Discovery.Subscriber)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Discovery_Subscriber::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Discovery.Subscriber)
  GOOGLE_DCHECK_NE(&from, this);
  const Discovery_Subscriber* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Discovery_Subscriber>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Discovery.Subscriber)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Discovery.Subscriber)
    MergeFrom(*source);
  }
}

void Discovery_Subscriber::MergeFrom(const Discovery_Subscriber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Discovery.Subscriber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
}

void Discovery_Subscriber::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Discovery.Subscriber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Discovery_Subscriber::CopyFrom(const Discovery_Subscriber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Discovery.Subscriber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Discovery_Subscriber::IsInitialized() const {
  return true;
}

void Discovery_Subscriber::Swap(Discovery_Subscriber* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Discovery_Subscriber::InternalSwap(Discovery_Subscriber* other) {
  using std::swap;
  topic_.Swap(&other->topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Discovery_Subscriber::GetMetadata() const {
  protobuf_gz_2fmsgs_2fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Discovery_Publisher_MessagePublisher::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Discovery_Publisher_MessagePublisher::kCtrlFieldNumber;
const int Discovery_Publisher_MessagePublisher::kMsgTypeFieldNumber;
const int Discovery_Publisher_MessagePublisher::kThrottledFieldNumber;
const int Discovery_Publisher_MessagePublisher::kMsgsPerSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Discovery_Publisher_MessagePublisher::Discovery_Publisher_MessagePublisher()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fdiscovery_2eproto::scc_info_Discovery_Publisher_MessagePublisher.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Discovery.Publisher.MessagePublisher)
}
Discovery_Publisher_MessagePublisher::Discovery_Publisher_MessagePublisher(const Discovery_Publisher_MessagePublisher& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ctrl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ctrl().size() > 0) {
    ctrl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ctrl_);
  }
  msg_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg_type().size() > 0) {
    msg_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_type_);
  }
  ::memcpy(&msgs_per_sec_, &from.msgs_per_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&throttled_) -
    reinterpret_cast<char*>(&msgs_per_sec_)) + sizeof(throttled_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Discovery.Publisher.MessagePublisher)
}

void Discovery_Publisher_MessagePublisher::SharedCtor() {
  ctrl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msgs_per_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&throttled_) -
      reinterpret_cast<char*>(&msgs_per_sec_)) + sizeof(throttled_));
}

Discovery_Publisher_MessagePublisher::~Discovery_Publisher_MessagePublisher() {
  // @@protoc_insertion_point(destructor:gz.msgs.Discovery.Publisher.MessagePublisher)
  SharedDtor();
}

void Discovery_Publisher_MessagePublisher::SharedDtor() {
  ctrl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Discovery_Publisher_MessagePublisher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Discovery_Publisher_MessagePublisher::descriptor() {
  ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Discovery_Publisher_MessagePublisher& Discovery_Publisher_MessagePublisher::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fdiscovery_2eproto::scc_info_Discovery_Publisher_MessagePublisher.base);
  return *internal_default_instance();
}


void Discovery_Publisher_MessagePublisher::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Discovery.Publisher.MessagePublisher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctrl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msgs_per_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&throttled_) -
      reinterpret_cast<char*>(&msgs_per_sec_)) + sizeof(throttled_));
  _internal_metadata_.Clear();
}

bool Discovery_Publisher_MessagePublisher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Discovery.Publisher.MessagePublisher)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ctrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ctrl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ctrl().data(), static_cast<int>(this->ctrl().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Discovery.Publisher.MessagePublisher.ctrl"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg_type().data(), static_cast<int>(this->msg_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Discovery.Publisher.MessagePublisher.msg_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool throttled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &throttled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 msgs_per_sec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgs_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Discovery.Publisher.MessagePublisher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Discovery.Publisher.MessagePublisher)
  return false;
#undef DO_
}

void Discovery_Publisher_MessagePublisher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Discovery.Publisher.MessagePublisher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ctrl = 1;
  if (this->ctrl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ctrl().data(), static_cast<int>(this->ctrl().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.Publisher.MessagePublisher.ctrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ctrl(), output);
  }

  // string msg_type = 2;
  if (this->msg_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_type().data(), static_cast<int>(this->msg_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.Publisher.MessagePublisher.msg_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg_type(), output);
  }

  // bool throttled = 3;
  if (this->throttled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->throttled(), output);
  }

  // uint64 msgs_per_sec = 4;
  if (this->msgs_per_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->msgs_per_sec(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Discovery.Publisher.MessagePublisher)
}

::google::protobuf::uint8* Discovery_Publisher_MessagePublisher::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Discovery.Publisher.MessagePublisher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ctrl = 1;
  if (this->ctrl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ctrl().data(), static_cast<int>(this->ctrl().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.Publisher.MessagePublisher.ctrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ctrl(), target);
  }

  // string msg_type = 2;
  if (this->msg_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_type().data(), static_cast<int>(this->msg_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.Publisher.MessagePublisher.msg_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg_type(), target);
  }

  // bool throttled = 3;
  if (this->throttled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->throttled(), target);
  }

  // uint64 msgs_per_sec = 4;
  if (this->msgs_per_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->msgs_per_sec(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Discovery.Publisher.MessagePublisher)
  return target;
}

size_t Discovery_Publisher_MessagePublisher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Discovery.Publisher.MessagePublisher)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ctrl = 1;
  if (this->ctrl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ctrl());
  }

  // string msg_type = 2;
  if (this->msg_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_type());
  }

  // uint64 msgs_per_sec = 4;
  if (this->msgs_per_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->msgs_per_sec());
  }

  // bool throttled = 3;
  if (this->throttled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Discovery_Publisher_MessagePublisher::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Discovery.Publisher.MessagePublisher)
  GOOGLE_DCHECK_NE(&from, this);
  const Discovery_Publisher_MessagePublisher* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Discovery_Publisher_MessagePublisher>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Discovery.Publisher.MessagePublisher)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Discovery.Publisher.MessagePublisher)
    MergeFrom(*source);
  }
}

void Discovery_Publisher_MessagePublisher::MergeFrom(const Discovery_Publisher_MessagePublisher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Discovery.Publisher.MessagePublisher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ctrl().size() > 0) {

    ctrl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ctrl_);
  }
  if (from.msg_type().size() > 0) {

    msg_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_type_);
  }
  if (from.msgs_per_sec() != 0) {
    set_msgs_per_sec(from.msgs_per_sec());
  }
  if (from.throttled() != 0) {
    set_throttled(from.throttled());
  }
}

void Discovery_Publisher_MessagePublisher::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Discovery.Publisher.MessagePublisher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Discovery_Publisher_MessagePublisher::CopyFrom(const Discovery_Publisher_MessagePublisher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Discovery.Publisher.MessagePublisher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Discovery_Publisher_MessagePublisher::IsInitialized() const {
  return true;
}

void Discovery_Publisher_MessagePublisher::Swap(Discovery_Publisher_MessagePublisher* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Discovery_Publisher_MessagePublisher::InternalSwap(Discovery_Publisher_MessagePublisher* other) {
  using std::swap;
  ctrl_.Swap(&other->ctrl_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_type_.Swap(&other->msg_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msgs_per_sec_, other->msgs_per_sec_);
  swap(throttled_, other->throttled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Discovery_Publisher_MessagePublisher::GetMetadata() const {
  protobuf_gz_2fmsgs_2fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Discovery_Publisher_ServicePublisher::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Discovery_Publisher_ServicePublisher::kSocketIdFieldNumber;
const int Discovery_Publisher_ServicePublisher::kRequestTypeFieldNumber;
const int Discovery_Publisher_ServicePublisher::kResponseTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Discovery_Publisher_ServicePublisher::Discovery_Publisher_ServicePublisher()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fdiscovery_2eproto::scc_info_Discovery_Publisher_ServicePublisher.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Discovery.Publisher.ServicePublisher)
}
Discovery_Publisher_ServicePublisher::Discovery_Publisher_ServicePublisher(const Discovery_Publisher_ServicePublisher& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  socket_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.socket_id().size() > 0) {
    socket_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.socket_id_);
  }
  request_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_type().size() > 0) {
    request_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_type_);
  }
  response_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.response_type().size() > 0) {
    response_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_type_);
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Discovery.Publisher.ServicePublisher)
}

void Discovery_Publisher_ServicePublisher::SharedCtor() {
  socket_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Discovery_Publisher_ServicePublisher::~Discovery_Publisher_ServicePublisher() {
  // @@protoc_insertion_point(destructor:gz.msgs.Discovery.Publisher.ServicePublisher)
  SharedDtor();
}

void Discovery_Publisher_ServicePublisher::SharedDtor() {
  socket_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Discovery_Publisher_ServicePublisher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Discovery_Publisher_ServicePublisher::descriptor() {
  ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Discovery_Publisher_ServicePublisher& Discovery_Publisher_ServicePublisher::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fdiscovery_2eproto::scc_info_Discovery_Publisher_ServicePublisher.base);
  return *internal_default_instance();
}


void Discovery_Publisher_ServicePublisher::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Discovery.Publisher.ServicePublisher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  socket_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Discovery_Publisher_ServicePublisher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Discovery.Publisher.ServicePublisher)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string socket_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_socket_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->socket_id().data(), static_cast<int>(this->socket_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Discovery.Publisher.ServicePublisher.socket_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string request_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_type().data(), static_cast<int>(this->request_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Discovery.Publisher.ServicePublisher.request_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string response_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->response_type().data(), static_cast<int>(this->response_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Discovery.Publisher.ServicePublisher.response_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Discovery.Publisher.ServicePublisher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Discovery.Publisher.ServicePublisher)
  return false;
#undef DO_
}

void Discovery_Publisher_ServicePublisher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Discovery.Publisher.ServicePublisher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string socket_id = 1;
  if (this->socket_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->socket_id().data(), static_cast<int>(this->socket_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.Publisher.ServicePublisher.socket_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->socket_id(), output);
  }

  // string request_type = 2;
  if (this->request_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_type().data(), static_cast<int>(this->request_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.Publisher.ServicePublisher.request_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->request_type(), output);
  }

  // string response_type = 3;
  if (this->response_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_type().data(), static_cast<int>(this->response_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.Publisher.ServicePublisher.response_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->response_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Discovery.Publisher.ServicePublisher)
}

::google::protobuf::uint8* Discovery_Publisher_ServicePublisher::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Discovery.Publisher.ServicePublisher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string socket_id = 1;
  if (this->socket_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->socket_id().data(), static_cast<int>(this->socket_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.Publisher.ServicePublisher.socket_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->socket_id(), target);
  }

  // string request_type = 2;
  if (this->request_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_type().data(), static_cast<int>(this->request_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.Publisher.ServicePublisher.request_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_type(), target);
  }

  // string response_type = 3;
  if (this->response_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_type().data(), static_cast<int>(this->response_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.Publisher.ServicePublisher.response_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->response_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Discovery.Publisher.ServicePublisher)
  return target;
}

size_t Discovery_Publisher_ServicePublisher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Discovery.Publisher.ServicePublisher)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string socket_id = 1;
  if (this->socket_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->socket_id());
  }

  // string request_type = 2;
  if (this->request_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_type());
  }

  // string response_type = 3;
  if (this->response_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->response_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Discovery_Publisher_ServicePublisher::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Discovery.Publisher.ServicePublisher)
  GOOGLE_DCHECK_NE(&from, this);
  const Discovery_Publisher_ServicePublisher* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Discovery_Publisher_ServicePublisher>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Discovery.Publisher.ServicePublisher)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Discovery.Publisher.ServicePublisher)
    MergeFrom(*source);
  }
}

void Discovery_Publisher_ServicePublisher::MergeFrom(const Discovery_Publisher_ServicePublisher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Discovery.Publisher.ServicePublisher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.socket_id().size() > 0) {

    socket_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.socket_id_);
  }
  if (from.request_type().size() > 0) {

    request_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_type_);
  }
  if (from.response_type().size() > 0) {

    response_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_type_);
  }
}

void Discovery_Publisher_ServicePublisher::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Discovery.Publisher.ServicePublisher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Discovery_Publisher_ServicePublisher::CopyFrom(const Discovery_Publisher_ServicePublisher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Discovery.Publisher.ServicePublisher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Discovery_Publisher_ServicePublisher::IsInitialized() const {
  return true;
}

void Discovery_Publisher_ServicePublisher::Swap(Discovery_Publisher_ServicePublisher* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Discovery_Publisher_ServicePublisher::InternalSwap(Discovery_Publisher_ServicePublisher* other) {
  using std::swap;
  socket_id_.Swap(&other->socket_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_type_.Swap(&other->request_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  response_type_.Swap(&other->response_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Discovery_Publisher_ServicePublisher::GetMetadata() const {
  protobuf_gz_2fmsgs_2fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Discovery_Publisher::InitAsDefaultInstance() {
  ::gz::msgs::_Discovery_Publisher_default_instance_.msg_pub_ = const_cast< ::gz::msgs::Discovery_Publisher_MessagePublisher*>(
      ::gz::msgs::Discovery_Publisher_MessagePublisher::internal_default_instance());
  ::gz::msgs::_Discovery_Publisher_default_instance_.srv_pub_ = const_cast< ::gz::msgs::Discovery_Publisher_ServicePublisher*>(
      ::gz::msgs::Discovery_Publisher_ServicePublisher::internal_default_instance());
}
void Discovery_Publisher::set_allocated_msg_pub(::gz::msgs::Discovery_Publisher_MessagePublisher* msg_pub) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_pub_type();
  if (msg_pub) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msg_pub = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msg_pub, submessage_arena);
    }
    set_has_msg_pub();
    pub_type_.msg_pub_ = msg_pub;
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Discovery.Publisher.msg_pub)
}
void Discovery_Publisher::set_allocated_srv_pub(::gz::msgs::Discovery_Publisher_ServicePublisher* srv_pub) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_pub_type();
  if (srv_pub) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      srv_pub = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, srv_pub, submessage_arena);
    }
    set_has_srv_pub();
    pub_type_.srv_pub_ = srv_pub;
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Discovery.Publisher.srv_pub)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Discovery_Publisher::kTopicFieldNumber;
const int Discovery_Publisher::kAddressFieldNumber;
const int Discovery_Publisher::kProcessUuidFieldNumber;
const int Discovery_Publisher::kNodeUuidFieldNumber;
const int Discovery_Publisher::kScopeFieldNumber;
const int Discovery_Publisher::kMsgPubFieldNumber;
const int Discovery_Publisher::kSrvPubFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Discovery_Publisher::Discovery_Publisher()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fdiscovery_2eproto::scc_info_Discovery_Publisher.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Discovery.Publisher)
}
Discovery_Publisher::Discovery_Publisher(const Discovery_Publisher& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  process_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.process_uuid().size() > 0) {
    process_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_uuid_);
  }
  node_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_uuid().size() > 0) {
    node_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_uuid_);
  }
  scope_ = from.scope_;
  clear_has_pub_type();
  switch (from.pub_type_case()) {
    case kMsgPub: {
      mutable_msg_pub()->::gz::msgs::Discovery_Publisher_MessagePublisher::MergeFrom(from.msg_pub());
      break;
    }
    case kSrvPub: {
      mutable_srv_pub()->::gz::msgs::Discovery_Publisher_ServicePublisher::MergeFrom(from.srv_pub());
      break;
    }
    case PUB_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Discovery.Publisher)
}

void Discovery_Publisher::SharedCtor() {
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scope_ = 0;
  clear_has_pub_type();
}

Discovery_Publisher::~Discovery_Publisher() {
  // @@protoc_insertion_point(destructor:gz.msgs.Discovery.Publisher)
  SharedDtor();
}

void Discovery_Publisher::SharedDtor() {
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_pub_type()) {
    clear_pub_type();
  }
}

void Discovery_Publisher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Discovery_Publisher::descriptor() {
  ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Discovery_Publisher& Discovery_Publisher::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fdiscovery_2eproto::scc_info_Discovery_Publisher.base);
  return *internal_default_instance();
}


void Discovery_Publisher::clear_pub_type() {
// @@protoc_insertion_point(one_of_clear_start:gz.msgs.Discovery.Publisher)
  switch (pub_type_case()) {
    case kMsgPub: {
      delete pub_type_.msg_pub_;
      break;
    }
    case kSrvPub: {
      delete pub_type_.srv_pub_;
      break;
    }
    case PUB_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PUB_TYPE_NOT_SET;
}


void Discovery_Publisher::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Discovery.Publisher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scope_ = 0;
  clear_pub_type();
  _internal_metadata_.Clear();
}

bool Discovery_Publisher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Discovery.Publisher)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string topic = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Discovery.Publisher.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Discovery.Publisher.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string process_uuid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->process_uuid().data(), static_cast<int>(this->process_uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Discovery.Publisher.process_uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_uuid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_uuid().data(), static_cast<int>(this->node_uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Discovery.Publisher.node_uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Discovery.Publisher.Scope scope = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_scope(static_cast< ::gz::msgs::Discovery_Publisher_Scope >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Discovery.Publisher.MessagePublisher msg_pub = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg_pub()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Discovery.Publisher.ServicePublisher srv_pub = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_srv_pub()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Discovery.Publisher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Discovery.Publisher)
  return false;
#undef DO_
}

void Discovery_Publisher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Discovery.Publisher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.Publisher.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.Publisher.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // string process_uuid = 3;
  if (this->process_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->process_uuid().data(), static_cast<int>(this->process_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.Publisher.process_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->process_uuid(), output);
  }

  // string node_uuid = 4;
  if (this->node_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_uuid().data(), static_cast<int>(this->node_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.Publisher.node_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->node_uuid(), output);
  }

  // .gz.msgs.Discovery.Publisher.Scope scope = 5;
  if (this->scope() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->scope(), output);
  }

  // .gz.msgs.Discovery.Publisher.MessagePublisher msg_pub = 6;
  if (has_msg_pub()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_msg_pub(), output);
  }

  // .gz.msgs.Discovery.Publisher.ServicePublisher srv_pub = 7;
  if (has_srv_pub()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_srv_pub(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Discovery.Publisher)
}

::google::protobuf::uint8* Discovery_Publisher::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Discovery.Publisher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.Publisher.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.Publisher.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // string process_uuid = 3;
  if (this->process_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->process_uuid().data(), static_cast<int>(this->process_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.Publisher.process_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->process_uuid(), target);
  }

  // string node_uuid = 4;
  if (this->node_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_uuid().data(), static_cast<int>(this->node_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.Publisher.node_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->node_uuid(), target);
  }

  // .gz.msgs.Discovery.Publisher.Scope scope = 5;
  if (this->scope() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->scope(), target);
  }

  // .gz.msgs.Discovery.Publisher.MessagePublisher msg_pub = 6;
  if (has_msg_pub()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_msg_pub(), deterministic, target);
  }

  // .gz.msgs.Discovery.Publisher.ServicePublisher srv_pub = 7;
  if (has_srv_pub()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_srv_pub(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Discovery.Publisher)
  return target;
}

size_t Discovery_Publisher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Discovery.Publisher)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string process_uuid = 3;
  if (this->process_uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->process_uuid());
  }

  // string node_uuid = 4;
  if (this->node_uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_uuid());
  }

  // .gz.msgs.Discovery.Publisher.Scope scope = 5;
  if (this->scope() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scope());
  }

  switch (pub_type_case()) {
    // .gz.msgs.Discovery.Publisher.MessagePublisher msg_pub = 6;
    case kMsgPub: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pub_type_.msg_pub_);
      break;
    }
    // .gz.msgs.Discovery.Publisher.ServicePublisher srv_pub = 7;
    case kSrvPub: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pub_type_.srv_pub_);
      break;
    }
    case PUB_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Discovery_Publisher::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Discovery.Publisher)
  GOOGLE_DCHECK_NE(&from, this);
  const Discovery_Publisher* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Discovery_Publisher>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Discovery.Publisher)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Discovery.Publisher)
    MergeFrom(*source);
  }
}

void Discovery_Publisher::MergeFrom(const Discovery_Publisher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Discovery.Publisher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.process_uuid().size() > 0) {

    process_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_uuid_);
  }
  if (from.node_uuid().size() > 0) {

    node_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_uuid_);
  }
  if (from.scope() != 0) {
    set_scope(from.scope());
  }
  switch (from.pub_type_case()) {
    case kMsgPub: {
      mutable_msg_pub()->::gz::msgs::Discovery_Publisher_MessagePublisher::MergeFrom(from.msg_pub());
      break;
    }
    case kSrvPub: {
      mutable_srv_pub()->::gz::msgs::Discovery_Publisher_ServicePublisher::MergeFrom(from.srv_pub());
      break;
    }
    case PUB_TYPE_NOT_SET: {
      break;
    }
  }
}

void Discovery_Publisher::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Discovery.Publisher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Discovery_Publisher::CopyFrom(const Discovery_Publisher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Discovery.Publisher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Discovery_Publisher::IsInitialized() const {
  return true;
}

void Discovery_Publisher::Swap(Discovery_Publisher* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Discovery_Publisher::InternalSwap(Discovery_Publisher* other) {
  using std::swap;
  topic_.Swap(&other->topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  process_uuid_.Swap(&other->process_uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_uuid_.Swap(&other->node_uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(scope_, other->scope_);
  swap(pub_type_, other->pub_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Discovery_Publisher::GetMetadata() const {
  protobuf_gz_2fmsgs_2fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Discovery::InitAsDefaultInstance() {
  ::gz::msgs::_Discovery_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_Discovery_default_instance_._instance.get_mutable()->flags_ = const_cast< ::gz::msgs::Discovery_Flags*>(
      ::gz::msgs::Discovery_Flags::internal_default_instance());
  ::gz::msgs::_Discovery_default_instance_.sub_ = const_cast< ::gz::msgs::Discovery_Subscriber*>(
      ::gz::msgs::Discovery_Subscriber::internal_default_instance());
  ::gz::msgs::_Discovery_default_instance_.pub_ = const_cast< ::gz::msgs::Discovery_Publisher*>(
      ::gz::msgs::Discovery_Publisher::internal_default_instance());
}
void Discovery::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void Discovery::set_allocated_sub(::gz::msgs::Discovery_Subscriber* sub) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_disc_contents();
  if (sub) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sub = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sub, submessage_arena);
    }
    set_has_sub();
    disc_contents_.sub_ = sub;
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Discovery.sub)
}
void Discovery::set_allocated_pub(::gz::msgs::Discovery_Publisher* pub) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_disc_contents();
  if (pub) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pub = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pub, submessage_arena);
    }
    set_has_pub();
    disc_contents_.pub_ = pub;
  }
  // @@protoc_insertion_point(field_set_allocated:gz.msgs.Discovery.pub)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Discovery::kHeaderFieldNumber;
const int Discovery::kVersionFieldNumber;
const int Discovery::kProcessUuidFieldNumber;
const int Discovery::kTypeFieldNumber;
const int Discovery::kFlagsFieldNumber;
const int Discovery::kSubFieldNumber;
const int Discovery::kPubFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Discovery::Discovery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fdiscovery_2eproto::scc_info_Discovery.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Discovery)
}
Discovery::Discovery(const Discovery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  process_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.process_uuid().size() > 0) {
    process_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_uuid_);
  }
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_flags()) {
    flags_ = new ::gz::msgs::Discovery_Flags(*from.flags_);
  } else {
    flags_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&version_)) + sizeof(type_));
  clear_has_disc_contents();
  switch (from.disc_contents_case()) {
    case kSub: {
      mutable_sub()->::gz::msgs::Discovery_Subscriber::MergeFrom(from.sub());
      break;
    }
    case kPub: {
      mutable_pub()->::gz::msgs::Discovery_Publisher::MergeFrom(from.pub());
      break;
    }
    case DISC_CONTENTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Discovery)
}

void Discovery::SharedCtor() {
  process_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(type_));
  clear_has_disc_contents();
}

Discovery::~Discovery() {
  // @@protoc_insertion_point(destructor:gz.msgs.Discovery)
  SharedDtor();
}

void Discovery::SharedDtor() {
  process_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete flags_;
  if (has_disc_contents()) {
    clear_disc_contents();
  }
}

void Discovery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Discovery::descriptor() {
  ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Discovery& Discovery::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fdiscovery_2eproto::scc_info_Discovery.base);
  return *internal_default_instance();
}


void Discovery::clear_disc_contents() {
// @@protoc_insertion_point(one_of_clear_start:gz.msgs.Discovery)
  switch (disc_contents_case()) {
    case kSub: {
      delete disc_contents_.sub_;
      break;
    }
    case kPub: {
      delete disc_contents_.pub_;
      break;
    }
    case DISC_CONTENTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DISC_CONTENTS_NOT_SET;
}


void Discovery::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Discovery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && flags_ != NULL) {
    delete flags_;
  }
  flags_ = NULL;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&version_)) + sizeof(type_));
  clear_disc_contents();
  _internal_metadata_.Clear();
}

bool Discovery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Discovery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string process_uuid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->process_uuid().data(), static_cast<int>(this->process_uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Discovery.process_uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Discovery.Type type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gz::msgs::Discovery_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Discovery.Flags flags = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Discovery.Subscriber sub = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sub()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Discovery.Publisher pub = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pub()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Discovery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Discovery)
  return false;
#undef DO_
}

void Discovery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Discovery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // string process_uuid = 3;
  if (this->process_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->process_uuid().data(), static_cast<int>(this->process_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.process_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->process_uuid(), output);
  }

  // .gz.msgs.Discovery.Type type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // .gz.msgs.Discovery.Flags flags = 5;
  if (this->has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_flags(), output);
  }

  // .gz.msgs.Discovery.Subscriber sub = 6;
  if (has_sub()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_sub(), output);
  }

  // .gz.msgs.Discovery.Publisher pub = 7;
  if (has_pub()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_pub(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Discovery)
}

::google::protobuf::uint8* Discovery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Discovery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // string process_uuid = 3;
  if (this->process_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->process_uuid().data(), static_cast<int>(this->process_uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Discovery.process_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->process_uuid(), target);
  }

  // .gz.msgs.Discovery.Type type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // .gz.msgs.Discovery.Flags flags = 5;
  if (this->has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_flags(), deterministic, target);
  }

  // .gz.msgs.Discovery.Subscriber sub = 6;
  if (has_sub()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_sub(), deterministic, target);
  }

  // .gz.msgs.Discovery.Publisher pub = 7;
  if (has_pub()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_pub(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Discovery)
  return target;
}

size_t Discovery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Discovery)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string process_uuid = 3;
  if (this->process_uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->process_uuid());
  }

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.Discovery.Flags flags = 5;
  if (this->has_flags()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // .gz.msgs.Discovery.Type type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (disc_contents_case()) {
    // .gz.msgs.Discovery.Subscriber sub = 6;
    case kSub: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *disc_contents_.sub_);
      break;
    }
    // .gz.msgs.Discovery.Publisher pub = 7;
    case kPub: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *disc_contents_.pub_);
      break;
    }
    case DISC_CONTENTS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Discovery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Discovery)
  GOOGLE_DCHECK_NE(&from, this);
  const Discovery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Discovery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Discovery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Discovery)
    MergeFrom(*source);
  }
}

void Discovery::MergeFrom(const Discovery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Discovery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.process_uuid().size() > 0) {

    process_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_uuid_);
  }
  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_flags()) {
    mutable_flags()->::gz::msgs::Discovery_Flags::MergeFrom(from.flags());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.disc_contents_case()) {
    case kSub: {
      mutable_sub()->::gz::msgs::Discovery_Subscriber::MergeFrom(from.sub());
      break;
    }
    case kPub: {
      mutable_pub()->::gz::msgs::Discovery_Publisher::MergeFrom(from.pub());
      break;
    }
    case DISC_CONTENTS_NOT_SET: {
      break;
    }
  }
}

void Discovery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Discovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Discovery::CopyFrom(const Discovery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Discovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Discovery::IsInitialized() const {
  return true;
}

void Discovery::Swap(Discovery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Discovery::InternalSwap(Discovery* other) {
  using std::swap;
  process_uuid_.Swap(&other->process_uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(flags_, other->flags_);
  swap(version_, other->version_);
  swap(type_, other->type_);
  swap(disc_contents_, other->disc_contents_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Discovery::GetMetadata() const {
  protobuf_gz_2fmsgs_2fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Discovery_Flags* Arena::CreateMaybeMessage< ::gz::msgs::Discovery_Flags >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Discovery_Flags >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Discovery_Subscriber* Arena::CreateMaybeMessage< ::gz::msgs::Discovery_Subscriber >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Discovery_Subscriber >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Discovery_Publisher_MessagePublisher* Arena::CreateMaybeMessage< ::gz::msgs::Discovery_Publisher_MessagePublisher >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Discovery_Publisher_MessagePublisher >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Discovery_Publisher_ServicePublisher* Arena::CreateMaybeMessage< ::gz::msgs::Discovery_Publisher_ServicePublisher >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Discovery_Publisher_ServicePublisher >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Discovery_Publisher* Arena::CreateMaybeMessage< ::gz::msgs::Discovery_Publisher >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Discovery_Publisher >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Discovery* Arena::CreateMaybeMessage< ::gz::msgs::Discovery >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Discovery >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
