// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/camera_lens.proto

#include "gz/msgs/camera_lens.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.CameraLens", CameraLens)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace gz {
namespace msgs {
class CameraLensDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraLens>
      _instance;
} _CameraLens_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fcamera_5flens_2eproto {
static void InitDefaultsCameraLens() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_CameraLens_default_instance_;
    new (ptr) ::gz::msgs::CameraLens();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::CameraLens::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<1> scc_info_CameraLens =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCameraLens}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CameraLens.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraLens, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraLens, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraLens, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraLens, c1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraLens, c2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraLens, c3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraLens, f_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraLens, fun_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraLens, scale_to_hfov_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraLens, cutoff_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraLens, hfov_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::CameraLens, env_texture_size_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::CameraLens)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_CameraLens_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/camera_lens.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031gz/msgs/camera_lens.proto\022\007gz.msgs\032\024gz"
      "/msgs/header.proto\"\314\001\n\nCameraLens\022\037\n\006hea"
      "der\030\001 \001(\0132\017.gz.msgs.Header\022\014\n\004type\030\002 \001(\t"
      "\022\n\n\002c1\030\003 \001(\001\022\n\n\002c2\030\004 \001(\001\022\n\n\002c3\030\005 \001(\001\022\t\n\001"
      "f\030\006 \001(\001\022\013\n\003fun\030\007 \001(\t\022\025\n\rscale_to_hfov\030\010 "
      "\001(\010\022\024\n\014cutoff_angle\030\t \001(\001\022\014\n\004hfov\030\n \001(\001\022"
      "\030\n\020env_texture_size\030\013 \001(\005B\037\n\013com.gz.msgs"
      "B\020CameraLensProtosb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 306);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/camera_lens.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fcamera_5flens_2eproto
namespace gz {
namespace msgs {

// ===================================================================

void CameraLens::InitAsDefaultInstance() {
  ::gz::msgs::_CameraLens_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
}
void CameraLens::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraLens::kHeaderFieldNumber;
const int CameraLens::kTypeFieldNumber;
const int CameraLens::kC1FieldNumber;
const int CameraLens::kC2FieldNumber;
const int CameraLens::kC3FieldNumber;
const int CameraLens::kFFieldNumber;
const int CameraLens::kFunFieldNumber;
const int CameraLens::kScaleToHfovFieldNumber;
const int CameraLens::kCutoffAngleFieldNumber;
const int CameraLens::kHfovFieldNumber;
const int CameraLens::kEnvTextureSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraLens::CameraLens()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fcamera_5flens_2eproto::scc_info_CameraLens.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.CameraLens)
}
CameraLens::CameraLens(const CameraLens& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  fun_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fun().size() > 0) {
    fun_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fun_);
  }
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&c1_, &from.c1_,
    static_cast<size_t>(reinterpret_cast<char*>(&hfov_) -
    reinterpret_cast<char*>(&c1_)) + sizeof(hfov_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.CameraLens)
}

void CameraLens::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fun_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hfov_) -
      reinterpret_cast<char*>(&header_)) + sizeof(hfov_));
}

CameraLens::~CameraLens() {
  // @@protoc_insertion_point(destructor:gz.msgs.CameraLens)
  SharedDtor();
}

void CameraLens::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fun_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void CameraLens::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CameraLens::descriptor() {
  ::protobuf_gz_2fmsgs_2fcamera_5flens_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fcamera_5flens_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraLens& CameraLens::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fcamera_5flens_2eproto::scc_info_CameraLens.base);
  return *internal_default_instance();
}


void CameraLens::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.CameraLens)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fun_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&c1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hfov_) -
      reinterpret_cast<char*>(&c1_)) + sizeof(hfov_));
  _internal_metadata_.Clear();
}

bool CameraLens::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.CameraLens)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.CameraLens.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double c1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double c2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double c3 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double f = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &f_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fun = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fun()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fun().data(), static_cast<int>(this->fun().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.CameraLens.fun"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool scale_to_hfov = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scale_to_hfov_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cutoff_angle = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cutoff_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double hfov = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hfov_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 env_texture_size = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &env_texture_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.CameraLens)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.CameraLens)
  return false;
#undef DO_
}

void CameraLens::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.CameraLens)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.CameraLens.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // double c1 = 3;
  if (this->c1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->c1(), output);
  }

  // double c2 = 4;
  if (this->c2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->c2(), output);
  }

  // double c3 = 5;
  if (this->c3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->c3(), output);
  }

  // double f = 6;
  if (this->f() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->f(), output);
  }

  // string fun = 7;
  if (this->fun().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fun().data(), static_cast<int>(this->fun().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.CameraLens.fun");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->fun(), output);
  }

  // bool scale_to_hfov = 8;
  if (this->scale_to_hfov() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->scale_to_hfov(), output);
  }

  // double cutoff_angle = 9;
  if (this->cutoff_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->cutoff_angle(), output);
  }

  // double hfov = 10;
  if (this->hfov() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->hfov(), output);
  }

  // int32 env_texture_size = 11;
  if (this->env_texture_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->env_texture_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.CameraLens)
}

::google::protobuf::uint8* CameraLens::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.CameraLens)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.CameraLens.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // double c1 = 3;
  if (this->c1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->c1(), target);
  }

  // double c2 = 4;
  if (this->c2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->c2(), target);
  }

  // double c3 = 5;
  if (this->c3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->c3(), target);
  }

  // double f = 6;
  if (this->f() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->f(), target);
  }

  // string fun = 7;
  if (this->fun().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fun().data(), static_cast<int>(this->fun().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.CameraLens.fun");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->fun(), target);
  }

  // bool scale_to_hfov = 8;
  if (this->scale_to_hfov() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->scale_to_hfov(), target);
  }

  // double cutoff_angle = 9;
  if (this->cutoff_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->cutoff_angle(), target);
  }

  // double hfov = 10;
  if (this->hfov() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->hfov(), target);
  }

  // int32 env_texture_size = 11;
  if (this->env_texture_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->env_texture_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.CameraLens)
  return target;
}

size_t CameraLens::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.CameraLens)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string fun = 7;
  if (this->fun().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fun());
  }

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // double c1 = 3;
  if (this->c1() != 0) {
    total_size += 1 + 8;
  }

  // double c2 = 4;
  if (this->c2() != 0) {
    total_size += 1 + 8;
  }

  // double c3 = 5;
  if (this->c3() != 0) {
    total_size += 1 + 8;
  }

  // double f = 6;
  if (this->f() != 0) {
    total_size += 1 + 8;
  }

  // double cutoff_angle = 9;
  if (this->cutoff_angle() != 0) {
    total_size += 1 + 8;
  }

  // bool scale_to_hfov = 8;
  if (this->scale_to_hfov() != 0) {
    total_size += 1 + 1;
  }

  // int32 env_texture_size = 11;
  if (this->env_texture_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->env_texture_size());
  }

  // double hfov = 10;
  if (this->hfov() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraLens::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.CameraLens)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraLens* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraLens>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.CameraLens)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.CameraLens)
    MergeFrom(*source);
  }
}

void CameraLens::MergeFrom(const CameraLens& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.CameraLens)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.fun().size() > 0) {

    fun_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fun_);
  }
  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.c1() != 0) {
    set_c1(from.c1());
  }
  if (from.c2() != 0) {
    set_c2(from.c2());
  }
  if (from.c3() != 0) {
    set_c3(from.c3());
  }
  if (from.f() != 0) {
    set_f(from.f());
  }
  if (from.cutoff_angle() != 0) {
    set_cutoff_angle(from.cutoff_angle());
  }
  if (from.scale_to_hfov() != 0) {
    set_scale_to_hfov(from.scale_to_hfov());
  }
  if (from.env_texture_size() != 0) {
    set_env_texture_size(from.env_texture_size());
  }
  if (from.hfov() != 0) {
    set_hfov(from.hfov());
  }
}

void CameraLens::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.CameraLens)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraLens::CopyFrom(const CameraLens& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.CameraLens)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraLens::IsInitialized() const {
  return true;
}

void CameraLens::Swap(CameraLens* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraLens::InternalSwap(CameraLens* other) {
  using std::swap;
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fun_.Swap(&other->fun_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(c1_, other->c1_);
  swap(c2_, other->c2_);
  swap(c3_, other->c3_);
  swap(f_, other->f_);
  swap(cutoff_angle_, other->cutoff_angle_);
  swap(scale_to_hfov_, other->scale_to_hfov_);
  swap(env_texture_size_, other->env_texture_size_);
  swap(hfov_, other->hfov_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CameraLens::GetMetadata() const {
  protobuf_gz_2fmsgs_2fcamera_5flens_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fcamera_5flens_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::CameraLens* Arena::CreateMaybeMessage< ::gz::msgs::CameraLens >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::CameraLens >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
