// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/gui_camera.proto

#include "gz/msgs/gui_camera.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.GUICamera", GUICamera)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace protobuf_gz_2fmsgs_2fpose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fpose_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Pose;
}  // namespace protobuf_gz_2fmsgs_2fpose_2eproto
namespace protobuf_gz_2fmsgs_2ftrack_5fvisual_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2ftrack_5fvisual_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TrackVisual;
}  // namespace protobuf_gz_2fmsgs_2ftrack_5fvisual_2eproto
namespace gz {
namespace msgs {
class GUICameraDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GUICamera>
      _instance;
} _GUICamera_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fgui_5fcamera_2eproto {
static void InitDefaultsGUICamera() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_GUICamera_default_instance_;
    new (ptr) ::gz::msgs::GUICamera();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::GUICamera::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<3> scc_info_GUICamera =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsGUICamera}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2fpose_2eproto::scc_info_Pose.base,
      &protobuf_gz_2fmsgs_2ftrack_5fvisual_2eproto::scc_info_TrackVisual.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GUICamera.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::GUICamera, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::GUICamera, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::GUICamera, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::GUICamera, view_controller_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::GUICamera, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::GUICamera, track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::GUICamera, projection_type_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::GUICamera)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_GUICamera_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/gui_camera.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030gz/msgs/gui_camera.proto\022\007gz.msgs\032\022gz/"
      "msgs/pose.proto\032\032gz/msgs/track_visual.pr"
      "oto\032\024gz/msgs/header.proto\"\256\001\n\tGUICamera\022"
      "\037\n\006header\030\001 \001(\0132\017.gz.msgs.Header\022\014\n\004name"
      "\030\002 \001(\t\022\027\n\017view_controller\030\003 \001(\t\022\033\n\004pose\030"
      "\004 \001(\0132\r.gz.msgs.Pose\022#\n\005track\030\005 \001(\0132\024.gz"
      ".msgs.TrackVisual\022\027\n\017projection_type\030\006 \001"
      "(\tB\036\n\013com.gz.msgsB\017GUICameraProtosb\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 322);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/gui_camera.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fpose_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2ftrack_5fvisual_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fgui_5fcamera_2eproto
namespace gz {
namespace msgs {

// ===================================================================

void GUICamera::InitAsDefaultInstance() {
  ::gz::msgs::_GUICamera_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_GUICamera_default_instance_._instance.get_mutable()->pose_ = const_cast< ::gz::msgs::Pose*>(
      ::gz::msgs::Pose::internal_default_instance());
  ::gz::msgs::_GUICamera_default_instance_._instance.get_mutable()->track_ = const_cast< ::gz::msgs::TrackVisual*>(
      ::gz::msgs::TrackVisual::internal_default_instance());
}
void GUICamera::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void GUICamera::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
void GUICamera::clear_track() {
  if (GetArenaNoVirtual() == NULL && track_ != NULL) {
    delete track_;
  }
  track_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GUICamera::kHeaderFieldNumber;
const int GUICamera::kNameFieldNumber;
const int GUICamera::kViewControllerFieldNumber;
const int GUICamera::kPoseFieldNumber;
const int GUICamera::kTrackFieldNumber;
const int GUICamera::kProjectionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GUICamera::GUICamera()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fgui_5fcamera_2eproto::scc_info_GUICamera.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.GUICamera)
}
GUICamera::GUICamera(const GUICamera& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  view_controller_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.view_controller().size() > 0) {
    view_controller_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.view_controller_);
  }
  projection_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.projection_type().size() > 0) {
    projection_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.projection_type_);
  }
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::gz::msgs::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_track()) {
    track_ = new ::gz::msgs::TrackVisual(*from.track_);
  } else {
    track_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gz.msgs.GUICamera)
}

void GUICamera::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_controller_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  projection_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&track_) -
      reinterpret_cast<char*>(&header_)) + sizeof(track_));
}

GUICamera::~GUICamera() {
  // @@protoc_insertion_point(destructor:gz.msgs.GUICamera)
  SharedDtor();
}

void GUICamera::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_controller_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  projection_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete track_;
}

void GUICamera::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GUICamera::descriptor() {
  ::protobuf_gz_2fmsgs_2fgui_5fcamera_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fgui_5fcamera_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GUICamera& GUICamera::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fgui_5fcamera_2eproto::scc_info_GUICamera.base);
  return *internal_default_instance();
}


void GUICamera::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.GUICamera)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_controller_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  projection_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && track_ != NULL) {
    delete track_;
  }
  track_ = NULL;
  _internal_metadata_.Clear();
}

bool GUICamera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.GUICamera)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.GUICamera.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string view_controller = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_view_controller()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->view_controller().data(), static_cast<int>(this->view_controller().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.GUICamera.view_controller"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Pose pose = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.TrackVisual track = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_track()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string projection_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_projection_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->projection_type().data(), static_cast<int>(this->projection_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.GUICamera.projection_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.GUICamera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.GUICamera)
  return false;
#undef DO_
}

void GUICamera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.GUICamera)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.GUICamera.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string view_controller = 3;
  if (this->view_controller().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->view_controller().data(), static_cast<int>(this->view_controller().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.GUICamera.view_controller");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->view_controller(), output);
  }

  // .gz.msgs.Pose pose = 4;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_pose(), output);
  }

  // .gz.msgs.TrackVisual track = 5;
  if (this->has_track()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_track(), output);
  }

  // string projection_type = 6;
  if (this->projection_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->projection_type().data(), static_cast<int>(this->projection_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.GUICamera.projection_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->projection_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.GUICamera)
}

::google::protobuf::uint8* GUICamera::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.GUICamera)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.GUICamera.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string view_controller = 3;
  if (this->view_controller().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->view_controller().data(), static_cast<int>(this->view_controller().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.GUICamera.view_controller");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->view_controller(), target);
  }

  // .gz.msgs.Pose pose = 4;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_pose(), deterministic, target);
  }

  // .gz.msgs.TrackVisual track = 5;
  if (this->has_track()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_track(), deterministic, target);
  }

  // string projection_type = 6;
  if (this->projection_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->projection_type().data(), static_cast<int>(this->projection_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.GUICamera.projection_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->projection_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.GUICamera)
  return target;
}

size_t GUICamera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.GUICamera)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string view_controller = 3;
  if (this->view_controller().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->view_controller());
  }

  // string projection_type = 6;
  if (this->projection_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->projection_type());
  }

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.Pose pose = 4;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .gz.msgs.TrackVisual track = 5;
  if (this->has_track()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *track_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GUICamera::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.GUICamera)
  GOOGLE_DCHECK_NE(&from, this);
  const GUICamera* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GUICamera>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.GUICamera)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.GUICamera)
    MergeFrom(*source);
  }
}

void GUICamera::MergeFrom(const GUICamera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.GUICamera)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.view_controller().size() > 0) {

    view_controller_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.view_controller_);
  }
  if (from.projection_type().size() > 0) {

    projection_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.projection_type_);
  }
  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_pose()) {
    mutable_pose()->::gz::msgs::Pose::MergeFrom(from.pose());
  }
  if (from.has_track()) {
    mutable_track()->::gz::msgs::TrackVisual::MergeFrom(from.track());
  }
}

void GUICamera::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.GUICamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GUICamera::CopyFrom(const GUICamera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.GUICamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GUICamera::IsInitialized() const {
  return true;
}

void GUICamera::Swap(GUICamera* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GUICamera::InternalSwap(GUICamera* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  view_controller_.Swap(&other->view_controller_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  projection_type_.Swap(&other->projection_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(pose_, other->pose_);
  swap(track_, other->track_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GUICamera::GetMetadata() const {
  protobuf_gz_2fmsgs_2fgui_5fcamera_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fgui_5fcamera_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::GUICamera* Arena::CreateMaybeMessage< ::gz::msgs::GUICamera >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::GUICamera >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
