// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/axis.proto

#include "gz/msgs/axis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.Axis", Axis)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace protobuf_gz_2fmsgs_2fvector3d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fvector3d_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Vector3d;
}  // namespace protobuf_gz_2fmsgs_2fvector3d_2eproto
namespace gz {
namespace msgs {
class AxisDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Axis>
      _instance;
} _Axis_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2faxis_2eproto {
static void InitDefaultsAxis() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Axis_default_instance_;
    new (ptr) ::gz::msgs::Axis();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Axis::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<2> scc_info_Axis =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAxis}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,
      &protobuf_gz_2fmsgs_2fvector3d_2eproto::scc_info_Vector3d.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Axis.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Axis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Axis, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Axis, xyz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Axis, limit_lower_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Axis, limit_upper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Axis, limit_effort_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Axis, limit_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Axis, damping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Axis, friction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Axis, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Axis, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Axis, force_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Axis, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Axis, xyz_expressed_in_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::Axis)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Axis_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/axis.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022gz/msgs/axis.proto\022\007gz.msgs\032\026gz/msgs/v"
      "ector3d.proto\032\024gz/msgs/header.proto\"\245\002\n\004"
      "Axis\022\037\n\006header\030\001 \001(\0132\017.gz.msgs.Header\022\036\n"
      "\003xyz\030\002 \001(\0132\021.gz.msgs.Vector3d\022\023\n\013limit_l"
      "ower\030\003 \001(\001\022\023\n\013limit_upper\030\004 \001(\001\022\024\n\014limit"
      "_effort\030\005 \001(\001\022\026\n\016limit_velocity\030\006 \001(\001\022\017\n"
      "\007damping\030\007 \001(\001\022\020\n\010friction\030\010 \001(\001\022\020\n\010posi"
      "tion\030\n \001(\001\022\020\n\010velocity\030\013 \001(\001\022\r\n\005force\030\014 "
      "\001(\001\022\024\n\014acceleration\030\r \001(\001\022\030\n\020xyz_express"
      "ed_in\030\016 \001(\tB\031\n\013com.gz.msgsB\nAxisProtosb\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 406);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/axis.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fvector3d_2eproto::AddDescriptors();
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2faxis_2eproto
namespace gz {
namespace msgs {

// ===================================================================

void Axis::InitAsDefaultInstance() {
  ::gz::msgs::_Axis_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
  ::gz::msgs::_Axis_default_instance_._instance.get_mutable()->xyz_ = const_cast< ::gz::msgs::Vector3d*>(
      ::gz::msgs::Vector3d::internal_default_instance());
}
void Axis::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void Axis::clear_xyz() {
  if (GetArenaNoVirtual() == NULL && xyz_ != NULL) {
    delete xyz_;
  }
  xyz_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Axis::kHeaderFieldNumber;
const int Axis::kXyzFieldNumber;
const int Axis::kLimitLowerFieldNumber;
const int Axis::kLimitUpperFieldNumber;
const int Axis::kLimitEffortFieldNumber;
const int Axis::kLimitVelocityFieldNumber;
const int Axis::kDampingFieldNumber;
const int Axis::kFrictionFieldNumber;
const int Axis::kPositionFieldNumber;
const int Axis::kVelocityFieldNumber;
const int Axis::kForceFieldNumber;
const int Axis::kAccelerationFieldNumber;
const int Axis::kXyzExpressedInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Axis::Axis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2faxis_2eproto::scc_info_Axis.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Axis)
}
Axis::Axis(const Axis& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  xyz_expressed_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.xyz_expressed_in().size() > 0) {
    xyz_expressed_in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xyz_expressed_in_);
  }
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_xyz()) {
    xyz_ = new ::gz::msgs::Vector3d(*from.xyz_);
  } else {
    xyz_ = NULL;
  }
  ::memcpy(&limit_lower_, &from.limit_lower_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceleration_) -
    reinterpret_cast<char*>(&limit_lower_)) + sizeof(acceleration_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Axis)
}

void Axis::SharedCtor() {
  xyz_expressed_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceleration_) -
      reinterpret_cast<char*>(&header_)) + sizeof(acceleration_));
}

Axis::~Axis() {
  // @@protoc_insertion_point(destructor:gz.msgs.Axis)
  SharedDtor();
}

void Axis::SharedDtor() {
  xyz_expressed_in_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete xyz_;
}

void Axis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Axis::descriptor() {
  ::protobuf_gz_2fmsgs_2faxis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2faxis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Axis& Axis::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2faxis_2eproto::scc_info_Axis.base);
  return *internal_default_instance();
}


void Axis::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Axis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xyz_expressed_in_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && xyz_ != NULL) {
    delete xyz_;
  }
  xyz_ = NULL;
  ::memset(&limit_lower_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceleration_) -
      reinterpret_cast<char*>(&limit_lower_)) + sizeof(acceleration_));
  _internal_metadata_.Clear();
}

bool Axis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Axis)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gz.msgs.Vector3d xyz = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xyz()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double limit_lower = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_lower_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double limit_upper = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_upper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double limit_effort = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_effort_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double limit_velocity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double damping = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &damping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double friction = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &friction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double position = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double velocity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double force = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acceleration = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string xyz_expressed_in = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xyz_expressed_in()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->xyz_expressed_in().data(), static_cast<int>(this->xyz_expressed_in().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gz.msgs.Axis.xyz_expressed_in"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Axis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Axis)
  return false;
#undef DO_
}

void Axis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Axis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .gz.msgs.Vector3d xyz = 2;
  if (this->has_xyz()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_xyz(), output);
  }

  // double limit_lower = 3;
  if (this->limit_lower() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->limit_lower(), output);
  }

  // double limit_upper = 4;
  if (this->limit_upper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->limit_upper(), output);
  }

  // double limit_effort = 5;
  if (this->limit_effort() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->limit_effort(), output);
  }

  // double limit_velocity = 6;
  if (this->limit_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->limit_velocity(), output);
  }

  // double damping = 7;
  if (this->damping() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->damping(), output);
  }

  // double friction = 8;
  if (this->friction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->friction(), output);
  }

  // double position = 10;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->position(), output);
  }

  // double velocity = 11;
  if (this->velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->velocity(), output);
  }

  // double force = 12;
  if (this->force() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->force(), output);
  }

  // double acceleration = 13;
  if (this->acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->acceleration(), output);
  }

  // string xyz_expressed_in = 14;
  if (this->xyz_expressed_in().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xyz_expressed_in().data(), static_cast<int>(this->xyz_expressed_in().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Axis.xyz_expressed_in");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->xyz_expressed_in(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Axis)
}

::google::protobuf::uint8* Axis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Axis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .gz.msgs.Vector3d xyz = 2;
  if (this->has_xyz()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_xyz(), deterministic, target);
  }

  // double limit_lower = 3;
  if (this->limit_lower() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->limit_lower(), target);
  }

  // double limit_upper = 4;
  if (this->limit_upper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->limit_upper(), target);
  }

  // double limit_effort = 5;
  if (this->limit_effort() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->limit_effort(), target);
  }

  // double limit_velocity = 6;
  if (this->limit_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->limit_velocity(), target);
  }

  // double damping = 7;
  if (this->damping() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->damping(), target);
  }

  // double friction = 8;
  if (this->friction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->friction(), target);
  }

  // double position = 10;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->position(), target);
  }

  // double velocity = 11;
  if (this->velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->velocity(), target);
  }

  // double force = 12;
  if (this->force() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->force(), target);
  }

  // double acceleration = 13;
  if (this->acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->acceleration(), target);
  }

  // string xyz_expressed_in = 14;
  if (this->xyz_expressed_in().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xyz_expressed_in().data(), static_cast<int>(this->xyz_expressed_in().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gz.msgs.Axis.xyz_expressed_in");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->xyz_expressed_in(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Axis)
  return target;
}

size_t Axis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Axis)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string xyz_expressed_in = 14;
  if (this->xyz_expressed_in().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->xyz_expressed_in());
  }

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gz.msgs.Vector3d xyz = 2;
  if (this->has_xyz()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xyz_);
  }

  // double limit_lower = 3;
  if (this->limit_lower() != 0) {
    total_size += 1 + 8;
  }

  // double limit_upper = 4;
  if (this->limit_upper() != 0) {
    total_size += 1 + 8;
  }

  // double limit_effort = 5;
  if (this->limit_effort() != 0) {
    total_size += 1 + 8;
  }

  // double limit_velocity = 6;
  if (this->limit_velocity() != 0) {
    total_size += 1 + 8;
  }

  // double damping = 7;
  if (this->damping() != 0) {
    total_size += 1 + 8;
  }

  // double friction = 8;
  if (this->friction() != 0) {
    total_size += 1 + 8;
  }

  // double position = 10;
  if (this->position() != 0) {
    total_size += 1 + 8;
  }

  // double velocity = 11;
  if (this->velocity() != 0) {
    total_size += 1 + 8;
  }

  // double force = 12;
  if (this->force() != 0) {
    total_size += 1 + 8;
  }

  // double acceleration = 13;
  if (this->acceleration() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Axis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Axis)
  GOOGLE_DCHECK_NE(&from, this);
  const Axis* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Axis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Axis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Axis)
    MergeFrom(*source);
  }
}

void Axis::MergeFrom(const Axis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Axis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.xyz_expressed_in().size() > 0) {

    xyz_expressed_in_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xyz_expressed_in_);
  }
  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.has_xyz()) {
    mutable_xyz()->::gz::msgs::Vector3d::MergeFrom(from.xyz());
  }
  if (from.limit_lower() != 0) {
    set_limit_lower(from.limit_lower());
  }
  if (from.limit_upper() != 0) {
    set_limit_upper(from.limit_upper());
  }
  if (from.limit_effort() != 0) {
    set_limit_effort(from.limit_effort());
  }
  if (from.limit_velocity() != 0) {
    set_limit_velocity(from.limit_velocity());
  }
  if (from.damping() != 0) {
    set_damping(from.damping());
  }
  if (from.friction() != 0) {
    set_friction(from.friction());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.velocity() != 0) {
    set_velocity(from.velocity());
  }
  if (from.force() != 0) {
    set_force(from.force());
  }
  if (from.acceleration() != 0) {
    set_acceleration(from.acceleration());
  }
}

void Axis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Axis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Axis::CopyFrom(const Axis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Axis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Axis::IsInitialized() const {
  return true;
}

void Axis::Swap(Axis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Axis::InternalSwap(Axis* other) {
  using std::swap;
  xyz_expressed_in_.Swap(&other->xyz_expressed_in_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(xyz_, other->xyz_);
  swap(limit_lower_, other->limit_lower_);
  swap(limit_upper_, other->limit_upper_);
  swap(limit_effort_, other->limit_effort_);
  swap(limit_velocity_, other->limit_velocity_);
  swap(damping_, other->damping_);
  swap(friction_, other->friction_);
  swap(position_, other->position_);
  swap(velocity_, other->velocity_);
  swap(force_, other->force_);
  swap(acceleration_, other->acceleration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Axis::GetMetadata() const {
  protobuf_gz_2fmsgs_2faxis_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2faxis_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Axis* Arena::CreateMaybeMessage< ::gz::msgs::Axis >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Axis >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
