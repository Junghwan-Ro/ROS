// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gz/msgs/cessna.proto

#include "gz/msgs/cessna.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
#include "gz/msgs/Factory.hh"
GZ_REGISTER_STATIC_MSG("gz_msgs.Cessna", Cessna)
// @@protoc_insertion_point(includes)

namespace protobuf_gz_2fmsgs_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gz_2fmsgs_2fheader_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Header;
}  // namespace protobuf_gz_2fmsgs_2fheader_2eproto
namespace gz {
namespace msgs {
class CessnaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Cessna>
      _instance;
} _Cessna_default_instance_;
}  // namespace msgs
}  // namespace gz
namespace protobuf_gz_2fmsgs_2fcessna_2eproto {
static void InitDefaultsCessna() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz::msgs::_Cessna_default_instance_;
    new (ptr) ::gz::msgs::Cessna();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz::msgs::Cessna::InitAsDefaultInstance();
}

IGNITION_MSGS_VISIBLE ::google::protobuf::internal::SCCInfo<1> scc_info_Cessna =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCessna}, {
      &protobuf_gz_2fmsgs_2fheader_2eproto::scc_info_Header.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Cessna.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Cessna, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Cessna, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Cessna, propeller_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Cessna, left_aileron_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Cessna, left_flap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Cessna, right_aileron_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Cessna, right_flap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Cessna, elevators_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Cessna, rudder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Cessna, cmd_propeller_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Cessna, cmd_left_aileron_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Cessna, cmd_left_flap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Cessna, cmd_right_aileron_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Cessna, cmd_right_flap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Cessna, cmd_elevators_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz::msgs::Cessna, cmd_rudder_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gz::msgs::Cessna)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz::msgs::_Cessna_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gz/msgs/cessna.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024gz/msgs/cessna.proto\022\007gz.msgs\032\024gz/msgs"
      "/header.proto\"\345\002\n\006Cessna\022\037\n\006header\030\001 \001(\013"
      "2\017.gz.msgs.Header\022\027\n\017propeller_speed\030\002 \001"
      "(\002\022\024\n\014left_aileron\030\003 \001(\002\022\021\n\tleft_flap\030\004 "
      "\001(\002\022\025\n\rright_aileron\030\005 \001(\002\022\022\n\nright_flap"
      "\030\006 \001(\002\022\021\n\televators\030\007 \001(\002\022\016\n\006rudder\030\010 \001("
      "\002\022\033\n\023cmd_propeller_speed\030\t \001(\002\022\030\n\020cmd_le"
      "ft_aileron\030\n \001(\002\022\025\n\rcmd_left_flap\030\013 \001(\002\022"
      "\031\n\021cmd_right_aileron\030\014 \001(\002\022\026\n\016cmd_right_"
      "flap\030\r \001(\002\022\025\n\rcmd_elevators\030\016 \001(\002\022\022\n\ncmd"
      "_rudder\030\017 \001(\002B\033\n\013com.gz.msgsB\014CessnaProt"
      "osb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 450);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gz/msgs/cessna.proto", &protobuf_RegisterTypes);
  ::protobuf_gz_2fmsgs_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gz_2fmsgs_2fcessna_2eproto
namespace gz {
namespace msgs {

// ===================================================================

void Cessna::InitAsDefaultInstance() {
  ::gz::msgs::_Cessna_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz::msgs::Header*>(
      ::gz::msgs::Header::internal_default_instance());
}
void Cessna::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cessna::kHeaderFieldNumber;
const int Cessna::kPropellerSpeedFieldNumber;
const int Cessna::kLeftAileronFieldNumber;
const int Cessna::kLeftFlapFieldNumber;
const int Cessna::kRightAileronFieldNumber;
const int Cessna::kRightFlapFieldNumber;
const int Cessna::kElevatorsFieldNumber;
const int Cessna::kRudderFieldNumber;
const int Cessna::kCmdPropellerSpeedFieldNumber;
const int Cessna::kCmdLeftAileronFieldNumber;
const int Cessna::kCmdLeftFlapFieldNumber;
const int Cessna::kCmdRightAileronFieldNumber;
const int Cessna::kCmdRightFlapFieldNumber;
const int Cessna::kCmdElevatorsFieldNumber;
const int Cessna::kCmdRudderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cessna::Cessna()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gz_2fmsgs_2fcessna_2eproto::scc_info_Cessna.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz.msgs.Cessna)
}
Cessna::Cessna(const Cessna& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::gz::msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&propeller_speed_, &from.propeller_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_rudder_) -
    reinterpret_cast<char*>(&propeller_speed_)) + sizeof(cmd_rudder_));
  // @@protoc_insertion_point(copy_constructor:gz.msgs.Cessna)
}

void Cessna::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_rudder_) -
      reinterpret_cast<char*>(&header_)) + sizeof(cmd_rudder_));
}

Cessna::~Cessna() {
  // @@protoc_insertion_point(destructor:gz.msgs.Cessna)
  SharedDtor();
}

void Cessna::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void Cessna::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Cessna::descriptor() {
  ::protobuf_gz_2fmsgs_2fcessna_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fcessna_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cessna& Cessna::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gz_2fmsgs_2fcessna_2eproto::scc_info_Cessna.base);
  return *internal_default_instance();
}


void Cessna::Clear() {
// @@protoc_insertion_point(message_clear_start:gz.msgs.Cessna)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&propeller_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_rudder_) -
      reinterpret_cast<char*>(&propeller_speed_)) + sizeof(cmd_rudder_));
  _internal_metadata_.Clear();
}

bool Cessna::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz.msgs.Cessna)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gz.msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float propeller_speed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &propeller_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float left_aileron = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_aileron_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float left_flap = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_flap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float right_aileron = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_aileron_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float right_flap = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_flap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float elevators = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elevators_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rudder = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rudder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cmd_propeller_speed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_propeller_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cmd_left_aileron = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_left_aileron_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cmd_left_flap = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_left_flap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cmd_right_aileron = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_right_aileron_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cmd_right_flap = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_right_flap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cmd_elevators = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_elevators_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cmd_rudder = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_rudder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz.msgs.Cessna)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz.msgs.Cessna)
  return false;
#undef DO_
}

void Cessna::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz.msgs.Cessna)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // float propeller_speed = 2;
  if (this->propeller_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->propeller_speed(), output);
  }

  // float left_aileron = 3;
  if (this->left_aileron() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->left_aileron(), output);
  }

  // float left_flap = 4;
  if (this->left_flap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->left_flap(), output);
  }

  // float right_aileron = 5;
  if (this->right_aileron() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->right_aileron(), output);
  }

  // float right_flap = 6;
  if (this->right_flap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->right_flap(), output);
  }

  // float elevators = 7;
  if (this->elevators() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->elevators(), output);
  }

  // float rudder = 8;
  if (this->rudder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->rudder(), output);
  }

  // float cmd_propeller_speed = 9;
  if (this->cmd_propeller_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->cmd_propeller_speed(), output);
  }

  // float cmd_left_aileron = 10;
  if (this->cmd_left_aileron() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->cmd_left_aileron(), output);
  }

  // float cmd_left_flap = 11;
  if (this->cmd_left_flap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->cmd_left_flap(), output);
  }

  // float cmd_right_aileron = 12;
  if (this->cmd_right_aileron() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->cmd_right_aileron(), output);
  }

  // float cmd_right_flap = 13;
  if (this->cmd_right_flap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->cmd_right_flap(), output);
  }

  // float cmd_elevators = 14;
  if (this->cmd_elevators() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->cmd_elevators(), output);
  }

  // float cmd_rudder = 15;
  if (this->cmd_rudder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->cmd_rudder(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gz.msgs.Cessna)
}

::google::protobuf::uint8* Cessna::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz.msgs.Cessna)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // float propeller_speed = 2;
  if (this->propeller_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->propeller_speed(), target);
  }

  // float left_aileron = 3;
  if (this->left_aileron() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->left_aileron(), target);
  }

  // float left_flap = 4;
  if (this->left_flap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->left_flap(), target);
  }

  // float right_aileron = 5;
  if (this->right_aileron() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->right_aileron(), target);
  }

  // float right_flap = 6;
  if (this->right_flap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->right_flap(), target);
  }

  // float elevators = 7;
  if (this->elevators() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->elevators(), target);
  }

  // float rudder = 8;
  if (this->rudder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->rudder(), target);
  }

  // float cmd_propeller_speed = 9;
  if (this->cmd_propeller_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->cmd_propeller_speed(), target);
  }

  // float cmd_left_aileron = 10;
  if (this->cmd_left_aileron() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->cmd_left_aileron(), target);
  }

  // float cmd_left_flap = 11;
  if (this->cmd_left_flap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->cmd_left_flap(), target);
  }

  // float cmd_right_aileron = 12;
  if (this->cmd_right_aileron() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->cmd_right_aileron(), target);
  }

  // float cmd_right_flap = 13;
  if (this->cmd_right_flap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->cmd_right_flap(), target);
  }

  // float cmd_elevators = 14;
  if (this->cmd_elevators() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->cmd_elevators(), target);
  }

  // float cmd_rudder = 15;
  if (this->cmd_rudder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->cmd_rudder(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz.msgs.Cessna)
  return target;
}

size_t Cessna::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz.msgs.Cessna)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gz.msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // float propeller_speed = 2;
  if (this->propeller_speed() != 0) {
    total_size += 1 + 4;
  }

  // float left_aileron = 3;
  if (this->left_aileron() != 0) {
    total_size += 1 + 4;
  }

  // float left_flap = 4;
  if (this->left_flap() != 0) {
    total_size += 1 + 4;
  }

  // float right_aileron = 5;
  if (this->right_aileron() != 0) {
    total_size += 1 + 4;
  }

  // float right_flap = 6;
  if (this->right_flap() != 0) {
    total_size += 1 + 4;
  }

  // float elevators = 7;
  if (this->elevators() != 0) {
    total_size += 1 + 4;
  }

  // float rudder = 8;
  if (this->rudder() != 0) {
    total_size += 1 + 4;
  }

  // float cmd_propeller_speed = 9;
  if (this->cmd_propeller_speed() != 0) {
    total_size += 1 + 4;
  }

  // float cmd_left_aileron = 10;
  if (this->cmd_left_aileron() != 0) {
    total_size += 1 + 4;
  }

  // float cmd_left_flap = 11;
  if (this->cmd_left_flap() != 0) {
    total_size += 1 + 4;
  }

  // float cmd_right_aileron = 12;
  if (this->cmd_right_aileron() != 0) {
    total_size += 1 + 4;
  }

  // float cmd_right_flap = 13;
  if (this->cmd_right_flap() != 0) {
    total_size += 1 + 4;
  }

  // float cmd_elevators = 14;
  if (this->cmd_elevators() != 0) {
    total_size += 1 + 4;
  }

  // float cmd_rudder = 15;
  if (this->cmd_rudder() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cessna::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz.msgs.Cessna)
  GOOGLE_DCHECK_NE(&from, this);
  const Cessna* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cessna>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz.msgs.Cessna)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz.msgs.Cessna)
    MergeFrom(*source);
  }
}

void Cessna::MergeFrom(const Cessna& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz.msgs.Cessna)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::gz::msgs::Header::MergeFrom(from.header());
  }
  if (from.propeller_speed() != 0) {
    set_propeller_speed(from.propeller_speed());
  }
  if (from.left_aileron() != 0) {
    set_left_aileron(from.left_aileron());
  }
  if (from.left_flap() != 0) {
    set_left_flap(from.left_flap());
  }
  if (from.right_aileron() != 0) {
    set_right_aileron(from.right_aileron());
  }
  if (from.right_flap() != 0) {
    set_right_flap(from.right_flap());
  }
  if (from.elevators() != 0) {
    set_elevators(from.elevators());
  }
  if (from.rudder() != 0) {
    set_rudder(from.rudder());
  }
  if (from.cmd_propeller_speed() != 0) {
    set_cmd_propeller_speed(from.cmd_propeller_speed());
  }
  if (from.cmd_left_aileron() != 0) {
    set_cmd_left_aileron(from.cmd_left_aileron());
  }
  if (from.cmd_left_flap() != 0) {
    set_cmd_left_flap(from.cmd_left_flap());
  }
  if (from.cmd_right_aileron() != 0) {
    set_cmd_right_aileron(from.cmd_right_aileron());
  }
  if (from.cmd_right_flap() != 0) {
    set_cmd_right_flap(from.cmd_right_flap());
  }
  if (from.cmd_elevators() != 0) {
    set_cmd_elevators(from.cmd_elevators());
  }
  if (from.cmd_rudder() != 0) {
    set_cmd_rudder(from.cmd_rudder());
  }
}

void Cessna::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz.msgs.Cessna)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cessna::CopyFrom(const Cessna& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz.msgs.Cessna)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cessna::IsInitialized() const {
  return true;
}

void Cessna::Swap(Cessna* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cessna::InternalSwap(Cessna* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(propeller_speed_, other->propeller_speed_);
  swap(left_aileron_, other->left_aileron_);
  swap(left_flap_, other->left_flap_);
  swap(right_aileron_, other->right_aileron_);
  swap(right_flap_, other->right_flap_);
  swap(elevators_, other->elevators_);
  swap(rudder_, other->rudder_);
  swap(cmd_propeller_speed_, other->cmd_propeller_speed_);
  swap(cmd_left_aileron_, other->cmd_left_aileron_);
  swap(cmd_left_flap_, other->cmd_left_flap_);
  swap(cmd_right_aileron_, other->cmd_right_aileron_);
  swap(cmd_right_flap_, other->cmd_right_flap_);
  swap(cmd_elevators_, other->cmd_elevators_);
  swap(cmd_rudder_, other->cmd_rudder_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Cessna::GetMetadata() const {
  protobuf_gz_2fmsgs_2fcessna_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gz_2fmsgs_2fcessna_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gz
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz::msgs::Cessna* Arena::CreateMaybeMessage< ::gz::msgs::Cessna >(Arena* arena) {
  return Arena::CreateInternal< ::gz::msgs::Cessna >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
